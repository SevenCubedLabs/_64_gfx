/* automatically generated by rust-bindgen 0.59.1 */

pub const _SYS_TIME_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 33;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const FD_SETSIZE: u32 = 1024;
pub const __LINUX__: u32 = 1;
pub const SIZEOF_VOIDP: u32 = 8;
pub const HAVE_GCC_ATOMICS: u32 = 1;
pub const HAVE_LIBC: u32 = 1;
pub const STDC_HEADERS: u32 = 1;
pub const HAVE_ALLOCA_H: u32 = 1;
pub const HAVE_CTYPE_H: u32 = 1;
pub const HAVE_ICONV_H: u32 = 1;
pub const HAVE_INTTYPES_H: u32 = 1;
pub const HAVE_LIMITS_H: u32 = 1;
pub const HAVE_MALLOC_H: u32 = 1;
pub const HAVE_MATH_H: u32 = 1;
pub const HAVE_MEMORY_H: u32 = 1;
pub const HAVE_SIGNAL_H: u32 = 1;
pub const HAVE_STDARG_H: u32 = 1;
pub const HAVE_STDINT_H: u32 = 1;
pub const HAVE_STDIO_H: u32 = 1;
pub const HAVE_STDLIB_H: u32 = 1;
pub const HAVE_STRINGS_H: u32 = 1;
pub const HAVE_STRING_H: u32 = 1;
pub const HAVE_SYS_TYPES_H: u32 = 1;
pub const HAVE_WCHAR_H: u32 = 1;
pub const HAVE_LIBUNWIND_H: u32 = 1;
pub const HAVE_MALLOC: u32 = 1;
pub const HAVE_CALLOC: u32 = 1;
pub const HAVE_REALLOC: u32 = 1;
pub const HAVE_FREE: u32 = 1;
pub const HAVE_ALLOCA: u32 = 1;
pub const HAVE_GETENV: u32 = 1;
pub const HAVE_SETENV: u32 = 1;
pub const HAVE_PUTENV: u32 = 1;
pub const HAVE_UNSETENV: u32 = 1;
pub const HAVE_QSORT: u32 = 1;
pub const HAVE_ABS: u32 = 1;
pub const HAVE_BCOPY: u32 = 1;
pub const HAVE_MEMSET: u32 = 1;
pub const HAVE_MEMCPY: u32 = 1;
pub const HAVE_MEMMOVE: u32 = 1;
pub const HAVE_MEMCMP: u32 = 1;
pub const HAVE_WCSLEN: u32 = 1;
pub const HAVE_WCSDUP: u32 = 1;
pub const HAVE_WCSSTR: u32 = 1;
pub const HAVE_WCSCMP: u32 = 1;
pub const HAVE_WCSNCMP: u32 = 1;
pub const HAVE_WCSCASECMP: u32 = 1;
pub const HAVE_WCSNCASECMP: u32 = 1;
pub const HAVE_STRLEN: u32 = 1;
pub const HAVE_INDEX: u32 = 1;
pub const HAVE_RINDEX: u32 = 1;
pub const HAVE_STRCHR: u32 = 1;
pub const HAVE_STRRCHR: u32 = 1;
pub const HAVE_STRSTR: u32 = 1;
pub const HAVE_STRTOK_R: u32 = 1;
pub const HAVE_STRTOL: u32 = 1;
pub const HAVE_STRTOUL: u32 = 1;
pub const HAVE_STRTOLL: u32 = 1;
pub const HAVE_STRTOULL: u32 = 1;
pub const HAVE_STRTOD: u32 = 1;
pub const HAVE_ATOI: u32 = 1;
pub const HAVE_ATOF: u32 = 1;
pub const HAVE_STRCMP: u32 = 1;
pub const HAVE_STRNCMP: u32 = 1;
pub const HAVE_STRCASECMP: u32 = 1;
pub const HAVE_STRNCASECMP: u32 = 1;
pub const HAVE_SSCANF: u32 = 1;
pub const HAVE_VSSCANF: u32 = 1;
pub const HAVE_VSNPRINTF: u32 = 1;
pub const HAVE_M_PI: u32 = 1;
pub const HAVE_ACOS: u32 = 1;
pub const HAVE_ACOSF: u32 = 1;
pub const HAVE_ASIN: u32 = 1;
pub const HAVE_ASINF: u32 = 1;
pub const HAVE_ATAN: u32 = 1;
pub const HAVE_ATANF: u32 = 1;
pub const HAVE_ATAN2: u32 = 1;
pub const HAVE_ATAN2F: u32 = 1;
pub const HAVE_CEIL: u32 = 1;
pub const HAVE_CEILF: u32 = 1;
pub const HAVE_COPYSIGN: u32 = 1;
pub const HAVE_COPYSIGNF: u32 = 1;
pub const HAVE_COS: u32 = 1;
pub const HAVE_COSF: u32 = 1;
pub const HAVE_EXP: u32 = 1;
pub const HAVE_EXPF: u32 = 1;
pub const HAVE_FABS: u32 = 1;
pub const HAVE_FABSF: u32 = 1;
pub const HAVE_FLOOR: u32 = 1;
pub const HAVE_FLOORF: u32 = 1;
pub const HAVE_FMOD: u32 = 1;
pub const HAVE_FMODF: u32 = 1;
pub const HAVE_LOG: u32 = 1;
pub const HAVE_LOGF: u32 = 1;
pub const HAVE_LOG10: u32 = 1;
pub const HAVE_LOG10F: u32 = 1;
pub const HAVE_LROUND: u32 = 1;
pub const HAVE_LROUNDF: u32 = 1;
pub const HAVE_POW: u32 = 1;
pub const HAVE_POWF: u32 = 1;
pub const HAVE_ROUND: u32 = 1;
pub const HAVE_ROUNDF: u32 = 1;
pub const HAVE_SCALBN: u32 = 1;
pub const HAVE_SCALBNF: u32 = 1;
pub const HAVE_SIN: u32 = 1;
pub const HAVE_SINF: u32 = 1;
pub const HAVE_SQRT: u32 = 1;
pub const HAVE_SQRTF: u32 = 1;
pub const HAVE_TAN: u32 = 1;
pub const HAVE_TANF: u32 = 1;
pub const HAVE_TRUNC: u32 = 1;
pub const HAVE_TRUNCF: u32 = 1;
pub const HAVE_FSEEKO: u32 = 1;
pub const HAVE_SIGACTION: u32 = 1;
pub const HAVE_SA_SIGACTION: u32 = 1;
pub const HAVE_SETJMP: u32 = 1;
pub const HAVE_NANOSLEEP: u32 = 1;
pub const HAVE_SYSCONF: u32 = 1;
pub const HAVE_CLOCK_GETTIME: u32 = 1;
pub const HAVE_MPROTECT: u32 = 1;
pub const HAVE_ICONV: u32 = 1;
pub const HAVE_SEM_TIMEDWAIT: u32 = 1;
pub const HAVE_GETAUXVAL: u32 = 1;
pub const HAVE_POLL: u32 = 1;
pub const HAVE__EXIT: u32 = 1;
pub const HAVE_DBUS_DBUS_H: u32 = 1;
pub const HAVE_FCITX: u32 = 1;
pub const HAVE_IBUS_IBUS_H: u32 = 1;
pub const HAVE_SYS_INOTIFY_H: u32 = 1;
pub const HAVE_INOTIFY_INIT: u32 = 1;
pub const HAVE_INOTIFY_INIT1: u32 = 1;
pub const HAVE_INOTIFY: u32 = 1;
pub const HAVE_IMMINTRIN_H: u32 = 1;
pub const HAVE_LIBUDEV_H: u32 = 1;
pub const HAVE_LIBSAMPLERATE_H: u32 = 1;
pub const SDL_AUDIO_DRIVER_ALSA: u32 = 1;
pub const SDL_AUDIO_DRIVER_ALSA_DYNAMIC: &'static [u8; 15usize] = b"libasound.so.2\0";
pub const SDL_AUDIO_DRIVER_DISK: u32 = 1;
pub const SDL_AUDIO_DRIVER_DUMMY: u32 = 1;
pub const SDL_AUDIO_DRIVER_JACK: u32 = 1;
pub const SDL_AUDIO_DRIVER_JACK_DYNAMIC: &'static [u8; 13usize] = b"libjack.so.0\0";
pub const SDL_AUDIO_DRIVER_OSS: u32 = 1;
pub const SDL_AUDIO_DRIVER_PIPEWIRE: u32 = 1;
pub const SDL_AUDIO_DRIVER_PIPEWIRE_DYNAMIC: &'static [u8; 21usize] = b"libpipewire-0.3.so.0\0";
pub const SDL_AUDIO_DRIVER_PULSEAUDIO: u32 = 1;
pub const SDL_AUDIO_DRIVER_PULSEAUDIO_DYNAMIC: &'static [u8; 21usize] = b"libpulse-simple.so.0\0";
pub const SDL_INPUT_LINUXEV: u32 = 1;
pub const SDL_INPUT_LINUXKD: u32 = 1;
pub const SDL_JOYSTICK_LINUX: u32 = 1;
pub const SDL_JOYSTICK_HIDAPI: u32 = 1;
pub const SDL_JOYSTICK_VIRTUAL: u32 = 1;
pub const SDL_HAPTIC_LINUX: u32 = 1;
pub const SDL_LIBUSB_DYNAMIC: &'static [u8; 1usize] = b"\0";
pub const SDL_SENSOR_DUMMY: u32 = 1;
pub const SDL_LOADSO_DLOPEN: u32 = 1;
pub const SDL_THREAD_PTHREAD: u32 = 1;
pub const SDL_THREAD_PTHREAD_RECURSIVE_MUTEX: u32 = 1;
pub const SDL_TIMER_UNIX: u32 = 1;
pub const SDL_VIDEO_DRIVER_DUMMY: u32 = 1;
pub const SDL_VIDEO_DRIVER_WAYLAND: u32 = 1;
pub const SDL_VIDEO_DRIVER_KMSDRM: u32 = 1;
pub const SDL_VIDEO_DRIVER_KMSDRM_DYNAMIC: &'static [u8; 12usize] = b"libdrm.so.2\0";
pub const SDL_VIDEO_DRIVER_KMSDRM_DYNAMIC_GBM: &'static [u8; 12usize] = b"libgbm.so.1\0";
pub const SDL_VIDEO_DRIVER_WAYLAND_QT_TOUCH: u32 = 1;
pub const SDL_VIDEO_DRIVER_WAYLAND_DYNAMIC: &'static [u8; 23usize] = b"libwayland-client.so.0\0";
pub const SDL_VIDEO_DRIVER_WAYLAND_DYNAMIC_EGL: &'static [u8; 20usize] = b"libwayland-egl.so.1\0";
pub const SDL_VIDEO_DRIVER_WAYLAND_DYNAMIC_CURSOR: &'static [u8; 23usize] =
    b"libwayland-cursor.so.0\0";
pub const SDL_VIDEO_DRIVER_WAYLAND_DYNAMIC_XKBCOMMON: &'static [u8; 18usize] =
    b"libxkbcommon.so.0\0";
pub const SDL_VIDEO_DRIVER_X11: u32 = 1;
pub const SDL_VIDEO_DRIVER_X11_DYNAMIC: &'static [u8; 12usize] = b"libX11.so.6\0";
pub const SDL_VIDEO_DRIVER_X11_DYNAMIC_XEXT: &'static [u8; 13usize] = b"libXext.so.6\0";
pub const SDL_VIDEO_DRIVER_X11_DYNAMIC_XCURSOR: &'static [u8; 16usize] = b"libXcursor.so.1\0";
pub const SDL_VIDEO_DRIVER_X11_DYNAMIC_XINERAMA: &'static [u8; 17usize] = b"libXinerama.so.1\0";
pub const SDL_VIDEO_DRIVER_X11_DYNAMIC_XINPUT2: &'static [u8; 11usize] = b"libXi.so.6\0";
pub const SDL_VIDEO_DRIVER_X11_DYNAMIC_XRANDR: &'static [u8; 15usize] = b"libXrandr.so.2\0";
pub const SDL_VIDEO_DRIVER_X11_DYNAMIC_XSS: &'static [u8; 12usize] = b"libXss.so.1\0";
pub const SDL_VIDEO_DRIVER_X11_DYNAMIC_XVIDMODE: &'static [u8; 16usize] = b"libXxf86vm.so.1\0";
pub const SDL_VIDEO_DRIVER_X11_XCURSOR: u32 = 1;
pub const SDL_VIDEO_DRIVER_X11_XINERAMA: u32 = 1;
pub const SDL_VIDEO_DRIVER_X11_XINPUT2: u32 = 1;
pub const SDL_VIDEO_DRIVER_X11_XINPUT2_SUPPORTS_MULTITOUCH: u32 = 1;
pub const SDL_VIDEO_DRIVER_X11_XRANDR: u32 = 1;
pub const SDL_VIDEO_DRIVER_X11_XSCRNSAVER: u32 = 1;
pub const SDL_VIDEO_DRIVER_X11_XSHAPE: u32 = 1;
pub const SDL_VIDEO_DRIVER_X11_XVIDMODE: u32 = 1;
pub const SDL_VIDEO_DRIVER_X11_SUPPORTS_GENERIC_EVENTS: u32 = 1;
pub const SDL_VIDEO_DRIVER_X11_CONST_PARAM_XEXTADDDISPLAY: u32 = 1;
pub const SDL_VIDEO_DRIVER_X11_HAS_XKBKEYCODETOKEYSYM: u32 = 1;
pub const SDL_VIDEO_RENDER_OGL: u32 = 1;
pub const SDL_VIDEO_RENDER_OGL_ES2: u32 = 1;
pub const SDL_VIDEO_OPENGL: u32 = 1;
pub const SDL_VIDEO_OPENGL_ES2: u32 = 1;
pub const SDL_VIDEO_OPENGL_GLX: u32 = 1;
pub const SDL_VIDEO_OPENGL_EGL: u32 = 1;
pub const SDL_VIDEO_VULKAN: u32 = 1;
pub const SDL_POWER_LINUX: u32 = 1;
pub const SDL_FILESYSTEM_UNIX: u32 = 1;
pub const SDL_ASSEMBLY_ROUTINES: u32 = 1;
pub const SDL_LIBSAMPLERATE_DYNAMIC: &'static [u8; 19usize] = b"libsamplerate.so.0\0";
pub const _SYS_TYPES_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _STDIO_H: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _ALLOCA_H: u32 = 1;
pub const _STRING_H: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const _WCHAR_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const __wint_t_defined: u32 = 1;
pub const _WINT_T: u32 = 1;
pub const __mbstate_t_defined: u32 = 1;
pub const WEOF: u32 = 4294967295;
pub const _INTTYPES_H: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const ____gwchar_t_defined: u32 = 1;
pub const __PRI64_PREFIX: &'static [u8; 2usize] = b"l\0";
pub const __PRIPTR_PREFIX: &'static [u8; 2usize] = b"l\0";
pub const PRId8: &'static [u8; 2usize] = b"d\0";
pub const PRId16: &'static [u8; 2usize] = b"d\0";
pub const PRId32: &'static [u8; 2usize] = b"d\0";
pub const PRId64: &'static [u8; 3usize] = b"ld\0";
pub const PRIdLEAST8: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST16: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST32: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST64: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST8: &'static [u8; 2usize] = b"d\0";
pub const PRIdFAST16: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST32: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST64: &'static [u8; 3usize] = b"ld\0";
pub const PRIi8: &'static [u8; 2usize] = b"i\0";
pub const PRIi16: &'static [u8; 2usize] = b"i\0";
pub const PRIi32: &'static [u8; 2usize] = b"i\0";
pub const PRIi64: &'static [u8; 3usize] = b"li\0";
pub const PRIiLEAST8: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST16: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST32: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST64: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST8: &'static [u8; 2usize] = b"i\0";
pub const PRIiFAST16: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST32: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST64: &'static [u8; 3usize] = b"li\0";
pub const PRIo8: &'static [u8; 2usize] = b"o\0";
pub const PRIo16: &'static [u8; 2usize] = b"o\0";
pub const PRIo32: &'static [u8; 2usize] = b"o\0";
pub const PRIo64: &'static [u8; 3usize] = b"lo\0";
pub const PRIoLEAST8: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST16: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST32: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST64: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST8: &'static [u8; 2usize] = b"o\0";
pub const PRIoFAST16: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST32: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST64: &'static [u8; 3usize] = b"lo\0";
pub const PRIu8: &'static [u8; 2usize] = b"u\0";
pub const PRIu16: &'static [u8; 2usize] = b"u\0";
pub const PRIu32: &'static [u8; 2usize] = b"u\0";
pub const PRIu64: &'static [u8; 3usize] = b"lu\0";
pub const PRIuLEAST8: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST16: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST32: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST64: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST8: &'static [u8; 2usize] = b"u\0";
pub const PRIuFAST16: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST32: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST64: &'static [u8; 3usize] = b"lu\0";
pub const PRIx8: &'static [u8; 2usize] = b"x\0";
pub const PRIx16: &'static [u8; 2usize] = b"x\0";
pub const PRIx32: &'static [u8; 2usize] = b"x\0";
pub const PRIx64: &'static [u8; 3usize] = b"lx\0";
pub const PRIxLEAST8: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST16: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST32: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST64: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST8: &'static [u8; 2usize] = b"x\0";
pub const PRIxFAST16: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST32: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST64: &'static [u8; 3usize] = b"lx\0";
pub const PRIX8: &'static [u8; 2usize] = b"X\0";
pub const PRIX16: &'static [u8; 2usize] = b"X\0";
pub const PRIX32: &'static [u8; 2usize] = b"X\0";
pub const PRIX64: &'static [u8; 3usize] = b"lX\0";
pub const PRIXLEAST8: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST16: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST32: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST64: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST8: &'static [u8; 2usize] = b"X\0";
pub const PRIXFAST16: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST32: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST64: &'static [u8; 3usize] = b"lX\0";
pub const PRIdMAX: &'static [u8; 3usize] = b"ld\0";
pub const PRIiMAX: &'static [u8; 3usize] = b"li\0";
pub const PRIoMAX: &'static [u8; 3usize] = b"lo\0";
pub const PRIuMAX: &'static [u8; 3usize] = b"lu\0";
pub const PRIxMAX: &'static [u8; 3usize] = b"lx\0";
pub const PRIXMAX: &'static [u8; 3usize] = b"lX\0";
pub const PRIdPTR: &'static [u8; 3usize] = b"ld\0";
pub const PRIiPTR: &'static [u8; 3usize] = b"li\0";
pub const PRIoPTR: &'static [u8; 3usize] = b"lo\0";
pub const PRIuPTR: &'static [u8; 3usize] = b"lu\0";
pub const PRIxPTR: &'static [u8; 3usize] = b"lx\0";
pub const PRIXPTR: &'static [u8; 3usize] = b"lX\0";
pub const SCNd8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNd16: &'static [u8; 3usize] = b"hd\0";
pub const SCNd32: &'static [u8; 2usize] = b"d\0";
pub const SCNd64: &'static [u8; 3usize] = b"ld\0";
pub const SCNdLEAST8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNdLEAST16: &'static [u8; 3usize] = b"hd\0";
pub const SCNdLEAST32: &'static [u8; 2usize] = b"d\0";
pub const SCNdLEAST64: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNdFAST16: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST32: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST64: &'static [u8; 3usize] = b"ld\0";
pub const SCNi8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNi16: &'static [u8; 3usize] = b"hi\0";
pub const SCNi32: &'static [u8; 2usize] = b"i\0";
pub const SCNi64: &'static [u8; 3usize] = b"li\0";
pub const SCNiLEAST8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNiLEAST16: &'static [u8; 3usize] = b"hi\0";
pub const SCNiLEAST32: &'static [u8; 2usize] = b"i\0";
pub const SCNiLEAST64: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNiFAST16: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST32: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST64: &'static [u8; 3usize] = b"li\0";
pub const SCNu8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNu16: &'static [u8; 3usize] = b"hu\0";
pub const SCNu32: &'static [u8; 2usize] = b"u\0";
pub const SCNu64: &'static [u8; 3usize] = b"lu\0";
pub const SCNuLEAST8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNuLEAST16: &'static [u8; 3usize] = b"hu\0";
pub const SCNuLEAST32: &'static [u8; 2usize] = b"u\0";
pub const SCNuLEAST64: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNuFAST16: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST32: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST64: &'static [u8; 3usize] = b"lu\0";
pub const SCNo8: &'static [u8; 4usize] = b"hho\0";
pub const SCNo16: &'static [u8; 3usize] = b"ho\0";
pub const SCNo32: &'static [u8; 2usize] = b"o\0";
pub const SCNo64: &'static [u8; 3usize] = b"lo\0";
pub const SCNoLEAST8: &'static [u8; 4usize] = b"hho\0";
pub const SCNoLEAST16: &'static [u8; 3usize] = b"ho\0";
pub const SCNoLEAST32: &'static [u8; 2usize] = b"o\0";
pub const SCNoLEAST64: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST8: &'static [u8; 4usize] = b"hho\0";
pub const SCNoFAST16: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST32: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST64: &'static [u8; 3usize] = b"lo\0";
pub const SCNx8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNx16: &'static [u8; 3usize] = b"hx\0";
pub const SCNx32: &'static [u8; 2usize] = b"x\0";
pub const SCNx64: &'static [u8; 3usize] = b"lx\0";
pub const SCNxLEAST8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNxLEAST16: &'static [u8; 3usize] = b"hx\0";
pub const SCNxLEAST32: &'static [u8; 2usize] = b"x\0";
pub const SCNxLEAST64: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNxFAST16: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST32: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST64: &'static [u8; 3usize] = b"lx\0";
pub const SCNdMAX: &'static [u8; 3usize] = b"ld\0";
pub const SCNiMAX: &'static [u8; 3usize] = b"li\0";
pub const SCNoMAX: &'static [u8; 3usize] = b"lo\0";
pub const SCNuMAX: &'static [u8; 3usize] = b"lu\0";
pub const SCNxMAX: &'static [u8; 3usize] = b"lx\0";
pub const SCNdPTR: &'static [u8; 3usize] = b"ld\0";
pub const SCNiPTR: &'static [u8; 3usize] = b"li\0";
pub const SCNoPTR: &'static [u8; 3usize] = b"lo\0";
pub const SCNuPTR: &'static [u8; 3usize] = b"lu\0";
pub const SCNxPTR: &'static [u8; 3usize] = b"lx\0";
pub const _CTYPE_H: u32 = 1;
pub const _MATH_H: u32 = 1;
pub const _BITS_LIBM_SIMD_DECL_STUBS_H: u32 = 1;
pub const __FP_LOGB0_IS_MIN: u32 = 1;
pub const __FP_LOGBNAN_IS_MIN: u32 = 1;
pub const FP_ILOGB0: i32 = -2147483648;
pub const FP_ILOGBNAN: i32 = -2147483648;
pub const __MATH_DECLARING_DOUBLE: u32 = 1;
pub const __MATH_DECLARING_FLOATN: u32 = 0;
pub const __MATH_DECLARE_LDOUBLE: u32 = 1;
pub const MATH_ERRNO: u32 = 1;
pub const MATH_ERREXCEPT: u32 = 2;
pub const math_errhandling: u32 = 3;
pub const M_E: f64 = 2.718281828459045;
pub const M_LOG2E: f64 = 1.4426950408889634;
pub const M_LOG10E: f64 = 0.4342944819032518;
pub const M_LN2: f64 = 0.6931471805599453;
pub const M_LN10: f64 = 2.302585092994046;
pub const M_PI: f64 = 3.141592653589793;
pub const M_PI_2: f64 = 1.5707963267948966;
pub const M_PI_4: f64 = 0.7853981633974483;
pub const M_1_PI: f64 = 0.3183098861837907;
pub const M_2_PI: f64 = 0.6366197723675814;
pub const M_2_SQRTPI: f64 = 1.1283791670955126;
pub const M_SQRT2: f64 = 1.4142135623730951;
pub const M_SQRT1_2: f64 = 0.7071067811865476;
pub const SDL_PRIs64: &'static [u8; 3usize] = b"ld\0";
pub const SDL_PRIu64: &'static [u8; 3usize] = b"lu\0";
pub const SDL_PRIx64: &'static [u8; 3usize] = b"lx\0";
pub const SDL_PRIX64: &'static [u8; 3usize] = b"lX\0";
pub const SDL_PRIs32: &'static [u8; 2usize] = b"d\0";
pub const SDL_PRIu32: &'static [u8; 2usize] = b"u\0";
pub const SDL_PRIx32: &'static [u8; 2usize] = b"x\0";
pub const SDL_PRIX32: &'static [u8; 2usize] = b"X\0";
pub const SDL_ASSERT_LEVEL: u32 = 2;
pub const SDL_NULL_WHILE_LOOP_CONDITION: u32 = 0;
pub const SDL_LIL_ENDIAN: u32 = 1234;
pub const SDL_BIG_ENDIAN: u32 = 4321;
pub const SDL_BYTEORDER: u32 = 1234;
pub const SDL_MUTEX_TIMEDOUT: u32 = 1;
pub const SDL_RWOPS_UNKNOWN: u32 = 0;
pub const SDL_RWOPS_WINFILE: u32 = 1;
pub const SDL_RWOPS_STDFILE: u32 = 2;
pub const SDL_RWOPS_JNIFILE: u32 = 3;
pub const SDL_RWOPS_MEMORY: u32 = 4;
pub const SDL_RWOPS_MEMORY_RO: u32 = 5;
pub const RW_SEEK_SET: u32 = 0;
pub const RW_SEEK_CUR: u32 = 1;
pub const RW_SEEK_END: u32 = 2;
pub const SDL_AUDIO_MASK_BITSIZE: u32 = 255;
pub const SDL_AUDIO_MASK_DATATYPE: u32 = 256;
pub const SDL_AUDIO_MASK_ENDIAN: u32 = 4096;
pub const SDL_AUDIO_MASK_SIGNED: u32 = 32768;
pub const AUDIO_U8: u32 = 8;
pub const AUDIO_S8: u32 = 32776;
pub const AUDIO_U16LSB: u32 = 16;
pub const AUDIO_S16LSB: u32 = 32784;
pub const AUDIO_U16MSB: u32 = 4112;
pub const AUDIO_S16MSB: u32 = 36880;
pub const AUDIO_U16: u32 = 16;
pub const AUDIO_S16: u32 = 32784;
pub const AUDIO_S32LSB: u32 = 32800;
pub const AUDIO_S32MSB: u32 = 36896;
pub const AUDIO_S32: u32 = 32800;
pub const AUDIO_F32LSB: u32 = 33056;
pub const AUDIO_F32MSB: u32 = 37152;
pub const AUDIO_F32: u32 = 33056;
pub const AUDIO_U16SYS: u32 = 16;
pub const AUDIO_S16SYS: u32 = 32784;
pub const AUDIO_S32SYS: u32 = 32800;
pub const AUDIO_F32SYS: u32 = 33056;
pub const SDL_AUDIO_ALLOW_FREQUENCY_CHANGE: u32 = 1;
pub const SDL_AUDIO_ALLOW_FORMAT_CHANGE: u32 = 2;
pub const SDL_AUDIO_ALLOW_CHANNELS_CHANGE: u32 = 4;
pub const SDL_AUDIO_ALLOW_SAMPLES_CHANGE: u32 = 8;
pub const SDL_AUDIO_ALLOW_ANY_CHANGE: u32 = 15;
pub const SDL_AUDIOCVT_MAX_FILTERS: u32 = 9;
pub const SDL_MIX_MAXVOLUME: u32 = 128;
pub const _MM_HINT_ET0: u32 = 7;
pub const _MM_HINT_ET1: u32 = 6;
pub const _MM_HINT_T0: u32 = 3;
pub const _MM_HINT_T1: u32 = 2;
pub const _MM_HINT_T2: u32 = 1;
pub const _MM_HINT_NTA: u32 = 0;
pub const _MM_EXCEPT_INVALID: u32 = 1;
pub const _MM_EXCEPT_DENORM: u32 = 2;
pub const _MM_EXCEPT_DIV_ZERO: u32 = 4;
pub const _MM_EXCEPT_OVERFLOW: u32 = 8;
pub const _MM_EXCEPT_UNDERFLOW: u32 = 16;
pub const _MM_EXCEPT_INEXACT: u32 = 32;
pub const _MM_EXCEPT_MASK: u32 = 63;
pub const _MM_MASK_INVALID: u32 = 128;
pub const _MM_MASK_DENORM: u32 = 256;
pub const _MM_MASK_DIV_ZERO: u32 = 512;
pub const _MM_MASK_OVERFLOW: u32 = 1024;
pub const _MM_MASK_UNDERFLOW: u32 = 2048;
pub const _MM_MASK_INEXACT: u32 = 4096;
pub const _MM_MASK_MASK: u32 = 8064;
pub const _MM_ROUND_NEAREST: u32 = 0;
pub const _MM_ROUND_DOWN: u32 = 8192;
pub const _MM_ROUND_UP: u32 = 16384;
pub const _MM_ROUND_TOWARD_ZERO: u32 = 24576;
pub const _MM_ROUND_MASK: u32 = 24576;
pub const _MM_FLUSH_ZERO_MASK: u32 = 32768;
pub const _MM_FLUSH_ZERO_ON: u32 = 32768;
pub const _MM_FLUSH_ZERO_OFF: u32 = 0;
pub const _MM_DENORMALS_ZERO_ON: u32 = 64;
pub const _MM_DENORMALS_ZERO_OFF: u32 = 0;
pub const _MM_DENORMALS_ZERO_MASK: u32 = 64;
pub const _MM_FROUND_TO_NEAREST_INT: u32 = 0;
pub const _MM_FROUND_TO_NEG_INF: u32 = 1;
pub const _MM_FROUND_TO_POS_INF: u32 = 2;
pub const _MM_FROUND_TO_ZERO: u32 = 3;
pub const _MM_FROUND_CUR_DIRECTION: u32 = 4;
pub const _MM_FROUND_RAISE_EXC: u32 = 0;
pub const _MM_FROUND_NO_EXC: u32 = 8;
pub const _MM_FROUND_NINT: u32 = 0;
pub const _MM_FROUND_FLOOR: u32 = 1;
pub const _MM_FROUND_CEIL: u32 = 2;
pub const _MM_FROUND_TRUNC: u32 = 3;
pub const _MM_FROUND_RINT: u32 = 4;
pub const _MM_FROUND_NEARBYINT: u32 = 12;
pub const _SIDD_UBYTE_OPS: u32 = 0;
pub const _SIDD_UWORD_OPS: u32 = 1;
pub const _SIDD_SBYTE_OPS: u32 = 2;
pub const _SIDD_SWORD_OPS: u32 = 3;
pub const _SIDD_CMP_EQUAL_ANY: u32 = 0;
pub const _SIDD_CMP_RANGES: u32 = 4;
pub const _SIDD_CMP_EQUAL_EACH: u32 = 8;
pub const _SIDD_CMP_EQUAL_ORDERED: u32 = 12;
pub const _SIDD_POSITIVE_POLARITY: u32 = 0;
pub const _SIDD_NEGATIVE_POLARITY: u32 = 16;
pub const _SIDD_MASKED_POSITIVE_POLARITY: u32 = 32;
pub const _SIDD_MASKED_NEGATIVE_POLARITY: u32 = 48;
pub const _SIDD_LEAST_SIGNIFICANT: u32 = 0;
pub const _SIDD_MOST_SIGNIFICANT: u32 = 64;
pub const _SIDD_BIT_MASK: u32 = 0;
pub const _SIDD_UNIT_MASK: u32 = 64;
pub const _CMP_EQ_OQ: u32 = 0;
pub const _CMP_LT_OS: u32 = 1;
pub const _CMP_LE_OS: u32 = 2;
pub const _CMP_UNORD_Q: u32 = 3;
pub const _CMP_NEQ_UQ: u32 = 4;
pub const _CMP_NLT_US: u32 = 5;
pub const _CMP_NLE_US: u32 = 6;
pub const _CMP_ORD_Q: u32 = 7;
pub const _CMP_EQ_UQ: u32 = 8;
pub const _CMP_NGE_US: u32 = 9;
pub const _CMP_NGT_US: u32 = 10;
pub const _CMP_FALSE_OQ: u32 = 11;
pub const _CMP_NEQ_OQ: u32 = 12;
pub const _CMP_GE_OS: u32 = 13;
pub const _CMP_GT_OS: u32 = 14;
pub const _CMP_TRUE_UQ: u32 = 15;
pub const _CMP_EQ_OS: u32 = 16;
pub const _CMP_LT_OQ: u32 = 17;
pub const _CMP_LE_OQ: u32 = 18;
pub const _CMP_UNORD_S: u32 = 19;
pub const _CMP_NEQ_US: u32 = 20;
pub const _CMP_NLT_UQ: u32 = 21;
pub const _CMP_NLE_UQ: u32 = 22;
pub const _CMP_ORD_S: u32 = 23;
pub const _CMP_EQ_US: u32 = 24;
pub const _CMP_NGE_UQ: u32 = 25;
pub const _CMP_NGT_UQ: u32 = 26;
pub const _CMP_FALSE_OS: u32 = 27;
pub const _CMP_NEQ_OS: u32 = 28;
pub const _CMP_GE_OQ: u32 = 29;
pub const _CMP_GT_OQ: u32 = 30;
pub const _CMP_TRUE_US: u32 = 31;
pub const _XBEGIN_STARTED: i32 = -1;
pub const _XABORT_EXPLICIT: u32 = 1;
pub const _XABORT_RETRY: u32 = 2;
pub const _XABORT_CONFLICT: u32 = 4;
pub const _XABORT_CAPACITY: u32 = 8;
pub const _XABORT_DEBUG: u32 = 16;
pub const _XABORT_NESTED: u32 = 32;
pub const __PCONFIG_KEY_PROGRAM: u32 = 1;
pub const SDL_CACHELINE_SIZE: u32 = 128;
pub const SDL_ALPHA_OPAQUE: u32 = 255;
pub const SDL_ALPHA_TRANSPARENT: u32 = 0;
pub const SDL_SWSURFACE: u32 = 0;
pub const SDL_PREALLOC: u32 = 1;
pub const SDL_RLEACCEL: u32 = 2;
pub const SDL_DONTFREE: u32 = 4;
pub const SDL_SIMD_ALIGNED: u32 = 8;
pub const SDL_WINDOWPOS_UNDEFINED_MASK: u32 = 536805376;
pub const SDL_WINDOWPOS_CENTERED_MASK: u32 = 805240832;
pub const SDLK_SCANCODE_MASK: u32 = 1073741824;
pub const SDL_BUTTON_LEFT: u32 = 1;
pub const SDL_BUTTON_MIDDLE: u32 = 2;
pub const SDL_BUTTON_RIGHT: u32 = 3;
pub const SDL_BUTTON_X1: u32 = 4;
pub const SDL_BUTTON_X2: u32 = 5;
pub const SDL_IPHONE_MAX_GFORCE: f64 = 5.0;
pub const SDL_JOYSTICK_AXIS_MAX: u32 = 32767;
pub const SDL_JOYSTICK_AXIS_MIN: i32 = -32768;
pub const SDL_HAT_CENTERED: u32 = 0;
pub const SDL_HAT_UP: u32 = 1;
pub const SDL_HAT_RIGHT: u32 = 2;
pub const SDL_HAT_DOWN: u32 = 4;
pub const SDL_HAT_LEFT: u32 = 8;
pub const SDL_HAT_RIGHTUP: u32 = 3;
pub const SDL_HAT_RIGHTDOWN: u32 = 6;
pub const SDL_HAT_LEFTUP: u32 = 9;
pub const SDL_HAT_LEFTDOWN: u32 = 12;
pub const SDL_STANDARD_GRAVITY: f64 = 9.80665;
pub const SDL_RELEASED: u32 = 0;
pub const SDL_PRESSED: u32 = 1;
pub const SDL_TEXTEDITINGEVENT_TEXT_SIZE: u32 = 32;
pub const SDL_TEXTINPUTEVENT_TEXT_SIZE: u32 = 32;
pub const SDL_QUERY: i32 = -1;
pub const SDL_IGNORE: u32 = 0;
pub const SDL_DISABLE: u32 = 0;
pub const SDL_ENABLE: u32 = 1;
pub const SDL_HAPTIC_CONSTANT: u32 = 1;
pub const SDL_HAPTIC_SINE: u32 = 2;
pub const SDL_HAPTIC_LEFTRIGHT: u32 = 4;
pub const SDL_HAPTIC_TRIANGLE: u32 = 8;
pub const SDL_HAPTIC_SAWTOOTHUP: u32 = 16;
pub const SDL_HAPTIC_SAWTOOTHDOWN: u32 = 32;
pub const SDL_HAPTIC_RAMP: u32 = 64;
pub const SDL_HAPTIC_SPRING: u32 = 128;
pub const SDL_HAPTIC_DAMPER: u32 = 256;
pub const SDL_HAPTIC_INERTIA: u32 = 512;
pub const SDL_HAPTIC_FRICTION: u32 = 1024;
pub const SDL_HAPTIC_CUSTOM: u32 = 2048;
pub const SDL_HAPTIC_GAIN: u32 = 4096;
pub const SDL_HAPTIC_AUTOCENTER: u32 = 8192;
pub const SDL_HAPTIC_STATUS: u32 = 16384;
pub const SDL_HAPTIC_PAUSE: u32 = 32768;
pub const SDL_HAPTIC_POLAR: u32 = 0;
pub const SDL_HAPTIC_CARTESIAN: u32 = 1;
pub const SDL_HAPTIC_SPHERICAL: u32 = 2;
pub const SDL_HAPTIC_STEERING_AXIS: u32 = 3;
pub const SDL_HAPTIC_INFINITY: u32 = 4294967295;
pub const SDL_HINT_ACCELEROMETER_AS_JOYSTICK: &'static [u8; 30usize] =
    b"SDL_ACCELEROMETER_AS_JOYSTICK\0";
pub const SDL_HINT_ALLOW_ALT_TAB_WHILE_GRABBED: &'static [u8; 32usize] =
    b"SDL_ALLOW_ALT_TAB_WHILE_GRABBED\0";
pub const SDL_HINT_ALLOW_TOPMOST: &'static [u8; 18usize] = b"SDL_ALLOW_TOPMOST\0";
pub const SDL_HINT_ANDROID_APK_EXPANSION_MAIN_FILE_VERSION: &'static [u8; 44usize] =
    b"SDL_ANDROID_APK_EXPANSION_MAIN_FILE_VERSION\0";
pub const SDL_HINT_ANDROID_APK_EXPANSION_PATCH_FILE_VERSION: &'static [u8; 45usize] =
    b"SDL_ANDROID_APK_EXPANSION_PATCH_FILE_VERSION\0";
pub const SDL_HINT_ANDROID_BLOCK_ON_PAUSE: &'static [u8; 27usize] = b"SDL_ANDROID_BLOCK_ON_PAUSE\0";
pub const SDL_HINT_ANDROID_BLOCK_ON_PAUSE_PAUSEAUDIO: &'static [u8; 38usize] =
    b"SDL_ANDROID_BLOCK_ON_PAUSE_PAUSEAUDIO\0";
pub const SDL_HINT_ANDROID_TRAP_BACK_BUTTON: &'static [u8; 29usize] =
    b"SDL_ANDROID_TRAP_BACK_BUTTON\0";
pub const SDL_HINT_APPLE_TV_CONTROLLER_UI_EVENTS: &'static [u8; 34usize] =
    b"SDL_APPLE_TV_CONTROLLER_UI_EVENTS\0";
pub const SDL_HINT_APPLE_TV_REMOTE_ALLOW_ROTATION: &'static [u8; 35usize] =
    b"SDL_APPLE_TV_REMOTE_ALLOW_ROTATION\0";
pub const SDL_HINT_AUDIO_CATEGORY: &'static [u8; 19usize] = b"SDL_AUDIO_CATEGORY\0";
pub const SDL_HINT_AUDIO_DEVICE_APP_NAME: &'static [u8; 26usize] = b"SDL_AUDIO_DEVICE_APP_NAME\0";
pub const SDL_HINT_AUDIO_DEVICE_STREAM_NAME: &'static [u8; 29usize] =
    b"SDL_AUDIO_DEVICE_STREAM_NAME\0";
pub const SDL_HINT_AUDIO_DEVICE_STREAM_ROLE: &'static [u8; 29usize] =
    b"SDL_AUDIO_DEVICE_STREAM_ROLE\0";
pub const SDL_HINT_AUDIO_RESAMPLING_MODE: &'static [u8; 26usize] = b"SDL_AUDIO_RESAMPLING_MODE\0";
pub const SDL_HINT_AUTO_UPDATE_JOYSTICKS: &'static [u8; 26usize] = b"SDL_AUTO_UPDATE_JOYSTICKS\0";
pub const SDL_HINT_AUTO_UPDATE_SENSORS: &'static [u8; 24usize] = b"SDL_AUTO_UPDATE_SENSORS\0";
pub const SDL_HINT_BMP_SAVE_LEGACY_FORMAT: &'static [u8; 27usize] = b"SDL_BMP_SAVE_LEGACY_FORMAT\0";
pub const SDL_HINT_DISPLAY_USABLE_BOUNDS: &'static [u8; 26usize] = b"SDL_DISPLAY_USABLE_BOUNDS\0";
pub const SDL_HINT_EMSCRIPTEN_ASYNCIFY: &'static [u8; 24usize] = b"SDL_EMSCRIPTEN_ASYNCIFY\0";
pub const SDL_HINT_EMSCRIPTEN_KEYBOARD_ELEMENT: &'static [u8; 32usize] =
    b"SDL_EMSCRIPTEN_KEYBOARD_ELEMENT\0";
pub const SDL_HINT_ENABLE_STEAM_CONTROLLERS: &'static [u8; 29usize] =
    b"SDL_ENABLE_STEAM_CONTROLLERS\0";
pub const SDL_HINT_EVENT_LOGGING: &'static [u8; 18usize] = b"SDL_EVENT_LOGGING\0";
pub const SDL_HINT_FRAMEBUFFER_ACCELERATION: &'static [u8; 29usize] =
    b"SDL_FRAMEBUFFER_ACCELERATION\0";
pub const SDL_HINT_GAMECONTROLLERCONFIG: &'static [u8; 25usize] = b"SDL_GAMECONTROLLERCONFIG\0";
pub const SDL_HINT_GAMECONTROLLERCONFIG_FILE: &'static [u8; 30usize] =
    b"SDL_GAMECONTROLLERCONFIG_FILE\0";
pub const SDL_HINT_GAMECONTROLLERTYPE: &'static [u8; 23usize] = b"SDL_GAMECONTROLLERTYPE\0";
pub const SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES: &'static [u8; 34usize] =
    b"SDL_GAMECONTROLLER_IGNORE_DEVICES\0";
pub const SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT: &'static [u8; 41usize] =
    b"SDL_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT\0";
pub const SDL_HINT_GAMECONTROLLER_USE_BUTTON_LABELS: &'static [u8; 37usize] =
    b"SDL_GAMECONTROLLER_USE_BUTTON_LABELS\0";
pub const SDL_HINT_GRAB_KEYBOARD: &'static [u8; 18usize] = b"SDL_GRAB_KEYBOARD\0";
pub const SDL_HINT_IDLE_TIMER_DISABLED: &'static [u8; 28usize] = b"SDL_IOS_IDLE_TIMER_DISABLED\0";
pub const SDL_HINT_IME_INTERNAL_EDITING: &'static [u8; 25usize] = b"SDL_IME_INTERNAL_EDITING\0";
pub const SDL_HINT_IOS_HIDE_HOME_INDICATOR: &'static [u8; 28usize] =
    b"SDL_IOS_HIDE_HOME_INDICATOR\0";
pub const SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS: &'static [u8; 37usize] =
    b"SDL_JOYSTICK_ALLOW_BACKGROUND_EVENTS\0";
pub const SDL_HINT_JOYSTICK_HIDAPI: &'static [u8; 20usize] = b"SDL_JOYSTICK_HIDAPI\0";
pub const SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE: &'static [u8; 29usize] =
    b"SDL_JOYSTICK_HIDAPI_GAMECUBE\0";
pub const SDL_HINT_JOYSTICK_HIDAPI_JOY_CONS: &'static [u8; 29usize] =
    b"SDL_JOYSTICK_HIDAPI_JOY_CONS\0";
pub const SDL_HINT_JOYSTICK_HIDAPI_LUNA: &'static [u8; 25usize] = b"SDL_JOYSTICK_HIDAPI_LUNA\0";
pub const SDL_HINT_JOYSTICK_HIDAPI_PS4: &'static [u8; 24usize] = b"SDL_JOYSTICK_HIDAPI_PS4\0";
pub const SDL_HINT_JOYSTICK_HIDAPI_PS4_RUMBLE: &'static [u8; 31usize] =
    b"SDL_JOYSTICK_HIDAPI_PS4_RUMBLE\0";
pub const SDL_HINT_JOYSTICK_HIDAPI_PS5: &'static [u8; 24usize] = b"SDL_JOYSTICK_HIDAPI_PS5\0";
pub const SDL_HINT_JOYSTICK_HIDAPI_PS5_PLAYER_LED: &'static [u8; 35usize] =
    b"SDL_JOYSTICK_HIDAPI_PS5_PLAYER_LED\0";
pub const SDL_HINT_JOYSTICK_HIDAPI_PS5_RUMBLE: &'static [u8; 31usize] =
    b"SDL_JOYSTICK_HIDAPI_PS5_RUMBLE\0";
pub const SDL_HINT_JOYSTICK_HIDAPI_STADIA: &'static [u8; 27usize] = b"SDL_JOYSTICK_HIDAPI_STADIA\0";
pub const SDL_HINT_JOYSTICK_HIDAPI_STEAM: &'static [u8; 26usize] = b"SDL_JOYSTICK_HIDAPI_STEAM\0";
pub const SDL_HINT_JOYSTICK_HIDAPI_SWITCH: &'static [u8; 27usize] = b"SDL_JOYSTICK_HIDAPI_SWITCH\0";
pub const SDL_HINT_JOYSTICK_HIDAPI_SWITCH_HOME_LED: &'static [u8; 36usize] =
    b"SDL_JOYSTICK_HIDAPI_SWITCH_HOME_LED\0";
pub const SDL_HINT_JOYSTICK_HIDAPI_XBOX: &'static [u8; 25usize] = b"SDL_JOYSTICK_HIDAPI_XBOX\0";
pub const SDL_HINT_JOYSTICK_RAWINPUT: &'static [u8; 22usize] = b"SDL_JOYSTICK_RAWINPUT\0";
pub const SDL_HINT_JOYSTICK_RAWINPUT_CORRELATE_XINPUT: &'static [u8; 39usize] =
    b"SDL_JOYSTICK_RAWINPUT_CORRELATE_XINPUT\0";
pub const SDL_HINT_JOYSTICK_THREAD: &'static [u8; 20usize] = b"SDL_JOYSTICK_THREAD\0";
pub const SDL_HINT_KMSDRM_REQUIRE_DRM_MASTER: &'static [u8; 30usize] =
    b"SDL_KMSDRM_REQUIRE_DRM_MASTER\0";
pub const SDL_HINT_LINUX_JOYSTICK_DEADZONES: &'static [u8; 29usize] =
    b"SDL_LINUX_JOYSTICK_DEADZONES\0";
pub const SDL_HINT_MAC_BACKGROUND_APP: &'static [u8; 23usize] = b"SDL_MAC_BACKGROUND_APP\0";
pub const SDL_HINT_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK: &'static [u8; 39usize] =
    b"SDL_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK\0";
pub const SDL_HINT_MOUSE_DOUBLE_CLICK_RADIUS: &'static [u8; 30usize] =
    b"SDL_MOUSE_DOUBLE_CLICK_RADIUS\0";
pub const SDL_HINT_MOUSE_DOUBLE_CLICK_TIME: &'static [u8; 28usize] =
    b"SDL_MOUSE_DOUBLE_CLICK_TIME\0";
pub const SDL_HINT_MOUSE_FOCUS_CLICKTHROUGH: &'static [u8; 29usize] =
    b"SDL_MOUSE_FOCUS_CLICKTHROUGH\0";
pub const SDL_HINT_MOUSE_NORMAL_SPEED_SCALE: &'static [u8; 29usize] =
    b"SDL_MOUSE_NORMAL_SPEED_SCALE\0";
pub const SDL_HINT_MOUSE_RELATIVE_MODE_WARP: &'static [u8; 29usize] =
    b"SDL_MOUSE_RELATIVE_MODE_WARP\0";
pub const SDL_HINT_MOUSE_RELATIVE_SCALING: &'static [u8; 27usize] = b"SDL_MOUSE_RELATIVE_SCALING\0";
pub const SDL_HINT_MOUSE_RELATIVE_SPEED_SCALE: &'static [u8; 31usize] =
    b"SDL_MOUSE_RELATIVE_SPEED_SCALE\0";
pub const SDL_HINT_MOUSE_TOUCH_EVENTS: &'static [u8; 23usize] = b"SDL_MOUSE_TOUCH_EVENTS\0";
pub const SDL_HINT_NO_SIGNAL_HANDLERS: &'static [u8; 23usize] = b"SDL_NO_SIGNAL_HANDLERS\0";
pub const SDL_HINT_OPENGL_ES_DRIVER: &'static [u8; 21usize] = b"SDL_OPENGL_ES_DRIVER\0";
pub const SDL_HINT_ORIENTATIONS: &'static [u8; 21usize] = b"SDL_IOS_ORIENTATIONS\0";
pub const SDL_HINT_PREFERRED_LOCALES: &'static [u8; 22usize] = b"SDL_PREFERRED_LOCALES\0";
pub const SDL_HINT_QTWAYLAND_CONTENT_ORIENTATION: &'static [u8; 34usize] =
    b"SDL_QTWAYLAND_CONTENT_ORIENTATION\0";
pub const SDL_HINT_QTWAYLAND_WINDOW_FLAGS: &'static [u8; 27usize] = b"SDL_QTWAYLAND_WINDOW_FLAGS\0";
pub const SDL_HINT_RENDER_BATCHING: &'static [u8; 20usize] = b"SDL_RENDER_BATCHING\0";
pub const SDL_HINT_RENDER_DIRECT3D11_DEBUG: &'static [u8; 28usize] =
    b"SDL_RENDER_DIRECT3D11_DEBUG\0";
pub const SDL_HINT_RENDER_DIRECT3D_THREADSAFE: &'static [u8; 31usize] =
    b"SDL_RENDER_DIRECT3D_THREADSAFE\0";
pub const SDL_HINT_RENDER_DRIVER: &'static [u8; 18usize] = b"SDL_RENDER_DRIVER\0";
pub const SDL_HINT_RENDER_LOGICAL_SIZE_MODE: &'static [u8; 29usize] =
    b"SDL_RENDER_LOGICAL_SIZE_MODE\0";
pub const SDL_HINT_RENDER_OPENGL_SHADERS: &'static [u8; 26usize] = b"SDL_RENDER_OPENGL_SHADERS\0";
pub const SDL_HINT_RENDER_SCALE_QUALITY: &'static [u8; 25usize] = b"SDL_RENDER_SCALE_QUALITY\0";
pub const SDL_HINT_RENDER_VSYNC: &'static [u8; 17usize] = b"SDL_RENDER_VSYNC\0";
pub const SDL_HINT_RETURN_KEY_HIDES_IME: &'static [u8; 25usize] = b"SDL_RETURN_KEY_HIDES_IME\0";
pub const SDL_HINT_RPI_VIDEO_LAYER: &'static [u8; 20usize] = b"SDL_RPI_VIDEO_LAYER\0";
pub const SDL_HINT_THREAD_FORCE_REALTIME_TIME_CRITICAL: &'static [u8; 40usize] =
    b"SDL_THREAD_FORCE_REALTIME_TIME_CRITICAL\0";
pub const SDL_HINT_THREAD_PRIORITY_POLICY: &'static [u8; 27usize] = b"SDL_THREAD_PRIORITY_POLICY\0";
pub const SDL_HINT_THREAD_STACK_SIZE: &'static [u8; 22usize] = b"SDL_THREAD_STACK_SIZE\0";
pub const SDL_HINT_TIMER_RESOLUTION: &'static [u8; 21usize] = b"SDL_TIMER_RESOLUTION\0";
pub const SDL_HINT_TOUCH_MOUSE_EVENTS: &'static [u8; 23usize] = b"SDL_TOUCH_MOUSE_EVENTS\0";
pub const SDL_HINT_TV_REMOTE_AS_JOYSTICK: &'static [u8; 26usize] = b"SDL_TV_REMOTE_AS_JOYSTICK\0";
pub const SDL_HINT_VIDEO_ALLOW_SCREENSAVER: &'static [u8; 28usize] =
    b"SDL_VIDEO_ALLOW_SCREENSAVER\0";
pub const SDL_HINT_VIDEO_DOUBLE_BUFFER: &'static [u8; 24usize] = b"SDL_VIDEO_DOUBLE_BUFFER\0";
pub const SDL_HINT_VIDEO_EXTERNAL_CONTEXT: &'static [u8; 27usize] = b"SDL_VIDEO_EXTERNAL_CONTEXT\0";
pub const SDL_HINT_VIDEO_HIGHDPI_DISABLED: &'static [u8; 27usize] = b"SDL_VIDEO_HIGHDPI_DISABLED\0";
pub const SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES: &'static [u8; 32usize] =
    b"SDL_VIDEO_MAC_FULLSCREEN_SPACES\0";
pub const SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS: &'static [u8; 33usize] =
    b"SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS\0";
pub const SDL_HINT_VIDEO_WAYLAND_ALLOW_LIBDECOR: &'static [u8; 33usize] =
    b"SDL_VIDEO_WAYLAND_ALLOW_LIBDECOR\0";
pub const SDL_HINT_VIDEO_WINDOW_SHARE_PIXEL_FORMAT: &'static [u8; 36usize] =
    b"SDL_VIDEO_WINDOW_SHARE_PIXEL_FORMAT\0";
pub const SDL_HINT_VIDEO_WIN_D3DCOMPILER: &'static [u8; 26usize] = b"SDL_VIDEO_WIN_D3DCOMPILER\0";
pub const SDL_HINT_VIDEO_X11_FORCE_EGL: &'static [u8; 24usize] = b"SDL_VIDEO_X11_FORCE_EGL\0";
pub const SDL_HINT_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR: &'static [u8; 39usize] =
    b"SDL_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR\0";
pub const SDL_HINT_VIDEO_X11_NET_WM_PING: &'static [u8; 26usize] = b"SDL_VIDEO_X11_NET_WM_PING\0";
pub const SDL_HINT_VIDEO_X11_WINDOW_VISUALID: &'static [u8; 30usize] =
    b"SDL_VIDEO_X11_WINDOW_VISUALID\0";
pub const SDL_HINT_VIDEO_X11_XINERAMA: &'static [u8; 23usize] = b"SDL_VIDEO_X11_XINERAMA\0";
pub const SDL_HINT_VIDEO_X11_XRANDR: &'static [u8; 21usize] = b"SDL_VIDEO_X11_XRANDR\0";
pub const SDL_HINT_VIDEO_X11_XVIDMODE: &'static [u8; 23usize] = b"SDL_VIDEO_X11_XVIDMODE\0";
pub const SDL_HINT_WAVE_FACT_CHUNK: &'static [u8; 20usize] = b"SDL_WAVE_FACT_CHUNK\0";
pub const SDL_HINT_WAVE_RIFF_CHUNK_SIZE: &'static [u8; 25usize] = b"SDL_WAVE_RIFF_CHUNK_SIZE\0";
pub const SDL_HINT_WAVE_TRUNCATION: &'static [u8; 20usize] = b"SDL_WAVE_TRUNCATION\0";
pub const SDL_HINT_WINDOWS_DISABLE_THREAD_NAMING: &'static [u8; 34usize] =
    b"SDL_WINDOWS_DISABLE_THREAD_NAMING\0";
pub const SDL_HINT_WINDOWS_ENABLE_MESSAGELOOP: &'static [u8; 31usize] =
    b"SDL_WINDOWS_ENABLE_MESSAGELOOP\0";
pub const SDL_HINT_WINDOWS_FORCE_MUTEX_CRITICAL_SECTIONS: &'static [u8; 42usize] =
    b"SDL_WINDOWS_FORCE_MUTEX_CRITICAL_SECTIONS\0";
pub const SDL_HINT_WINDOWS_FORCE_SEMAPHORE_KERNEL: &'static [u8; 35usize] =
    b"SDL_WINDOWS_FORCE_SEMAPHORE_KERNEL\0";
pub const SDL_HINT_WINDOWS_INTRESOURCE_ICON: &'static [u8; 29usize] =
    b"SDL_WINDOWS_INTRESOURCE_ICON\0";
pub const SDL_HINT_WINDOWS_INTRESOURCE_ICON_SMALL: &'static [u8; 35usize] =
    b"SDL_WINDOWS_INTRESOURCE_ICON_SMALL\0";
pub const SDL_HINT_WINDOWS_NO_CLOSE_ON_ALT_F4: &'static [u8; 31usize] =
    b"SDL_WINDOWS_NO_CLOSE_ON_ALT_F4\0";
pub const SDL_HINT_WINDOWS_USE_D3D9EX: &'static [u8; 23usize] = b"SDL_WINDOWS_USE_D3D9EX\0";
pub const SDL_HINT_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN: &'static [u8; 44usize] =
    b"SDL_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN\0";
pub const SDL_HINT_WINRT_HANDLE_BACK_BUTTON: &'static [u8; 29usize] =
    b"SDL_WINRT_HANDLE_BACK_BUTTON\0";
pub const SDL_HINT_WINRT_PRIVACY_POLICY_LABEL: &'static [u8; 31usize] =
    b"SDL_WINRT_PRIVACY_POLICY_LABEL\0";
pub const SDL_HINT_WINRT_PRIVACY_POLICY_URL: &'static [u8; 29usize] =
    b"SDL_WINRT_PRIVACY_POLICY_URL\0";
pub const SDL_HINT_X11_FORCE_OVERRIDE_REDIRECT: &'static [u8; 32usize] =
    b"SDL_X11_FORCE_OVERRIDE_REDIRECT\0";
pub const SDL_HINT_XINPUT_ENABLED: &'static [u8; 19usize] = b"SDL_XINPUT_ENABLED\0";
pub const SDL_HINT_XINPUT_USE_OLD_JOYSTICK_MAPPING: &'static [u8; 36usize] =
    b"SDL_XINPUT_USE_OLD_JOYSTICK_MAPPING\0";
pub const SDL_HINT_AUDIO_INCLUDE_MONITORS: &'static [u8; 27usize] = b"SDL_AUDIO_INCLUDE_MONITORS\0";
pub const SDL_MAX_LOG_MESSAGE: u32 = 4096;
pub const SDL_NONSHAPEABLE_WINDOW: i32 = -1;
pub const SDL_INVALID_SHAPE_ARGUMENT: i32 = -2;
pub const SDL_WINDOW_LACKS_SHAPE: i32 = -3;
pub const SDL_MAJOR_VERSION: u32 = 2;
pub const SDL_MINOR_VERSION: u32 = 0;
pub const SDL_PATCHLEVEL: u32 = 16;
pub const SDL_INIT_TIMER: u32 = 1;
pub const SDL_INIT_AUDIO: u32 = 16;
pub const SDL_INIT_VIDEO: u32 = 32;
pub const SDL_INIT_JOYSTICK: u32 = 512;
pub const SDL_INIT_HAPTIC: u32 = 4096;
pub const SDL_INIT_GAMECONTROLLER: u32 = 8192;
pub const SDL_INIT_EVENTS: u32 = 16384;
pub const SDL_INIT_SENSOR: u32 = 32768;
pub const SDL_INIT_NOPARACHUTE: u32 = 1048576;
pub const SDL_INIT_EVERYTHING: u32 = 62001;
pub const GL_VERSION_1_1: u32 = 1;
pub const GL_VERSION_1_2: u32 = 1;
pub const GL_VERSION_1_3: u32 = 1;
pub const GL_ARB_imaging: u32 = 1;
pub const GL_FALSE: u32 = 0;
pub const GL_TRUE: u32 = 1;
pub const GL_BYTE: u32 = 5120;
pub const GL_UNSIGNED_BYTE: u32 = 5121;
pub const GL_SHORT: u32 = 5122;
pub const GL_UNSIGNED_SHORT: u32 = 5123;
pub const GL_INT: u32 = 5124;
pub const GL_UNSIGNED_INT: u32 = 5125;
pub const GL_FLOAT: u32 = 5126;
pub const GL_2_BYTES: u32 = 5127;
pub const GL_3_BYTES: u32 = 5128;
pub const GL_4_BYTES: u32 = 5129;
pub const GL_DOUBLE: u32 = 5130;
pub const GL_POINTS: u32 = 0;
pub const GL_LINES: u32 = 1;
pub const GL_LINE_LOOP: u32 = 2;
pub const GL_LINE_STRIP: u32 = 3;
pub const GL_TRIANGLES: u32 = 4;
pub const GL_TRIANGLE_STRIP: u32 = 5;
pub const GL_TRIANGLE_FAN: u32 = 6;
pub const GL_QUADS: u32 = 7;
pub const GL_QUAD_STRIP: u32 = 8;
pub const GL_POLYGON: u32 = 9;
pub const GL_VERTEX_ARRAY: u32 = 32884;
pub const GL_NORMAL_ARRAY: u32 = 32885;
pub const GL_COLOR_ARRAY: u32 = 32886;
pub const GL_INDEX_ARRAY: u32 = 32887;
pub const GL_TEXTURE_COORD_ARRAY: u32 = 32888;
pub const GL_EDGE_FLAG_ARRAY: u32 = 32889;
pub const GL_VERTEX_ARRAY_SIZE: u32 = 32890;
pub const GL_VERTEX_ARRAY_TYPE: u32 = 32891;
pub const GL_VERTEX_ARRAY_STRIDE: u32 = 32892;
pub const GL_NORMAL_ARRAY_TYPE: u32 = 32894;
pub const GL_NORMAL_ARRAY_STRIDE: u32 = 32895;
pub const GL_COLOR_ARRAY_SIZE: u32 = 32897;
pub const GL_COLOR_ARRAY_TYPE: u32 = 32898;
pub const GL_COLOR_ARRAY_STRIDE: u32 = 32899;
pub const GL_INDEX_ARRAY_TYPE: u32 = 32901;
pub const GL_INDEX_ARRAY_STRIDE: u32 = 32902;
pub const GL_TEXTURE_COORD_ARRAY_SIZE: u32 = 32904;
pub const GL_TEXTURE_COORD_ARRAY_TYPE: u32 = 32905;
pub const GL_TEXTURE_COORD_ARRAY_STRIDE: u32 = 32906;
pub const GL_EDGE_FLAG_ARRAY_STRIDE: u32 = 32908;
pub const GL_VERTEX_ARRAY_POINTER: u32 = 32910;
pub const GL_NORMAL_ARRAY_POINTER: u32 = 32911;
pub const GL_COLOR_ARRAY_POINTER: u32 = 32912;
pub const GL_INDEX_ARRAY_POINTER: u32 = 32913;
pub const GL_TEXTURE_COORD_ARRAY_POINTER: u32 = 32914;
pub const GL_EDGE_FLAG_ARRAY_POINTER: u32 = 32915;
pub const GL_V2F: u32 = 10784;
pub const GL_V3F: u32 = 10785;
pub const GL_C4UB_V2F: u32 = 10786;
pub const GL_C4UB_V3F: u32 = 10787;
pub const GL_C3F_V3F: u32 = 10788;
pub const GL_N3F_V3F: u32 = 10789;
pub const GL_C4F_N3F_V3F: u32 = 10790;
pub const GL_T2F_V3F: u32 = 10791;
pub const GL_T4F_V4F: u32 = 10792;
pub const GL_T2F_C4UB_V3F: u32 = 10793;
pub const GL_T2F_C3F_V3F: u32 = 10794;
pub const GL_T2F_N3F_V3F: u32 = 10795;
pub const GL_T2F_C4F_N3F_V3F: u32 = 10796;
pub const GL_T4F_C4F_N3F_V4F: u32 = 10797;
pub const GL_MATRIX_MODE: u32 = 2976;
pub const GL_MODELVIEW: u32 = 5888;
pub const GL_PROJECTION: u32 = 5889;
pub const GL_TEXTURE: u32 = 5890;
pub const GL_POINT_SMOOTH: u32 = 2832;
pub const GL_POINT_SIZE: u32 = 2833;
pub const GL_POINT_SIZE_GRANULARITY: u32 = 2835;
pub const GL_POINT_SIZE_RANGE: u32 = 2834;
pub const GL_LINE_SMOOTH: u32 = 2848;
pub const GL_LINE_STIPPLE: u32 = 2852;
pub const GL_LINE_STIPPLE_PATTERN: u32 = 2853;
pub const GL_LINE_STIPPLE_REPEAT: u32 = 2854;
pub const GL_LINE_WIDTH: u32 = 2849;
pub const GL_LINE_WIDTH_GRANULARITY: u32 = 2851;
pub const GL_LINE_WIDTH_RANGE: u32 = 2850;
pub const GL_POINT: u32 = 6912;
pub const GL_LINE: u32 = 6913;
pub const GL_FILL: u32 = 6914;
pub const GL_CW: u32 = 2304;
pub const GL_CCW: u32 = 2305;
pub const GL_FRONT: u32 = 1028;
pub const GL_BACK: u32 = 1029;
pub const GL_POLYGON_MODE: u32 = 2880;
pub const GL_POLYGON_SMOOTH: u32 = 2881;
pub const GL_POLYGON_STIPPLE: u32 = 2882;
pub const GL_EDGE_FLAG: u32 = 2883;
pub const GL_CULL_FACE: u32 = 2884;
pub const GL_CULL_FACE_MODE: u32 = 2885;
pub const GL_FRONT_FACE: u32 = 2886;
pub const GL_POLYGON_OFFSET_FACTOR: u32 = 32824;
pub const GL_POLYGON_OFFSET_UNITS: u32 = 10752;
pub const GL_POLYGON_OFFSET_POINT: u32 = 10753;
pub const GL_POLYGON_OFFSET_LINE: u32 = 10754;
pub const GL_POLYGON_OFFSET_FILL: u32 = 32823;
pub const GL_COMPILE: u32 = 4864;
pub const GL_COMPILE_AND_EXECUTE: u32 = 4865;
pub const GL_LIST_BASE: u32 = 2866;
pub const GL_LIST_INDEX: u32 = 2867;
pub const GL_LIST_MODE: u32 = 2864;
pub const GL_NEVER: u32 = 512;
pub const GL_LESS: u32 = 513;
pub const GL_EQUAL: u32 = 514;
pub const GL_LEQUAL: u32 = 515;
pub const GL_GREATER: u32 = 516;
pub const GL_NOTEQUAL: u32 = 517;
pub const GL_GEQUAL: u32 = 518;
pub const GL_ALWAYS: u32 = 519;
pub const GL_DEPTH_TEST: u32 = 2929;
pub const GL_DEPTH_BITS: u32 = 3414;
pub const GL_DEPTH_CLEAR_VALUE: u32 = 2931;
pub const GL_DEPTH_FUNC: u32 = 2932;
pub const GL_DEPTH_RANGE: u32 = 2928;
pub const GL_DEPTH_WRITEMASK: u32 = 2930;
pub const GL_DEPTH_COMPONENT: u32 = 6402;
pub const GL_LIGHTING: u32 = 2896;
pub const GL_LIGHT0: u32 = 16384;
pub const GL_LIGHT1: u32 = 16385;
pub const GL_LIGHT2: u32 = 16386;
pub const GL_LIGHT3: u32 = 16387;
pub const GL_LIGHT4: u32 = 16388;
pub const GL_LIGHT5: u32 = 16389;
pub const GL_LIGHT6: u32 = 16390;
pub const GL_LIGHT7: u32 = 16391;
pub const GL_SPOT_EXPONENT: u32 = 4613;
pub const GL_SPOT_CUTOFF: u32 = 4614;
pub const GL_CONSTANT_ATTENUATION: u32 = 4615;
pub const GL_LINEAR_ATTENUATION: u32 = 4616;
pub const GL_QUADRATIC_ATTENUATION: u32 = 4617;
pub const GL_AMBIENT: u32 = 4608;
pub const GL_DIFFUSE: u32 = 4609;
pub const GL_SPECULAR: u32 = 4610;
pub const GL_SHININESS: u32 = 5633;
pub const GL_EMISSION: u32 = 5632;
pub const GL_POSITION: u32 = 4611;
pub const GL_SPOT_DIRECTION: u32 = 4612;
pub const GL_AMBIENT_AND_DIFFUSE: u32 = 5634;
pub const GL_COLOR_INDEXES: u32 = 5635;
pub const GL_LIGHT_MODEL_TWO_SIDE: u32 = 2898;
pub const GL_LIGHT_MODEL_LOCAL_VIEWER: u32 = 2897;
pub const GL_LIGHT_MODEL_AMBIENT: u32 = 2899;
pub const GL_FRONT_AND_BACK: u32 = 1032;
pub const GL_SHADE_MODEL: u32 = 2900;
pub const GL_FLAT: u32 = 7424;
pub const GL_SMOOTH: u32 = 7425;
pub const GL_COLOR_MATERIAL: u32 = 2903;
pub const GL_COLOR_MATERIAL_FACE: u32 = 2901;
pub const GL_COLOR_MATERIAL_PARAMETER: u32 = 2902;
pub const GL_NORMALIZE: u32 = 2977;
pub const GL_CLIP_PLANE0: u32 = 12288;
pub const GL_CLIP_PLANE1: u32 = 12289;
pub const GL_CLIP_PLANE2: u32 = 12290;
pub const GL_CLIP_PLANE3: u32 = 12291;
pub const GL_CLIP_PLANE4: u32 = 12292;
pub const GL_CLIP_PLANE5: u32 = 12293;
pub const GL_ACCUM_RED_BITS: u32 = 3416;
pub const GL_ACCUM_GREEN_BITS: u32 = 3417;
pub const GL_ACCUM_BLUE_BITS: u32 = 3418;
pub const GL_ACCUM_ALPHA_BITS: u32 = 3419;
pub const GL_ACCUM_CLEAR_VALUE: u32 = 2944;
pub const GL_ACCUM: u32 = 256;
pub const GL_ADD: u32 = 260;
pub const GL_LOAD: u32 = 257;
pub const GL_MULT: u32 = 259;
pub const GL_RETURN: u32 = 258;
pub const GL_ALPHA_TEST: u32 = 3008;
pub const GL_ALPHA_TEST_REF: u32 = 3010;
pub const GL_ALPHA_TEST_FUNC: u32 = 3009;
pub const GL_BLEND: u32 = 3042;
pub const GL_BLEND_SRC: u32 = 3041;
pub const GL_BLEND_DST: u32 = 3040;
pub const GL_ZERO: u32 = 0;
pub const GL_ONE: u32 = 1;
pub const GL_SRC_COLOR: u32 = 768;
pub const GL_ONE_MINUS_SRC_COLOR: u32 = 769;
pub const GL_SRC_ALPHA: u32 = 770;
pub const GL_ONE_MINUS_SRC_ALPHA: u32 = 771;
pub const GL_DST_ALPHA: u32 = 772;
pub const GL_ONE_MINUS_DST_ALPHA: u32 = 773;
pub const GL_DST_COLOR: u32 = 774;
pub const GL_ONE_MINUS_DST_COLOR: u32 = 775;
pub const GL_SRC_ALPHA_SATURATE: u32 = 776;
pub const GL_FEEDBACK: u32 = 7169;
pub const GL_RENDER: u32 = 7168;
pub const GL_SELECT: u32 = 7170;
pub const GL_2D: u32 = 1536;
pub const GL_3D: u32 = 1537;
pub const GL_3D_COLOR: u32 = 1538;
pub const GL_3D_COLOR_TEXTURE: u32 = 1539;
pub const GL_4D_COLOR_TEXTURE: u32 = 1540;
pub const GL_POINT_TOKEN: u32 = 1793;
pub const GL_LINE_TOKEN: u32 = 1794;
pub const GL_LINE_RESET_TOKEN: u32 = 1799;
pub const GL_POLYGON_TOKEN: u32 = 1795;
pub const GL_BITMAP_TOKEN: u32 = 1796;
pub const GL_DRAW_PIXEL_TOKEN: u32 = 1797;
pub const GL_COPY_PIXEL_TOKEN: u32 = 1798;
pub const GL_PASS_THROUGH_TOKEN: u32 = 1792;
pub const GL_FEEDBACK_BUFFER_POINTER: u32 = 3568;
pub const GL_FEEDBACK_BUFFER_SIZE: u32 = 3569;
pub const GL_FEEDBACK_BUFFER_TYPE: u32 = 3570;
pub const GL_SELECTION_BUFFER_POINTER: u32 = 3571;
pub const GL_SELECTION_BUFFER_SIZE: u32 = 3572;
pub const GL_FOG: u32 = 2912;
pub const GL_FOG_MODE: u32 = 2917;
pub const GL_FOG_DENSITY: u32 = 2914;
pub const GL_FOG_COLOR: u32 = 2918;
pub const GL_FOG_INDEX: u32 = 2913;
pub const GL_FOG_START: u32 = 2915;
pub const GL_FOG_END: u32 = 2916;
pub const GL_LINEAR: u32 = 9729;
pub const GL_EXP: u32 = 2048;
pub const GL_EXP2: u32 = 2049;
pub const GL_LOGIC_OP: u32 = 3057;
pub const GL_INDEX_LOGIC_OP: u32 = 3057;
pub const GL_COLOR_LOGIC_OP: u32 = 3058;
pub const GL_LOGIC_OP_MODE: u32 = 3056;
pub const GL_CLEAR: u32 = 5376;
pub const GL_SET: u32 = 5391;
pub const GL_COPY: u32 = 5379;
pub const GL_COPY_INVERTED: u32 = 5388;
pub const GL_NOOP: u32 = 5381;
pub const GL_INVERT: u32 = 5386;
pub const GL_AND: u32 = 5377;
pub const GL_NAND: u32 = 5390;
pub const GL_OR: u32 = 5383;
pub const GL_NOR: u32 = 5384;
pub const GL_XOR: u32 = 5382;
pub const GL_EQUIV: u32 = 5385;
pub const GL_AND_REVERSE: u32 = 5378;
pub const GL_AND_INVERTED: u32 = 5380;
pub const GL_OR_REVERSE: u32 = 5387;
pub const GL_OR_INVERTED: u32 = 5389;
pub const GL_STENCIL_BITS: u32 = 3415;
pub const GL_STENCIL_TEST: u32 = 2960;
pub const GL_STENCIL_CLEAR_VALUE: u32 = 2961;
pub const GL_STENCIL_FUNC: u32 = 2962;
pub const GL_STENCIL_VALUE_MASK: u32 = 2963;
pub const GL_STENCIL_FAIL: u32 = 2964;
pub const GL_STENCIL_PASS_DEPTH_FAIL: u32 = 2965;
pub const GL_STENCIL_PASS_DEPTH_PASS: u32 = 2966;
pub const GL_STENCIL_REF: u32 = 2967;
pub const GL_STENCIL_WRITEMASK: u32 = 2968;
pub const GL_STENCIL_INDEX: u32 = 6401;
pub const GL_KEEP: u32 = 7680;
pub const GL_REPLACE: u32 = 7681;
pub const GL_INCR: u32 = 7682;
pub const GL_DECR: u32 = 7683;
pub const GL_NONE: u32 = 0;
pub const GL_LEFT: u32 = 1030;
pub const GL_RIGHT: u32 = 1031;
pub const GL_FRONT_LEFT: u32 = 1024;
pub const GL_FRONT_RIGHT: u32 = 1025;
pub const GL_BACK_LEFT: u32 = 1026;
pub const GL_BACK_RIGHT: u32 = 1027;
pub const GL_AUX0: u32 = 1033;
pub const GL_AUX1: u32 = 1034;
pub const GL_AUX2: u32 = 1035;
pub const GL_AUX3: u32 = 1036;
pub const GL_COLOR_INDEX: u32 = 6400;
pub const GL_RED: u32 = 6403;
pub const GL_GREEN: u32 = 6404;
pub const GL_BLUE: u32 = 6405;
pub const GL_ALPHA: u32 = 6406;
pub const GL_LUMINANCE: u32 = 6409;
pub const GL_LUMINANCE_ALPHA: u32 = 6410;
pub const GL_ALPHA_BITS: u32 = 3413;
pub const GL_RED_BITS: u32 = 3410;
pub const GL_GREEN_BITS: u32 = 3411;
pub const GL_BLUE_BITS: u32 = 3412;
pub const GL_INDEX_BITS: u32 = 3409;
pub const GL_SUBPIXEL_BITS: u32 = 3408;
pub const GL_AUX_BUFFERS: u32 = 3072;
pub const GL_READ_BUFFER: u32 = 3074;
pub const GL_DRAW_BUFFER: u32 = 3073;
pub const GL_DOUBLEBUFFER: u32 = 3122;
pub const GL_STEREO: u32 = 3123;
pub const GL_BITMAP: u32 = 6656;
pub const GL_COLOR: u32 = 6144;
pub const GL_DEPTH: u32 = 6145;
pub const GL_STENCIL: u32 = 6146;
pub const GL_DITHER: u32 = 3024;
pub const GL_RGB: u32 = 6407;
pub const GL_RGBA: u32 = 6408;
pub const GL_MAX_LIST_NESTING: u32 = 2865;
pub const GL_MAX_EVAL_ORDER: u32 = 3376;
pub const GL_MAX_LIGHTS: u32 = 3377;
pub const GL_MAX_CLIP_PLANES: u32 = 3378;
pub const GL_MAX_TEXTURE_SIZE: u32 = 3379;
pub const GL_MAX_PIXEL_MAP_TABLE: u32 = 3380;
pub const GL_MAX_ATTRIB_STACK_DEPTH: u32 = 3381;
pub const GL_MAX_MODELVIEW_STACK_DEPTH: u32 = 3382;
pub const GL_MAX_NAME_STACK_DEPTH: u32 = 3383;
pub const GL_MAX_PROJECTION_STACK_DEPTH: u32 = 3384;
pub const GL_MAX_TEXTURE_STACK_DEPTH: u32 = 3385;
pub const GL_MAX_VIEWPORT_DIMS: u32 = 3386;
pub const GL_MAX_CLIENT_ATTRIB_STACK_DEPTH: u32 = 3387;
pub const GL_ATTRIB_STACK_DEPTH: u32 = 2992;
pub const GL_CLIENT_ATTRIB_STACK_DEPTH: u32 = 2993;
pub const GL_COLOR_CLEAR_VALUE: u32 = 3106;
pub const GL_COLOR_WRITEMASK: u32 = 3107;
pub const GL_CURRENT_INDEX: u32 = 2817;
pub const GL_CURRENT_COLOR: u32 = 2816;
pub const GL_CURRENT_NORMAL: u32 = 2818;
pub const GL_CURRENT_RASTER_COLOR: u32 = 2820;
pub const GL_CURRENT_RASTER_DISTANCE: u32 = 2825;
pub const GL_CURRENT_RASTER_INDEX: u32 = 2821;
pub const GL_CURRENT_RASTER_POSITION: u32 = 2823;
pub const GL_CURRENT_RASTER_TEXTURE_COORDS: u32 = 2822;
pub const GL_CURRENT_RASTER_POSITION_VALID: u32 = 2824;
pub const GL_CURRENT_TEXTURE_COORDS: u32 = 2819;
pub const GL_INDEX_CLEAR_VALUE: u32 = 3104;
pub const GL_INDEX_MODE: u32 = 3120;
pub const GL_INDEX_WRITEMASK: u32 = 3105;
pub const GL_MODELVIEW_MATRIX: u32 = 2982;
pub const GL_MODELVIEW_STACK_DEPTH: u32 = 2979;
pub const GL_NAME_STACK_DEPTH: u32 = 3440;
pub const GL_PROJECTION_MATRIX: u32 = 2983;
pub const GL_PROJECTION_STACK_DEPTH: u32 = 2980;
pub const GL_RENDER_MODE: u32 = 3136;
pub const GL_RGBA_MODE: u32 = 3121;
pub const GL_TEXTURE_MATRIX: u32 = 2984;
pub const GL_TEXTURE_STACK_DEPTH: u32 = 2981;
pub const GL_VIEWPORT: u32 = 2978;
pub const GL_AUTO_NORMAL: u32 = 3456;
pub const GL_MAP1_COLOR_4: u32 = 3472;
pub const GL_MAP1_INDEX: u32 = 3473;
pub const GL_MAP1_NORMAL: u32 = 3474;
pub const GL_MAP1_TEXTURE_COORD_1: u32 = 3475;
pub const GL_MAP1_TEXTURE_COORD_2: u32 = 3476;
pub const GL_MAP1_TEXTURE_COORD_3: u32 = 3477;
pub const GL_MAP1_TEXTURE_COORD_4: u32 = 3478;
pub const GL_MAP1_VERTEX_3: u32 = 3479;
pub const GL_MAP1_VERTEX_4: u32 = 3480;
pub const GL_MAP2_COLOR_4: u32 = 3504;
pub const GL_MAP2_INDEX: u32 = 3505;
pub const GL_MAP2_NORMAL: u32 = 3506;
pub const GL_MAP2_TEXTURE_COORD_1: u32 = 3507;
pub const GL_MAP2_TEXTURE_COORD_2: u32 = 3508;
pub const GL_MAP2_TEXTURE_COORD_3: u32 = 3509;
pub const GL_MAP2_TEXTURE_COORD_4: u32 = 3510;
pub const GL_MAP2_VERTEX_3: u32 = 3511;
pub const GL_MAP2_VERTEX_4: u32 = 3512;
pub const GL_MAP1_GRID_DOMAIN: u32 = 3536;
pub const GL_MAP1_GRID_SEGMENTS: u32 = 3537;
pub const GL_MAP2_GRID_DOMAIN: u32 = 3538;
pub const GL_MAP2_GRID_SEGMENTS: u32 = 3539;
pub const GL_COEFF: u32 = 2560;
pub const GL_ORDER: u32 = 2561;
pub const GL_DOMAIN: u32 = 2562;
pub const GL_PERSPECTIVE_CORRECTION_HINT: u32 = 3152;
pub const GL_POINT_SMOOTH_HINT: u32 = 3153;
pub const GL_LINE_SMOOTH_HINT: u32 = 3154;
pub const GL_POLYGON_SMOOTH_HINT: u32 = 3155;
pub const GL_FOG_HINT: u32 = 3156;
pub const GL_DONT_CARE: u32 = 4352;
pub const GL_FASTEST: u32 = 4353;
pub const GL_NICEST: u32 = 4354;
pub const GL_SCISSOR_BOX: u32 = 3088;
pub const GL_SCISSOR_TEST: u32 = 3089;
pub const GL_MAP_COLOR: u32 = 3344;
pub const GL_MAP_STENCIL: u32 = 3345;
pub const GL_INDEX_SHIFT: u32 = 3346;
pub const GL_INDEX_OFFSET: u32 = 3347;
pub const GL_RED_SCALE: u32 = 3348;
pub const GL_RED_BIAS: u32 = 3349;
pub const GL_GREEN_SCALE: u32 = 3352;
pub const GL_GREEN_BIAS: u32 = 3353;
pub const GL_BLUE_SCALE: u32 = 3354;
pub const GL_BLUE_BIAS: u32 = 3355;
pub const GL_ALPHA_SCALE: u32 = 3356;
pub const GL_ALPHA_BIAS: u32 = 3357;
pub const GL_DEPTH_SCALE: u32 = 3358;
pub const GL_DEPTH_BIAS: u32 = 3359;
pub const GL_PIXEL_MAP_S_TO_S_SIZE: u32 = 3249;
pub const GL_PIXEL_MAP_I_TO_I_SIZE: u32 = 3248;
pub const GL_PIXEL_MAP_I_TO_R_SIZE: u32 = 3250;
pub const GL_PIXEL_MAP_I_TO_G_SIZE: u32 = 3251;
pub const GL_PIXEL_MAP_I_TO_B_SIZE: u32 = 3252;
pub const GL_PIXEL_MAP_I_TO_A_SIZE: u32 = 3253;
pub const GL_PIXEL_MAP_R_TO_R_SIZE: u32 = 3254;
pub const GL_PIXEL_MAP_G_TO_G_SIZE: u32 = 3255;
pub const GL_PIXEL_MAP_B_TO_B_SIZE: u32 = 3256;
pub const GL_PIXEL_MAP_A_TO_A_SIZE: u32 = 3257;
pub const GL_PIXEL_MAP_S_TO_S: u32 = 3185;
pub const GL_PIXEL_MAP_I_TO_I: u32 = 3184;
pub const GL_PIXEL_MAP_I_TO_R: u32 = 3186;
pub const GL_PIXEL_MAP_I_TO_G: u32 = 3187;
pub const GL_PIXEL_MAP_I_TO_B: u32 = 3188;
pub const GL_PIXEL_MAP_I_TO_A: u32 = 3189;
pub const GL_PIXEL_MAP_R_TO_R: u32 = 3190;
pub const GL_PIXEL_MAP_G_TO_G: u32 = 3191;
pub const GL_PIXEL_MAP_B_TO_B: u32 = 3192;
pub const GL_PIXEL_MAP_A_TO_A: u32 = 3193;
pub const GL_PACK_ALIGNMENT: u32 = 3333;
pub const GL_PACK_LSB_FIRST: u32 = 3329;
pub const GL_PACK_ROW_LENGTH: u32 = 3330;
pub const GL_PACK_SKIP_PIXELS: u32 = 3332;
pub const GL_PACK_SKIP_ROWS: u32 = 3331;
pub const GL_PACK_SWAP_BYTES: u32 = 3328;
pub const GL_UNPACK_ALIGNMENT: u32 = 3317;
pub const GL_UNPACK_LSB_FIRST: u32 = 3313;
pub const GL_UNPACK_ROW_LENGTH: u32 = 3314;
pub const GL_UNPACK_SKIP_PIXELS: u32 = 3316;
pub const GL_UNPACK_SKIP_ROWS: u32 = 3315;
pub const GL_UNPACK_SWAP_BYTES: u32 = 3312;
pub const GL_ZOOM_X: u32 = 3350;
pub const GL_ZOOM_Y: u32 = 3351;
pub const GL_TEXTURE_ENV: u32 = 8960;
pub const GL_TEXTURE_ENV_MODE: u32 = 8704;
pub const GL_TEXTURE_1D: u32 = 3552;
pub const GL_TEXTURE_2D: u32 = 3553;
pub const GL_TEXTURE_WRAP_S: u32 = 10242;
pub const GL_TEXTURE_WRAP_T: u32 = 10243;
pub const GL_TEXTURE_MAG_FILTER: u32 = 10240;
pub const GL_TEXTURE_MIN_FILTER: u32 = 10241;
pub const GL_TEXTURE_ENV_COLOR: u32 = 8705;
pub const GL_TEXTURE_GEN_S: u32 = 3168;
pub const GL_TEXTURE_GEN_T: u32 = 3169;
pub const GL_TEXTURE_GEN_R: u32 = 3170;
pub const GL_TEXTURE_GEN_Q: u32 = 3171;
pub const GL_TEXTURE_GEN_MODE: u32 = 9472;
pub const GL_TEXTURE_BORDER_COLOR: u32 = 4100;
pub const GL_TEXTURE_WIDTH: u32 = 4096;
pub const GL_TEXTURE_HEIGHT: u32 = 4097;
pub const GL_TEXTURE_BORDER: u32 = 4101;
pub const GL_TEXTURE_COMPONENTS: u32 = 4099;
pub const GL_TEXTURE_RED_SIZE: u32 = 32860;
pub const GL_TEXTURE_GREEN_SIZE: u32 = 32861;
pub const GL_TEXTURE_BLUE_SIZE: u32 = 32862;
pub const GL_TEXTURE_ALPHA_SIZE: u32 = 32863;
pub const GL_TEXTURE_LUMINANCE_SIZE: u32 = 32864;
pub const GL_TEXTURE_INTENSITY_SIZE: u32 = 32865;
pub const GL_NEAREST_MIPMAP_NEAREST: u32 = 9984;
pub const GL_NEAREST_MIPMAP_LINEAR: u32 = 9986;
pub const GL_LINEAR_MIPMAP_NEAREST: u32 = 9985;
pub const GL_LINEAR_MIPMAP_LINEAR: u32 = 9987;
pub const GL_OBJECT_LINEAR: u32 = 9217;
pub const GL_OBJECT_PLANE: u32 = 9473;
pub const GL_EYE_LINEAR: u32 = 9216;
pub const GL_EYE_PLANE: u32 = 9474;
pub const GL_SPHERE_MAP: u32 = 9218;
pub const GL_DECAL: u32 = 8449;
pub const GL_MODULATE: u32 = 8448;
pub const GL_NEAREST: u32 = 9728;
pub const GL_REPEAT: u32 = 10497;
pub const GL_CLAMP: u32 = 10496;
pub const GL_S: u32 = 8192;
pub const GL_T: u32 = 8193;
pub const GL_R: u32 = 8194;
pub const GL_Q: u32 = 8195;
pub const GL_VENDOR: u32 = 7936;
pub const GL_RENDERER: u32 = 7937;
pub const GL_VERSION: u32 = 7938;
pub const GL_EXTENSIONS: u32 = 7939;
pub const GL_NO_ERROR: u32 = 0;
pub const GL_INVALID_ENUM: u32 = 1280;
pub const GL_INVALID_VALUE: u32 = 1281;
pub const GL_INVALID_OPERATION: u32 = 1282;
pub const GL_STACK_OVERFLOW: u32 = 1283;
pub const GL_STACK_UNDERFLOW: u32 = 1284;
pub const GL_OUT_OF_MEMORY: u32 = 1285;
pub const GL_CURRENT_BIT: u32 = 1;
pub const GL_POINT_BIT: u32 = 2;
pub const GL_LINE_BIT: u32 = 4;
pub const GL_POLYGON_BIT: u32 = 8;
pub const GL_POLYGON_STIPPLE_BIT: u32 = 16;
pub const GL_PIXEL_MODE_BIT: u32 = 32;
pub const GL_LIGHTING_BIT: u32 = 64;
pub const GL_FOG_BIT: u32 = 128;
pub const GL_DEPTH_BUFFER_BIT: u32 = 256;
pub const GL_ACCUM_BUFFER_BIT: u32 = 512;
pub const GL_STENCIL_BUFFER_BIT: u32 = 1024;
pub const GL_VIEWPORT_BIT: u32 = 2048;
pub const GL_TRANSFORM_BIT: u32 = 4096;
pub const GL_ENABLE_BIT: u32 = 8192;
pub const GL_COLOR_BUFFER_BIT: u32 = 16384;
pub const GL_HINT_BIT: u32 = 32768;
pub const GL_EVAL_BIT: u32 = 65536;
pub const GL_LIST_BIT: u32 = 131072;
pub const GL_TEXTURE_BIT: u32 = 262144;
pub const GL_SCISSOR_BIT: u32 = 524288;
pub const GL_ALL_ATTRIB_BITS: u32 = 1048575;
pub const GL_PROXY_TEXTURE_1D: u32 = 32867;
pub const GL_PROXY_TEXTURE_2D: u32 = 32868;
pub const GL_TEXTURE_PRIORITY: u32 = 32870;
pub const GL_TEXTURE_RESIDENT: u32 = 32871;
pub const GL_TEXTURE_BINDING_1D: u32 = 32872;
pub const GL_TEXTURE_BINDING_2D: u32 = 32873;
pub const GL_TEXTURE_INTERNAL_FORMAT: u32 = 4099;
pub const GL_ALPHA4: u32 = 32827;
pub const GL_ALPHA8: u32 = 32828;
pub const GL_ALPHA12: u32 = 32829;
pub const GL_ALPHA16: u32 = 32830;
pub const GL_LUMINANCE4: u32 = 32831;
pub const GL_LUMINANCE8: u32 = 32832;
pub const GL_LUMINANCE12: u32 = 32833;
pub const GL_LUMINANCE16: u32 = 32834;
pub const GL_LUMINANCE4_ALPHA4: u32 = 32835;
pub const GL_LUMINANCE6_ALPHA2: u32 = 32836;
pub const GL_LUMINANCE8_ALPHA8: u32 = 32837;
pub const GL_LUMINANCE12_ALPHA4: u32 = 32838;
pub const GL_LUMINANCE12_ALPHA12: u32 = 32839;
pub const GL_LUMINANCE16_ALPHA16: u32 = 32840;
pub const GL_INTENSITY: u32 = 32841;
pub const GL_INTENSITY4: u32 = 32842;
pub const GL_INTENSITY8: u32 = 32843;
pub const GL_INTENSITY12: u32 = 32844;
pub const GL_INTENSITY16: u32 = 32845;
pub const GL_R3_G3_B2: u32 = 10768;
pub const GL_RGB4: u32 = 32847;
pub const GL_RGB5: u32 = 32848;
pub const GL_RGB8: u32 = 32849;
pub const GL_RGB10: u32 = 32850;
pub const GL_RGB12: u32 = 32851;
pub const GL_RGB16: u32 = 32852;
pub const GL_RGBA2: u32 = 32853;
pub const GL_RGBA4: u32 = 32854;
pub const GL_RGB5_A1: u32 = 32855;
pub const GL_RGBA8: u32 = 32856;
pub const GL_RGB10_A2: u32 = 32857;
pub const GL_RGBA12: u32 = 32858;
pub const GL_RGBA16: u32 = 32859;
pub const GL_CLIENT_PIXEL_STORE_BIT: u32 = 1;
pub const GL_CLIENT_VERTEX_ARRAY_BIT: u32 = 2;
pub const GL_ALL_CLIENT_ATTRIB_BITS: u32 = 4294967295;
pub const GL_CLIENT_ALL_ATTRIB_BITS: u32 = 4294967295;
pub const GL_RESCALE_NORMAL: u32 = 32826;
pub const GL_CLAMP_TO_EDGE: u32 = 33071;
pub const GL_MAX_ELEMENTS_VERTICES: u32 = 33000;
pub const GL_MAX_ELEMENTS_INDICES: u32 = 33001;
pub const GL_BGR: u32 = 32992;
pub const GL_BGRA: u32 = 32993;
pub const GL_UNSIGNED_BYTE_3_3_2: u32 = 32818;
pub const GL_UNSIGNED_BYTE_2_3_3_REV: u32 = 33634;
pub const GL_UNSIGNED_SHORT_5_6_5: u32 = 33635;
pub const GL_UNSIGNED_SHORT_5_6_5_REV: u32 = 33636;
pub const GL_UNSIGNED_SHORT_4_4_4_4: u32 = 32819;
pub const GL_UNSIGNED_SHORT_4_4_4_4_REV: u32 = 33637;
pub const GL_UNSIGNED_SHORT_5_5_5_1: u32 = 32820;
pub const GL_UNSIGNED_SHORT_1_5_5_5_REV: u32 = 33638;
pub const GL_UNSIGNED_INT_8_8_8_8: u32 = 32821;
pub const GL_UNSIGNED_INT_8_8_8_8_REV: u32 = 33639;
pub const GL_UNSIGNED_INT_10_10_10_2: u32 = 32822;
pub const GL_UNSIGNED_INT_2_10_10_10_REV: u32 = 33640;
pub const GL_LIGHT_MODEL_COLOR_CONTROL: u32 = 33272;
pub const GL_SINGLE_COLOR: u32 = 33273;
pub const GL_SEPARATE_SPECULAR_COLOR: u32 = 33274;
pub const GL_TEXTURE_MIN_LOD: u32 = 33082;
pub const GL_TEXTURE_MAX_LOD: u32 = 33083;
pub const GL_TEXTURE_BASE_LEVEL: u32 = 33084;
pub const GL_TEXTURE_MAX_LEVEL: u32 = 33085;
pub const GL_SMOOTH_POINT_SIZE_RANGE: u32 = 2834;
pub const GL_SMOOTH_POINT_SIZE_GRANULARITY: u32 = 2835;
pub const GL_SMOOTH_LINE_WIDTH_RANGE: u32 = 2850;
pub const GL_SMOOTH_LINE_WIDTH_GRANULARITY: u32 = 2851;
pub const GL_ALIASED_POINT_SIZE_RANGE: u32 = 33901;
pub const GL_ALIASED_LINE_WIDTH_RANGE: u32 = 33902;
pub const GL_PACK_SKIP_IMAGES: u32 = 32875;
pub const GL_PACK_IMAGE_HEIGHT: u32 = 32876;
pub const GL_UNPACK_SKIP_IMAGES: u32 = 32877;
pub const GL_UNPACK_IMAGE_HEIGHT: u32 = 32878;
pub const GL_TEXTURE_3D: u32 = 32879;
pub const GL_PROXY_TEXTURE_3D: u32 = 32880;
pub const GL_TEXTURE_DEPTH: u32 = 32881;
pub const GL_TEXTURE_WRAP_R: u32 = 32882;
pub const GL_MAX_3D_TEXTURE_SIZE: u32 = 32883;
pub const GL_TEXTURE_BINDING_3D: u32 = 32874;
pub const GL_CONSTANT_COLOR: u32 = 32769;
pub const GL_ONE_MINUS_CONSTANT_COLOR: u32 = 32770;
pub const GL_CONSTANT_ALPHA: u32 = 32771;
pub const GL_ONE_MINUS_CONSTANT_ALPHA: u32 = 32772;
pub const GL_COLOR_TABLE: u32 = 32976;
pub const GL_POST_CONVOLUTION_COLOR_TABLE: u32 = 32977;
pub const GL_POST_COLOR_MATRIX_COLOR_TABLE: u32 = 32978;
pub const GL_PROXY_COLOR_TABLE: u32 = 32979;
pub const GL_PROXY_POST_CONVOLUTION_COLOR_TABLE: u32 = 32980;
pub const GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE: u32 = 32981;
pub const GL_COLOR_TABLE_SCALE: u32 = 32982;
pub const GL_COLOR_TABLE_BIAS: u32 = 32983;
pub const GL_COLOR_TABLE_FORMAT: u32 = 32984;
pub const GL_COLOR_TABLE_WIDTH: u32 = 32985;
pub const GL_COLOR_TABLE_RED_SIZE: u32 = 32986;
pub const GL_COLOR_TABLE_GREEN_SIZE: u32 = 32987;
pub const GL_COLOR_TABLE_BLUE_SIZE: u32 = 32988;
pub const GL_COLOR_TABLE_ALPHA_SIZE: u32 = 32989;
pub const GL_COLOR_TABLE_LUMINANCE_SIZE: u32 = 32990;
pub const GL_COLOR_TABLE_INTENSITY_SIZE: u32 = 32991;
pub const GL_CONVOLUTION_1D: u32 = 32784;
pub const GL_CONVOLUTION_2D: u32 = 32785;
pub const GL_SEPARABLE_2D: u32 = 32786;
pub const GL_CONVOLUTION_BORDER_MODE: u32 = 32787;
pub const GL_CONVOLUTION_FILTER_SCALE: u32 = 32788;
pub const GL_CONVOLUTION_FILTER_BIAS: u32 = 32789;
pub const GL_REDUCE: u32 = 32790;
pub const GL_CONVOLUTION_FORMAT: u32 = 32791;
pub const GL_CONVOLUTION_WIDTH: u32 = 32792;
pub const GL_CONVOLUTION_HEIGHT: u32 = 32793;
pub const GL_MAX_CONVOLUTION_WIDTH: u32 = 32794;
pub const GL_MAX_CONVOLUTION_HEIGHT: u32 = 32795;
pub const GL_POST_CONVOLUTION_RED_SCALE: u32 = 32796;
pub const GL_POST_CONVOLUTION_GREEN_SCALE: u32 = 32797;
pub const GL_POST_CONVOLUTION_BLUE_SCALE: u32 = 32798;
pub const GL_POST_CONVOLUTION_ALPHA_SCALE: u32 = 32799;
pub const GL_POST_CONVOLUTION_RED_BIAS: u32 = 32800;
pub const GL_POST_CONVOLUTION_GREEN_BIAS: u32 = 32801;
pub const GL_POST_CONVOLUTION_BLUE_BIAS: u32 = 32802;
pub const GL_POST_CONVOLUTION_ALPHA_BIAS: u32 = 32803;
pub const GL_CONSTANT_BORDER: u32 = 33105;
pub const GL_REPLICATE_BORDER: u32 = 33107;
pub const GL_CONVOLUTION_BORDER_COLOR: u32 = 33108;
pub const GL_COLOR_MATRIX: u32 = 32945;
pub const GL_COLOR_MATRIX_STACK_DEPTH: u32 = 32946;
pub const GL_MAX_COLOR_MATRIX_STACK_DEPTH: u32 = 32947;
pub const GL_POST_COLOR_MATRIX_RED_SCALE: u32 = 32948;
pub const GL_POST_COLOR_MATRIX_GREEN_SCALE: u32 = 32949;
pub const GL_POST_COLOR_MATRIX_BLUE_SCALE: u32 = 32950;
pub const GL_POST_COLOR_MATRIX_ALPHA_SCALE: u32 = 32951;
pub const GL_POST_COLOR_MATRIX_RED_BIAS: u32 = 32952;
pub const GL_POST_COLOR_MATRIX_GREEN_BIAS: u32 = 32953;
pub const GL_POST_COLOR_MATRIX_BLUE_BIAS: u32 = 32954;
pub const GL_POST_COLOR_MATRIX_ALPHA_BIAS: u32 = 32955;
pub const GL_HISTOGRAM: u32 = 32804;
pub const GL_PROXY_HISTOGRAM: u32 = 32805;
pub const GL_HISTOGRAM_WIDTH: u32 = 32806;
pub const GL_HISTOGRAM_FORMAT: u32 = 32807;
pub const GL_HISTOGRAM_RED_SIZE: u32 = 32808;
pub const GL_HISTOGRAM_GREEN_SIZE: u32 = 32809;
pub const GL_HISTOGRAM_BLUE_SIZE: u32 = 32810;
pub const GL_HISTOGRAM_ALPHA_SIZE: u32 = 32811;
pub const GL_HISTOGRAM_LUMINANCE_SIZE: u32 = 32812;
pub const GL_HISTOGRAM_SINK: u32 = 32813;
pub const GL_MINMAX: u32 = 32814;
pub const GL_MINMAX_FORMAT: u32 = 32815;
pub const GL_MINMAX_SINK: u32 = 32816;
pub const GL_TABLE_TOO_LARGE: u32 = 32817;
pub const GL_BLEND_EQUATION: u32 = 32777;
pub const GL_MIN: u32 = 32775;
pub const GL_MAX: u32 = 32776;
pub const GL_FUNC_ADD: u32 = 32774;
pub const GL_FUNC_SUBTRACT: u32 = 32778;
pub const GL_FUNC_REVERSE_SUBTRACT: u32 = 32779;
pub const GL_BLEND_COLOR: u32 = 32773;
pub const GL_TEXTURE0: u32 = 33984;
pub const GL_TEXTURE1: u32 = 33985;
pub const GL_TEXTURE2: u32 = 33986;
pub const GL_TEXTURE3: u32 = 33987;
pub const GL_TEXTURE4: u32 = 33988;
pub const GL_TEXTURE5: u32 = 33989;
pub const GL_TEXTURE6: u32 = 33990;
pub const GL_TEXTURE7: u32 = 33991;
pub const GL_TEXTURE8: u32 = 33992;
pub const GL_TEXTURE9: u32 = 33993;
pub const GL_TEXTURE10: u32 = 33994;
pub const GL_TEXTURE11: u32 = 33995;
pub const GL_TEXTURE12: u32 = 33996;
pub const GL_TEXTURE13: u32 = 33997;
pub const GL_TEXTURE14: u32 = 33998;
pub const GL_TEXTURE15: u32 = 33999;
pub const GL_TEXTURE16: u32 = 34000;
pub const GL_TEXTURE17: u32 = 34001;
pub const GL_TEXTURE18: u32 = 34002;
pub const GL_TEXTURE19: u32 = 34003;
pub const GL_TEXTURE20: u32 = 34004;
pub const GL_TEXTURE21: u32 = 34005;
pub const GL_TEXTURE22: u32 = 34006;
pub const GL_TEXTURE23: u32 = 34007;
pub const GL_TEXTURE24: u32 = 34008;
pub const GL_TEXTURE25: u32 = 34009;
pub const GL_TEXTURE26: u32 = 34010;
pub const GL_TEXTURE27: u32 = 34011;
pub const GL_TEXTURE28: u32 = 34012;
pub const GL_TEXTURE29: u32 = 34013;
pub const GL_TEXTURE30: u32 = 34014;
pub const GL_TEXTURE31: u32 = 34015;
pub const GL_ACTIVE_TEXTURE: u32 = 34016;
pub const GL_CLIENT_ACTIVE_TEXTURE: u32 = 34017;
pub const GL_MAX_TEXTURE_UNITS: u32 = 34018;
pub const GL_NORMAL_MAP: u32 = 34065;
pub const GL_REFLECTION_MAP: u32 = 34066;
pub const GL_TEXTURE_CUBE_MAP: u32 = 34067;
pub const GL_TEXTURE_BINDING_CUBE_MAP: u32 = 34068;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_X: u32 = 34069;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_X: u32 = 34070;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Y: u32 = 34071;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y: u32 = 34072;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Z: u32 = 34073;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z: u32 = 34074;
pub const GL_PROXY_TEXTURE_CUBE_MAP: u32 = 34075;
pub const GL_MAX_CUBE_MAP_TEXTURE_SIZE: u32 = 34076;
pub const GL_COMPRESSED_ALPHA: u32 = 34025;
pub const GL_COMPRESSED_LUMINANCE: u32 = 34026;
pub const GL_COMPRESSED_LUMINANCE_ALPHA: u32 = 34027;
pub const GL_COMPRESSED_INTENSITY: u32 = 34028;
pub const GL_COMPRESSED_RGB: u32 = 34029;
pub const GL_COMPRESSED_RGBA: u32 = 34030;
pub const GL_TEXTURE_COMPRESSION_HINT: u32 = 34031;
pub const GL_TEXTURE_COMPRESSED_IMAGE_SIZE: u32 = 34464;
pub const GL_TEXTURE_COMPRESSED: u32 = 34465;
pub const GL_NUM_COMPRESSED_TEXTURE_FORMATS: u32 = 34466;
pub const GL_COMPRESSED_TEXTURE_FORMATS: u32 = 34467;
pub const GL_MULTISAMPLE: u32 = 32925;
pub const GL_SAMPLE_ALPHA_TO_COVERAGE: u32 = 32926;
pub const GL_SAMPLE_ALPHA_TO_ONE: u32 = 32927;
pub const GL_SAMPLE_COVERAGE: u32 = 32928;
pub const GL_SAMPLE_BUFFERS: u32 = 32936;
pub const GL_SAMPLES: u32 = 32937;
pub const GL_SAMPLE_COVERAGE_VALUE: u32 = 32938;
pub const GL_SAMPLE_COVERAGE_INVERT: u32 = 32939;
pub const GL_MULTISAMPLE_BIT: u32 = 536870912;
pub const GL_TRANSPOSE_MODELVIEW_MATRIX: u32 = 34019;
pub const GL_TRANSPOSE_PROJECTION_MATRIX: u32 = 34020;
pub const GL_TRANSPOSE_TEXTURE_MATRIX: u32 = 34021;
pub const GL_TRANSPOSE_COLOR_MATRIX: u32 = 34022;
pub const GL_COMBINE: u32 = 34160;
pub const GL_COMBINE_RGB: u32 = 34161;
pub const GL_COMBINE_ALPHA: u32 = 34162;
pub const GL_SOURCE0_RGB: u32 = 34176;
pub const GL_SOURCE1_RGB: u32 = 34177;
pub const GL_SOURCE2_RGB: u32 = 34178;
pub const GL_SOURCE0_ALPHA: u32 = 34184;
pub const GL_SOURCE1_ALPHA: u32 = 34185;
pub const GL_SOURCE2_ALPHA: u32 = 34186;
pub const GL_OPERAND0_RGB: u32 = 34192;
pub const GL_OPERAND1_RGB: u32 = 34193;
pub const GL_OPERAND2_RGB: u32 = 34194;
pub const GL_OPERAND0_ALPHA: u32 = 34200;
pub const GL_OPERAND1_ALPHA: u32 = 34201;
pub const GL_OPERAND2_ALPHA: u32 = 34202;
pub const GL_RGB_SCALE: u32 = 34163;
pub const GL_ADD_SIGNED: u32 = 34164;
pub const GL_INTERPOLATE: u32 = 34165;
pub const GL_SUBTRACT: u32 = 34023;
pub const GL_CONSTANT: u32 = 34166;
pub const GL_PRIMARY_COLOR: u32 = 34167;
pub const GL_PREVIOUS: u32 = 34168;
pub const GL_DOT3_RGB: u32 = 34478;
pub const GL_DOT3_RGBA: u32 = 34479;
pub const GL_CLAMP_TO_BORDER: u32 = 33069;
pub const GL_ARB_multitexture: u32 = 1;
pub const GL_TEXTURE0_ARB: u32 = 33984;
pub const GL_TEXTURE1_ARB: u32 = 33985;
pub const GL_TEXTURE2_ARB: u32 = 33986;
pub const GL_TEXTURE3_ARB: u32 = 33987;
pub const GL_TEXTURE4_ARB: u32 = 33988;
pub const GL_TEXTURE5_ARB: u32 = 33989;
pub const GL_TEXTURE6_ARB: u32 = 33990;
pub const GL_TEXTURE7_ARB: u32 = 33991;
pub const GL_TEXTURE8_ARB: u32 = 33992;
pub const GL_TEXTURE9_ARB: u32 = 33993;
pub const GL_TEXTURE10_ARB: u32 = 33994;
pub const GL_TEXTURE11_ARB: u32 = 33995;
pub const GL_TEXTURE12_ARB: u32 = 33996;
pub const GL_TEXTURE13_ARB: u32 = 33997;
pub const GL_TEXTURE14_ARB: u32 = 33998;
pub const GL_TEXTURE15_ARB: u32 = 33999;
pub const GL_TEXTURE16_ARB: u32 = 34000;
pub const GL_TEXTURE17_ARB: u32 = 34001;
pub const GL_TEXTURE18_ARB: u32 = 34002;
pub const GL_TEXTURE19_ARB: u32 = 34003;
pub const GL_TEXTURE20_ARB: u32 = 34004;
pub const GL_TEXTURE21_ARB: u32 = 34005;
pub const GL_TEXTURE22_ARB: u32 = 34006;
pub const GL_TEXTURE23_ARB: u32 = 34007;
pub const GL_TEXTURE24_ARB: u32 = 34008;
pub const GL_TEXTURE25_ARB: u32 = 34009;
pub const GL_TEXTURE26_ARB: u32 = 34010;
pub const GL_TEXTURE27_ARB: u32 = 34011;
pub const GL_TEXTURE28_ARB: u32 = 34012;
pub const GL_TEXTURE29_ARB: u32 = 34013;
pub const GL_TEXTURE30_ARB: u32 = 34014;
pub const GL_TEXTURE31_ARB: u32 = 34015;
pub const GL_ACTIVE_TEXTURE_ARB: u32 = 34016;
pub const GL_CLIENT_ACTIVE_TEXTURE_ARB: u32 = 34017;
pub const GL_MAX_TEXTURE_UNITS_ARB: u32 = 34018;
pub const __glext_h_: u32 = 1;
pub const GL_GLEXT_VERSION: u32 = 20140521;
pub const GL_VERSION_1_4: u32 = 1;
pub const GL_BLEND_DST_RGB: u32 = 32968;
pub const GL_BLEND_SRC_RGB: u32 = 32969;
pub const GL_BLEND_DST_ALPHA: u32 = 32970;
pub const GL_BLEND_SRC_ALPHA: u32 = 32971;
pub const GL_POINT_FADE_THRESHOLD_SIZE: u32 = 33064;
pub const GL_DEPTH_COMPONENT16: u32 = 33189;
pub const GL_DEPTH_COMPONENT24: u32 = 33190;
pub const GL_DEPTH_COMPONENT32: u32 = 33191;
pub const GL_MIRRORED_REPEAT: u32 = 33648;
pub const GL_MAX_TEXTURE_LOD_BIAS: u32 = 34045;
pub const GL_TEXTURE_LOD_BIAS: u32 = 34049;
pub const GL_INCR_WRAP: u32 = 34055;
pub const GL_DECR_WRAP: u32 = 34056;
pub const GL_TEXTURE_DEPTH_SIZE: u32 = 34890;
pub const GL_TEXTURE_COMPARE_MODE: u32 = 34892;
pub const GL_TEXTURE_COMPARE_FUNC: u32 = 34893;
pub const GL_POINT_SIZE_MIN: u32 = 33062;
pub const GL_POINT_SIZE_MAX: u32 = 33063;
pub const GL_POINT_DISTANCE_ATTENUATION: u32 = 33065;
pub const GL_GENERATE_MIPMAP: u32 = 33169;
pub const GL_GENERATE_MIPMAP_HINT: u32 = 33170;
pub const GL_FOG_COORDINATE_SOURCE: u32 = 33872;
pub const GL_FOG_COORDINATE: u32 = 33873;
pub const GL_FRAGMENT_DEPTH: u32 = 33874;
pub const GL_CURRENT_FOG_COORDINATE: u32 = 33875;
pub const GL_FOG_COORDINATE_ARRAY_TYPE: u32 = 33876;
pub const GL_FOG_COORDINATE_ARRAY_STRIDE: u32 = 33877;
pub const GL_FOG_COORDINATE_ARRAY_POINTER: u32 = 33878;
pub const GL_FOG_COORDINATE_ARRAY: u32 = 33879;
pub const GL_COLOR_SUM: u32 = 33880;
pub const GL_CURRENT_SECONDARY_COLOR: u32 = 33881;
pub const GL_SECONDARY_COLOR_ARRAY_SIZE: u32 = 33882;
pub const GL_SECONDARY_COLOR_ARRAY_TYPE: u32 = 33883;
pub const GL_SECONDARY_COLOR_ARRAY_STRIDE: u32 = 33884;
pub const GL_SECONDARY_COLOR_ARRAY_POINTER: u32 = 33885;
pub const GL_SECONDARY_COLOR_ARRAY: u32 = 33886;
pub const GL_TEXTURE_FILTER_CONTROL: u32 = 34048;
pub const GL_DEPTH_TEXTURE_MODE: u32 = 34891;
pub const GL_COMPARE_R_TO_TEXTURE: u32 = 34894;
pub const GL_VERSION_1_5: u32 = 1;
pub const GL_BUFFER_SIZE: u32 = 34660;
pub const GL_BUFFER_USAGE: u32 = 34661;
pub const GL_QUERY_COUNTER_BITS: u32 = 34916;
pub const GL_CURRENT_QUERY: u32 = 34917;
pub const GL_QUERY_RESULT: u32 = 34918;
pub const GL_QUERY_RESULT_AVAILABLE: u32 = 34919;
pub const GL_ARRAY_BUFFER: u32 = 34962;
pub const GL_ELEMENT_ARRAY_BUFFER: u32 = 34963;
pub const GL_ARRAY_BUFFER_BINDING: u32 = 34964;
pub const GL_ELEMENT_ARRAY_BUFFER_BINDING: u32 = 34965;
pub const GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: u32 = 34975;
pub const GL_READ_ONLY: u32 = 35000;
pub const GL_WRITE_ONLY: u32 = 35001;
pub const GL_READ_WRITE: u32 = 35002;
pub const GL_BUFFER_ACCESS: u32 = 35003;
pub const GL_BUFFER_MAPPED: u32 = 35004;
pub const GL_BUFFER_MAP_POINTER: u32 = 35005;
pub const GL_STREAM_DRAW: u32 = 35040;
pub const GL_STREAM_READ: u32 = 35041;
pub const GL_STREAM_COPY: u32 = 35042;
pub const GL_STATIC_DRAW: u32 = 35044;
pub const GL_STATIC_READ: u32 = 35045;
pub const GL_STATIC_COPY: u32 = 35046;
pub const GL_DYNAMIC_DRAW: u32 = 35048;
pub const GL_DYNAMIC_READ: u32 = 35049;
pub const GL_DYNAMIC_COPY: u32 = 35050;
pub const GL_SAMPLES_PASSED: u32 = 35092;
pub const GL_SRC1_ALPHA: u32 = 34185;
pub const GL_VERTEX_ARRAY_BUFFER_BINDING: u32 = 34966;
pub const GL_NORMAL_ARRAY_BUFFER_BINDING: u32 = 34967;
pub const GL_COLOR_ARRAY_BUFFER_BINDING: u32 = 34968;
pub const GL_INDEX_ARRAY_BUFFER_BINDING: u32 = 34969;
pub const GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING: u32 = 34970;
pub const GL_EDGE_FLAG_ARRAY_BUFFER_BINDING: u32 = 34971;
pub const GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING: u32 = 34972;
pub const GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING: u32 = 34973;
pub const GL_WEIGHT_ARRAY_BUFFER_BINDING: u32 = 34974;
pub const GL_FOG_COORD_SRC: u32 = 33872;
pub const GL_FOG_COORD: u32 = 33873;
pub const GL_CURRENT_FOG_COORD: u32 = 33875;
pub const GL_FOG_COORD_ARRAY_TYPE: u32 = 33876;
pub const GL_FOG_COORD_ARRAY_STRIDE: u32 = 33877;
pub const GL_FOG_COORD_ARRAY_POINTER: u32 = 33878;
pub const GL_FOG_COORD_ARRAY: u32 = 33879;
pub const GL_FOG_COORD_ARRAY_BUFFER_BINDING: u32 = 34973;
pub const GL_SRC0_RGB: u32 = 34176;
pub const GL_SRC1_RGB: u32 = 34177;
pub const GL_SRC2_RGB: u32 = 34178;
pub const GL_SRC0_ALPHA: u32 = 34184;
pub const GL_SRC2_ALPHA: u32 = 34186;
pub const GL_VERSION_2_0: u32 = 1;
pub const GL_BLEND_EQUATION_RGB: u32 = 32777;
pub const GL_VERTEX_ATTRIB_ARRAY_ENABLED: u32 = 34338;
pub const GL_VERTEX_ATTRIB_ARRAY_SIZE: u32 = 34339;
pub const GL_VERTEX_ATTRIB_ARRAY_STRIDE: u32 = 34340;
pub const GL_VERTEX_ATTRIB_ARRAY_TYPE: u32 = 34341;
pub const GL_CURRENT_VERTEX_ATTRIB: u32 = 34342;
pub const GL_VERTEX_PROGRAM_POINT_SIZE: u32 = 34370;
pub const GL_VERTEX_ATTRIB_ARRAY_POINTER: u32 = 34373;
pub const GL_STENCIL_BACK_FUNC: u32 = 34816;
pub const GL_STENCIL_BACK_FAIL: u32 = 34817;
pub const GL_STENCIL_BACK_PASS_DEPTH_FAIL: u32 = 34818;
pub const GL_STENCIL_BACK_PASS_DEPTH_PASS: u32 = 34819;
pub const GL_MAX_DRAW_BUFFERS: u32 = 34852;
pub const GL_DRAW_BUFFER0: u32 = 34853;
pub const GL_DRAW_BUFFER1: u32 = 34854;
pub const GL_DRAW_BUFFER2: u32 = 34855;
pub const GL_DRAW_BUFFER3: u32 = 34856;
pub const GL_DRAW_BUFFER4: u32 = 34857;
pub const GL_DRAW_BUFFER5: u32 = 34858;
pub const GL_DRAW_BUFFER6: u32 = 34859;
pub const GL_DRAW_BUFFER7: u32 = 34860;
pub const GL_DRAW_BUFFER8: u32 = 34861;
pub const GL_DRAW_BUFFER9: u32 = 34862;
pub const GL_DRAW_BUFFER10: u32 = 34863;
pub const GL_DRAW_BUFFER11: u32 = 34864;
pub const GL_DRAW_BUFFER12: u32 = 34865;
pub const GL_DRAW_BUFFER13: u32 = 34866;
pub const GL_DRAW_BUFFER14: u32 = 34867;
pub const GL_DRAW_BUFFER15: u32 = 34868;
pub const GL_BLEND_EQUATION_ALPHA: u32 = 34877;
pub const GL_MAX_VERTEX_ATTRIBS: u32 = 34921;
pub const GL_VERTEX_ATTRIB_ARRAY_NORMALIZED: u32 = 34922;
pub const GL_MAX_TEXTURE_IMAGE_UNITS: u32 = 34930;
pub const GL_FRAGMENT_SHADER: u32 = 35632;
pub const GL_VERTEX_SHADER: u32 = 35633;
pub const GL_MAX_FRAGMENT_UNIFORM_COMPONENTS: u32 = 35657;
pub const GL_MAX_VERTEX_UNIFORM_COMPONENTS: u32 = 35658;
pub const GL_MAX_VARYING_FLOATS: u32 = 35659;
pub const GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS: u32 = 35660;
pub const GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS: u32 = 35661;
pub const GL_SHADER_TYPE: u32 = 35663;
pub const GL_FLOAT_VEC2: u32 = 35664;
pub const GL_FLOAT_VEC3: u32 = 35665;
pub const GL_FLOAT_VEC4: u32 = 35666;
pub const GL_INT_VEC2: u32 = 35667;
pub const GL_INT_VEC3: u32 = 35668;
pub const GL_INT_VEC4: u32 = 35669;
pub const GL_BOOL: u32 = 35670;
pub const GL_BOOL_VEC2: u32 = 35671;
pub const GL_BOOL_VEC3: u32 = 35672;
pub const GL_BOOL_VEC4: u32 = 35673;
pub const GL_FLOAT_MAT2: u32 = 35674;
pub const GL_FLOAT_MAT3: u32 = 35675;
pub const GL_FLOAT_MAT4: u32 = 35676;
pub const GL_SAMPLER_1D: u32 = 35677;
pub const GL_SAMPLER_2D: u32 = 35678;
pub const GL_SAMPLER_3D: u32 = 35679;
pub const GL_SAMPLER_CUBE: u32 = 35680;
pub const GL_SAMPLER_1D_SHADOW: u32 = 35681;
pub const GL_SAMPLER_2D_SHADOW: u32 = 35682;
pub const GL_DELETE_STATUS: u32 = 35712;
pub const GL_COMPILE_STATUS: u32 = 35713;
pub const GL_LINK_STATUS: u32 = 35714;
pub const GL_VALIDATE_STATUS: u32 = 35715;
pub const GL_INFO_LOG_LENGTH: u32 = 35716;
pub const GL_ATTACHED_SHADERS: u32 = 35717;
pub const GL_ACTIVE_UNIFORMS: u32 = 35718;
pub const GL_ACTIVE_UNIFORM_MAX_LENGTH: u32 = 35719;
pub const GL_SHADER_SOURCE_LENGTH: u32 = 35720;
pub const GL_ACTIVE_ATTRIBUTES: u32 = 35721;
pub const GL_ACTIVE_ATTRIBUTE_MAX_LENGTH: u32 = 35722;
pub const GL_FRAGMENT_SHADER_DERIVATIVE_HINT: u32 = 35723;
pub const GL_SHADING_LANGUAGE_VERSION: u32 = 35724;
pub const GL_CURRENT_PROGRAM: u32 = 35725;
pub const GL_POINT_SPRITE_COORD_ORIGIN: u32 = 36000;
pub const GL_LOWER_LEFT: u32 = 36001;
pub const GL_UPPER_LEFT: u32 = 36002;
pub const GL_STENCIL_BACK_REF: u32 = 36003;
pub const GL_STENCIL_BACK_VALUE_MASK: u32 = 36004;
pub const GL_STENCIL_BACK_WRITEMASK: u32 = 36005;
pub const GL_VERTEX_PROGRAM_TWO_SIDE: u32 = 34371;
pub const GL_POINT_SPRITE: u32 = 34913;
pub const GL_COORD_REPLACE: u32 = 34914;
pub const GL_MAX_TEXTURE_COORDS: u32 = 34929;
pub const GL_VERSION_2_1: u32 = 1;
pub const GL_PIXEL_PACK_BUFFER: u32 = 35051;
pub const GL_PIXEL_UNPACK_BUFFER: u32 = 35052;
pub const GL_PIXEL_PACK_BUFFER_BINDING: u32 = 35053;
pub const GL_PIXEL_UNPACK_BUFFER_BINDING: u32 = 35055;
pub const GL_FLOAT_MAT2x3: u32 = 35685;
pub const GL_FLOAT_MAT2x4: u32 = 35686;
pub const GL_FLOAT_MAT3x2: u32 = 35687;
pub const GL_FLOAT_MAT3x4: u32 = 35688;
pub const GL_FLOAT_MAT4x2: u32 = 35689;
pub const GL_FLOAT_MAT4x3: u32 = 35690;
pub const GL_SRGB: u32 = 35904;
pub const GL_SRGB8: u32 = 35905;
pub const GL_SRGB_ALPHA: u32 = 35906;
pub const GL_SRGB8_ALPHA8: u32 = 35907;
pub const GL_COMPRESSED_SRGB: u32 = 35912;
pub const GL_COMPRESSED_SRGB_ALPHA: u32 = 35913;
pub const GL_CURRENT_RASTER_SECONDARY_COLOR: u32 = 33887;
pub const GL_SLUMINANCE_ALPHA: u32 = 35908;
pub const GL_SLUMINANCE8_ALPHA8: u32 = 35909;
pub const GL_SLUMINANCE: u32 = 35910;
pub const GL_SLUMINANCE8: u32 = 35911;
pub const GL_COMPRESSED_SLUMINANCE: u32 = 35914;
pub const GL_COMPRESSED_SLUMINANCE_ALPHA: u32 = 35915;
pub const GL_VERSION_3_0: u32 = 1;
pub const GL_COMPARE_REF_TO_TEXTURE: u32 = 34894;
pub const GL_CLIP_DISTANCE0: u32 = 12288;
pub const GL_CLIP_DISTANCE1: u32 = 12289;
pub const GL_CLIP_DISTANCE2: u32 = 12290;
pub const GL_CLIP_DISTANCE3: u32 = 12291;
pub const GL_CLIP_DISTANCE4: u32 = 12292;
pub const GL_CLIP_DISTANCE5: u32 = 12293;
pub const GL_CLIP_DISTANCE6: u32 = 12294;
pub const GL_CLIP_DISTANCE7: u32 = 12295;
pub const GL_MAX_CLIP_DISTANCES: u32 = 3378;
pub const GL_MAJOR_VERSION: u32 = 33307;
pub const GL_MINOR_VERSION: u32 = 33308;
pub const GL_NUM_EXTENSIONS: u32 = 33309;
pub const GL_CONTEXT_FLAGS: u32 = 33310;
pub const GL_COMPRESSED_RED: u32 = 33317;
pub const GL_COMPRESSED_RG: u32 = 33318;
pub const GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT: u32 = 1;
pub const GL_RGBA32F: u32 = 34836;
pub const GL_RGB32F: u32 = 34837;
pub const GL_RGBA16F: u32 = 34842;
pub const GL_RGB16F: u32 = 34843;
pub const GL_VERTEX_ATTRIB_ARRAY_INTEGER: u32 = 35069;
pub const GL_MAX_ARRAY_TEXTURE_LAYERS: u32 = 35071;
pub const GL_MIN_PROGRAM_TEXEL_OFFSET: u32 = 35076;
pub const GL_MAX_PROGRAM_TEXEL_OFFSET: u32 = 35077;
pub const GL_CLAMP_READ_COLOR: u32 = 35100;
pub const GL_FIXED_ONLY: u32 = 35101;
pub const GL_MAX_VARYING_COMPONENTS: u32 = 35659;
pub const GL_TEXTURE_1D_ARRAY: u32 = 35864;
pub const GL_PROXY_TEXTURE_1D_ARRAY: u32 = 35865;
pub const GL_TEXTURE_2D_ARRAY: u32 = 35866;
pub const GL_PROXY_TEXTURE_2D_ARRAY: u32 = 35867;
pub const GL_TEXTURE_BINDING_1D_ARRAY: u32 = 35868;
pub const GL_TEXTURE_BINDING_2D_ARRAY: u32 = 35869;
pub const GL_R11F_G11F_B10F: u32 = 35898;
pub const GL_UNSIGNED_INT_10F_11F_11F_REV: u32 = 35899;
pub const GL_RGB9_E5: u32 = 35901;
pub const GL_UNSIGNED_INT_5_9_9_9_REV: u32 = 35902;
pub const GL_TEXTURE_SHARED_SIZE: u32 = 35903;
pub const GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH: u32 = 35958;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_MODE: u32 = 35967;
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: u32 = 35968;
pub const GL_TRANSFORM_FEEDBACK_VARYINGS: u32 = 35971;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_START: u32 = 35972;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_SIZE: u32 = 35973;
pub const GL_PRIMITIVES_GENERATED: u32 = 35975;
pub const GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: u32 = 35976;
pub const GL_RASTERIZER_DISCARD: u32 = 35977;
pub const GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: u32 = 35978;
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: u32 = 35979;
pub const GL_INTERLEAVED_ATTRIBS: u32 = 35980;
pub const GL_SEPARATE_ATTRIBS: u32 = 35981;
pub const GL_TRANSFORM_FEEDBACK_BUFFER: u32 = 35982;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_BINDING: u32 = 35983;
pub const GL_RGBA32UI: u32 = 36208;
pub const GL_RGB32UI: u32 = 36209;
pub const GL_RGBA16UI: u32 = 36214;
pub const GL_RGB16UI: u32 = 36215;
pub const GL_RGBA8UI: u32 = 36220;
pub const GL_RGB8UI: u32 = 36221;
pub const GL_RGBA32I: u32 = 36226;
pub const GL_RGB32I: u32 = 36227;
pub const GL_RGBA16I: u32 = 36232;
pub const GL_RGB16I: u32 = 36233;
pub const GL_RGBA8I: u32 = 36238;
pub const GL_RGB8I: u32 = 36239;
pub const GL_RED_INTEGER: u32 = 36244;
pub const GL_GREEN_INTEGER: u32 = 36245;
pub const GL_BLUE_INTEGER: u32 = 36246;
pub const GL_RGB_INTEGER: u32 = 36248;
pub const GL_RGBA_INTEGER: u32 = 36249;
pub const GL_BGR_INTEGER: u32 = 36250;
pub const GL_BGRA_INTEGER: u32 = 36251;
pub const GL_SAMPLER_1D_ARRAY: u32 = 36288;
pub const GL_SAMPLER_2D_ARRAY: u32 = 36289;
pub const GL_SAMPLER_1D_ARRAY_SHADOW: u32 = 36291;
pub const GL_SAMPLER_2D_ARRAY_SHADOW: u32 = 36292;
pub const GL_SAMPLER_CUBE_SHADOW: u32 = 36293;
pub const GL_UNSIGNED_INT_VEC2: u32 = 36294;
pub const GL_UNSIGNED_INT_VEC3: u32 = 36295;
pub const GL_UNSIGNED_INT_VEC4: u32 = 36296;
pub const GL_INT_SAMPLER_1D: u32 = 36297;
pub const GL_INT_SAMPLER_2D: u32 = 36298;
pub const GL_INT_SAMPLER_3D: u32 = 36299;
pub const GL_INT_SAMPLER_CUBE: u32 = 36300;
pub const GL_INT_SAMPLER_1D_ARRAY: u32 = 36302;
pub const GL_INT_SAMPLER_2D_ARRAY: u32 = 36303;
pub const GL_UNSIGNED_INT_SAMPLER_1D: u32 = 36305;
pub const GL_UNSIGNED_INT_SAMPLER_2D: u32 = 36306;
pub const GL_UNSIGNED_INT_SAMPLER_3D: u32 = 36307;
pub const GL_UNSIGNED_INT_SAMPLER_CUBE: u32 = 36308;
pub const GL_UNSIGNED_INT_SAMPLER_1D_ARRAY: u32 = 36310;
pub const GL_UNSIGNED_INT_SAMPLER_2D_ARRAY: u32 = 36311;
pub const GL_QUERY_WAIT: u32 = 36371;
pub const GL_QUERY_NO_WAIT: u32 = 36372;
pub const GL_QUERY_BY_REGION_WAIT: u32 = 36373;
pub const GL_QUERY_BY_REGION_NO_WAIT: u32 = 36374;
pub const GL_BUFFER_ACCESS_FLAGS: u32 = 37151;
pub const GL_BUFFER_MAP_LENGTH: u32 = 37152;
pub const GL_BUFFER_MAP_OFFSET: u32 = 37153;
pub const GL_DEPTH_COMPONENT32F: u32 = 36012;
pub const GL_DEPTH32F_STENCIL8: u32 = 36013;
pub const GL_FLOAT_32_UNSIGNED_INT_24_8_REV: u32 = 36269;
pub const GL_INVALID_FRAMEBUFFER_OPERATION: u32 = 1286;
pub const GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: u32 = 33296;
pub const GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: u32 = 33297;
pub const GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE: u32 = 33298;
pub const GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: u32 = 33299;
pub const GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: u32 = 33300;
pub const GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: u32 = 33301;
pub const GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: u32 = 33302;
pub const GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: u32 = 33303;
pub const GL_FRAMEBUFFER_DEFAULT: u32 = 33304;
pub const GL_FRAMEBUFFER_UNDEFINED: u32 = 33305;
pub const GL_DEPTH_STENCIL_ATTACHMENT: u32 = 33306;
pub const GL_MAX_RENDERBUFFER_SIZE: u32 = 34024;
pub const GL_DEPTH_STENCIL: u32 = 34041;
pub const GL_UNSIGNED_INT_24_8: u32 = 34042;
pub const GL_DEPTH24_STENCIL8: u32 = 35056;
pub const GL_TEXTURE_STENCIL_SIZE: u32 = 35057;
pub const GL_TEXTURE_RED_TYPE: u32 = 35856;
pub const GL_TEXTURE_GREEN_TYPE: u32 = 35857;
pub const GL_TEXTURE_BLUE_TYPE: u32 = 35858;
pub const GL_TEXTURE_ALPHA_TYPE: u32 = 35859;
pub const GL_TEXTURE_DEPTH_TYPE: u32 = 35862;
pub const GL_UNSIGNED_NORMALIZED: u32 = 35863;
pub const GL_FRAMEBUFFER_BINDING: u32 = 36006;
pub const GL_DRAW_FRAMEBUFFER_BINDING: u32 = 36006;
pub const GL_RENDERBUFFER_BINDING: u32 = 36007;
pub const GL_READ_FRAMEBUFFER: u32 = 36008;
pub const GL_DRAW_FRAMEBUFFER: u32 = 36009;
pub const GL_READ_FRAMEBUFFER_BINDING: u32 = 36010;
pub const GL_RENDERBUFFER_SAMPLES: u32 = 36011;
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: u32 = 36048;
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: u32 = 36049;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: u32 = 36050;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: u32 = 36051;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: u32 = 36052;
pub const GL_FRAMEBUFFER_COMPLETE: u32 = 36053;
pub const GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT: u32 = 36054;
pub const GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: u32 = 36055;
pub const GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER: u32 = 36059;
pub const GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER: u32 = 36060;
pub const GL_FRAMEBUFFER_UNSUPPORTED: u32 = 36061;
pub const GL_MAX_COLOR_ATTACHMENTS: u32 = 36063;
pub const GL_COLOR_ATTACHMENT0: u32 = 36064;
pub const GL_COLOR_ATTACHMENT1: u32 = 36065;
pub const GL_COLOR_ATTACHMENT2: u32 = 36066;
pub const GL_COLOR_ATTACHMENT3: u32 = 36067;
pub const GL_COLOR_ATTACHMENT4: u32 = 36068;
pub const GL_COLOR_ATTACHMENT5: u32 = 36069;
pub const GL_COLOR_ATTACHMENT6: u32 = 36070;
pub const GL_COLOR_ATTACHMENT7: u32 = 36071;
pub const GL_COLOR_ATTACHMENT8: u32 = 36072;
pub const GL_COLOR_ATTACHMENT9: u32 = 36073;
pub const GL_COLOR_ATTACHMENT10: u32 = 36074;
pub const GL_COLOR_ATTACHMENT11: u32 = 36075;
pub const GL_COLOR_ATTACHMENT12: u32 = 36076;
pub const GL_COLOR_ATTACHMENT13: u32 = 36077;
pub const GL_COLOR_ATTACHMENT14: u32 = 36078;
pub const GL_COLOR_ATTACHMENT15: u32 = 36079;
pub const GL_DEPTH_ATTACHMENT: u32 = 36096;
pub const GL_STENCIL_ATTACHMENT: u32 = 36128;
pub const GL_FRAMEBUFFER: u32 = 36160;
pub const GL_RENDERBUFFER: u32 = 36161;
pub const GL_RENDERBUFFER_WIDTH: u32 = 36162;
pub const GL_RENDERBUFFER_HEIGHT: u32 = 36163;
pub const GL_RENDERBUFFER_INTERNAL_FORMAT: u32 = 36164;
pub const GL_STENCIL_INDEX1: u32 = 36166;
pub const GL_STENCIL_INDEX4: u32 = 36167;
pub const GL_STENCIL_INDEX8: u32 = 36168;
pub const GL_STENCIL_INDEX16: u32 = 36169;
pub const GL_RENDERBUFFER_RED_SIZE: u32 = 36176;
pub const GL_RENDERBUFFER_GREEN_SIZE: u32 = 36177;
pub const GL_RENDERBUFFER_BLUE_SIZE: u32 = 36178;
pub const GL_RENDERBUFFER_ALPHA_SIZE: u32 = 36179;
pub const GL_RENDERBUFFER_DEPTH_SIZE: u32 = 36180;
pub const GL_RENDERBUFFER_STENCIL_SIZE: u32 = 36181;
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: u32 = 36182;
pub const GL_MAX_SAMPLES: u32 = 36183;
pub const GL_INDEX: u32 = 33314;
pub const GL_TEXTURE_LUMINANCE_TYPE: u32 = 35860;
pub const GL_TEXTURE_INTENSITY_TYPE: u32 = 35861;
pub const GL_FRAMEBUFFER_SRGB: u32 = 36281;
pub const GL_HALF_FLOAT: u32 = 5131;
pub const GL_MAP_READ_BIT: u32 = 1;
pub const GL_MAP_WRITE_BIT: u32 = 2;
pub const GL_MAP_INVALIDATE_RANGE_BIT: u32 = 4;
pub const GL_MAP_INVALIDATE_BUFFER_BIT: u32 = 8;
pub const GL_MAP_FLUSH_EXPLICIT_BIT: u32 = 16;
pub const GL_MAP_UNSYNCHRONIZED_BIT: u32 = 32;
pub const GL_COMPRESSED_RED_RGTC1: u32 = 36283;
pub const GL_COMPRESSED_SIGNED_RED_RGTC1: u32 = 36284;
pub const GL_COMPRESSED_RG_RGTC2: u32 = 36285;
pub const GL_COMPRESSED_SIGNED_RG_RGTC2: u32 = 36286;
pub const GL_RG: u32 = 33319;
pub const GL_RG_INTEGER: u32 = 33320;
pub const GL_R8: u32 = 33321;
pub const GL_R16: u32 = 33322;
pub const GL_RG8: u32 = 33323;
pub const GL_RG16: u32 = 33324;
pub const GL_R16F: u32 = 33325;
pub const GL_R32F: u32 = 33326;
pub const GL_RG16F: u32 = 33327;
pub const GL_RG32F: u32 = 33328;
pub const GL_R8I: u32 = 33329;
pub const GL_R8UI: u32 = 33330;
pub const GL_R16I: u32 = 33331;
pub const GL_R16UI: u32 = 33332;
pub const GL_R32I: u32 = 33333;
pub const GL_R32UI: u32 = 33334;
pub const GL_RG8I: u32 = 33335;
pub const GL_RG8UI: u32 = 33336;
pub const GL_RG16I: u32 = 33337;
pub const GL_RG16UI: u32 = 33338;
pub const GL_RG32I: u32 = 33339;
pub const GL_RG32UI: u32 = 33340;
pub const GL_VERTEX_ARRAY_BINDING: u32 = 34229;
pub const GL_CLAMP_VERTEX_COLOR: u32 = 35098;
pub const GL_CLAMP_FRAGMENT_COLOR: u32 = 35099;
pub const GL_ALPHA_INTEGER: u32 = 36247;
pub const GL_VERSION_3_1: u32 = 1;
pub const GL_SAMPLER_2D_RECT: u32 = 35683;
pub const GL_SAMPLER_2D_RECT_SHADOW: u32 = 35684;
pub const GL_SAMPLER_BUFFER: u32 = 36290;
pub const GL_INT_SAMPLER_2D_RECT: u32 = 36301;
pub const GL_INT_SAMPLER_BUFFER: u32 = 36304;
pub const GL_UNSIGNED_INT_SAMPLER_2D_RECT: u32 = 36309;
pub const GL_UNSIGNED_INT_SAMPLER_BUFFER: u32 = 36312;
pub const GL_TEXTURE_BUFFER: u32 = 35882;
pub const GL_MAX_TEXTURE_BUFFER_SIZE: u32 = 35883;
pub const GL_TEXTURE_BINDING_BUFFER: u32 = 35884;
pub const GL_TEXTURE_BUFFER_DATA_STORE_BINDING: u32 = 35885;
pub const GL_TEXTURE_RECTANGLE: u32 = 34037;
pub const GL_TEXTURE_BINDING_RECTANGLE: u32 = 34038;
pub const GL_PROXY_TEXTURE_RECTANGLE: u32 = 34039;
pub const GL_MAX_RECTANGLE_TEXTURE_SIZE: u32 = 34040;
pub const GL_R8_SNORM: u32 = 36756;
pub const GL_RG8_SNORM: u32 = 36757;
pub const GL_RGB8_SNORM: u32 = 36758;
pub const GL_RGBA8_SNORM: u32 = 36759;
pub const GL_R16_SNORM: u32 = 36760;
pub const GL_RG16_SNORM: u32 = 36761;
pub const GL_RGB16_SNORM: u32 = 36762;
pub const GL_RGBA16_SNORM: u32 = 36763;
pub const GL_SIGNED_NORMALIZED: u32 = 36764;
pub const GL_PRIMITIVE_RESTART: u32 = 36765;
pub const GL_PRIMITIVE_RESTART_INDEX: u32 = 36766;
pub const GL_COPY_READ_BUFFER: u32 = 36662;
pub const GL_COPY_WRITE_BUFFER: u32 = 36663;
pub const GL_UNIFORM_BUFFER: u32 = 35345;
pub const GL_UNIFORM_BUFFER_BINDING: u32 = 35368;
pub const GL_UNIFORM_BUFFER_START: u32 = 35369;
pub const GL_UNIFORM_BUFFER_SIZE: u32 = 35370;
pub const GL_MAX_VERTEX_UNIFORM_BLOCKS: u32 = 35371;
pub const GL_MAX_FRAGMENT_UNIFORM_BLOCKS: u32 = 35373;
pub const GL_MAX_COMBINED_UNIFORM_BLOCKS: u32 = 35374;
pub const GL_MAX_UNIFORM_BUFFER_BINDINGS: u32 = 35375;
pub const GL_MAX_UNIFORM_BLOCK_SIZE: u32 = 35376;
pub const GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: u32 = 35377;
pub const GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: u32 = 35379;
pub const GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT: u32 = 35380;
pub const GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH: u32 = 35381;
pub const GL_ACTIVE_UNIFORM_BLOCKS: u32 = 35382;
pub const GL_UNIFORM_TYPE: u32 = 35383;
pub const GL_UNIFORM_SIZE: u32 = 35384;
pub const GL_UNIFORM_NAME_LENGTH: u32 = 35385;
pub const GL_UNIFORM_BLOCK_INDEX: u32 = 35386;
pub const GL_UNIFORM_OFFSET: u32 = 35387;
pub const GL_UNIFORM_ARRAY_STRIDE: u32 = 35388;
pub const GL_UNIFORM_MATRIX_STRIDE: u32 = 35389;
pub const GL_UNIFORM_IS_ROW_MAJOR: u32 = 35390;
pub const GL_UNIFORM_BLOCK_BINDING: u32 = 35391;
pub const GL_UNIFORM_BLOCK_DATA_SIZE: u32 = 35392;
pub const GL_UNIFORM_BLOCK_NAME_LENGTH: u32 = 35393;
pub const GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS: u32 = 35394;
pub const GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: u32 = 35395;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: u32 = 35396;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: u32 = 35398;
pub const GL_INVALID_INDEX: u32 = 4294967295;
pub const GL_VERSION_3_2: u32 = 1;
pub const GL_CONTEXT_CORE_PROFILE_BIT: u32 = 1;
pub const GL_CONTEXT_COMPATIBILITY_PROFILE_BIT: u32 = 2;
pub const GL_LINES_ADJACENCY: u32 = 10;
pub const GL_LINE_STRIP_ADJACENCY: u32 = 11;
pub const GL_TRIANGLES_ADJACENCY: u32 = 12;
pub const GL_TRIANGLE_STRIP_ADJACENCY: u32 = 13;
pub const GL_PROGRAM_POINT_SIZE: u32 = 34370;
pub const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS: u32 = 35881;
pub const GL_FRAMEBUFFER_ATTACHMENT_LAYERED: u32 = 36263;
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS: u32 = 36264;
pub const GL_GEOMETRY_SHADER: u32 = 36313;
pub const GL_GEOMETRY_VERTICES_OUT: u32 = 35094;
pub const GL_GEOMETRY_INPUT_TYPE: u32 = 35095;
pub const GL_GEOMETRY_OUTPUT_TYPE: u32 = 35096;
pub const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS: u32 = 36319;
pub const GL_MAX_GEOMETRY_OUTPUT_VERTICES: u32 = 36320;
pub const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS: u32 = 36321;
pub const GL_MAX_VERTEX_OUTPUT_COMPONENTS: u32 = 37154;
pub const GL_MAX_GEOMETRY_INPUT_COMPONENTS: u32 = 37155;
pub const GL_MAX_GEOMETRY_OUTPUT_COMPONENTS: u32 = 37156;
pub const GL_MAX_FRAGMENT_INPUT_COMPONENTS: u32 = 37157;
pub const GL_CONTEXT_PROFILE_MASK: u32 = 37158;
pub const GL_DEPTH_CLAMP: u32 = 34383;
pub const GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION: u32 = 36428;
pub const GL_FIRST_VERTEX_CONVENTION: u32 = 36429;
pub const GL_LAST_VERTEX_CONVENTION: u32 = 36430;
pub const GL_PROVOKING_VERTEX: u32 = 36431;
pub const GL_TEXTURE_CUBE_MAP_SEAMLESS: u32 = 34895;
pub const GL_MAX_SERVER_WAIT_TIMEOUT: u32 = 37137;
pub const GL_OBJECT_TYPE: u32 = 37138;
pub const GL_SYNC_CONDITION: u32 = 37139;
pub const GL_SYNC_STATUS: u32 = 37140;
pub const GL_SYNC_FLAGS: u32 = 37141;
pub const GL_SYNC_FENCE: u32 = 37142;
pub const GL_SYNC_GPU_COMMANDS_COMPLETE: u32 = 37143;
pub const GL_UNSIGNALED: u32 = 37144;
pub const GL_SIGNALED: u32 = 37145;
pub const GL_ALREADY_SIGNALED: u32 = 37146;
pub const GL_TIMEOUT_EXPIRED: u32 = 37147;
pub const GL_CONDITION_SATISFIED: u32 = 37148;
pub const GL_WAIT_FAILED: u32 = 37149;
pub const GL_TIMEOUT_IGNORED: i32 = -1;
pub const GL_SYNC_FLUSH_COMMANDS_BIT: u32 = 1;
pub const GL_SAMPLE_POSITION: u32 = 36432;
pub const GL_SAMPLE_MASK: u32 = 36433;
pub const GL_SAMPLE_MASK_VALUE: u32 = 36434;
pub const GL_MAX_SAMPLE_MASK_WORDS: u32 = 36441;
pub const GL_TEXTURE_2D_MULTISAMPLE: u32 = 37120;
pub const GL_PROXY_TEXTURE_2D_MULTISAMPLE: u32 = 37121;
pub const GL_TEXTURE_2D_MULTISAMPLE_ARRAY: u32 = 37122;
pub const GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY: u32 = 37123;
pub const GL_TEXTURE_BINDING_2D_MULTISAMPLE: u32 = 37124;
pub const GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY: u32 = 37125;
pub const GL_TEXTURE_SAMPLES: u32 = 37126;
pub const GL_TEXTURE_FIXED_SAMPLE_LOCATIONS: u32 = 37127;
pub const GL_SAMPLER_2D_MULTISAMPLE: u32 = 37128;
pub const GL_INT_SAMPLER_2D_MULTISAMPLE: u32 = 37129;
pub const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE: u32 = 37130;
pub const GL_SAMPLER_2D_MULTISAMPLE_ARRAY: u32 = 37131;
pub const GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY: u32 = 37132;
pub const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY: u32 = 37133;
pub const GL_MAX_COLOR_TEXTURE_SAMPLES: u32 = 37134;
pub const GL_MAX_DEPTH_TEXTURE_SAMPLES: u32 = 37135;
pub const GL_MAX_INTEGER_SAMPLES: u32 = 37136;
pub const GL_VERSION_3_3: u32 = 1;
pub const GL_VERTEX_ATTRIB_ARRAY_DIVISOR: u32 = 35070;
pub const GL_SRC1_COLOR: u32 = 35065;
pub const GL_ONE_MINUS_SRC1_COLOR: u32 = 35066;
pub const GL_ONE_MINUS_SRC1_ALPHA: u32 = 35067;
pub const GL_MAX_DUAL_SOURCE_DRAW_BUFFERS: u32 = 35068;
pub const GL_ANY_SAMPLES_PASSED: u32 = 35887;
pub const GL_SAMPLER_BINDING: u32 = 35097;
pub const GL_RGB10_A2UI: u32 = 36975;
pub const GL_TEXTURE_SWIZZLE_R: u32 = 36418;
pub const GL_TEXTURE_SWIZZLE_G: u32 = 36419;
pub const GL_TEXTURE_SWIZZLE_B: u32 = 36420;
pub const GL_TEXTURE_SWIZZLE_A: u32 = 36421;
pub const GL_TEXTURE_SWIZZLE_RGBA: u32 = 36422;
pub const GL_TIME_ELAPSED: u32 = 35007;
pub const GL_TIMESTAMP: u32 = 36392;
pub const GL_INT_2_10_10_10_REV: u32 = 36255;
pub const GL_VERSION_4_0: u32 = 1;
pub const GL_SAMPLE_SHADING: u32 = 35894;
pub const GL_MIN_SAMPLE_SHADING_VALUE: u32 = 35895;
pub const GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET: u32 = 36446;
pub const GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET: u32 = 36447;
pub const GL_TEXTURE_CUBE_MAP_ARRAY: u32 = 36873;
pub const GL_TEXTURE_BINDING_CUBE_MAP_ARRAY: u32 = 36874;
pub const GL_PROXY_TEXTURE_CUBE_MAP_ARRAY: u32 = 36875;
pub const GL_SAMPLER_CUBE_MAP_ARRAY: u32 = 36876;
pub const GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW: u32 = 36877;
pub const GL_INT_SAMPLER_CUBE_MAP_ARRAY: u32 = 36878;
pub const GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY: u32 = 36879;
pub const GL_DRAW_INDIRECT_BUFFER: u32 = 36671;
pub const GL_DRAW_INDIRECT_BUFFER_BINDING: u32 = 36675;
pub const GL_GEOMETRY_SHADER_INVOCATIONS: u32 = 34943;
pub const GL_MAX_GEOMETRY_SHADER_INVOCATIONS: u32 = 36442;
pub const GL_MIN_FRAGMENT_INTERPOLATION_OFFSET: u32 = 36443;
pub const GL_MAX_FRAGMENT_INTERPOLATION_OFFSET: u32 = 36444;
pub const GL_FRAGMENT_INTERPOLATION_OFFSET_BITS: u32 = 36445;
pub const GL_MAX_VERTEX_STREAMS: u32 = 36465;
pub const GL_DOUBLE_VEC2: u32 = 36860;
pub const GL_DOUBLE_VEC3: u32 = 36861;
pub const GL_DOUBLE_VEC4: u32 = 36862;
pub const GL_DOUBLE_MAT2: u32 = 36678;
pub const GL_DOUBLE_MAT3: u32 = 36679;
pub const GL_DOUBLE_MAT4: u32 = 36680;
pub const GL_DOUBLE_MAT2x3: u32 = 36681;
pub const GL_DOUBLE_MAT2x4: u32 = 36682;
pub const GL_DOUBLE_MAT3x2: u32 = 36683;
pub const GL_DOUBLE_MAT3x4: u32 = 36684;
pub const GL_DOUBLE_MAT4x2: u32 = 36685;
pub const GL_DOUBLE_MAT4x3: u32 = 36686;
pub const GL_ACTIVE_SUBROUTINES: u32 = 36325;
pub const GL_ACTIVE_SUBROUTINE_UNIFORMS: u32 = 36326;
pub const GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS: u32 = 36423;
pub const GL_ACTIVE_SUBROUTINE_MAX_LENGTH: u32 = 36424;
pub const GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH: u32 = 36425;
pub const GL_MAX_SUBROUTINES: u32 = 36327;
pub const GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS: u32 = 36328;
pub const GL_NUM_COMPATIBLE_SUBROUTINES: u32 = 36426;
pub const GL_COMPATIBLE_SUBROUTINES: u32 = 36427;
pub const GL_PATCHES: u32 = 14;
pub const GL_PATCH_VERTICES: u32 = 36466;
pub const GL_PATCH_DEFAULT_INNER_LEVEL: u32 = 36467;
pub const GL_PATCH_DEFAULT_OUTER_LEVEL: u32 = 36468;
pub const GL_TESS_CONTROL_OUTPUT_VERTICES: u32 = 36469;
pub const GL_TESS_GEN_MODE: u32 = 36470;
pub const GL_TESS_GEN_SPACING: u32 = 36471;
pub const GL_TESS_GEN_VERTEX_ORDER: u32 = 36472;
pub const GL_TESS_GEN_POINT_MODE: u32 = 36473;
pub const GL_ISOLINES: u32 = 36474;
pub const GL_FRACTIONAL_ODD: u32 = 36475;
pub const GL_FRACTIONAL_EVEN: u32 = 36476;
pub const GL_MAX_PATCH_VERTICES: u32 = 36477;
pub const GL_MAX_TESS_GEN_LEVEL: u32 = 36478;
pub const GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS: u32 = 36479;
pub const GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS: u32 = 36480;
pub const GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS: u32 = 36481;
pub const GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS: u32 = 36482;
pub const GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS: u32 = 36483;
pub const GL_MAX_TESS_PATCH_COMPONENTS: u32 = 36484;
pub const GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS: u32 = 36485;
pub const GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS: u32 = 36486;
pub const GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS: u32 = 36489;
pub const GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS: u32 = 36490;
pub const GL_MAX_TESS_CONTROL_INPUT_COMPONENTS: u32 = 34924;
pub const GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS: u32 = 34925;
pub const GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS: u32 = 36382;
pub const GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS: u32 = 36383;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER: u32 = 34032;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER: u32 = 34033;
pub const GL_TESS_EVALUATION_SHADER: u32 = 36487;
pub const GL_TESS_CONTROL_SHADER: u32 = 36488;
pub const GL_TRANSFORM_FEEDBACK: u32 = 36386;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED: u32 = 36387;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE: u32 = 36388;
pub const GL_TRANSFORM_FEEDBACK_BINDING: u32 = 36389;
pub const GL_MAX_TRANSFORM_FEEDBACK_BUFFERS: u32 = 36464;
pub const GL_VERSION_4_1: u32 = 1;
pub const GL_FIXED: u32 = 5132;
pub const GL_IMPLEMENTATION_COLOR_READ_TYPE: u32 = 35738;
pub const GL_IMPLEMENTATION_COLOR_READ_FORMAT: u32 = 35739;
pub const GL_LOW_FLOAT: u32 = 36336;
pub const GL_MEDIUM_FLOAT: u32 = 36337;
pub const GL_HIGH_FLOAT: u32 = 36338;
pub const GL_LOW_INT: u32 = 36339;
pub const GL_MEDIUM_INT: u32 = 36340;
pub const GL_HIGH_INT: u32 = 36341;
pub const GL_SHADER_COMPILER: u32 = 36346;
pub const GL_SHADER_BINARY_FORMATS: u32 = 36344;
pub const GL_NUM_SHADER_BINARY_FORMATS: u32 = 36345;
pub const GL_MAX_VERTEX_UNIFORM_VECTORS: u32 = 36347;
pub const GL_MAX_VARYING_VECTORS: u32 = 36348;
pub const GL_MAX_FRAGMENT_UNIFORM_VECTORS: u32 = 36349;
pub const GL_RGB565: u32 = 36194;
pub const GL_PROGRAM_BINARY_RETRIEVABLE_HINT: u32 = 33367;
pub const GL_PROGRAM_BINARY_LENGTH: u32 = 34625;
pub const GL_NUM_PROGRAM_BINARY_FORMATS: u32 = 34814;
pub const GL_PROGRAM_BINARY_FORMATS: u32 = 34815;
pub const GL_VERTEX_SHADER_BIT: u32 = 1;
pub const GL_FRAGMENT_SHADER_BIT: u32 = 2;
pub const GL_GEOMETRY_SHADER_BIT: u32 = 4;
pub const GL_TESS_CONTROL_SHADER_BIT: u32 = 8;
pub const GL_TESS_EVALUATION_SHADER_BIT: u32 = 16;
pub const GL_ALL_SHADER_BITS: u32 = 4294967295;
pub const GL_PROGRAM_SEPARABLE: u32 = 33368;
pub const GL_ACTIVE_PROGRAM: u32 = 33369;
pub const GL_PROGRAM_PIPELINE_BINDING: u32 = 33370;
pub const GL_MAX_VIEWPORTS: u32 = 33371;
pub const GL_VIEWPORT_SUBPIXEL_BITS: u32 = 33372;
pub const GL_VIEWPORT_BOUNDS_RANGE: u32 = 33373;
pub const GL_LAYER_PROVOKING_VERTEX: u32 = 33374;
pub const GL_VIEWPORT_INDEX_PROVOKING_VERTEX: u32 = 33375;
pub const GL_UNDEFINED_VERTEX: u32 = 33376;
pub const GL_VERSION_4_2: u32 = 1;
pub const GL_UNPACK_COMPRESSED_BLOCK_WIDTH: u32 = 37159;
pub const GL_UNPACK_COMPRESSED_BLOCK_HEIGHT: u32 = 37160;
pub const GL_UNPACK_COMPRESSED_BLOCK_DEPTH: u32 = 37161;
pub const GL_UNPACK_COMPRESSED_BLOCK_SIZE: u32 = 37162;
pub const GL_PACK_COMPRESSED_BLOCK_WIDTH: u32 = 37163;
pub const GL_PACK_COMPRESSED_BLOCK_HEIGHT: u32 = 37164;
pub const GL_PACK_COMPRESSED_BLOCK_DEPTH: u32 = 37165;
pub const GL_PACK_COMPRESSED_BLOCK_SIZE: u32 = 37166;
pub const GL_NUM_SAMPLE_COUNTS: u32 = 37760;
pub const GL_MIN_MAP_BUFFER_ALIGNMENT: u32 = 37052;
pub const GL_ATOMIC_COUNTER_BUFFER: u32 = 37568;
pub const GL_ATOMIC_COUNTER_BUFFER_BINDING: u32 = 37569;
pub const GL_ATOMIC_COUNTER_BUFFER_START: u32 = 37570;
pub const GL_ATOMIC_COUNTER_BUFFER_SIZE: u32 = 37571;
pub const GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE: u32 = 37572;
pub const GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS: u32 = 37573;
pub const GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES: u32 = 37574;
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER: u32 = 37575;
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER: u32 = 37576;
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER: u32 = 37577;
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER: u32 = 37578;
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER: u32 = 37579;
pub const GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS: u32 = 37580;
pub const GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS: u32 = 37581;
pub const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS: u32 = 37582;
pub const GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS: u32 = 37583;
pub const GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS: u32 = 37584;
pub const GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS: u32 = 37585;
pub const GL_MAX_VERTEX_ATOMIC_COUNTERS: u32 = 37586;
pub const GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS: u32 = 37587;
pub const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS: u32 = 37588;
pub const GL_MAX_GEOMETRY_ATOMIC_COUNTERS: u32 = 37589;
pub const GL_MAX_FRAGMENT_ATOMIC_COUNTERS: u32 = 37590;
pub const GL_MAX_COMBINED_ATOMIC_COUNTERS: u32 = 37591;
pub const GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE: u32 = 37592;
pub const GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS: u32 = 37596;
pub const GL_ACTIVE_ATOMIC_COUNTER_BUFFERS: u32 = 37593;
pub const GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX: u32 = 37594;
pub const GL_UNSIGNED_INT_ATOMIC_COUNTER: u32 = 37595;
pub const GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT: u32 = 1;
pub const GL_ELEMENT_ARRAY_BARRIER_BIT: u32 = 2;
pub const GL_UNIFORM_BARRIER_BIT: u32 = 4;
pub const GL_TEXTURE_FETCH_BARRIER_BIT: u32 = 8;
pub const GL_SHADER_IMAGE_ACCESS_BARRIER_BIT: u32 = 32;
pub const GL_COMMAND_BARRIER_BIT: u32 = 64;
pub const GL_PIXEL_BUFFER_BARRIER_BIT: u32 = 128;
pub const GL_TEXTURE_UPDATE_BARRIER_BIT: u32 = 256;
pub const GL_BUFFER_UPDATE_BARRIER_BIT: u32 = 512;
pub const GL_FRAMEBUFFER_BARRIER_BIT: u32 = 1024;
pub const GL_TRANSFORM_FEEDBACK_BARRIER_BIT: u32 = 2048;
pub const GL_ATOMIC_COUNTER_BARRIER_BIT: u32 = 4096;
pub const GL_ALL_BARRIER_BITS: u32 = 4294967295;
pub const GL_MAX_IMAGE_UNITS: u32 = 36664;
pub const GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS: u32 = 36665;
pub const GL_IMAGE_BINDING_NAME: u32 = 36666;
pub const GL_IMAGE_BINDING_LEVEL: u32 = 36667;
pub const GL_IMAGE_BINDING_LAYERED: u32 = 36668;
pub const GL_IMAGE_BINDING_LAYER: u32 = 36669;
pub const GL_IMAGE_BINDING_ACCESS: u32 = 36670;
pub const GL_IMAGE_1D: u32 = 36940;
pub const GL_IMAGE_2D: u32 = 36941;
pub const GL_IMAGE_3D: u32 = 36942;
pub const GL_IMAGE_2D_RECT: u32 = 36943;
pub const GL_IMAGE_CUBE: u32 = 36944;
pub const GL_IMAGE_BUFFER: u32 = 36945;
pub const GL_IMAGE_1D_ARRAY: u32 = 36946;
pub const GL_IMAGE_2D_ARRAY: u32 = 36947;
pub const GL_IMAGE_CUBE_MAP_ARRAY: u32 = 36948;
pub const GL_IMAGE_2D_MULTISAMPLE: u32 = 36949;
pub const GL_IMAGE_2D_MULTISAMPLE_ARRAY: u32 = 36950;
pub const GL_INT_IMAGE_1D: u32 = 36951;
pub const GL_INT_IMAGE_2D: u32 = 36952;
pub const GL_INT_IMAGE_3D: u32 = 36953;
pub const GL_INT_IMAGE_2D_RECT: u32 = 36954;
pub const GL_INT_IMAGE_CUBE: u32 = 36955;
pub const GL_INT_IMAGE_BUFFER: u32 = 36956;
pub const GL_INT_IMAGE_1D_ARRAY: u32 = 36957;
pub const GL_INT_IMAGE_2D_ARRAY: u32 = 36958;
pub const GL_INT_IMAGE_CUBE_MAP_ARRAY: u32 = 36959;
pub const GL_INT_IMAGE_2D_MULTISAMPLE: u32 = 36960;
pub const GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY: u32 = 36961;
pub const GL_UNSIGNED_INT_IMAGE_1D: u32 = 36962;
pub const GL_UNSIGNED_INT_IMAGE_2D: u32 = 36963;
pub const GL_UNSIGNED_INT_IMAGE_3D: u32 = 36964;
pub const GL_UNSIGNED_INT_IMAGE_2D_RECT: u32 = 36965;
pub const GL_UNSIGNED_INT_IMAGE_CUBE: u32 = 36966;
pub const GL_UNSIGNED_INT_IMAGE_BUFFER: u32 = 36967;
pub const GL_UNSIGNED_INT_IMAGE_1D_ARRAY: u32 = 36968;
pub const GL_UNSIGNED_INT_IMAGE_2D_ARRAY: u32 = 36969;
pub const GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY: u32 = 36970;
pub const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE: u32 = 36971;
pub const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY: u32 = 36972;
pub const GL_MAX_IMAGE_SAMPLES: u32 = 36973;
pub const GL_IMAGE_BINDING_FORMAT: u32 = 36974;
pub const GL_IMAGE_FORMAT_COMPATIBILITY_TYPE: u32 = 37063;
pub const GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE: u32 = 37064;
pub const GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS: u32 = 37065;
pub const GL_MAX_VERTEX_IMAGE_UNIFORMS: u32 = 37066;
pub const GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS: u32 = 37067;
pub const GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS: u32 = 37068;
pub const GL_MAX_GEOMETRY_IMAGE_UNIFORMS: u32 = 37069;
pub const GL_MAX_FRAGMENT_IMAGE_UNIFORMS: u32 = 37070;
pub const GL_MAX_COMBINED_IMAGE_UNIFORMS: u32 = 37071;
pub const GL_COMPRESSED_RGBA_BPTC_UNORM: u32 = 36492;
pub const GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM: u32 = 36493;
pub const GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT: u32 = 36494;
pub const GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT: u32 = 36495;
pub const GL_TEXTURE_IMMUTABLE_FORMAT: u32 = 37167;
pub const GL_VERSION_4_3: u32 = 1;
pub const GL_NUM_SHADING_LANGUAGE_VERSIONS: u32 = 33513;
pub const GL_VERTEX_ATTRIB_ARRAY_LONG: u32 = 34638;
pub const GL_COMPRESSED_RGB8_ETC2: u32 = 37492;
pub const GL_COMPRESSED_SRGB8_ETC2: u32 = 37493;
pub const GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2: u32 = 37494;
pub const GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2: u32 = 37495;
pub const GL_COMPRESSED_RGBA8_ETC2_EAC: u32 = 37496;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC: u32 = 37497;
pub const GL_COMPRESSED_R11_EAC: u32 = 37488;
pub const GL_COMPRESSED_SIGNED_R11_EAC: u32 = 37489;
pub const GL_COMPRESSED_RG11_EAC: u32 = 37490;
pub const GL_COMPRESSED_SIGNED_RG11_EAC: u32 = 37491;
pub const GL_PRIMITIVE_RESTART_FIXED_INDEX: u32 = 36201;
pub const GL_ANY_SAMPLES_PASSED_CONSERVATIVE: u32 = 36202;
pub const GL_MAX_ELEMENT_INDEX: u32 = 36203;
pub const GL_COMPUTE_SHADER: u32 = 37305;
pub const GL_MAX_COMPUTE_UNIFORM_BLOCKS: u32 = 37307;
pub const GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS: u32 = 37308;
pub const GL_MAX_COMPUTE_IMAGE_UNIFORMS: u32 = 37309;
pub const GL_MAX_COMPUTE_SHARED_MEMORY_SIZE: u32 = 33378;
pub const GL_MAX_COMPUTE_UNIFORM_COMPONENTS: u32 = 33379;
pub const GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS: u32 = 33380;
pub const GL_MAX_COMPUTE_ATOMIC_COUNTERS: u32 = 33381;
pub const GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS: u32 = 33382;
pub const GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS: u32 = 37099;
pub const GL_MAX_COMPUTE_WORK_GROUP_COUNT: u32 = 37310;
pub const GL_MAX_COMPUTE_WORK_GROUP_SIZE: u32 = 37311;
pub const GL_COMPUTE_WORK_GROUP_SIZE: u32 = 33383;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER: u32 = 37100;
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER: u32 = 37101;
pub const GL_DISPATCH_INDIRECT_BUFFER: u32 = 37102;
pub const GL_DISPATCH_INDIRECT_BUFFER_BINDING: u32 = 37103;
pub const GL_DEBUG_OUTPUT_SYNCHRONOUS: u32 = 33346;
pub const GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH: u32 = 33347;
pub const GL_DEBUG_CALLBACK_FUNCTION: u32 = 33348;
pub const GL_DEBUG_CALLBACK_USER_PARAM: u32 = 33349;
pub const GL_DEBUG_SOURCE_API: u32 = 33350;
pub const GL_DEBUG_SOURCE_WINDOW_SYSTEM: u32 = 33351;
pub const GL_DEBUG_SOURCE_SHADER_COMPILER: u32 = 33352;
pub const GL_DEBUG_SOURCE_THIRD_PARTY: u32 = 33353;
pub const GL_DEBUG_SOURCE_APPLICATION: u32 = 33354;
pub const GL_DEBUG_SOURCE_OTHER: u32 = 33355;
pub const GL_DEBUG_TYPE_ERROR: u32 = 33356;
pub const GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR: u32 = 33357;
pub const GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR: u32 = 33358;
pub const GL_DEBUG_TYPE_PORTABILITY: u32 = 33359;
pub const GL_DEBUG_TYPE_PERFORMANCE: u32 = 33360;
pub const GL_DEBUG_TYPE_OTHER: u32 = 33361;
pub const GL_MAX_DEBUG_MESSAGE_LENGTH: u32 = 37187;
pub const GL_MAX_DEBUG_LOGGED_MESSAGES: u32 = 37188;
pub const GL_DEBUG_LOGGED_MESSAGES: u32 = 37189;
pub const GL_DEBUG_SEVERITY_HIGH: u32 = 37190;
pub const GL_DEBUG_SEVERITY_MEDIUM: u32 = 37191;
pub const GL_DEBUG_SEVERITY_LOW: u32 = 37192;
pub const GL_DEBUG_TYPE_MARKER: u32 = 33384;
pub const GL_DEBUG_TYPE_PUSH_GROUP: u32 = 33385;
pub const GL_DEBUG_TYPE_POP_GROUP: u32 = 33386;
pub const GL_DEBUG_SEVERITY_NOTIFICATION: u32 = 33387;
pub const GL_MAX_DEBUG_GROUP_STACK_DEPTH: u32 = 33388;
pub const GL_DEBUG_GROUP_STACK_DEPTH: u32 = 33389;
pub const GL_BUFFER: u32 = 33504;
pub const GL_SHADER: u32 = 33505;
pub const GL_PROGRAM: u32 = 33506;
pub const GL_QUERY: u32 = 33507;
pub const GL_PROGRAM_PIPELINE: u32 = 33508;
pub const GL_SAMPLER: u32 = 33510;
pub const GL_MAX_LABEL_LENGTH: u32 = 33512;
pub const GL_DEBUG_OUTPUT: u32 = 37600;
pub const GL_CONTEXT_FLAG_DEBUG_BIT: u32 = 2;
pub const GL_MAX_UNIFORM_LOCATIONS: u32 = 33390;
pub const GL_FRAMEBUFFER_DEFAULT_WIDTH: u32 = 37648;
pub const GL_FRAMEBUFFER_DEFAULT_HEIGHT: u32 = 37649;
pub const GL_FRAMEBUFFER_DEFAULT_LAYERS: u32 = 37650;
pub const GL_FRAMEBUFFER_DEFAULT_SAMPLES: u32 = 37651;
pub const GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS: u32 = 37652;
pub const GL_MAX_FRAMEBUFFER_WIDTH: u32 = 37653;
pub const GL_MAX_FRAMEBUFFER_HEIGHT: u32 = 37654;
pub const GL_MAX_FRAMEBUFFER_LAYERS: u32 = 37655;
pub const GL_MAX_FRAMEBUFFER_SAMPLES: u32 = 37656;
pub const GL_INTERNALFORMAT_SUPPORTED: u32 = 33391;
pub const GL_INTERNALFORMAT_PREFERRED: u32 = 33392;
pub const GL_INTERNALFORMAT_RED_SIZE: u32 = 33393;
pub const GL_INTERNALFORMAT_GREEN_SIZE: u32 = 33394;
pub const GL_INTERNALFORMAT_BLUE_SIZE: u32 = 33395;
pub const GL_INTERNALFORMAT_ALPHA_SIZE: u32 = 33396;
pub const GL_INTERNALFORMAT_DEPTH_SIZE: u32 = 33397;
pub const GL_INTERNALFORMAT_STENCIL_SIZE: u32 = 33398;
pub const GL_INTERNALFORMAT_SHARED_SIZE: u32 = 33399;
pub const GL_INTERNALFORMAT_RED_TYPE: u32 = 33400;
pub const GL_INTERNALFORMAT_GREEN_TYPE: u32 = 33401;
pub const GL_INTERNALFORMAT_BLUE_TYPE: u32 = 33402;
pub const GL_INTERNALFORMAT_ALPHA_TYPE: u32 = 33403;
pub const GL_INTERNALFORMAT_DEPTH_TYPE: u32 = 33404;
pub const GL_INTERNALFORMAT_STENCIL_TYPE: u32 = 33405;
pub const GL_MAX_WIDTH: u32 = 33406;
pub const GL_MAX_HEIGHT: u32 = 33407;
pub const GL_MAX_DEPTH: u32 = 33408;
pub const GL_MAX_LAYERS: u32 = 33409;
pub const GL_MAX_COMBINED_DIMENSIONS: u32 = 33410;
pub const GL_COLOR_COMPONENTS: u32 = 33411;
pub const GL_DEPTH_COMPONENTS: u32 = 33412;
pub const GL_STENCIL_COMPONENTS: u32 = 33413;
pub const GL_COLOR_RENDERABLE: u32 = 33414;
pub const GL_DEPTH_RENDERABLE: u32 = 33415;
pub const GL_STENCIL_RENDERABLE: u32 = 33416;
pub const GL_FRAMEBUFFER_RENDERABLE: u32 = 33417;
pub const GL_FRAMEBUFFER_RENDERABLE_LAYERED: u32 = 33418;
pub const GL_FRAMEBUFFER_BLEND: u32 = 33419;
pub const GL_READ_PIXELS: u32 = 33420;
pub const GL_READ_PIXELS_FORMAT: u32 = 33421;
pub const GL_READ_PIXELS_TYPE: u32 = 33422;
pub const GL_TEXTURE_IMAGE_FORMAT: u32 = 33423;
pub const GL_TEXTURE_IMAGE_TYPE: u32 = 33424;
pub const GL_GET_TEXTURE_IMAGE_FORMAT: u32 = 33425;
pub const GL_GET_TEXTURE_IMAGE_TYPE: u32 = 33426;
pub const GL_MIPMAP: u32 = 33427;
pub const GL_MANUAL_GENERATE_MIPMAP: u32 = 33428;
pub const GL_AUTO_GENERATE_MIPMAP: u32 = 33429;
pub const GL_COLOR_ENCODING: u32 = 33430;
pub const GL_SRGB_READ: u32 = 33431;
pub const GL_SRGB_WRITE: u32 = 33432;
pub const GL_FILTER: u32 = 33434;
pub const GL_VERTEX_TEXTURE: u32 = 33435;
pub const GL_TESS_CONTROL_TEXTURE: u32 = 33436;
pub const GL_TESS_EVALUATION_TEXTURE: u32 = 33437;
pub const GL_GEOMETRY_TEXTURE: u32 = 33438;
pub const GL_FRAGMENT_TEXTURE: u32 = 33439;
pub const GL_COMPUTE_TEXTURE: u32 = 33440;
pub const GL_TEXTURE_SHADOW: u32 = 33441;
pub const GL_TEXTURE_GATHER: u32 = 33442;
pub const GL_TEXTURE_GATHER_SHADOW: u32 = 33443;
pub const GL_SHADER_IMAGE_LOAD: u32 = 33444;
pub const GL_SHADER_IMAGE_STORE: u32 = 33445;
pub const GL_SHADER_IMAGE_ATOMIC: u32 = 33446;
pub const GL_IMAGE_TEXEL_SIZE: u32 = 33447;
pub const GL_IMAGE_COMPATIBILITY_CLASS: u32 = 33448;
pub const GL_IMAGE_PIXEL_FORMAT: u32 = 33449;
pub const GL_IMAGE_PIXEL_TYPE: u32 = 33450;
pub const GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST: u32 = 33452;
pub const GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST: u32 = 33453;
pub const GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE: u32 = 33454;
pub const GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE: u32 = 33455;
pub const GL_TEXTURE_COMPRESSED_BLOCK_WIDTH: u32 = 33457;
pub const GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT: u32 = 33458;
pub const GL_TEXTURE_COMPRESSED_BLOCK_SIZE: u32 = 33459;
pub const GL_CLEAR_BUFFER: u32 = 33460;
pub const GL_TEXTURE_VIEW: u32 = 33461;
pub const GL_VIEW_COMPATIBILITY_CLASS: u32 = 33462;
pub const GL_FULL_SUPPORT: u32 = 33463;
pub const GL_CAVEAT_SUPPORT: u32 = 33464;
pub const GL_IMAGE_CLASS_4_X_32: u32 = 33465;
pub const GL_IMAGE_CLASS_2_X_32: u32 = 33466;
pub const GL_IMAGE_CLASS_1_X_32: u32 = 33467;
pub const GL_IMAGE_CLASS_4_X_16: u32 = 33468;
pub const GL_IMAGE_CLASS_2_X_16: u32 = 33469;
pub const GL_IMAGE_CLASS_1_X_16: u32 = 33470;
pub const GL_IMAGE_CLASS_4_X_8: u32 = 33471;
pub const GL_IMAGE_CLASS_2_X_8: u32 = 33472;
pub const GL_IMAGE_CLASS_1_X_8: u32 = 33473;
pub const GL_IMAGE_CLASS_11_11_10: u32 = 33474;
pub const GL_IMAGE_CLASS_10_10_10_2: u32 = 33475;
pub const GL_VIEW_CLASS_128_BITS: u32 = 33476;
pub const GL_VIEW_CLASS_96_BITS: u32 = 33477;
pub const GL_VIEW_CLASS_64_BITS: u32 = 33478;
pub const GL_VIEW_CLASS_48_BITS: u32 = 33479;
pub const GL_VIEW_CLASS_32_BITS: u32 = 33480;
pub const GL_VIEW_CLASS_24_BITS: u32 = 33481;
pub const GL_VIEW_CLASS_16_BITS: u32 = 33482;
pub const GL_VIEW_CLASS_8_BITS: u32 = 33483;
pub const GL_VIEW_CLASS_S3TC_DXT1_RGB: u32 = 33484;
pub const GL_VIEW_CLASS_S3TC_DXT1_RGBA: u32 = 33485;
pub const GL_VIEW_CLASS_S3TC_DXT3_RGBA: u32 = 33486;
pub const GL_VIEW_CLASS_S3TC_DXT5_RGBA: u32 = 33487;
pub const GL_VIEW_CLASS_RGTC1_RED: u32 = 33488;
pub const GL_VIEW_CLASS_RGTC2_RG: u32 = 33489;
pub const GL_VIEW_CLASS_BPTC_UNORM: u32 = 33490;
pub const GL_VIEW_CLASS_BPTC_FLOAT: u32 = 33491;
pub const GL_UNIFORM: u32 = 37601;
pub const GL_UNIFORM_BLOCK: u32 = 37602;
pub const GL_PROGRAM_INPUT: u32 = 37603;
pub const GL_PROGRAM_OUTPUT: u32 = 37604;
pub const GL_BUFFER_VARIABLE: u32 = 37605;
pub const GL_SHADER_STORAGE_BLOCK: u32 = 37606;
pub const GL_VERTEX_SUBROUTINE: u32 = 37608;
pub const GL_TESS_CONTROL_SUBROUTINE: u32 = 37609;
pub const GL_TESS_EVALUATION_SUBROUTINE: u32 = 37610;
pub const GL_GEOMETRY_SUBROUTINE: u32 = 37611;
pub const GL_FRAGMENT_SUBROUTINE: u32 = 37612;
pub const GL_COMPUTE_SUBROUTINE: u32 = 37613;
pub const GL_VERTEX_SUBROUTINE_UNIFORM: u32 = 37614;
pub const GL_TESS_CONTROL_SUBROUTINE_UNIFORM: u32 = 37615;
pub const GL_TESS_EVALUATION_SUBROUTINE_UNIFORM: u32 = 37616;
pub const GL_GEOMETRY_SUBROUTINE_UNIFORM: u32 = 37617;
pub const GL_FRAGMENT_SUBROUTINE_UNIFORM: u32 = 37618;
pub const GL_COMPUTE_SUBROUTINE_UNIFORM: u32 = 37619;
pub const GL_TRANSFORM_FEEDBACK_VARYING: u32 = 37620;
pub const GL_ACTIVE_RESOURCES: u32 = 37621;
pub const GL_MAX_NAME_LENGTH: u32 = 37622;
pub const GL_MAX_NUM_ACTIVE_VARIABLES: u32 = 37623;
pub const GL_MAX_NUM_COMPATIBLE_SUBROUTINES: u32 = 37624;
pub const GL_NAME_LENGTH: u32 = 37625;
pub const GL_TYPE: u32 = 37626;
pub const GL_ARRAY_SIZE: u32 = 37627;
pub const GL_OFFSET: u32 = 37628;
pub const GL_BLOCK_INDEX: u32 = 37629;
pub const GL_ARRAY_STRIDE: u32 = 37630;
pub const GL_MATRIX_STRIDE: u32 = 37631;
pub const GL_IS_ROW_MAJOR: u32 = 37632;
pub const GL_ATOMIC_COUNTER_BUFFER_INDEX: u32 = 37633;
pub const GL_BUFFER_BINDING: u32 = 37634;
pub const GL_BUFFER_DATA_SIZE: u32 = 37635;
pub const GL_NUM_ACTIVE_VARIABLES: u32 = 37636;
pub const GL_ACTIVE_VARIABLES: u32 = 37637;
pub const GL_REFERENCED_BY_VERTEX_SHADER: u32 = 37638;
pub const GL_REFERENCED_BY_TESS_CONTROL_SHADER: u32 = 37639;
pub const GL_REFERENCED_BY_TESS_EVALUATION_SHADER: u32 = 37640;
pub const GL_REFERENCED_BY_GEOMETRY_SHADER: u32 = 37641;
pub const GL_REFERENCED_BY_FRAGMENT_SHADER: u32 = 37642;
pub const GL_REFERENCED_BY_COMPUTE_SHADER: u32 = 37643;
pub const GL_TOP_LEVEL_ARRAY_SIZE: u32 = 37644;
pub const GL_TOP_LEVEL_ARRAY_STRIDE: u32 = 37645;
pub const GL_LOCATION: u32 = 37646;
pub const GL_LOCATION_INDEX: u32 = 37647;
pub const GL_IS_PER_PATCH: u32 = 37607;
pub const GL_SHADER_STORAGE_BUFFER: u32 = 37074;
pub const GL_SHADER_STORAGE_BUFFER_BINDING: u32 = 37075;
pub const GL_SHADER_STORAGE_BUFFER_START: u32 = 37076;
pub const GL_SHADER_STORAGE_BUFFER_SIZE: u32 = 37077;
pub const GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS: u32 = 37078;
pub const GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS: u32 = 37079;
pub const GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS: u32 = 37080;
pub const GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS: u32 = 37081;
pub const GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS: u32 = 37082;
pub const GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS: u32 = 37083;
pub const GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS: u32 = 37084;
pub const GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS: u32 = 37085;
pub const GL_MAX_SHADER_STORAGE_BLOCK_SIZE: u32 = 37086;
pub const GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT: u32 = 37087;
pub const GL_SHADER_STORAGE_BARRIER_BIT: u32 = 8192;
pub const GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES: u32 = 36665;
pub const GL_DEPTH_STENCIL_TEXTURE_MODE: u32 = 37098;
pub const GL_TEXTURE_BUFFER_OFFSET: u32 = 37277;
pub const GL_TEXTURE_BUFFER_SIZE: u32 = 37278;
pub const GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT: u32 = 37279;
pub const GL_TEXTURE_VIEW_MIN_LEVEL: u32 = 33499;
pub const GL_TEXTURE_VIEW_NUM_LEVELS: u32 = 33500;
pub const GL_TEXTURE_VIEW_MIN_LAYER: u32 = 33501;
pub const GL_TEXTURE_VIEW_NUM_LAYERS: u32 = 33502;
pub const GL_TEXTURE_IMMUTABLE_LEVELS: u32 = 33503;
pub const GL_VERTEX_ATTRIB_BINDING: u32 = 33492;
pub const GL_VERTEX_ATTRIB_RELATIVE_OFFSET: u32 = 33493;
pub const GL_VERTEX_BINDING_DIVISOR: u32 = 33494;
pub const GL_VERTEX_BINDING_OFFSET: u32 = 33495;
pub const GL_VERTEX_BINDING_STRIDE: u32 = 33496;
pub const GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET: u32 = 33497;
pub const GL_MAX_VERTEX_ATTRIB_BINDINGS: u32 = 33498;
pub const GL_VERTEX_BINDING_BUFFER: u32 = 36687;
pub const GL_DISPLAY_LIST: u32 = 33511;
pub const GL_VERSION_4_4: u32 = 1;
pub const GL_MAX_VERTEX_ATTRIB_STRIDE: u32 = 33509;
pub const GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED: u32 = 33313;
pub const GL_TEXTURE_BUFFER_BINDING: u32 = 35882;
pub const GL_MAP_PERSISTENT_BIT: u32 = 64;
pub const GL_MAP_COHERENT_BIT: u32 = 128;
pub const GL_DYNAMIC_STORAGE_BIT: u32 = 256;
pub const GL_CLIENT_STORAGE_BIT: u32 = 512;
pub const GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT: u32 = 16384;
pub const GL_BUFFER_IMMUTABLE_STORAGE: u32 = 33311;
pub const GL_BUFFER_STORAGE_FLAGS: u32 = 33312;
pub const GL_CLEAR_TEXTURE: u32 = 37733;
pub const GL_LOCATION_COMPONENT: u32 = 37706;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_INDEX: u32 = 37707;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE: u32 = 37708;
pub const GL_QUERY_BUFFER: u32 = 37266;
pub const GL_QUERY_BUFFER_BARRIER_BIT: u32 = 32768;
pub const GL_QUERY_BUFFER_BINDING: u32 = 37267;
pub const GL_QUERY_RESULT_NO_WAIT: u32 = 37268;
pub const GL_MIRROR_CLAMP_TO_EDGE: u32 = 34627;
pub const GL_ARB_ES2_compatibility: u32 = 1;
pub const GL_ARB_ES3_compatibility: u32 = 1;
pub const GL_ARB_arrays_of_arrays: u32 = 1;
pub const GL_ARB_base_instance: u32 = 1;
pub const GL_ARB_bindless_texture: u32 = 1;
pub const GL_UNSIGNED_INT64_ARB: u32 = 5135;
pub const GL_ARB_blend_func_extended: u32 = 1;
pub const GL_ARB_buffer_storage: u32 = 1;
pub const GL_ARB_cl_event: u32 = 1;
pub const GL_SYNC_CL_EVENT_ARB: u32 = 33344;
pub const GL_SYNC_CL_EVENT_COMPLETE_ARB: u32 = 33345;
pub const GL_ARB_clear_buffer_object: u32 = 1;
pub const GL_ARB_clear_texture: u32 = 1;
pub const GL_ARB_color_buffer_float: u32 = 1;
pub const GL_RGBA_FLOAT_MODE_ARB: u32 = 34848;
pub const GL_CLAMP_VERTEX_COLOR_ARB: u32 = 35098;
pub const GL_CLAMP_FRAGMENT_COLOR_ARB: u32 = 35099;
pub const GL_CLAMP_READ_COLOR_ARB: u32 = 35100;
pub const GL_FIXED_ONLY_ARB: u32 = 35101;
pub const GL_ARB_compatibility: u32 = 1;
pub const GL_ARB_compressed_texture_pixel_storage: u32 = 1;
pub const GL_ARB_compute_shader: u32 = 1;
pub const GL_COMPUTE_SHADER_BIT: u32 = 32;
pub const GL_ARB_compute_variable_group_size: u32 = 1;
pub const GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB: u32 = 37700;
pub const GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB: u32 = 37099;
pub const GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB: u32 = 37701;
pub const GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB: u32 = 37311;
pub const GL_ARB_conservative_depth: u32 = 1;
pub const GL_ARB_copy_buffer: u32 = 1;
pub const GL_COPY_READ_BUFFER_BINDING: u32 = 36662;
pub const GL_COPY_WRITE_BUFFER_BINDING: u32 = 36663;
pub const GL_ARB_copy_image: u32 = 1;
pub const GL_ARB_debug_output: u32 = 1;
pub const GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB: u32 = 33346;
pub const GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB: u32 = 33347;
pub const GL_DEBUG_CALLBACK_FUNCTION_ARB: u32 = 33348;
pub const GL_DEBUG_CALLBACK_USER_PARAM_ARB: u32 = 33349;
pub const GL_DEBUG_SOURCE_API_ARB: u32 = 33350;
pub const GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB: u32 = 33351;
pub const GL_DEBUG_SOURCE_SHADER_COMPILER_ARB: u32 = 33352;
pub const GL_DEBUG_SOURCE_THIRD_PARTY_ARB: u32 = 33353;
pub const GL_DEBUG_SOURCE_APPLICATION_ARB: u32 = 33354;
pub const GL_DEBUG_SOURCE_OTHER_ARB: u32 = 33355;
pub const GL_DEBUG_TYPE_ERROR_ARB: u32 = 33356;
pub const GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB: u32 = 33357;
pub const GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB: u32 = 33358;
pub const GL_DEBUG_TYPE_PORTABILITY_ARB: u32 = 33359;
pub const GL_DEBUG_TYPE_PERFORMANCE_ARB: u32 = 33360;
pub const GL_DEBUG_TYPE_OTHER_ARB: u32 = 33361;
pub const GL_MAX_DEBUG_MESSAGE_LENGTH_ARB: u32 = 37187;
pub const GL_MAX_DEBUG_LOGGED_MESSAGES_ARB: u32 = 37188;
pub const GL_DEBUG_LOGGED_MESSAGES_ARB: u32 = 37189;
pub const GL_DEBUG_SEVERITY_HIGH_ARB: u32 = 37190;
pub const GL_DEBUG_SEVERITY_MEDIUM_ARB: u32 = 37191;
pub const GL_DEBUG_SEVERITY_LOW_ARB: u32 = 37192;
pub const GL_ARB_depth_buffer_float: u32 = 1;
pub const GL_ARB_depth_clamp: u32 = 1;
pub const GL_ARB_depth_texture: u32 = 1;
pub const GL_DEPTH_COMPONENT16_ARB: u32 = 33189;
pub const GL_DEPTH_COMPONENT24_ARB: u32 = 33190;
pub const GL_DEPTH_COMPONENT32_ARB: u32 = 33191;
pub const GL_TEXTURE_DEPTH_SIZE_ARB: u32 = 34890;
pub const GL_DEPTH_TEXTURE_MODE_ARB: u32 = 34891;
pub const GL_ARB_draw_buffers: u32 = 1;
pub const GL_MAX_DRAW_BUFFERS_ARB: u32 = 34852;
pub const GL_DRAW_BUFFER0_ARB: u32 = 34853;
pub const GL_DRAW_BUFFER1_ARB: u32 = 34854;
pub const GL_DRAW_BUFFER2_ARB: u32 = 34855;
pub const GL_DRAW_BUFFER3_ARB: u32 = 34856;
pub const GL_DRAW_BUFFER4_ARB: u32 = 34857;
pub const GL_DRAW_BUFFER5_ARB: u32 = 34858;
pub const GL_DRAW_BUFFER6_ARB: u32 = 34859;
pub const GL_DRAW_BUFFER7_ARB: u32 = 34860;
pub const GL_DRAW_BUFFER8_ARB: u32 = 34861;
pub const GL_DRAW_BUFFER9_ARB: u32 = 34862;
pub const GL_DRAW_BUFFER10_ARB: u32 = 34863;
pub const GL_DRAW_BUFFER11_ARB: u32 = 34864;
pub const GL_DRAW_BUFFER12_ARB: u32 = 34865;
pub const GL_DRAW_BUFFER13_ARB: u32 = 34866;
pub const GL_DRAW_BUFFER14_ARB: u32 = 34867;
pub const GL_DRAW_BUFFER15_ARB: u32 = 34868;
pub const GL_ARB_draw_buffers_blend: u32 = 1;
pub const GL_ARB_draw_elements_base_vertex: u32 = 1;
pub const GL_ARB_draw_indirect: u32 = 1;
pub const GL_ARB_draw_instanced: u32 = 1;
pub const GL_ARB_enhanced_layouts: u32 = 1;
pub const GL_ARB_explicit_attrib_location: u32 = 1;
pub const GL_ARB_explicit_uniform_location: u32 = 1;
pub const GL_ARB_fragment_coord_conventions: u32 = 1;
pub const GL_ARB_fragment_layer_viewport: u32 = 1;
pub const GL_ARB_fragment_program: u32 = 1;
pub const GL_FRAGMENT_PROGRAM_ARB: u32 = 34820;
pub const GL_PROGRAM_FORMAT_ASCII_ARB: u32 = 34933;
pub const GL_PROGRAM_LENGTH_ARB: u32 = 34343;
pub const GL_PROGRAM_FORMAT_ARB: u32 = 34934;
pub const GL_PROGRAM_BINDING_ARB: u32 = 34423;
pub const GL_PROGRAM_INSTRUCTIONS_ARB: u32 = 34976;
pub const GL_MAX_PROGRAM_INSTRUCTIONS_ARB: u32 = 34977;
pub const GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB: u32 = 34978;
pub const GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB: u32 = 34979;
pub const GL_PROGRAM_TEMPORARIES_ARB: u32 = 34980;
pub const GL_MAX_PROGRAM_TEMPORARIES_ARB: u32 = 34981;
pub const GL_PROGRAM_NATIVE_TEMPORARIES_ARB: u32 = 34982;
pub const GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB: u32 = 34983;
pub const GL_PROGRAM_PARAMETERS_ARB: u32 = 34984;
pub const GL_MAX_PROGRAM_PARAMETERS_ARB: u32 = 34985;
pub const GL_PROGRAM_NATIVE_PARAMETERS_ARB: u32 = 34986;
pub const GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB: u32 = 34987;
pub const GL_PROGRAM_ATTRIBS_ARB: u32 = 34988;
pub const GL_MAX_PROGRAM_ATTRIBS_ARB: u32 = 34989;
pub const GL_PROGRAM_NATIVE_ATTRIBS_ARB: u32 = 34990;
pub const GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB: u32 = 34991;
pub const GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB: u32 = 34996;
pub const GL_MAX_PROGRAM_ENV_PARAMETERS_ARB: u32 = 34997;
pub const GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB: u32 = 34998;
pub const GL_PROGRAM_ALU_INSTRUCTIONS_ARB: u32 = 34821;
pub const GL_PROGRAM_TEX_INSTRUCTIONS_ARB: u32 = 34822;
pub const GL_PROGRAM_TEX_INDIRECTIONS_ARB: u32 = 34823;
pub const GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB: u32 = 34824;
pub const GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB: u32 = 34825;
pub const GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB: u32 = 34826;
pub const GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB: u32 = 34827;
pub const GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB: u32 = 34828;
pub const GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB: u32 = 34829;
pub const GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB: u32 = 34830;
pub const GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB: u32 = 34831;
pub const GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB: u32 = 34832;
pub const GL_PROGRAM_STRING_ARB: u32 = 34344;
pub const GL_PROGRAM_ERROR_POSITION_ARB: u32 = 34379;
pub const GL_CURRENT_MATRIX_ARB: u32 = 34369;
pub const GL_TRANSPOSE_CURRENT_MATRIX_ARB: u32 = 34999;
pub const GL_CURRENT_MATRIX_STACK_DEPTH_ARB: u32 = 34368;
pub const GL_MAX_PROGRAM_MATRICES_ARB: u32 = 34351;
pub const GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB: u32 = 34350;
pub const GL_MAX_TEXTURE_COORDS_ARB: u32 = 34929;
pub const GL_MAX_TEXTURE_IMAGE_UNITS_ARB: u32 = 34930;
pub const GL_PROGRAM_ERROR_STRING_ARB: u32 = 34932;
pub const GL_MATRIX0_ARB: u32 = 35008;
pub const GL_MATRIX1_ARB: u32 = 35009;
pub const GL_MATRIX2_ARB: u32 = 35010;
pub const GL_MATRIX3_ARB: u32 = 35011;
pub const GL_MATRIX4_ARB: u32 = 35012;
pub const GL_MATRIX5_ARB: u32 = 35013;
pub const GL_MATRIX6_ARB: u32 = 35014;
pub const GL_MATRIX7_ARB: u32 = 35015;
pub const GL_MATRIX8_ARB: u32 = 35016;
pub const GL_MATRIX9_ARB: u32 = 35017;
pub const GL_MATRIX10_ARB: u32 = 35018;
pub const GL_MATRIX11_ARB: u32 = 35019;
pub const GL_MATRIX12_ARB: u32 = 35020;
pub const GL_MATRIX13_ARB: u32 = 35021;
pub const GL_MATRIX14_ARB: u32 = 35022;
pub const GL_MATRIX15_ARB: u32 = 35023;
pub const GL_MATRIX16_ARB: u32 = 35024;
pub const GL_MATRIX17_ARB: u32 = 35025;
pub const GL_MATRIX18_ARB: u32 = 35026;
pub const GL_MATRIX19_ARB: u32 = 35027;
pub const GL_MATRIX20_ARB: u32 = 35028;
pub const GL_MATRIX21_ARB: u32 = 35029;
pub const GL_MATRIX22_ARB: u32 = 35030;
pub const GL_MATRIX23_ARB: u32 = 35031;
pub const GL_MATRIX24_ARB: u32 = 35032;
pub const GL_MATRIX25_ARB: u32 = 35033;
pub const GL_MATRIX26_ARB: u32 = 35034;
pub const GL_MATRIX27_ARB: u32 = 35035;
pub const GL_MATRIX28_ARB: u32 = 35036;
pub const GL_MATRIX29_ARB: u32 = 35037;
pub const GL_MATRIX30_ARB: u32 = 35038;
pub const GL_MATRIX31_ARB: u32 = 35039;
pub const GL_ARB_fragment_program_shadow: u32 = 1;
pub const GL_ARB_fragment_shader: u32 = 1;
pub const GL_FRAGMENT_SHADER_ARB: u32 = 35632;
pub const GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB: u32 = 35657;
pub const GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB: u32 = 35723;
pub const GL_ARB_framebuffer_no_attachments: u32 = 1;
pub const GL_ARB_framebuffer_object: u32 = 1;
pub const GL_ARB_framebuffer_sRGB: u32 = 1;
pub const GL_CONTEXT_RELEASE_BEHAVIOR: u32 = 33531;
pub const GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH: u32 = 33532;
pub const GL_ARB_geometry_shader4: u32 = 1;
pub const GL_LINES_ADJACENCY_ARB: u32 = 10;
pub const GL_LINE_STRIP_ADJACENCY_ARB: u32 = 11;
pub const GL_TRIANGLES_ADJACENCY_ARB: u32 = 12;
pub const GL_TRIANGLE_STRIP_ADJACENCY_ARB: u32 = 13;
pub const GL_PROGRAM_POINT_SIZE_ARB: u32 = 34370;
pub const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB: u32 = 35881;
pub const GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB: u32 = 36263;
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB: u32 = 36264;
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB: u32 = 36265;
pub const GL_GEOMETRY_SHADER_ARB: u32 = 36313;
pub const GL_GEOMETRY_VERTICES_OUT_ARB: u32 = 36314;
pub const GL_GEOMETRY_INPUT_TYPE_ARB: u32 = 36315;
pub const GL_GEOMETRY_OUTPUT_TYPE_ARB: u32 = 36316;
pub const GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB: u32 = 36317;
pub const GL_MAX_VERTEX_VARYING_COMPONENTS_ARB: u32 = 36318;
pub const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB: u32 = 36319;
pub const GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB: u32 = 36320;
pub const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB: u32 = 36321;
pub const GL_ARB_get_program_binary: u32 = 1;
pub const GL_ARB_gpu_shader5: u32 = 1;
pub const GL_ARB_gpu_shader_fp64: u32 = 1;
pub const GL_ARB_half_float_pixel: u32 = 1;
pub const GL_HALF_FLOAT_ARB: u32 = 5131;
pub const GL_ARB_half_float_vertex: u32 = 1;
pub const GL_ARB_indirect_parameters: u32 = 1;
pub const GL_PARAMETER_BUFFER_ARB: u32 = 33006;
pub const GL_PARAMETER_BUFFER_BINDING_ARB: u32 = 33007;
pub const GL_ARB_instanced_arrays: u32 = 1;
pub const GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB: u32 = 35070;
pub const GL_ARB_internalformat_query: u32 = 1;
pub const GL_ARB_internalformat_query2: u32 = 1;
pub const GL_SRGB_DECODE_ARB: u32 = 33433;
pub const GL_ARB_invalidate_subdata: u32 = 1;
pub const GL_ARB_map_buffer_alignment: u32 = 1;
pub const GL_ARB_map_buffer_range: u32 = 1;
pub const GL_ARB_matrix_palette: u32 = 1;
pub const GL_MATRIX_PALETTE_ARB: u32 = 34880;
pub const GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB: u32 = 34881;
pub const GL_MAX_PALETTE_MATRICES_ARB: u32 = 34882;
pub const GL_CURRENT_PALETTE_MATRIX_ARB: u32 = 34883;
pub const GL_MATRIX_INDEX_ARRAY_ARB: u32 = 34884;
pub const GL_CURRENT_MATRIX_INDEX_ARB: u32 = 34885;
pub const GL_MATRIX_INDEX_ARRAY_SIZE_ARB: u32 = 34886;
pub const GL_MATRIX_INDEX_ARRAY_TYPE_ARB: u32 = 34887;
pub const GL_MATRIX_INDEX_ARRAY_STRIDE_ARB: u32 = 34888;
pub const GL_MATRIX_INDEX_ARRAY_POINTER_ARB: u32 = 34889;
pub const GL_ARB_multi_bind: u32 = 1;
pub const GL_ARB_multi_draw_indirect: u32 = 1;
pub const GL_ARB_multisample: u32 = 1;
pub const GL_MULTISAMPLE_ARB: u32 = 32925;
pub const GL_SAMPLE_ALPHA_TO_COVERAGE_ARB: u32 = 32926;
pub const GL_SAMPLE_ALPHA_TO_ONE_ARB: u32 = 32927;
pub const GL_SAMPLE_COVERAGE_ARB: u32 = 32928;
pub const GL_SAMPLE_BUFFERS_ARB: u32 = 32936;
pub const GL_SAMPLES_ARB: u32 = 32937;
pub const GL_SAMPLE_COVERAGE_VALUE_ARB: u32 = 32938;
pub const GL_SAMPLE_COVERAGE_INVERT_ARB: u32 = 32939;
pub const GL_MULTISAMPLE_BIT_ARB: u32 = 536870912;
pub const GL_ARB_occlusion_query: u32 = 1;
pub const GL_QUERY_COUNTER_BITS_ARB: u32 = 34916;
pub const GL_CURRENT_QUERY_ARB: u32 = 34917;
pub const GL_QUERY_RESULT_ARB: u32 = 34918;
pub const GL_QUERY_RESULT_AVAILABLE_ARB: u32 = 34919;
pub const GL_SAMPLES_PASSED_ARB: u32 = 35092;
pub const GL_ARB_occlusion_query2: u32 = 1;
pub const GL_ARB_pixel_buffer_object: u32 = 1;
pub const GL_PIXEL_PACK_BUFFER_ARB: u32 = 35051;
pub const GL_PIXEL_UNPACK_BUFFER_ARB: u32 = 35052;
pub const GL_PIXEL_PACK_BUFFER_BINDING_ARB: u32 = 35053;
pub const GL_PIXEL_UNPACK_BUFFER_BINDING_ARB: u32 = 35055;
pub const GL_ARB_point_parameters: u32 = 1;
pub const GL_POINT_SIZE_MIN_ARB: u32 = 33062;
pub const GL_POINT_SIZE_MAX_ARB: u32 = 33063;
pub const GL_POINT_FADE_THRESHOLD_SIZE_ARB: u32 = 33064;
pub const GL_POINT_DISTANCE_ATTENUATION_ARB: u32 = 33065;
pub const GL_ARB_point_sprite: u32 = 1;
pub const GL_POINT_SPRITE_ARB: u32 = 34913;
pub const GL_COORD_REPLACE_ARB: u32 = 34914;
pub const GL_ARB_program_interface_query: u32 = 1;
pub const GL_ARB_provoking_vertex: u32 = 1;
pub const GL_ARB_query_buffer_object: u32 = 1;
pub const GL_ARB_robust_buffer_access_behavior: u32 = 1;
pub const GL_ARB_robustness: u32 = 1;
pub const GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB: u32 = 4;
pub const GL_LOSE_CONTEXT_ON_RESET_ARB: u32 = 33362;
pub const GL_GUILTY_CONTEXT_RESET_ARB: u32 = 33363;
pub const GL_INNOCENT_CONTEXT_RESET_ARB: u32 = 33364;
pub const GL_UNKNOWN_CONTEXT_RESET_ARB: u32 = 33365;
pub const GL_RESET_NOTIFICATION_STRATEGY_ARB: u32 = 33366;
pub const GL_NO_RESET_NOTIFICATION_ARB: u32 = 33377;
pub const GL_ARB_robustness_isolation: u32 = 1;
pub const GL_ARB_sample_shading: u32 = 1;
pub const GL_SAMPLE_SHADING_ARB: u32 = 35894;
pub const GL_MIN_SAMPLE_SHADING_VALUE_ARB: u32 = 35895;
pub const GL_ARB_sampler_objects: u32 = 1;
pub const GL_ARB_seamless_cube_map: u32 = 1;
pub const GL_ARB_seamless_cubemap_per_texture: u32 = 1;
pub const GL_ARB_separate_shader_objects: u32 = 1;
pub const GL_ARB_shader_atomic_counters: u32 = 1;
pub const GL_ARB_shader_bit_encoding: u32 = 1;
pub const GL_ARB_shader_draw_parameters: u32 = 1;
pub const GL_ARB_shader_group_vote: u32 = 1;
pub const GL_ARB_shader_image_load_store: u32 = 1;
pub const GL_ARB_shader_image_size: u32 = 1;
pub const GL_ARB_shader_objects: u32 = 1;
pub const GL_PROGRAM_OBJECT_ARB: u32 = 35648;
pub const GL_SHADER_OBJECT_ARB: u32 = 35656;
pub const GL_OBJECT_TYPE_ARB: u32 = 35662;
pub const GL_OBJECT_SUBTYPE_ARB: u32 = 35663;
pub const GL_FLOAT_VEC2_ARB: u32 = 35664;
pub const GL_FLOAT_VEC3_ARB: u32 = 35665;
pub const GL_FLOAT_VEC4_ARB: u32 = 35666;
pub const GL_INT_VEC2_ARB: u32 = 35667;
pub const GL_INT_VEC3_ARB: u32 = 35668;
pub const GL_INT_VEC4_ARB: u32 = 35669;
pub const GL_BOOL_ARB: u32 = 35670;
pub const GL_BOOL_VEC2_ARB: u32 = 35671;
pub const GL_BOOL_VEC3_ARB: u32 = 35672;
pub const GL_BOOL_VEC4_ARB: u32 = 35673;
pub const GL_FLOAT_MAT2_ARB: u32 = 35674;
pub const GL_FLOAT_MAT3_ARB: u32 = 35675;
pub const GL_FLOAT_MAT4_ARB: u32 = 35676;
pub const GL_SAMPLER_1D_ARB: u32 = 35677;
pub const GL_SAMPLER_2D_ARB: u32 = 35678;
pub const GL_SAMPLER_3D_ARB: u32 = 35679;
pub const GL_SAMPLER_CUBE_ARB: u32 = 35680;
pub const GL_SAMPLER_1D_SHADOW_ARB: u32 = 35681;
pub const GL_SAMPLER_2D_SHADOW_ARB: u32 = 35682;
pub const GL_SAMPLER_2D_RECT_ARB: u32 = 35683;
pub const GL_SAMPLER_2D_RECT_SHADOW_ARB: u32 = 35684;
pub const GL_OBJECT_DELETE_STATUS_ARB: u32 = 35712;
pub const GL_OBJECT_COMPILE_STATUS_ARB: u32 = 35713;
pub const GL_OBJECT_LINK_STATUS_ARB: u32 = 35714;
pub const GL_OBJECT_VALIDATE_STATUS_ARB: u32 = 35715;
pub const GL_OBJECT_INFO_LOG_LENGTH_ARB: u32 = 35716;
pub const GL_OBJECT_ATTACHED_OBJECTS_ARB: u32 = 35717;
pub const GL_OBJECT_ACTIVE_UNIFORMS_ARB: u32 = 35718;
pub const GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB: u32 = 35719;
pub const GL_OBJECT_SHADER_SOURCE_LENGTH_ARB: u32 = 35720;
pub const GL_ARB_shader_precision: u32 = 1;
pub const GL_ARB_shader_stencil_export: u32 = 1;
pub const GL_ARB_shader_storage_buffer_object: u32 = 1;
pub const GL_ARB_shader_subroutine: u32 = 1;
pub const GL_ARB_shader_texture_lod: u32 = 1;
pub const GL_ARB_shading_language_100: u32 = 1;
pub const GL_SHADING_LANGUAGE_VERSION_ARB: u32 = 35724;
pub const GL_ARB_shading_language_420pack: u32 = 1;
pub const GL_ARB_shading_language_include: u32 = 1;
pub const GL_SHADER_INCLUDE_ARB: u32 = 36270;
pub const GL_NAMED_STRING_LENGTH_ARB: u32 = 36329;
pub const GL_NAMED_STRING_TYPE_ARB: u32 = 36330;
pub const GL_ARB_shading_language_packing: u32 = 1;
pub const GL_ARB_shadow: u32 = 1;
pub const GL_TEXTURE_COMPARE_MODE_ARB: u32 = 34892;
pub const GL_TEXTURE_COMPARE_FUNC_ARB: u32 = 34893;
pub const GL_COMPARE_R_TO_TEXTURE_ARB: u32 = 34894;
pub const GL_ARB_shadow_ambient: u32 = 1;
pub const GL_TEXTURE_COMPARE_FAIL_VALUE_ARB: u32 = 32959;
pub const GL_ARB_sparse_texture: u32 = 1;
pub const GL_TEXTURE_SPARSE_ARB: u32 = 37286;
pub const GL_VIRTUAL_PAGE_SIZE_INDEX_ARB: u32 = 37287;
pub const GL_MIN_SPARSE_LEVEL_ARB: u32 = 37275;
pub const GL_NUM_VIRTUAL_PAGE_SIZES_ARB: u32 = 37288;
pub const GL_VIRTUAL_PAGE_SIZE_X_ARB: u32 = 37269;
pub const GL_VIRTUAL_PAGE_SIZE_Y_ARB: u32 = 37270;
pub const GL_VIRTUAL_PAGE_SIZE_Z_ARB: u32 = 37271;
pub const GL_MAX_SPARSE_TEXTURE_SIZE_ARB: u32 = 37272;
pub const GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB: u32 = 37273;
pub const GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB: u32 = 37274;
pub const GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB: u32 = 37289;
pub const GL_ARB_stencil_texturing: u32 = 1;
pub const GL_ARB_sync: u32 = 1;
pub const GL_ARB_tessellation_shader: u32 = 1;
pub const GL_ARB_texture_border_clamp: u32 = 1;
pub const GL_CLAMP_TO_BORDER_ARB: u32 = 33069;
pub const GL_ARB_texture_buffer_object: u32 = 1;
pub const GL_TEXTURE_BUFFER_ARB: u32 = 35882;
pub const GL_MAX_TEXTURE_BUFFER_SIZE_ARB: u32 = 35883;
pub const GL_TEXTURE_BINDING_BUFFER_ARB: u32 = 35884;
pub const GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB: u32 = 35885;
pub const GL_TEXTURE_BUFFER_FORMAT_ARB: u32 = 35886;
pub const GL_ARB_texture_buffer_object_rgb32: u32 = 1;
pub const GL_ARB_texture_buffer_range: u32 = 1;
pub const GL_ARB_texture_compression: u32 = 1;
pub const GL_COMPRESSED_ALPHA_ARB: u32 = 34025;
pub const GL_COMPRESSED_LUMINANCE_ARB: u32 = 34026;
pub const GL_COMPRESSED_LUMINANCE_ALPHA_ARB: u32 = 34027;
pub const GL_COMPRESSED_INTENSITY_ARB: u32 = 34028;
pub const GL_COMPRESSED_RGB_ARB: u32 = 34029;
pub const GL_COMPRESSED_RGBA_ARB: u32 = 34030;
pub const GL_TEXTURE_COMPRESSION_HINT_ARB: u32 = 34031;
pub const GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB: u32 = 34464;
pub const GL_TEXTURE_COMPRESSED_ARB: u32 = 34465;
pub const GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB: u32 = 34466;
pub const GL_COMPRESSED_TEXTURE_FORMATS_ARB: u32 = 34467;
pub const GL_ARB_texture_compression_bptc: u32 = 1;
pub const GL_COMPRESSED_RGBA_BPTC_UNORM_ARB: u32 = 36492;
pub const GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB: u32 = 36493;
pub const GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB: u32 = 36494;
pub const GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB: u32 = 36495;
pub const GL_ARB_texture_compression_rgtc: u32 = 1;
pub const GL_ARB_texture_cube_map: u32 = 1;
pub const GL_NORMAL_MAP_ARB: u32 = 34065;
pub const GL_REFLECTION_MAP_ARB: u32 = 34066;
pub const GL_TEXTURE_CUBE_MAP_ARB: u32 = 34067;
pub const GL_TEXTURE_BINDING_CUBE_MAP_ARB: u32 = 34068;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB: u32 = 34069;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB: u32 = 34070;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB: u32 = 34071;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB: u32 = 34072;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB: u32 = 34073;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB: u32 = 34074;
pub const GL_PROXY_TEXTURE_CUBE_MAP_ARB: u32 = 34075;
pub const GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB: u32 = 34076;
pub const GL_ARB_texture_cube_map_array: u32 = 1;
pub const GL_TEXTURE_CUBE_MAP_ARRAY_ARB: u32 = 36873;
pub const GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB: u32 = 36874;
pub const GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB: u32 = 36875;
pub const GL_SAMPLER_CUBE_MAP_ARRAY_ARB: u32 = 36876;
pub const GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB: u32 = 36877;
pub const GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB: u32 = 36878;
pub const GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB: u32 = 36879;
pub const GL_ARB_texture_env_add: u32 = 1;
pub const GL_ARB_texture_env_combine: u32 = 1;
pub const GL_COMBINE_ARB: u32 = 34160;
pub const GL_COMBINE_RGB_ARB: u32 = 34161;
pub const GL_COMBINE_ALPHA_ARB: u32 = 34162;
pub const GL_SOURCE0_RGB_ARB: u32 = 34176;
pub const GL_SOURCE1_RGB_ARB: u32 = 34177;
pub const GL_SOURCE2_RGB_ARB: u32 = 34178;
pub const GL_SOURCE0_ALPHA_ARB: u32 = 34184;
pub const GL_SOURCE1_ALPHA_ARB: u32 = 34185;
pub const GL_SOURCE2_ALPHA_ARB: u32 = 34186;
pub const GL_OPERAND0_RGB_ARB: u32 = 34192;
pub const GL_OPERAND1_RGB_ARB: u32 = 34193;
pub const GL_OPERAND2_RGB_ARB: u32 = 34194;
pub const GL_OPERAND0_ALPHA_ARB: u32 = 34200;
pub const GL_OPERAND1_ALPHA_ARB: u32 = 34201;
pub const GL_OPERAND2_ALPHA_ARB: u32 = 34202;
pub const GL_RGB_SCALE_ARB: u32 = 34163;
pub const GL_ADD_SIGNED_ARB: u32 = 34164;
pub const GL_INTERPOLATE_ARB: u32 = 34165;
pub const GL_SUBTRACT_ARB: u32 = 34023;
pub const GL_CONSTANT_ARB: u32 = 34166;
pub const GL_PRIMARY_COLOR_ARB: u32 = 34167;
pub const GL_PREVIOUS_ARB: u32 = 34168;
pub const GL_ARB_texture_env_crossbar: u32 = 1;
pub const GL_ARB_texture_env_dot3: u32 = 1;
pub const GL_DOT3_RGB_ARB: u32 = 34478;
pub const GL_DOT3_RGBA_ARB: u32 = 34479;
pub const GL_ARB_texture_float: u32 = 1;
pub const GL_TEXTURE_RED_TYPE_ARB: u32 = 35856;
pub const GL_TEXTURE_GREEN_TYPE_ARB: u32 = 35857;
pub const GL_TEXTURE_BLUE_TYPE_ARB: u32 = 35858;
pub const GL_TEXTURE_ALPHA_TYPE_ARB: u32 = 35859;
pub const GL_TEXTURE_LUMINANCE_TYPE_ARB: u32 = 35860;
pub const GL_TEXTURE_INTENSITY_TYPE_ARB: u32 = 35861;
pub const GL_TEXTURE_DEPTH_TYPE_ARB: u32 = 35862;
pub const GL_UNSIGNED_NORMALIZED_ARB: u32 = 35863;
pub const GL_RGBA32F_ARB: u32 = 34836;
pub const GL_RGB32F_ARB: u32 = 34837;
pub const GL_ALPHA32F_ARB: u32 = 34838;
pub const GL_INTENSITY32F_ARB: u32 = 34839;
pub const GL_LUMINANCE32F_ARB: u32 = 34840;
pub const GL_LUMINANCE_ALPHA32F_ARB: u32 = 34841;
pub const GL_RGBA16F_ARB: u32 = 34842;
pub const GL_RGB16F_ARB: u32 = 34843;
pub const GL_ALPHA16F_ARB: u32 = 34844;
pub const GL_INTENSITY16F_ARB: u32 = 34845;
pub const GL_LUMINANCE16F_ARB: u32 = 34846;
pub const GL_LUMINANCE_ALPHA16F_ARB: u32 = 34847;
pub const GL_ARB_texture_gather: u32 = 1;
pub const GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB: u32 = 36446;
pub const GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB: u32 = 36447;
pub const GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB: u32 = 36767;
pub const GL_ARB_texture_mirror_clamp_to_edge: u32 = 1;
pub const GL_ARB_texture_mirrored_repeat: u32 = 1;
pub const GL_MIRRORED_REPEAT_ARB: u32 = 33648;
pub const GL_ARB_texture_multisample: u32 = 1;
pub const GL_ARB_texture_non_power_of_two: u32 = 1;
pub const GL_ARB_texture_query_levels: u32 = 1;
pub const GL_ARB_texture_query_lod: u32 = 1;
pub const GL_ARB_texture_rectangle: u32 = 1;
pub const GL_TEXTURE_RECTANGLE_ARB: u32 = 34037;
pub const GL_TEXTURE_BINDING_RECTANGLE_ARB: u32 = 34038;
pub const GL_PROXY_TEXTURE_RECTANGLE_ARB: u32 = 34039;
pub const GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB: u32 = 34040;
pub const GL_ARB_texture_rg: u32 = 1;
pub const GL_ARB_texture_rgb10_a2ui: u32 = 1;
pub const GL_ARB_texture_stencil8: u32 = 1;
pub const GL_ARB_texture_storage: u32 = 1;
pub const GL_ARB_texture_storage_multisample: u32 = 1;
pub const GL_ARB_texture_swizzle: u32 = 1;
pub const GL_ARB_texture_view: u32 = 1;
pub const GL_ARB_timer_query: u32 = 1;
pub const GL_ARB_transform_feedback2: u32 = 1;
pub const GL_TRANSFORM_FEEDBACK_PAUSED: u32 = 36387;
pub const GL_TRANSFORM_FEEDBACK_ACTIVE: u32 = 36388;
pub const GL_ARB_transform_feedback3: u32 = 1;
pub const GL_ARB_transform_feedback_instanced: u32 = 1;
pub const GL_ARB_transpose_matrix: u32 = 1;
pub const GL_TRANSPOSE_MODELVIEW_MATRIX_ARB: u32 = 34019;
pub const GL_TRANSPOSE_PROJECTION_MATRIX_ARB: u32 = 34020;
pub const GL_TRANSPOSE_TEXTURE_MATRIX_ARB: u32 = 34021;
pub const GL_TRANSPOSE_COLOR_MATRIX_ARB: u32 = 34022;
pub const GL_ARB_uniform_buffer_object: u32 = 1;
pub const GL_MAX_GEOMETRY_UNIFORM_BLOCKS: u32 = 35372;
pub const GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS: u32 = 35378;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER: u32 = 35397;
pub const GL_ARB_vertex_array_bgra: u32 = 1;
pub const GL_ARB_vertex_array_object: u32 = 1;
pub const GL_ARB_vertex_attrib_64bit: u32 = 1;
pub const GL_ARB_vertex_attrib_binding: u32 = 1;
pub const GL_ARB_vertex_blend: u32 = 1;
pub const GL_MAX_VERTEX_UNITS_ARB: u32 = 34468;
pub const GL_ACTIVE_VERTEX_UNITS_ARB: u32 = 34469;
pub const GL_WEIGHT_SUM_UNITY_ARB: u32 = 34470;
pub const GL_VERTEX_BLEND_ARB: u32 = 34471;
pub const GL_CURRENT_WEIGHT_ARB: u32 = 34472;
pub const GL_WEIGHT_ARRAY_TYPE_ARB: u32 = 34473;
pub const GL_WEIGHT_ARRAY_STRIDE_ARB: u32 = 34474;
pub const GL_WEIGHT_ARRAY_SIZE_ARB: u32 = 34475;
pub const GL_WEIGHT_ARRAY_POINTER_ARB: u32 = 34476;
pub const GL_WEIGHT_ARRAY_ARB: u32 = 34477;
pub const GL_MODELVIEW0_ARB: u32 = 5888;
pub const GL_MODELVIEW1_ARB: u32 = 34058;
pub const GL_MODELVIEW2_ARB: u32 = 34594;
pub const GL_MODELVIEW3_ARB: u32 = 34595;
pub const GL_MODELVIEW4_ARB: u32 = 34596;
pub const GL_MODELVIEW5_ARB: u32 = 34597;
pub const GL_MODELVIEW6_ARB: u32 = 34598;
pub const GL_MODELVIEW7_ARB: u32 = 34599;
pub const GL_MODELVIEW8_ARB: u32 = 34600;
pub const GL_MODELVIEW9_ARB: u32 = 34601;
pub const GL_MODELVIEW10_ARB: u32 = 34602;
pub const GL_MODELVIEW11_ARB: u32 = 34603;
pub const GL_MODELVIEW12_ARB: u32 = 34604;
pub const GL_MODELVIEW13_ARB: u32 = 34605;
pub const GL_MODELVIEW14_ARB: u32 = 34606;
pub const GL_MODELVIEW15_ARB: u32 = 34607;
pub const GL_MODELVIEW16_ARB: u32 = 34608;
pub const GL_MODELVIEW17_ARB: u32 = 34609;
pub const GL_MODELVIEW18_ARB: u32 = 34610;
pub const GL_MODELVIEW19_ARB: u32 = 34611;
pub const GL_MODELVIEW20_ARB: u32 = 34612;
pub const GL_MODELVIEW21_ARB: u32 = 34613;
pub const GL_MODELVIEW22_ARB: u32 = 34614;
pub const GL_MODELVIEW23_ARB: u32 = 34615;
pub const GL_MODELVIEW24_ARB: u32 = 34616;
pub const GL_MODELVIEW25_ARB: u32 = 34617;
pub const GL_MODELVIEW26_ARB: u32 = 34618;
pub const GL_MODELVIEW27_ARB: u32 = 34619;
pub const GL_MODELVIEW28_ARB: u32 = 34620;
pub const GL_MODELVIEW29_ARB: u32 = 34621;
pub const GL_MODELVIEW30_ARB: u32 = 34622;
pub const GL_MODELVIEW31_ARB: u32 = 34623;
pub const GL_ARB_vertex_buffer_object: u32 = 1;
pub const GL_BUFFER_SIZE_ARB: u32 = 34660;
pub const GL_BUFFER_USAGE_ARB: u32 = 34661;
pub const GL_ARRAY_BUFFER_ARB: u32 = 34962;
pub const GL_ELEMENT_ARRAY_BUFFER_ARB: u32 = 34963;
pub const GL_ARRAY_BUFFER_BINDING_ARB: u32 = 34964;
pub const GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB: u32 = 34965;
pub const GL_VERTEX_ARRAY_BUFFER_BINDING_ARB: u32 = 34966;
pub const GL_NORMAL_ARRAY_BUFFER_BINDING_ARB: u32 = 34967;
pub const GL_COLOR_ARRAY_BUFFER_BINDING_ARB: u32 = 34968;
pub const GL_INDEX_ARRAY_BUFFER_BINDING_ARB: u32 = 34969;
pub const GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB: u32 = 34970;
pub const GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB: u32 = 34971;
pub const GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB: u32 = 34972;
pub const GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB: u32 = 34973;
pub const GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB: u32 = 34974;
pub const GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB: u32 = 34975;
pub const GL_READ_ONLY_ARB: u32 = 35000;
pub const GL_WRITE_ONLY_ARB: u32 = 35001;
pub const GL_READ_WRITE_ARB: u32 = 35002;
pub const GL_BUFFER_ACCESS_ARB: u32 = 35003;
pub const GL_BUFFER_MAPPED_ARB: u32 = 35004;
pub const GL_BUFFER_MAP_POINTER_ARB: u32 = 35005;
pub const GL_STREAM_DRAW_ARB: u32 = 35040;
pub const GL_STREAM_READ_ARB: u32 = 35041;
pub const GL_STREAM_COPY_ARB: u32 = 35042;
pub const GL_STATIC_DRAW_ARB: u32 = 35044;
pub const GL_STATIC_READ_ARB: u32 = 35045;
pub const GL_STATIC_COPY_ARB: u32 = 35046;
pub const GL_DYNAMIC_DRAW_ARB: u32 = 35048;
pub const GL_DYNAMIC_READ_ARB: u32 = 35049;
pub const GL_DYNAMIC_COPY_ARB: u32 = 35050;
pub const GL_ARB_vertex_program: u32 = 1;
pub const GL_COLOR_SUM_ARB: u32 = 33880;
pub const GL_VERTEX_PROGRAM_ARB: u32 = 34336;
pub const GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB: u32 = 34338;
pub const GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB: u32 = 34339;
pub const GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB: u32 = 34340;
pub const GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB: u32 = 34341;
pub const GL_CURRENT_VERTEX_ATTRIB_ARB: u32 = 34342;
pub const GL_VERTEX_PROGRAM_POINT_SIZE_ARB: u32 = 34370;
pub const GL_VERTEX_PROGRAM_TWO_SIDE_ARB: u32 = 34371;
pub const GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB: u32 = 34373;
pub const GL_MAX_VERTEX_ATTRIBS_ARB: u32 = 34921;
pub const GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB: u32 = 34922;
pub const GL_PROGRAM_ADDRESS_REGISTERS_ARB: u32 = 34992;
pub const GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB: u32 = 34993;
pub const GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB: u32 = 34994;
pub const GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB: u32 = 34995;
pub const GL_ARB_vertex_shader: u32 = 1;
pub const GL_VERTEX_SHADER_ARB: u32 = 35633;
pub const GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB: u32 = 35658;
pub const GL_MAX_VARYING_FLOATS_ARB: u32 = 35659;
pub const GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB: u32 = 35660;
pub const GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB: u32 = 35661;
pub const GL_OBJECT_ACTIVE_ATTRIBUTES_ARB: u32 = 35721;
pub const GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB: u32 = 35722;
pub const GL_ARB_vertex_type_10f_11f_11f_rev: u32 = 1;
pub const GL_ARB_vertex_type_2_10_10_10_rev: u32 = 1;
pub const GL_ARB_viewport_array: u32 = 1;
pub const GL_ARB_window_pos: u32 = 1;
pub const GL_KHR_debug: u32 = 1;
pub const GL_KHR_texture_compression_astc_hdr: u32 = 1;
pub const GL_COMPRESSED_RGBA_ASTC_4x4_KHR: u32 = 37808;
pub const GL_COMPRESSED_RGBA_ASTC_5x4_KHR: u32 = 37809;
pub const GL_COMPRESSED_RGBA_ASTC_5x5_KHR: u32 = 37810;
pub const GL_COMPRESSED_RGBA_ASTC_6x5_KHR: u32 = 37811;
pub const GL_COMPRESSED_RGBA_ASTC_6x6_KHR: u32 = 37812;
pub const GL_COMPRESSED_RGBA_ASTC_8x5_KHR: u32 = 37813;
pub const GL_COMPRESSED_RGBA_ASTC_8x6_KHR: u32 = 37814;
pub const GL_COMPRESSED_RGBA_ASTC_8x8_KHR: u32 = 37815;
pub const GL_COMPRESSED_RGBA_ASTC_10x5_KHR: u32 = 37816;
pub const GL_COMPRESSED_RGBA_ASTC_10x6_KHR: u32 = 37817;
pub const GL_COMPRESSED_RGBA_ASTC_10x8_KHR: u32 = 37818;
pub const GL_COMPRESSED_RGBA_ASTC_10x10_KHR: u32 = 37819;
pub const GL_COMPRESSED_RGBA_ASTC_12x10_KHR: u32 = 37820;
pub const GL_COMPRESSED_RGBA_ASTC_12x12_KHR: u32 = 37821;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR: u32 = 37840;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR: u32 = 37841;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR: u32 = 37842;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR: u32 = 37843;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR: u32 = 37844;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR: u32 = 37845;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR: u32 = 37846;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR: u32 = 37847;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR: u32 = 37848;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR: u32 = 37849;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR: u32 = 37850;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR: u32 = 37851;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR: u32 = 37852;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR: u32 = 37853;
pub const GL_KHR_texture_compression_astc_ldr: u32 = 1;
pub const GL_OES_byte_coordinates: u32 = 1;
pub const GL_OES_compressed_paletted_texture: u32 = 1;
pub const GL_PALETTE4_RGB8_OES: u32 = 35728;
pub const GL_PALETTE4_RGBA8_OES: u32 = 35729;
pub const GL_PALETTE4_R5_G6_B5_OES: u32 = 35730;
pub const GL_PALETTE4_RGBA4_OES: u32 = 35731;
pub const GL_PALETTE4_RGB5_A1_OES: u32 = 35732;
pub const GL_PALETTE8_RGB8_OES: u32 = 35733;
pub const GL_PALETTE8_RGBA8_OES: u32 = 35734;
pub const GL_PALETTE8_R5_G6_B5_OES: u32 = 35735;
pub const GL_PALETTE8_RGBA4_OES: u32 = 35736;
pub const GL_PALETTE8_RGB5_A1_OES: u32 = 35737;
pub const GL_OES_fixed_point: u32 = 1;
pub const GL_FIXED_OES: u32 = 5132;
pub const GL_OES_query_matrix: u32 = 1;
pub const GL_OES_read_format: u32 = 1;
pub const GL_IMPLEMENTATION_COLOR_READ_TYPE_OES: u32 = 35738;
pub const GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES: u32 = 35739;
pub const GL_OES_single_precision: u32 = 1;
pub const GL_3DFX_multisample: u32 = 1;
pub const GL_MULTISAMPLE_3DFX: u32 = 34482;
pub const GL_SAMPLE_BUFFERS_3DFX: u32 = 34483;
pub const GL_SAMPLES_3DFX: u32 = 34484;
pub const GL_MULTISAMPLE_BIT_3DFX: u32 = 536870912;
pub const GL_3DFX_tbuffer: u32 = 1;
pub const GL_3DFX_texture_compression_FXT1: u32 = 1;
pub const GL_COMPRESSED_RGB_FXT1_3DFX: u32 = 34480;
pub const GL_COMPRESSED_RGBA_FXT1_3DFX: u32 = 34481;
pub const GL_AMD_blend_minmax_factor: u32 = 1;
pub const GL_FACTOR_MIN_AMD: u32 = 36892;
pub const GL_FACTOR_MAX_AMD: u32 = 36893;
pub const GL_AMD_conservative_depth: u32 = 1;
pub const GL_AMD_debug_output: u32 = 1;
pub const GL_MAX_DEBUG_MESSAGE_LENGTH_AMD: u32 = 37187;
pub const GL_MAX_DEBUG_LOGGED_MESSAGES_AMD: u32 = 37188;
pub const GL_DEBUG_LOGGED_MESSAGES_AMD: u32 = 37189;
pub const GL_DEBUG_SEVERITY_HIGH_AMD: u32 = 37190;
pub const GL_DEBUG_SEVERITY_MEDIUM_AMD: u32 = 37191;
pub const GL_DEBUG_SEVERITY_LOW_AMD: u32 = 37192;
pub const GL_DEBUG_CATEGORY_API_ERROR_AMD: u32 = 37193;
pub const GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD: u32 = 37194;
pub const GL_DEBUG_CATEGORY_DEPRECATION_AMD: u32 = 37195;
pub const GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD: u32 = 37196;
pub const GL_DEBUG_CATEGORY_PERFORMANCE_AMD: u32 = 37197;
pub const GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD: u32 = 37198;
pub const GL_DEBUG_CATEGORY_APPLICATION_AMD: u32 = 37199;
pub const GL_DEBUG_CATEGORY_OTHER_AMD: u32 = 37200;
pub const GL_AMD_depth_clamp_separate: u32 = 1;
pub const GL_DEPTH_CLAMP_NEAR_AMD: u32 = 36894;
pub const GL_DEPTH_CLAMP_FAR_AMD: u32 = 36895;
pub const GL_AMD_draw_buffers_blend: u32 = 1;
pub const GL_AMD_gcn_shader: u32 = 1;
pub const GL_AMD_gpu_shader_int64: u32 = 1;
pub const GL_INT64_NV: u32 = 5134;
pub const GL_UNSIGNED_INT64_NV: u32 = 5135;
pub const GL_INT8_NV: u32 = 36832;
pub const GL_INT8_VEC2_NV: u32 = 36833;
pub const GL_INT8_VEC3_NV: u32 = 36834;
pub const GL_INT8_VEC4_NV: u32 = 36835;
pub const GL_INT16_NV: u32 = 36836;
pub const GL_INT16_VEC2_NV: u32 = 36837;
pub const GL_INT16_VEC3_NV: u32 = 36838;
pub const GL_INT16_VEC4_NV: u32 = 36839;
pub const GL_INT64_VEC2_NV: u32 = 36841;
pub const GL_INT64_VEC3_NV: u32 = 36842;
pub const GL_INT64_VEC4_NV: u32 = 36843;
pub const GL_UNSIGNED_INT8_NV: u32 = 36844;
pub const GL_UNSIGNED_INT8_VEC2_NV: u32 = 36845;
pub const GL_UNSIGNED_INT8_VEC3_NV: u32 = 36846;
pub const GL_UNSIGNED_INT8_VEC4_NV: u32 = 36847;
pub const GL_UNSIGNED_INT16_NV: u32 = 36848;
pub const GL_UNSIGNED_INT16_VEC2_NV: u32 = 36849;
pub const GL_UNSIGNED_INT16_VEC3_NV: u32 = 36850;
pub const GL_UNSIGNED_INT16_VEC4_NV: u32 = 36851;
pub const GL_UNSIGNED_INT64_VEC2_NV: u32 = 36853;
pub const GL_UNSIGNED_INT64_VEC3_NV: u32 = 36854;
pub const GL_UNSIGNED_INT64_VEC4_NV: u32 = 36855;
pub const GL_FLOAT16_NV: u32 = 36856;
pub const GL_FLOAT16_VEC2_NV: u32 = 36857;
pub const GL_FLOAT16_VEC3_NV: u32 = 36858;
pub const GL_FLOAT16_VEC4_NV: u32 = 36859;
pub const GL_AMD_interleaved_elements: u32 = 1;
pub const GL_VERTEX_ELEMENT_SWIZZLE_AMD: u32 = 37284;
pub const GL_VERTEX_ID_SWIZZLE_AMD: u32 = 37285;
pub const GL_AMD_multi_draw_indirect: u32 = 1;
pub const GL_AMD_name_gen_delete: u32 = 1;
pub const GL_DATA_BUFFER_AMD: u32 = 37201;
pub const GL_PERFORMANCE_MONITOR_AMD: u32 = 37202;
pub const GL_QUERY_OBJECT_AMD: u32 = 37203;
pub const GL_VERTEX_ARRAY_OBJECT_AMD: u32 = 37204;
pub const GL_SAMPLER_OBJECT_AMD: u32 = 37205;
pub const GL_AMD_occlusion_query_event: u32 = 1;
pub const GL_OCCLUSION_QUERY_EVENT_MASK_AMD: u32 = 34639;
pub const GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD: u32 = 1;
pub const GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD: u32 = 2;
pub const GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD: u32 = 4;
pub const GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD: u32 = 8;
pub const GL_QUERY_ALL_EVENT_BITS_AMD: u32 = 4294967295;
pub const GL_AMD_performance_monitor: u32 = 1;
pub const GL_COUNTER_TYPE_AMD: u32 = 35776;
pub const GL_COUNTER_RANGE_AMD: u32 = 35777;
pub const GL_UNSIGNED_INT64_AMD: u32 = 35778;
pub const GL_PERCENTAGE_AMD: u32 = 35779;
pub const GL_PERFMON_RESULT_AVAILABLE_AMD: u32 = 35780;
pub const GL_PERFMON_RESULT_SIZE_AMD: u32 = 35781;
pub const GL_PERFMON_RESULT_AMD: u32 = 35782;
pub const GL_AMD_pinned_memory: u32 = 1;
pub const GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD: u32 = 37216;
pub const GL_AMD_query_buffer_object: u32 = 1;
pub const GL_QUERY_BUFFER_AMD: u32 = 37266;
pub const GL_QUERY_BUFFER_BINDING_AMD: u32 = 37267;
pub const GL_QUERY_RESULT_NO_WAIT_AMD: u32 = 37268;
pub const GL_AMD_sample_positions: u32 = 1;
pub const GL_SUBSAMPLE_DISTANCE_AMD: u32 = 34879;
pub const GL_AMD_seamless_cubemap_per_texture: u32 = 1;
pub const GL_AMD_shader_atomic_counter_ops: u32 = 1;
pub const GL_AMD_shader_stencil_export: u32 = 1;
pub const GL_AMD_shader_trinary_minmax: u32 = 1;
pub const GL_AMD_sparse_texture: u32 = 1;
pub const GL_VIRTUAL_PAGE_SIZE_X_AMD: u32 = 37269;
pub const GL_VIRTUAL_PAGE_SIZE_Y_AMD: u32 = 37270;
pub const GL_VIRTUAL_PAGE_SIZE_Z_AMD: u32 = 37271;
pub const GL_MAX_SPARSE_TEXTURE_SIZE_AMD: u32 = 37272;
pub const GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD: u32 = 37273;
pub const GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS: u32 = 37274;
pub const GL_MIN_SPARSE_LEVEL_AMD: u32 = 37275;
pub const GL_MIN_LOD_WARNING_AMD: u32 = 37276;
pub const GL_TEXTURE_STORAGE_SPARSE_BIT_AMD: u32 = 1;
pub const GL_AMD_stencil_operation_extended: u32 = 1;
pub const GL_SET_AMD: u32 = 34634;
pub const GL_REPLACE_VALUE_AMD: u32 = 34635;
pub const GL_STENCIL_OP_VALUE_AMD: u32 = 34636;
pub const GL_STENCIL_BACK_OP_VALUE_AMD: u32 = 34637;
pub const GL_AMD_texture_texture4: u32 = 1;
pub const GL_AMD_transform_feedback3_lines_triangles: u32 = 1;
pub const GL_AMD_transform_feedback4: u32 = 1;
pub const GL_STREAM_RASTERIZATION_AMD: u32 = 37280;
pub const GL_AMD_vertex_shader_layer: u32 = 1;
pub const GL_AMD_vertex_shader_tessellator: u32 = 1;
pub const GL_SAMPLER_BUFFER_AMD: u32 = 36865;
pub const GL_INT_SAMPLER_BUFFER_AMD: u32 = 36866;
pub const GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD: u32 = 36867;
pub const GL_TESSELLATION_MODE_AMD: u32 = 36868;
pub const GL_TESSELLATION_FACTOR_AMD: u32 = 36869;
pub const GL_DISCRETE_AMD: u32 = 36870;
pub const GL_CONTINUOUS_AMD: u32 = 36871;
pub const GL_AMD_vertex_shader_viewport_index: u32 = 1;
pub const GL_APPLE_aux_depth_stencil: u32 = 1;
pub const GL_AUX_DEPTH_STENCIL_APPLE: u32 = 35348;
pub const GL_APPLE_client_storage: u32 = 1;
pub const GL_UNPACK_CLIENT_STORAGE_APPLE: u32 = 34226;
pub const GL_APPLE_element_array: u32 = 1;
pub const GL_ELEMENT_ARRAY_APPLE: u32 = 35340;
pub const GL_ELEMENT_ARRAY_TYPE_APPLE: u32 = 35341;
pub const GL_ELEMENT_ARRAY_POINTER_APPLE: u32 = 35342;
pub const GL_APPLE_fence: u32 = 1;
pub const GL_DRAW_PIXELS_APPLE: u32 = 35338;
pub const GL_FENCE_APPLE: u32 = 35339;
pub const GL_APPLE_float_pixels: u32 = 1;
pub const GL_HALF_APPLE: u32 = 5131;
pub const GL_RGBA_FLOAT32_APPLE: u32 = 34836;
pub const GL_RGB_FLOAT32_APPLE: u32 = 34837;
pub const GL_ALPHA_FLOAT32_APPLE: u32 = 34838;
pub const GL_INTENSITY_FLOAT32_APPLE: u32 = 34839;
pub const GL_LUMINANCE_FLOAT32_APPLE: u32 = 34840;
pub const GL_LUMINANCE_ALPHA_FLOAT32_APPLE: u32 = 34841;
pub const GL_RGBA_FLOAT16_APPLE: u32 = 34842;
pub const GL_RGB_FLOAT16_APPLE: u32 = 34843;
pub const GL_ALPHA_FLOAT16_APPLE: u32 = 34844;
pub const GL_INTENSITY_FLOAT16_APPLE: u32 = 34845;
pub const GL_LUMINANCE_FLOAT16_APPLE: u32 = 34846;
pub const GL_LUMINANCE_ALPHA_FLOAT16_APPLE: u32 = 34847;
pub const GL_COLOR_FLOAT_APPLE: u32 = 35343;
pub const GL_APPLE_flush_buffer_range: u32 = 1;
pub const GL_BUFFER_SERIALIZED_MODIFY_APPLE: u32 = 35346;
pub const GL_BUFFER_FLUSHING_UNMAP_APPLE: u32 = 35347;
pub const GL_APPLE_object_purgeable: u32 = 1;
pub const GL_BUFFER_OBJECT_APPLE: u32 = 34227;
pub const GL_RELEASED_APPLE: u32 = 35353;
pub const GL_VOLATILE_APPLE: u32 = 35354;
pub const GL_RETAINED_APPLE: u32 = 35355;
pub const GL_UNDEFINED_APPLE: u32 = 35356;
pub const GL_PURGEABLE_APPLE: u32 = 35357;
pub const GL_APPLE_rgb_422: u32 = 1;
pub const GL_RGB_422_APPLE: u32 = 35359;
pub const GL_UNSIGNED_SHORT_8_8_APPLE: u32 = 34234;
pub const GL_UNSIGNED_SHORT_8_8_REV_APPLE: u32 = 34235;
pub const GL_RGB_RAW_422_APPLE: u32 = 35409;
pub const GL_APPLE_row_bytes: u32 = 1;
pub const GL_PACK_ROW_BYTES_APPLE: u32 = 35349;
pub const GL_UNPACK_ROW_BYTES_APPLE: u32 = 35350;
pub const GL_APPLE_specular_vector: u32 = 1;
pub const GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE: u32 = 34224;
pub const GL_APPLE_texture_range: u32 = 1;
pub const GL_TEXTURE_RANGE_LENGTH_APPLE: u32 = 34231;
pub const GL_TEXTURE_RANGE_POINTER_APPLE: u32 = 34232;
pub const GL_TEXTURE_STORAGE_HINT_APPLE: u32 = 34236;
pub const GL_STORAGE_PRIVATE_APPLE: u32 = 34237;
pub const GL_STORAGE_CACHED_APPLE: u32 = 34238;
pub const GL_STORAGE_SHARED_APPLE: u32 = 34239;
pub const GL_APPLE_transform_hint: u32 = 1;
pub const GL_TRANSFORM_HINT_APPLE: u32 = 34225;
pub const GL_APPLE_vertex_array_object: u32 = 1;
pub const GL_VERTEX_ARRAY_BINDING_APPLE: u32 = 34229;
pub const GL_APPLE_vertex_array_range: u32 = 1;
pub const GL_VERTEX_ARRAY_RANGE_APPLE: u32 = 34077;
pub const GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE: u32 = 34078;
pub const GL_VERTEX_ARRAY_STORAGE_HINT_APPLE: u32 = 34079;
pub const GL_VERTEX_ARRAY_RANGE_POINTER_APPLE: u32 = 34081;
pub const GL_STORAGE_CLIENT_APPLE: u32 = 34228;
pub const GL_APPLE_vertex_program_evaluators: u32 = 1;
pub const GL_VERTEX_ATTRIB_MAP1_APPLE: u32 = 35328;
pub const GL_VERTEX_ATTRIB_MAP2_APPLE: u32 = 35329;
pub const GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE: u32 = 35330;
pub const GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE: u32 = 35331;
pub const GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE: u32 = 35332;
pub const GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE: u32 = 35333;
pub const GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE: u32 = 35334;
pub const GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE: u32 = 35335;
pub const GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE: u32 = 35336;
pub const GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE: u32 = 35337;
pub const GL_APPLE_ycbcr_422: u32 = 1;
pub const GL_YCBCR_422_APPLE: u32 = 34233;
pub const GL_ATI_draw_buffers: u32 = 1;
pub const GL_MAX_DRAW_BUFFERS_ATI: u32 = 34852;
pub const GL_DRAW_BUFFER0_ATI: u32 = 34853;
pub const GL_DRAW_BUFFER1_ATI: u32 = 34854;
pub const GL_DRAW_BUFFER2_ATI: u32 = 34855;
pub const GL_DRAW_BUFFER3_ATI: u32 = 34856;
pub const GL_DRAW_BUFFER4_ATI: u32 = 34857;
pub const GL_DRAW_BUFFER5_ATI: u32 = 34858;
pub const GL_DRAW_BUFFER6_ATI: u32 = 34859;
pub const GL_DRAW_BUFFER7_ATI: u32 = 34860;
pub const GL_DRAW_BUFFER8_ATI: u32 = 34861;
pub const GL_DRAW_BUFFER9_ATI: u32 = 34862;
pub const GL_DRAW_BUFFER10_ATI: u32 = 34863;
pub const GL_DRAW_BUFFER11_ATI: u32 = 34864;
pub const GL_DRAW_BUFFER12_ATI: u32 = 34865;
pub const GL_DRAW_BUFFER13_ATI: u32 = 34866;
pub const GL_DRAW_BUFFER14_ATI: u32 = 34867;
pub const GL_DRAW_BUFFER15_ATI: u32 = 34868;
pub const GL_ATI_element_array: u32 = 1;
pub const GL_ELEMENT_ARRAY_ATI: u32 = 34664;
pub const GL_ELEMENT_ARRAY_TYPE_ATI: u32 = 34665;
pub const GL_ELEMENT_ARRAY_POINTER_ATI: u32 = 34666;
pub const GL_ATI_envmap_bumpmap: u32 = 1;
pub const GL_BUMP_ROT_MATRIX_ATI: u32 = 34677;
pub const GL_BUMP_ROT_MATRIX_SIZE_ATI: u32 = 34678;
pub const GL_BUMP_NUM_TEX_UNITS_ATI: u32 = 34679;
pub const GL_BUMP_TEX_UNITS_ATI: u32 = 34680;
pub const GL_DUDV_ATI: u32 = 34681;
pub const GL_DU8DV8_ATI: u32 = 34682;
pub const GL_BUMP_ENVMAP_ATI: u32 = 34683;
pub const GL_BUMP_TARGET_ATI: u32 = 34684;
pub const GL_ATI_fragment_shader: u32 = 1;
pub const GL_FRAGMENT_SHADER_ATI: u32 = 35104;
pub const GL_REG_0_ATI: u32 = 35105;
pub const GL_REG_1_ATI: u32 = 35106;
pub const GL_REG_2_ATI: u32 = 35107;
pub const GL_REG_3_ATI: u32 = 35108;
pub const GL_REG_4_ATI: u32 = 35109;
pub const GL_REG_5_ATI: u32 = 35110;
pub const GL_REG_6_ATI: u32 = 35111;
pub const GL_REG_7_ATI: u32 = 35112;
pub const GL_REG_8_ATI: u32 = 35113;
pub const GL_REG_9_ATI: u32 = 35114;
pub const GL_REG_10_ATI: u32 = 35115;
pub const GL_REG_11_ATI: u32 = 35116;
pub const GL_REG_12_ATI: u32 = 35117;
pub const GL_REG_13_ATI: u32 = 35118;
pub const GL_REG_14_ATI: u32 = 35119;
pub const GL_REG_15_ATI: u32 = 35120;
pub const GL_REG_16_ATI: u32 = 35121;
pub const GL_REG_17_ATI: u32 = 35122;
pub const GL_REG_18_ATI: u32 = 35123;
pub const GL_REG_19_ATI: u32 = 35124;
pub const GL_REG_20_ATI: u32 = 35125;
pub const GL_REG_21_ATI: u32 = 35126;
pub const GL_REG_22_ATI: u32 = 35127;
pub const GL_REG_23_ATI: u32 = 35128;
pub const GL_REG_24_ATI: u32 = 35129;
pub const GL_REG_25_ATI: u32 = 35130;
pub const GL_REG_26_ATI: u32 = 35131;
pub const GL_REG_27_ATI: u32 = 35132;
pub const GL_REG_28_ATI: u32 = 35133;
pub const GL_REG_29_ATI: u32 = 35134;
pub const GL_REG_30_ATI: u32 = 35135;
pub const GL_REG_31_ATI: u32 = 35136;
pub const GL_CON_0_ATI: u32 = 35137;
pub const GL_CON_1_ATI: u32 = 35138;
pub const GL_CON_2_ATI: u32 = 35139;
pub const GL_CON_3_ATI: u32 = 35140;
pub const GL_CON_4_ATI: u32 = 35141;
pub const GL_CON_5_ATI: u32 = 35142;
pub const GL_CON_6_ATI: u32 = 35143;
pub const GL_CON_7_ATI: u32 = 35144;
pub const GL_CON_8_ATI: u32 = 35145;
pub const GL_CON_9_ATI: u32 = 35146;
pub const GL_CON_10_ATI: u32 = 35147;
pub const GL_CON_11_ATI: u32 = 35148;
pub const GL_CON_12_ATI: u32 = 35149;
pub const GL_CON_13_ATI: u32 = 35150;
pub const GL_CON_14_ATI: u32 = 35151;
pub const GL_CON_15_ATI: u32 = 35152;
pub const GL_CON_16_ATI: u32 = 35153;
pub const GL_CON_17_ATI: u32 = 35154;
pub const GL_CON_18_ATI: u32 = 35155;
pub const GL_CON_19_ATI: u32 = 35156;
pub const GL_CON_20_ATI: u32 = 35157;
pub const GL_CON_21_ATI: u32 = 35158;
pub const GL_CON_22_ATI: u32 = 35159;
pub const GL_CON_23_ATI: u32 = 35160;
pub const GL_CON_24_ATI: u32 = 35161;
pub const GL_CON_25_ATI: u32 = 35162;
pub const GL_CON_26_ATI: u32 = 35163;
pub const GL_CON_27_ATI: u32 = 35164;
pub const GL_CON_28_ATI: u32 = 35165;
pub const GL_CON_29_ATI: u32 = 35166;
pub const GL_CON_30_ATI: u32 = 35167;
pub const GL_CON_31_ATI: u32 = 35168;
pub const GL_MOV_ATI: u32 = 35169;
pub const GL_ADD_ATI: u32 = 35171;
pub const GL_MUL_ATI: u32 = 35172;
pub const GL_SUB_ATI: u32 = 35173;
pub const GL_DOT3_ATI: u32 = 35174;
pub const GL_DOT4_ATI: u32 = 35175;
pub const GL_MAD_ATI: u32 = 35176;
pub const GL_LERP_ATI: u32 = 35177;
pub const GL_CND_ATI: u32 = 35178;
pub const GL_CND0_ATI: u32 = 35179;
pub const GL_DOT2_ADD_ATI: u32 = 35180;
pub const GL_SECONDARY_INTERPOLATOR_ATI: u32 = 35181;
pub const GL_NUM_FRAGMENT_REGISTERS_ATI: u32 = 35182;
pub const GL_NUM_FRAGMENT_CONSTANTS_ATI: u32 = 35183;
pub const GL_NUM_PASSES_ATI: u32 = 35184;
pub const GL_NUM_INSTRUCTIONS_PER_PASS_ATI: u32 = 35185;
pub const GL_NUM_INSTRUCTIONS_TOTAL_ATI: u32 = 35186;
pub const GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI: u32 = 35187;
pub const GL_NUM_LOOPBACK_COMPONENTS_ATI: u32 = 35188;
pub const GL_COLOR_ALPHA_PAIRING_ATI: u32 = 35189;
pub const GL_SWIZZLE_STR_ATI: u32 = 35190;
pub const GL_SWIZZLE_STQ_ATI: u32 = 35191;
pub const GL_SWIZZLE_STR_DR_ATI: u32 = 35192;
pub const GL_SWIZZLE_STQ_DQ_ATI: u32 = 35193;
pub const GL_SWIZZLE_STRQ_ATI: u32 = 35194;
pub const GL_SWIZZLE_STRQ_DQ_ATI: u32 = 35195;
pub const GL_RED_BIT_ATI: u32 = 1;
pub const GL_GREEN_BIT_ATI: u32 = 2;
pub const GL_BLUE_BIT_ATI: u32 = 4;
pub const GL_2X_BIT_ATI: u32 = 1;
pub const GL_4X_BIT_ATI: u32 = 2;
pub const GL_8X_BIT_ATI: u32 = 4;
pub const GL_HALF_BIT_ATI: u32 = 8;
pub const GL_QUARTER_BIT_ATI: u32 = 16;
pub const GL_EIGHTH_BIT_ATI: u32 = 32;
pub const GL_SATURATE_BIT_ATI: u32 = 64;
pub const GL_COMP_BIT_ATI: u32 = 2;
pub const GL_NEGATE_BIT_ATI: u32 = 4;
pub const GL_BIAS_BIT_ATI: u32 = 8;
pub const GL_ATI_map_object_buffer: u32 = 1;
pub const GL_ATI_meminfo: u32 = 1;
pub const GL_VBO_FREE_MEMORY_ATI: u32 = 34811;
pub const GL_TEXTURE_FREE_MEMORY_ATI: u32 = 34812;
pub const GL_RENDERBUFFER_FREE_MEMORY_ATI: u32 = 34813;
pub const GL_ATI_pixel_format_float: u32 = 1;
pub const GL_RGBA_FLOAT_MODE_ATI: u32 = 34848;
pub const GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI: u32 = 34869;
pub const GL_ATI_pn_triangles: u32 = 1;
pub const GL_PN_TRIANGLES_ATI: u32 = 34800;
pub const GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI: u32 = 34801;
pub const GL_PN_TRIANGLES_POINT_MODE_ATI: u32 = 34802;
pub const GL_PN_TRIANGLES_NORMAL_MODE_ATI: u32 = 34803;
pub const GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI: u32 = 34804;
pub const GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI: u32 = 34805;
pub const GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI: u32 = 34806;
pub const GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI: u32 = 34807;
pub const GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI: u32 = 34808;
pub const GL_ATI_separate_stencil: u32 = 1;
pub const GL_STENCIL_BACK_FUNC_ATI: u32 = 34816;
pub const GL_STENCIL_BACK_FAIL_ATI: u32 = 34817;
pub const GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI: u32 = 34818;
pub const GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI: u32 = 34819;
pub const GL_ATI_text_fragment_shader: u32 = 1;
pub const GL_TEXT_FRAGMENT_SHADER_ATI: u32 = 33280;
pub const GL_ATI_texture_env_combine3: u32 = 1;
pub const GL_MODULATE_ADD_ATI: u32 = 34628;
pub const GL_MODULATE_SIGNED_ADD_ATI: u32 = 34629;
pub const GL_MODULATE_SUBTRACT_ATI: u32 = 34630;
pub const GL_ATI_texture_float: u32 = 1;
pub const GL_RGBA_FLOAT32_ATI: u32 = 34836;
pub const GL_RGB_FLOAT32_ATI: u32 = 34837;
pub const GL_ALPHA_FLOAT32_ATI: u32 = 34838;
pub const GL_INTENSITY_FLOAT32_ATI: u32 = 34839;
pub const GL_LUMINANCE_FLOAT32_ATI: u32 = 34840;
pub const GL_LUMINANCE_ALPHA_FLOAT32_ATI: u32 = 34841;
pub const GL_RGBA_FLOAT16_ATI: u32 = 34842;
pub const GL_RGB_FLOAT16_ATI: u32 = 34843;
pub const GL_ALPHA_FLOAT16_ATI: u32 = 34844;
pub const GL_INTENSITY_FLOAT16_ATI: u32 = 34845;
pub const GL_LUMINANCE_FLOAT16_ATI: u32 = 34846;
pub const GL_LUMINANCE_ALPHA_FLOAT16_ATI: u32 = 34847;
pub const GL_ATI_texture_mirror_once: u32 = 1;
pub const GL_MIRROR_CLAMP_ATI: u32 = 34626;
pub const GL_MIRROR_CLAMP_TO_EDGE_ATI: u32 = 34627;
pub const GL_ATI_vertex_array_object: u32 = 1;
pub const GL_STATIC_ATI: u32 = 34656;
pub const GL_DYNAMIC_ATI: u32 = 34657;
pub const GL_PRESERVE_ATI: u32 = 34658;
pub const GL_DISCARD_ATI: u32 = 34659;
pub const GL_OBJECT_BUFFER_SIZE_ATI: u32 = 34660;
pub const GL_OBJECT_BUFFER_USAGE_ATI: u32 = 34661;
pub const GL_ARRAY_OBJECT_BUFFER_ATI: u32 = 34662;
pub const GL_ARRAY_OBJECT_OFFSET_ATI: u32 = 34663;
pub const GL_ATI_vertex_attrib_array_object: u32 = 1;
pub const GL_ATI_vertex_streams: u32 = 1;
pub const GL_MAX_VERTEX_STREAMS_ATI: u32 = 34667;
pub const GL_VERTEX_STREAM0_ATI: u32 = 34668;
pub const GL_VERTEX_STREAM1_ATI: u32 = 34669;
pub const GL_VERTEX_STREAM2_ATI: u32 = 34670;
pub const GL_VERTEX_STREAM3_ATI: u32 = 34671;
pub const GL_VERTEX_STREAM4_ATI: u32 = 34672;
pub const GL_VERTEX_STREAM5_ATI: u32 = 34673;
pub const GL_VERTEX_STREAM6_ATI: u32 = 34674;
pub const GL_VERTEX_STREAM7_ATI: u32 = 34675;
pub const GL_VERTEX_SOURCE_ATI: u32 = 34676;
pub const GL_EXT_422_pixels: u32 = 1;
pub const GL_422_EXT: u32 = 32972;
pub const GL_422_REV_EXT: u32 = 32973;
pub const GL_422_AVERAGE_EXT: u32 = 32974;
pub const GL_422_REV_AVERAGE_EXT: u32 = 32975;
pub const GL_EXT_abgr: u32 = 1;
pub const GL_ABGR_EXT: u32 = 32768;
pub const GL_EXT_bgra: u32 = 1;
pub const GL_BGR_EXT: u32 = 32992;
pub const GL_BGRA_EXT: u32 = 32993;
pub const GL_EXT_bindable_uniform: u32 = 1;
pub const GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT: u32 = 36322;
pub const GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT: u32 = 36323;
pub const GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT: u32 = 36324;
pub const GL_MAX_BINDABLE_UNIFORM_SIZE_EXT: u32 = 36333;
pub const GL_UNIFORM_BUFFER_EXT: u32 = 36334;
pub const GL_UNIFORM_BUFFER_BINDING_EXT: u32 = 36335;
pub const GL_EXT_blend_color: u32 = 1;
pub const GL_CONSTANT_COLOR_EXT: u32 = 32769;
pub const GL_ONE_MINUS_CONSTANT_COLOR_EXT: u32 = 32770;
pub const GL_CONSTANT_ALPHA_EXT: u32 = 32771;
pub const GL_ONE_MINUS_CONSTANT_ALPHA_EXT: u32 = 32772;
pub const GL_BLEND_COLOR_EXT: u32 = 32773;
pub const GL_EXT_blend_equation_separate: u32 = 1;
pub const GL_BLEND_EQUATION_RGB_EXT: u32 = 32777;
pub const GL_BLEND_EQUATION_ALPHA_EXT: u32 = 34877;
pub const GL_EXT_blend_func_separate: u32 = 1;
pub const GL_BLEND_DST_RGB_EXT: u32 = 32968;
pub const GL_BLEND_SRC_RGB_EXT: u32 = 32969;
pub const GL_BLEND_DST_ALPHA_EXT: u32 = 32970;
pub const GL_BLEND_SRC_ALPHA_EXT: u32 = 32971;
pub const GL_EXT_blend_logic_op: u32 = 1;
pub const GL_EXT_blend_minmax: u32 = 1;
pub const GL_MIN_EXT: u32 = 32775;
pub const GL_MAX_EXT: u32 = 32776;
pub const GL_FUNC_ADD_EXT: u32 = 32774;
pub const GL_BLEND_EQUATION_EXT: u32 = 32777;
pub const GL_EXT_blend_subtract: u32 = 1;
pub const GL_FUNC_SUBTRACT_EXT: u32 = 32778;
pub const GL_FUNC_REVERSE_SUBTRACT_EXT: u32 = 32779;
pub const GL_EXT_clip_volume_hint: u32 = 1;
pub const GL_CLIP_VOLUME_CLIPPING_HINT_EXT: u32 = 33008;
pub const GL_EXT_cmyka: u32 = 1;
pub const GL_CMYK_EXT: u32 = 32780;
pub const GL_CMYKA_EXT: u32 = 32781;
pub const GL_PACK_CMYK_HINT_EXT: u32 = 32782;
pub const GL_UNPACK_CMYK_HINT_EXT: u32 = 32783;
pub const GL_EXT_color_subtable: u32 = 1;
pub const GL_EXT_compiled_vertex_array: u32 = 1;
pub const GL_ARRAY_ELEMENT_LOCK_FIRST_EXT: u32 = 33192;
pub const GL_ARRAY_ELEMENT_LOCK_COUNT_EXT: u32 = 33193;
pub const GL_EXT_convolution: u32 = 1;
pub const GL_CONVOLUTION_1D_EXT: u32 = 32784;
pub const GL_CONVOLUTION_2D_EXT: u32 = 32785;
pub const GL_SEPARABLE_2D_EXT: u32 = 32786;
pub const GL_CONVOLUTION_BORDER_MODE_EXT: u32 = 32787;
pub const GL_CONVOLUTION_FILTER_SCALE_EXT: u32 = 32788;
pub const GL_CONVOLUTION_FILTER_BIAS_EXT: u32 = 32789;
pub const GL_REDUCE_EXT: u32 = 32790;
pub const GL_CONVOLUTION_FORMAT_EXT: u32 = 32791;
pub const GL_CONVOLUTION_WIDTH_EXT: u32 = 32792;
pub const GL_CONVOLUTION_HEIGHT_EXT: u32 = 32793;
pub const GL_MAX_CONVOLUTION_WIDTH_EXT: u32 = 32794;
pub const GL_MAX_CONVOLUTION_HEIGHT_EXT: u32 = 32795;
pub const GL_POST_CONVOLUTION_RED_SCALE_EXT: u32 = 32796;
pub const GL_POST_CONVOLUTION_GREEN_SCALE_EXT: u32 = 32797;
pub const GL_POST_CONVOLUTION_BLUE_SCALE_EXT: u32 = 32798;
pub const GL_POST_CONVOLUTION_ALPHA_SCALE_EXT: u32 = 32799;
pub const GL_POST_CONVOLUTION_RED_BIAS_EXT: u32 = 32800;
pub const GL_POST_CONVOLUTION_GREEN_BIAS_EXT: u32 = 32801;
pub const GL_POST_CONVOLUTION_BLUE_BIAS_EXT: u32 = 32802;
pub const GL_POST_CONVOLUTION_ALPHA_BIAS_EXT: u32 = 32803;
pub const GL_EXT_coordinate_frame: u32 = 1;
pub const GL_TANGENT_ARRAY_EXT: u32 = 33849;
pub const GL_BINORMAL_ARRAY_EXT: u32 = 33850;
pub const GL_CURRENT_TANGENT_EXT: u32 = 33851;
pub const GL_CURRENT_BINORMAL_EXT: u32 = 33852;
pub const GL_TANGENT_ARRAY_TYPE_EXT: u32 = 33854;
pub const GL_TANGENT_ARRAY_STRIDE_EXT: u32 = 33855;
pub const GL_BINORMAL_ARRAY_TYPE_EXT: u32 = 33856;
pub const GL_BINORMAL_ARRAY_STRIDE_EXT: u32 = 33857;
pub const GL_TANGENT_ARRAY_POINTER_EXT: u32 = 33858;
pub const GL_BINORMAL_ARRAY_POINTER_EXT: u32 = 33859;
pub const GL_MAP1_TANGENT_EXT: u32 = 33860;
pub const GL_MAP2_TANGENT_EXT: u32 = 33861;
pub const GL_MAP1_BINORMAL_EXT: u32 = 33862;
pub const GL_MAP2_BINORMAL_EXT: u32 = 33863;
pub const GL_EXT_copy_texture: u32 = 1;
pub const GL_EXT_cull_vertex: u32 = 1;
pub const GL_CULL_VERTEX_EXT: u32 = 33194;
pub const GL_CULL_VERTEX_EYE_POSITION_EXT: u32 = 33195;
pub const GL_CULL_VERTEX_OBJECT_POSITION_EXT: u32 = 33196;
pub const GL_EXT_debug_label: u32 = 1;
pub const GL_PROGRAM_PIPELINE_OBJECT_EXT: u32 = 35407;
pub const GL_PROGRAM_OBJECT_EXT: u32 = 35648;
pub const GL_SHADER_OBJECT_EXT: u32 = 35656;
pub const GL_BUFFER_OBJECT_EXT: u32 = 37201;
pub const GL_QUERY_OBJECT_EXT: u32 = 37203;
pub const GL_VERTEX_ARRAY_OBJECT_EXT: u32 = 37204;
pub const GL_EXT_debug_marker: u32 = 1;
pub const GL_EXT_depth_bounds_test: u32 = 1;
pub const GL_DEPTH_BOUNDS_TEST_EXT: u32 = 34960;
pub const GL_DEPTH_BOUNDS_EXT: u32 = 34961;
pub const GL_EXT_direct_state_access: u32 = 1;
pub const GL_PROGRAM_MATRIX_EXT: u32 = 36397;
pub const GL_TRANSPOSE_PROGRAM_MATRIX_EXT: u32 = 36398;
pub const GL_PROGRAM_MATRIX_STACK_DEPTH_EXT: u32 = 36399;
pub const GL_EXT_draw_buffers2: u32 = 1;
pub const GL_EXT_draw_instanced: u32 = 1;
pub const GL_EXT_draw_range_elements: u32 = 1;
pub const GL_MAX_ELEMENTS_VERTICES_EXT: u32 = 33000;
pub const GL_MAX_ELEMENTS_INDICES_EXT: u32 = 33001;
pub const GL_EXT_fog_coord: u32 = 1;
pub const GL_FOG_COORDINATE_SOURCE_EXT: u32 = 33872;
pub const GL_FOG_COORDINATE_EXT: u32 = 33873;
pub const GL_FRAGMENT_DEPTH_EXT: u32 = 33874;
pub const GL_CURRENT_FOG_COORDINATE_EXT: u32 = 33875;
pub const GL_FOG_COORDINATE_ARRAY_TYPE_EXT: u32 = 33876;
pub const GL_FOG_COORDINATE_ARRAY_STRIDE_EXT: u32 = 33877;
pub const GL_FOG_COORDINATE_ARRAY_POINTER_EXT: u32 = 33878;
pub const GL_FOG_COORDINATE_ARRAY_EXT: u32 = 33879;
pub const GL_EXT_framebuffer_blit: u32 = 1;
pub const GL_READ_FRAMEBUFFER_EXT: u32 = 36008;
pub const GL_DRAW_FRAMEBUFFER_EXT: u32 = 36009;
pub const GL_DRAW_FRAMEBUFFER_BINDING_EXT: u32 = 36006;
pub const GL_READ_FRAMEBUFFER_BINDING_EXT: u32 = 36010;
pub const GL_EXT_framebuffer_multisample: u32 = 1;
pub const GL_RENDERBUFFER_SAMPLES_EXT: u32 = 36011;
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT: u32 = 36182;
pub const GL_MAX_SAMPLES_EXT: u32 = 36183;
pub const GL_EXT_framebuffer_multisample_blit_scaled: u32 = 1;
pub const GL_SCALED_RESOLVE_FASTEST_EXT: u32 = 37050;
pub const GL_SCALED_RESOLVE_NICEST_EXT: u32 = 37051;
pub const GL_EXT_framebuffer_object: u32 = 1;
pub const GL_INVALID_FRAMEBUFFER_OPERATION_EXT: u32 = 1286;
pub const GL_MAX_RENDERBUFFER_SIZE_EXT: u32 = 34024;
pub const GL_FRAMEBUFFER_BINDING_EXT: u32 = 36006;
pub const GL_RENDERBUFFER_BINDING_EXT: u32 = 36007;
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT: u32 = 36048;
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT: u32 = 36049;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT: u32 = 36050;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT: u32 = 36051;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT: u32 = 36052;
pub const GL_FRAMEBUFFER_COMPLETE_EXT: u32 = 36053;
pub const GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT: u32 = 36054;
pub const GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT: u32 = 36055;
pub const GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT: u32 = 36057;
pub const GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT: u32 = 36058;
pub const GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT: u32 = 36059;
pub const GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT: u32 = 36060;
pub const GL_FRAMEBUFFER_UNSUPPORTED_EXT: u32 = 36061;
pub const GL_MAX_COLOR_ATTACHMENTS_EXT: u32 = 36063;
pub const GL_COLOR_ATTACHMENT0_EXT: u32 = 36064;
pub const GL_COLOR_ATTACHMENT1_EXT: u32 = 36065;
pub const GL_COLOR_ATTACHMENT2_EXT: u32 = 36066;
pub const GL_COLOR_ATTACHMENT3_EXT: u32 = 36067;
pub const GL_COLOR_ATTACHMENT4_EXT: u32 = 36068;
pub const GL_COLOR_ATTACHMENT5_EXT: u32 = 36069;
pub const GL_COLOR_ATTACHMENT6_EXT: u32 = 36070;
pub const GL_COLOR_ATTACHMENT7_EXT: u32 = 36071;
pub const GL_COLOR_ATTACHMENT8_EXT: u32 = 36072;
pub const GL_COLOR_ATTACHMENT9_EXT: u32 = 36073;
pub const GL_COLOR_ATTACHMENT10_EXT: u32 = 36074;
pub const GL_COLOR_ATTACHMENT11_EXT: u32 = 36075;
pub const GL_COLOR_ATTACHMENT12_EXT: u32 = 36076;
pub const GL_COLOR_ATTACHMENT13_EXT: u32 = 36077;
pub const GL_COLOR_ATTACHMENT14_EXT: u32 = 36078;
pub const GL_COLOR_ATTACHMENT15_EXT: u32 = 36079;
pub const GL_DEPTH_ATTACHMENT_EXT: u32 = 36096;
pub const GL_STENCIL_ATTACHMENT_EXT: u32 = 36128;
pub const GL_FRAMEBUFFER_EXT: u32 = 36160;
pub const GL_RENDERBUFFER_EXT: u32 = 36161;
pub const GL_RENDERBUFFER_WIDTH_EXT: u32 = 36162;
pub const GL_RENDERBUFFER_HEIGHT_EXT: u32 = 36163;
pub const GL_RENDERBUFFER_INTERNAL_FORMAT_EXT: u32 = 36164;
pub const GL_STENCIL_INDEX1_EXT: u32 = 36166;
pub const GL_STENCIL_INDEX4_EXT: u32 = 36167;
pub const GL_STENCIL_INDEX8_EXT: u32 = 36168;
pub const GL_STENCIL_INDEX16_EXT: u32 = 36169;
pub const GL_RENDERBUFFER_RED_SIZE_EXT: u32 = 36176;
pub const GL_RENDERBUFFER_GREEN_SIZE_EXT: u32 = 36177;
pub const GL_RENDERBUFFER_BLUE_SIZE_EXT: u32 = 36178;
pub const GL_RENDERBUFFER_ALPHA_SIZE_EXT: u32 = 36179;
pub const GL_RENDERBUFFER_DEPTH_SIZE_EXT: u32 = 36180;
pub const GL_RENDERBUFFER_STENCIL_SIZE_EXT: u32 = 36181;
pub const GL_EXT_framebuffer_sRGB: u32 = 1;
pub const GL_FRAMEBUFFER_SRGB_EXT: u32 = 36281;
pub const GL_FRAMEBUFFER_SRGB_CAPABLE_EXT: u32 = 36282;
pub const GL_EXT_geometry_shader4: u32 = 1;
pub const GL_GEOMETRY_SHADER_EXT: u32 = 36313;
pub const GL_GEOMETRY_VERTICES_OUT_EXT: u32 = 36314;
pub const GL_GEOMETRY_INPUT_TYPE_EXT: u32 = 36315;
pub const GL_GEOMETRY_OUTPUT_TYPE_EXT: u32 = 36316;
pub const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT: u32 = 35881;
pub const GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT: u32 = 36317;
pub const GL_MAX_VERTEX_VARYING_COMPONENTS_EXT: u32 = 36318;
pub const GL_MAX_VARYING_COMPONENTS_EXT: u32 = 35659;
pub const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT: u32 = 36319;
pub const GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT: u32 = 36320;
pub const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT: u32 = 36321;
pub const GL_LINES_ADJACENCY_EXT: u32 = 10;
pub const GL_LINE_STRIP_ADJACENCY_EXT: u32 = 11;
pub const GL_TRIANGLES_ADJACENCY_EXT: u32 = 12;
pub const GL_TRIANGLE_STRIP_ADJACENCY_EXT: u32 = 13;
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT: u32 = 36264;
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT: u32 = 36265;
pub const GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT: u32 = 36263;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT: u32 = 36052;
pub const GL_PROGRAM_POINT_SIZE_EXT: u32 = 34370;
pub const GL_EXT_gpu_program_parameters: u32 = 1;
pub const GL_EXT_gpu_shader4: u32 = 1;
pub const GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT: u32 = 35069;
pub const GL_SAMPLER_1D_ARRAY_EXT: u32 = 36288;
pub const GL_SAMPLER_2D_ARRAY_EXT: u32 = 36289;
pub const GL_SAMPLER_BUFFER_EXT: u32 = 36290;
pub const GL_SAMPLER_1D_ARRAY_SHADOW_EXT: u32 = 36291;
pub const GL_SAMPLER_2D_ARRAY_SHADOW_EXT: u32 = 36292;
pub const GL_SAMPLER_CUBE_SHADOW_EXT: u32 = 36293;
pub const GL_UNSIGNED_INT_VEC2_EXT: u32 = 36294;
pub const GL_UNSIGNED_INT_VEC3_EXT: u32 = 36295;
pub const GL_UNSIGNED_INT_VEC4_EXT: u32 = 36296;
pub const GL_INT_SAMPLER_1D_EXT: u32 = 36297;
pub const GL_INT_SAMPLER_2D_EXT: u32 = 36298;
pub const GL_INT_SAMPLER_3D_EXT: u32 = 36299;
pub const GL_INT_SAMPLER_CUBE_EXT: u32 = 36300;
pub const GL_INT_SAMPLER_2D_RECT_EXT: u32 = 36301;
pub const GL_INT_SAMPLER_1D_ARRAY_EXT: u32 = 36302;
pub const GL_INT_SAMPLER_2D_ARRAY_EXT: u32 = 36303;
pub const GL_INT_SAMPLER_BUFFER_EXT: u32 = 36304;
pub const GL_UNSIGNED_INT_SAMPLER_1D_EXT: u32 = 36305;
pub const GL_UNSIGNED_INT_SAMPLER_2D_EXT: u32 = 36306;
pub const GL_UNSIGNED_INT_SAMPLER_3D_EXT: u32 = 36307;
pub const GL_UNSIGNED_INT_SAMPLER_CUBE_EXT: u32 = 36308;
pub const GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT: u32 = 36309;
pub const GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT: u32 = 36310;
pub const GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT: u32 = 36311;
pub const GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT: u32 = 36312;
pub const GL_MIN_PROGRAM_TEXEL_OFFSET_EXT: u32 = 35076;
pub const GL_MAX_PROGRAM_TEXEL_OFFSET_EXT: u32 = 35077;
pub const GL_EXT_histogram: u32 = 1;
pub const GL_HISTOGRAM_EXT: u32 = 32804;
pub const GL_PROXY_HISTOGRAM_EXT: u32 = 32805;
pub const GL_HISTOGRAM_WIDTH_EXT: u32 = 32806;
pub const GL_HISTOGRAM_FORMAT_EXT: u32 = 32807;
pub const GL_HISTOGRAM_RED_SIZE_EXT: u32 = 32808;
pub const GL_HISTOGRAM_GREEN_SIZE_EXT: u32 = 32809;
pub const GL_HISTOGRAM_BLUE_SIZE_EXT: u32 = 32810;
pub const GL_HISTOGRAM_ALPHA_SIZE_EXT: u32 = 32811;
pub const GL_HISTOGRAM_LUMINANCE_SIZE_EXT: u32 = 32812;
pub const GL_HISTOGRAM_SINK_EXT: u32 = 32813;
pub const GL_MINMAX_EXT: u32 = 32814;
pub const GL_MINMAX_FORMAT_EXT: u32 = 32815;
pub const GL_MINMAX_SINK_EXT: u32 = 32816;
pub const GL_TABLE_TOO_LARGE_EXT: u32 = 32817;
pub const GL_EXT_index_array_formats: u32 = 1;
pub const GL_IUI_V2F_EXT: u32 = 33197;
pub const GL_IUI_V3F_EXT: u32 = 33198;
pub const GL_IUI_N3F_V2F_EXT: u32 = 33199;
pub const GL_IUI_N3F_V3F_EXT: u32 = 33200;
pub const GL_T2F_IUI_V2F_EXT: u32 = 33201;
pub const GL_T2F_IUI_V3F_EXT: u32 = 33202;
pub const GL_T2F_IUI_N3F_V2F_EXT: u32 = 33203;
pub const GL_T2F_IUI_N3F_V3F_EXT: u32 = 33204;
pub const GL_EXT_index_func: u32 = 1;
pub const GL_INDEX_TEST_EXT: u32 = 33205;
pub const GL_INDEX_TEST_FUNC_EXT: u32 = 33206;
pub const GL_INDEX_TEST_REF_EXT: u32 = 33207;
pub const GL_EXT_index_material: u32 = 1;
pub const GL_INDEX_MATERIAL_EXT: u32 = 33208;
pub const GL_INDEX_MATERIAL_PARAMETER_EXT: u32 = 33209;
pub const GL_INDEX_MATERIAL_FACE_EXT: u32 = 33210;
pub const GL_EXT_index_texture: u32 = 1;
pub const GL_EXT_light_texture: u32 = 1;
pub const GL_FRAGMENT_MATERIAL_EXT: u32 = 33609;
pub const GL_FRAGMENT_NORMAL_EXT: u32 = 33610;
pub const GL_FRAGMENT_COLOR_EXT: u32 = 33612;
pub const GL_ATTENUATION_EXT: u32 = 33613;
pub const GL_SHADOW_ATTENUATION_EXT: u32 = 33614;
pub const GL_TEXTURE_APPLICATION_MODE_EXT: u32 = 33615;
pub const GL_TEXTURE_LIGHT_EXT: u32 = 33616;
pub const GL_TEXTURE_MATERIAL_FACE_EXT: u32 = 33617;
pub const GL_TEXTURE_MATERIAL_PARAMETER_EXT: u32 = 33618;
pub const GL_EXT_misc_attribute: u32 = 1;
pub const GL_EXT_multi_draw_arrays: u32 = 1;
pub const GL_EXT_multisample: u32 = 1;
pub const GL_MULTISAMPLE_EXT: u32 = 32925;
pub const GL_SAMPLE_ALPHA_TO_MASK_EXT: u32 = 32926;
pub const GL_SAMPLE_ALPHA_TO_ONE_EXT: u32 = 32927;
pub const GL_SAMPLE_MASK_EXT: u32 = 32928;
pub const GL_1PASS_EXT: u32 = 32929;
pub const GL_2PASS_0_EXT: u32 = 32930;
pub const GL_2PASS_1_EXT: u32 = 32931;
pub const GL_4PASS_0_EXT: u32 = 32932;
pub const GL_4PASS_1_EXT: u32 = 32933;
pub const GL_4PASS_2_EXT: u32 = 32934;
pub const GL_4PASS_3_EXT: u32 = 32935;
pub const GL_SAMPLE_BUFFERS_EXT: u32 = 32936;
pub const GL_SAMPLES_EXT: u32 = 32937;
pub const GL_SAMPLE_MASK_VALUE_EXT: u32 = 32938;
pub const GL_SAMPLE_MASK_INVERT_EXT: u32 = 32939;
pub const GL_SAMPLE_PATTERN_EXT: u32 = 32940;
pub const GL_MULTISAMPLE_BIT_EXT: u32 = 536870912;
pub const GL_EXT_packed_depth_stencil: u32 = 1;
pub const GL_DEPTH_STENCIL_EXT: u32 = 34041;
pub const GL_UNSIGNED_INT_24_8_EXT: u32 = 34042;
pub const GL_DEPTH24_STENCIL8_EXT: u32 = 35056;
pub const GL_TEXTURE_STENCIL_SIZE_EXT: u32 = 35057;
pub const GL_EXT_packed_float: u32 = 1;
pub const GL_R11F_G11F_B10F_EXT: u32 = 35898;
pub const GL_UNSIGNED_INT_10F_11F_11F_REV_EXT: u32 = 35899;
pub const GL_RGBA_SIGNED_COMPONENTS_EXT: u32 = 35900;
pub const GL_EXT_packed_pixels: u32 = 1;
pub const GL_UNSIGNED_BYTE_3_3_2_EXT: u32 = 32818;
pub const GL_UNSIGNED_SHORT_4_4_4_4_EXT: u32 = 32819;
pub const GL_UNSIGNED_SHORT_5_5_5_1_EXT: u32 = 32820;
pub const GL_UNSIGNED_INT_8_8_8_8_EXT: u32 = 32821;
pub const GL_UNSIGNED_INT_10_10_10_2_EXT: u32 = 32822;
pub const GL_EXT_paletted_texture: u32 = 1;
pub const GL_COLOR_INDEX1_EXT: u32 = 32994;
pub const GL_COLOR_INDEX2_EXT: u32 = 32995;
pub const GL_COLOR_INDEX4_EXT: u32 = 32996;
pub const GL_COLOR_INDEX8_EXT: u32 = 32997;
pub const GL_COLOR_INDEX12_EXT: u32 = 32998;
pub const GL_COLOR_INDEX16_EXT: u32 = 32999;
pub const GL_TEXTURE_INDEX_SIZE_EXT: u32 = 33005;
pub const GL_EXT_pixel_buffer_object: u32 = 1;
pub const GL_PIXEL_PACK_BUFFER_EXT: u32 = 35051;
pub const GL_PIXEL_UNPACK_BUFFER_EXT: u32 = 35052;
pub const GL_PIXEL_PACK_BUFFER_BINDING_EXT: u32 = 35053;
pub const GL_PIXEL_UNPACK_BUFFER_BINDING_EXT: u32 = 35055;
pub const GL_EXT_pixel_transform: u32 = 1;
pub const GL_PIXEL_TRANSFORM_2D_EXT: u32 = 33584;
pub const GL_PIXEL_MAG_FILTER_EXT: u32 = 33585;
pub const GL_PIXEL_MIN_FILTER_EXT: u32 = 33586;
pub const GL_PIXEL_CUBIC_WEIGHT_EXT: u32 = 33587;
pub const GL_CUBIC_EXT: u32 = 33588;
pub const GL_AVERAGE_EXT: u32 = 33589;
pub const GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT: u32 = 33590;
pub const GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT: u32 = 33591;
pub const GL_PIXEL_TRANSFORM_2D_MATRIX_EXT: u32 = 33592;
pub const GL_EXT_pixel_transform_color_table: u32 = 1;
pub const GL_EXT_point_parameters: u32 = 1;
pub const GL_POINT_SIZE_MIN_EXT: u32 = 33062;
pub const GL_POINT_SIZE_MAX_EXT: u32 = 33063;
pub const GL_POINT_FADE_THRESHOLD_SIZE_EXT: u32 = 33064;
pub const GL_DISTANCE_ATTENUATION_EXT: u32 = 33065;
pub const GL_EXT_polygon_offset: u32 = 1;
pub const GL_POLYGON_OFFSET_EXT: u32 = 32823;
pub const GL_POLYGON_OFFSET_FACTOR_EXT: u32 = 32824;
pub const GL_POLYGON_OFFSET_BIAS_EXT: u32 = 32825;
pub const GL_EXT_provoking_vertex: u32 = 1;
pub const GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT: u32 = 36428;
pub const GL_FIRST_VERTEX_CONVENTION_EXT: u32 = 36429;
pub const GL_LAST_VERTEX_CONVENTION_EXT: u32 = 36430;
pub const GL_PROVOKING_VERTEX_EXT: u32 = 36431;
pub const GL_EXT_rescale_normal: u32 = 1;
pub const GL_RESCALE_NORMAL_EXT: u32 = 32826;
pub const GL_EXT_secondary_color: u32 = 1;
pub const GL_COLOR_SUM_EXT: u32 = 33880;
pub const GL_CURRENT_SECONDARY_COLOR_EXT: u32 = 33881;
pub const GL_SECONDARY_COLOR_ARRAY_SIZE_EXT: u32 = 33882;
pub const GL_SECONDARY_COLOR_ARRAY_TYPE_EXT: u32 = 33883;
pub const GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT: u32 = 33884;
pub const GL_SECONDARY_COLOR_ARRAY_POINTER_EXT: u32 = 33885;
pub const GL_SECONDARY_COLOR_ARRAY_EXT: u32 = 33886;
pub const GL_EXT_separate_shader_objects: u32 = 1;
pub const GL_ACTIVE_PROGRAM_EXT: u32 = 35725;
pub const GL_EXT_separate_specular_color: u32 = 1;
pub const GL_LIGHT_MODEL_COLOR_CONTROL_EXT: u32 = 33272;
pub const GL_SINGLE_COLOR_EXT: u32 = 33273;
pub const GL_SEPARATE_SPECULAR_COLOR_EXT: u32 = 33274;
pub const GL_EXT_shader_image_load_formatted: u32 = 1;
pub const GL_EXT_shader_image_load_store: u32 = 1;
pub const GL_MAX_IMAGE_UNITS_EXT: u32 = 36664;
pub const GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT: u32 = 36665;
pub const GL_IMAGE_BINDING_NAME_EXT: u32 = 36666;
pub const GL_IMAGE_BINDING_LEVEL_EXT: u32 = 36667;
pub const GL_IMAGE_BINDING_LAYERED_EXT: u32 = 36668;
pub const GL_IMAGE_BINDING_LAYER_EXT: u32 = 36669;
pub const GL_IMAGE_BINDING_ACCESS_EXT: u32 = 36670;
pub const GL_IMAGE_1D_EXT: u32 = 36940;
pub const GL_IMAGE_2D_EXT: u32 = 36941;
pub const GL_IMAGE_3D_EXT: u32 = 36942;
pub const GL_IMAGE_2D_RECT_EXT: u32 = 36943;
pub const GL_IMAGE_CUBE_EXT: u32 = 36944;
pub const GL_IMAGE_BUFFER_EXT: u32 = 36945;
pub const GL_IMAGE_1D_ARRAY_EXT: u32 = 36946;
pub const GL_IMAGE_2D_ARRAY_EXT: u32 = 36947;
pub const GL_IMAGE_CUBE_MAP_ARRAY_EXT: u32 = 36948;
pub const GL_IMAGE_2D_MULTISAMPLE_EXT: u32 = 36949;
pub const GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT: u32 = 36950;
pub const GL_INT_IMAGE_1D_EXT: u32 = 36951;
pub const GL_INT_IMAGE_2D_EXT: u32 = 36952;
pub const GL_INT_IMAGE_3D_EXT: u32 = 36953;
pub const GL_INT_IMAGE_2D_RECT_EXT: u32 = 36954;
pub const GL_INT_IMAGE_CUBE_EXT: u32 = 36955;
pub const GL_INT_IMAGE_BUFFER_EXT: u32 = 36956;
pub const GL_INT_IMAGE_1D_ARRAY_EXT: u32 = 36957;
pub const GL_INT_IMAGE_2D_ARRAY_EXT: u32 = 36958;
pub const GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT: u32 = 36959;
pub const GL_INT_IMAGE_2D_MULTISAMPLE_EXT: u32 = 36960;
pub const GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT: u32 = 36961;
pub const GL_UNSIGNED_INT_IMAGE_1D_EXT: u32 = 36962;
pub const GL_UNSIGNED_INT_IMAGE_2D_EXT: u32 = 36963;
pub const GL_UNSIGNED_INT_IMAGE_3D_EXT: u32 = 36964;
pub const GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT: u32 = 36965;
pub const GL_UNSIGNED_INT_IMAGE_CUBE_EXT: u32 = 36966;
pub const GL_UNSIGNED_INT_IMAGE_BUFFER_EXT: u32 = 36967;
pub const GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT: u32 = 36968;
pub const GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT: u32 = 36969;
pub const GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT: u32 = 36970;
pub const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT: u32 = 36971;
pub const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT: u32 = 36972;
pub const GL_MAX_IMAGE_SAMPLES_EXT: u32 = 36973;
pub const GL_IMAGE_BINDING_FORMAT_EXT: u32 = 36974;
pub const GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT: u32 = 1;
pub const GL_ELEMENT_ARRAY_BARRIER_BIT_EXT: u32 = 2;
pub const GL_UNIFORM_BARRIER_BIT_EXT: u32 = 4;
pub const GL_TEXTURE_FETCH_BARRIER_BIT_EXT: u32 = 8;
pub const GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT: u32 = 32;
pub const GL_COMMAND_BARRIER_BIT_EXT: u32 = 64;
pub const GL_PIXEL_BUFFER_BARRIER_BIT_EXT: u32 = 128;
pub const GL_TEXTURE_UPDATE_BARRIER_BIT_EXT: u32 = 256;
pub const GL_BUFFER_UPDATE_BARRIER_BIT_EXT: u32 = 512;
pub const GL_FRAMEBUFFER_BARRIER_BIT_EXT: u32 = 1024;
pub const GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT: u32 = 2048;
pub const GL_ATOMIC_COUNTER_BARRIER_BIT_EXT: u32 = 4096;
pub const GL_ALL_BARRIER_BITS_EXT: u32 = 4294967295;
pub const GL_EXT_shader_integer_mix: u32 = 1;
pub const GL_EXT_shadow_funcs: u32 = 1;
pub const GL_EXT_shared_texture_palette: u32 = 1;
pub const GL_SHARED_TEXTURE_PALETTE_EXT: u32 = 33275;
pub const GL_EXT_stencil_clear_tag: u32 = 1;
pub const GL_STENCIL_TAG_BITS_EXT: u32 = 35058;
pub const GL_STENCIL_CLEAR_TAG_VALUE_EXT: u32 = 35059;
pub const GL_EXT_stencil_two_side: u32 = 1;
pub const GL_STENCIL_TEST_TWO_SIDE_EXT: u32 = 35088;
pub const GL_ACTIVE_STENCIL_FACE_EXT: u32 = 35089;
pub const GL_EXT_stencil_wrap: u32 = 1;
pub const GL_INCR_WRAP_EXT: u32 = 34055;
pub const GL_DECR_WRAP_EXT: u32 = 34056;
pub const GL_EXT_subtexture: u32 = 1;
pub const GL_EXT_texture: u32 = 1;
pub const GL_ALPHA4_EXT: u32 = 32827;
pub const GL_ALPHA8_EXT: u32 = 32828;
pub const GL_ALPHA12_EXT: u32 = 32829;
pub const GL_ALPHA16_EXT: u32 = 32830;
pub const GL_LUMINANCE4_EXT: u32 = 32831;
pub const GL_LUMINANCE8_EXT: u32 = 32832;
pub const GL_LUMINANCE12_EXT: u32 = 32833;
pub const GL_LUMINANCE16_EXT: u32 = 32834;
pub const GL_LUMINANCE4_ALPHA4_EXT: u32 = 32835;
pub const GL_LUMINANCE6_ALPHA2_EXT: u32 = 32836;
pub const GL_LUMINANCE8_ALPHA8_EXT: u32 = 32837;
pub const GL_LUMINANCE12_ALPHA4_EXT: u32 = 32838;
pub const GL_LUMINANCE12_ALPHA12_EXT: u32 = 32839;
pub const GL_LUMINANCE16_ALPHA16_EXT: u32 = 32840;
pub const GL_INTENSITY_EXT: u32 = 32841;
pub const GL_INTENSITY4_EXT: u32 = 32842;
pub const GL_INTENSITY8_EXT: u32 = 32843;
pub const GL_INTENSITY12_EXT: u32 = 32844;
pub const GL_INTENSITY16_EXT: u32 = 32845;
pub const GL_RGB2_EXT: u32 = 32846;
pub const GL_RGB4_EXT: u32 = 32847;
pub const GL_RGB5_EXT: u32 = 32848;
pub const GL_RGB8_EXT: u32 = 32849;
pub const GL_RGB10_EXT: u32 = 32850;
pub const GL_RGB12_EXT: u32 = 32851;
pub const GL_RGB16_EXT: u32 = 32852;
pub const GL_RGBA2_EXT: u32 = 32853;
pub const GL_RGBA4_EXT: u32 = 32854;
pub const GL_RGB5_A1_EXT: u32 = 32855;
pub const GL_RGBA8_EXT: u32 = 32856;
pub const GL_RGB10_A2_EXT: u32 = 32857;
pub const GL_RGBA12_EXT: u32 = 32858;
pub const GL_RGBA16_EXT: u32 = 32859;
pub const GL_TEXTURE_RED_SIZE_EXT: u32 = 32860;
pub const GL_TEXTURE_GREEN_SIZE_EXT: u32 = 32861;
pub const GL_TEXTURE_BLUE_SIZE_EXT: u32 = 32862;
pub const GL_TEXTURE_ALPHA_SIZE_EXT: u32 = 32863;
pub const GL_TEXTURE_LUMINANCE_SIZE_EXT: u32 = 32864;
pub const GL_TEXTURE_INTENSITY_SIZE_EXT: u32 = 32865;
pub const GL_REPLACE_EXT: u32 = 32866;
pub const GL_PROXY_TEXTURE_1D_EXT: u32 = 32867;
pub const GL_PROXY_TEXTURE_2D_EXT: u32 = 32868;
pub const GL_TEXTURE_TOO_LARGE_EXT: u32 = 32869;
pub const GL_EXT_texture3D: u32 = 1;
pub const GL_PACK_SKIP_IMAGES_EXT: u32 = 32875;
pub const GL_PACK_IMAGE_HEIGHT_EXT: u32 = 32876;
pub const GL_UNPACK_SKIP_IMAGES_EXT: u32 = 32877;
pub const GL_UNPACK_IMAGE_HEIGHT_EXT: u32 = 32878;
pub const GL_TEXTURE_3D_EXT: u32 = 32879;
pub const GL_PROXY_TEXTURE_3D_EXT: u32 = 32880;
pub const GL_TEXTURE_DEPTH_EXT: u32 = 32881;
pub const GL_TEXTURE_WRAP_R_EXT: u32 = 32882;
pub const GL_MAX_3D_TEXTURE_SIZE_EXT: u32 = 32883;
pub const GL_EXT_texture_array: u32 = 1;
pub const GL_TEXTURE_1D_ARRAY_EXT: u32 = 35864;
pub const GL_PROXY_TEXTURE_1D_ARRAY_EXT: u32 = 35865;
pub const GL_TEXTURE_2D_ARRAY_EXT: u32 = 35866;
pub const GL_PROXY_TEXTURE_2D_ARRAY_EXT: u32 = 35867;
pub const GL_TEXTURE_BINDING_1D_ARRAY_EXT: u32 = 35868;
pub const GL_TEXTURE_BINDING_2D_ARRAY_EXT: u32 = 35869;
pub const GL_MAX_ARRAY_TEXTURE_LAYERS_EXT: u32 = 35071;
pub const GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT: u32 = 34894;
pub const GL_EXT_texture_buffer_object: u32 = 1;
pub const GL_TEXTURE_BUFFER_EXT: u32 = 35882;
pub const GL_MAX_TEXTURE_BUFFER_SIZE_EXT: u32 = 35883;
pub const GL_TEXTURE_BINDING_BUFFER_EXT: u32 = 35884;
pub const GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT: u32 = 35885;
pub const GL_TEXTURE_BUFFER_FORMAT_EXT: u32 = 35886;
pub const GL_EXT_texture_compression_latc: u32 = 1;
pub const GL_COMPRESSED_LUMINANCE_LATC1_EXT: u32 = 35952;
pub const GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT: u32 = 35953;
pub const GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT: u32 = 35954;
pub const GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT: u32 = 35955;
pub const GL_EXT_texture_compression_rgtc: u32 = 1;
pub const GL_COMPRESSED_RED_RGTC1_EXT: u32 = 36283;
pub const GL_COMPRESSED_SIGNED_RED_RGTC1_EXT: u32 = 36284;
pub const GL_COMPRESSED_RED_GREEN_RGTC2_EXT: u32 = 36285;
pub const GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT: u32 = 36286;
pub const GL_EXT_texture_compression_s3tc: u32 = 1;
pub const GL_COMPRESSED_RGB_S3TC_DXT1_EXT: u32 = 33776;
pub const GL_COMPRESSED_RGBA_S3TC_DXT1_EXT: u32 = 33777;
pub const GL_COMPRESSED_RGBA_S3TC_DXT3_EXT: u32 = 33778;
pub const GL_COMPRESSED_RGBA_S3TC_DXT5_EXT: u32 = 33779;
pub const GL_EXT_texture_cube_map: u32 = 1;
pub const GL_NORMAL_MAP_EXT: u32 = 34065;
pub const GL_REFLECTION_MAP_EXT: u32 = 34066;
pub const GL_TEXTURE_CUBE_MAP_EXT: u32 = 34067;
pub const GL_TEXTURE_BINDING_CUBE_MAP_EXT: u32 = 34068;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT: u32 = 34069;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT: u32 = 34070;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT: u32 = 34071;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT: u32 = 34072;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT: u32 = 34073;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT: u32 = 34074;
pub const GL_PROXY_TEXTURE_CUBE_MAP_EXT: u32 = 34075;
pub const GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT: u32 = 34076;
pub const GL_EXT_texture_env_add: u32 = 1;
pub const GL_EXT_texture_env_combine: u32 = 1;
pub const GL_COMBINE_EXT: u32 = 34160;
pub const GL_COMBINE_RGB_EXT: u32 = 34161;
pub const GL_COMBINE_ALPHA_EXT: u32 = 34162;
pub const GL_RGB_SCALE_EXT: u32 = 34163;
pub const GL_ADD_SIGNED_EXT: u32 = 34164;
pub const GL_INTERPOLATE_EXT: u32 = 34165;
pub const GL_CONSTANT_EXT: u32 = 34166;
pub const GL_PRIMARY_COLOR_EXT: u32 = 34167;
pub const GL_PREVIOUS_EXT: u32 = 34168;
pub const GL_SOURCE0_RGB_EXT: u32 = 34176;
pub const GL_SOURCE1_RGB_EXT: u32 = 34177;
pub const GL_SOURCE2_RGB_EXT: u32 = 34178;
pub const GL_SOURCE0_ALPHA_EXT: u32 = 34184;
pub const GL_SOURCE1_ALPHA_EXT: u32 = 34185;
pub const GL_SOURCE2_ALPHA_EXT: u32 = 34186;
pub const GL_OPERAND0_RGB_EXT: u32 = 34192;
pub const GL_OPERAND1_RGB_EXT: u32 = 34193;
pub const GL_OPERAND2_RGB_EXT: u32 = 34194;
pub const GL_OPERAND0_ALPHA_EXT: u32 = 34200;
pub const GL_OPERAND1_ALPHA_EXT: u32 = 34201;
pub const GL_OPERAND2_ALPHA_EXT: u32 = 34202;
pub const GL_EXT_texture_env_dot3: u32 = 1;
pub const GL_DOT3_RGB_EXT: u32 = 34624;
pub const GL_DOT3_RGBA_EXT: u32 = 34625;
pub const GL_EXT_texture_filter_anisotropic: u32 = 1;
pub const GL_TEXTURE_MAX_ANISOTROPY_EXT: u32 = 34046;
pub const GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT: u32 = 34047;
pub const GL_EXT_texture_integer: u32 = 1;
pub const GL_RGBA32UI_EXT: u32 = 36208;
pub const GL_RGB32UI_EXT: u32 = 36209;
pub const GL_ALPHA32UI_EXT: u32 = 36210;
pub const GL_INTENSITY32UI_EXT: u32 = 36211;
pub const GL_LUMINANCE32UI_EXT: u32 = 36212;
pub const GL_LUMINANCE_ALPHA32UI_EXT: u32 = 36213;
pub const GL_RGBA16UI_EXT: u32 = 36214;
pub const GL_RGB16UI_EXT: u32 = 36215;
pub const GL_ALPHA16UI_EXT: u32 = 36216;
pub const GL_INTENSITY16UI_EXT: u32 = 36217;
pub const GL_LUMINANCE16UI_EXT: u32 = 36218;
pub const GL_LUMINANCE_ALPHA16UI_EXT: u32 = 36219;
pub const GL_RGBA8UI_EXT: u32 = 36220;
pub const GL_RGB8UI_EXT: u32 = 36221;
pub const GL_ALPHA8UI_EXT: u32 = 36222;
pub const GL_INTENSITY8UI_EXT: u32 = 36223;
pub const GL_LUMINANCE8UI_EXT: u32 = 36224;
pub const GL_LUMINANCE_ALPHA8UI_EXT: u32 = 36225;
pub const GL_RGBA32I_EXT: u32 = 36226;
pub const GL_RGB32I_EXT: u32 = 36227;
pub const GL_ALPHA32I_EXT: u32 = 36228;
pub const GL_INTENSITY32I_EXT: u32 = 36229;
pub const GL_LUMINANCE32I_EXT: u32 = 36230;
pub const GL_LUMINANCE_ALPHA32I_EXT: u32 = 36231;
pub const GL_RGBA16I_EXT: u32 = 36232;
pub const GL_RGB16I_EXT: u32 = 36233;
pub const GL_ALPHA16I_EXT: u32 = 36234;
pub const GL_INTENSITY16I_EXT: u32 = 36235;
pub const GL_LUMINANCE16I_EXT: u32 = 36236;
pub const GL_LUMINANCE_ALPHA16I_EXT: u32 = 36237;
pub const GL_RGBA8I_EXT: u32 = 36238;
pub const GL_RGB8I_EXT: u32 = 36239;
pub const GL_ALPHA8I_EXT: u32 = 36240;
pub const GL_INTENSITY8I_EXT: u32 = 36241;
pub const GL_LUMINANCE8I_EXT: u32 = 36242;
pub const GL_LUMINANCE_ALPHA8I_EXT: u32 = 36243;
pub const GL_RED_INTEGER_EXT: u32 = 36244;
pub const GL_GREEN_INTEGER_EXT: u32 = 36245;
pub const GL_BLUE_INTEGER_EXT: u32 = 36246;
pub const GL_ALPHA_INTEGER_EXT: u32 = 36247;
pub const GL_RGB_INTEGER_EXT: u32 = 36248;
pub const GL_RGBA_INTEGER_EXT: u32 = 36249;
pub const GL_BGR_INTEGER_EXT: u32 = 36250;
pub const GL_BGRA_INTEGER_EXT: u32 = 36251;
pub const GL_LUMINANCE_INTEGER_EXT: u32 = 36252;
pub const GL_LUMINANCE_ALPHA_INTEGER_EXT: u32 = 36253;
pub const GL_RGBA_INTEGER_MODE_EXT: u32 = 36254;
pub const GL_EXT_texture_lod_bias: u32 = 1;
pub const GL_MAX_TEXTURE_LOD_BIAS_EXT: u32 = 34045;
pub const GL_TEXTURE_FILTER_CONTROL_EXT: u32 = 34048;
pub const GL_TEXTURE_LOD_BIAS_EXT: u32 = 34049;
pub const GL_EXT_texture_mirror_clamp: u32 = 1;
pub const GL_MIRROR_CLAMP_EXT: u32 = 34626;
pub const GL_MIRROR_CLAMP_TO_EDGE_EXT: u32 = 34627;
pub const GL_MIRROR_CLAMP_TO_BORDER_EXT: u32 = 35090;
pub const GL_EXT_texture_object: u32 = 1;
pub const GL_TEXTURE_PRIORITY_EXT: u32 = 32870;
pub const GL_TEXTURE_RESIDENT_EXT: u32 = 32871;
pub const GL_TEXTURE_1D_BINDING_EXT: u32 = 32872;
pub const GL_TEXTURE_2D_BINDING_EXT: u32 = 32873;
pub const GL_TEXTURE_3D_BINDING_EXT: u32 = 32874;
pub const GL_EXT_texture_perturb_normal: u32 = 1;
pub const GL_PERTURB_EXT: u32 = 34222;
pub const GL_TEXTURE_NORMAL_EXT: u32 = 34223;
pub const GL_EXT_texture_sRGB: u32 = 1;
pub const GL_SRGB_EXT: u32 = 35904;
pub const GL_SRGB8_EXT: u32 = 35905;
pub const GL_SRGB_ALPHA_EXT: u32 = 35906;
pub const GL_SRGB8_ALPHA8_EXT: u32 = 35907;
pub const GL_SLUMINANCE_ALPHA_EXT: u32 = 35908;
pub const GL_SLUMINANCE8_ALPHA8_EXT: u32 = 35909;
pub const GL_SLUMINANCE_EXT: u32 = 35910;
pub const GL_SLUMINANCE8_EXT: u32 = 35911;
pub const GL_COMPRESSED_SRGB_EXT: u32 = 35912;
pub const GL_COMPRESSED_SRGB_ALPHA_EXT: u32 = 35913;
pub const GL_COMPRESSED_SLUMINANCE_EXT: u32 = 35914;
pub const GL_COMPRESSED_SLUMINANCE_ALPHA_EXT: u32 = 35915;
pub const GL_COMPRESSED_SRGB_S3TC_DXT1_EXT: u32 = 35916;
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT: u32 = 35917;
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT: u32 = 35918;
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT: u32 = 35919;
pub const GL_EXT_texture_sRGB_decode: u32 = 1;
pub const GL_TEXTURE_SRGB_DECODE_EXT: u32 = 35400;
pub const GL_DECODE_EXT: u32 = 35401;
pub const GL_SKIP_DECODE_EXT: u32 = 35402;
pub const GL_EXT_texture_shared_exponent: u32 = 1;
pub const GL_RGB9_E5_EXT: u32 = 35901;
pub const GL_UNSIGNED_INT_5_9_9_9_REV_EXT: u32 = 35902;
pub const GL_TEXTURE_SHARED_SIZE_EXT: u32 = 35903;
pub const GL_EXT_texture_snorm: u32 = 1;
pub const GL_ALPHA_SNORM: u32 = 36880;
pub const GL_LUMINANCE_SNORM: u32 = 36881;
pub const GL_LUMINANCE_ALPHA_SNORM: u32 = 36882;
pub const GL_INTENSITY_SNORM: u32 = 36883;
pub const GL_ALPHA8_SNORM: u32 = 36884;
pub const GL_LUMINANCE8_SNORM: u32 = 36885;
pub const GL_LUMINANCE8_ALPHA8_SNORM: u32 = 36886;
pub const GL_INTENSITY8_SNORM: u32 = 36887;
pub const GL_ALPHA16_SNORM: u32 = 36888;
pub const GL_LUMINANCE16_SNORM: u32 = 36889;
pub const GL_LUMINANCE16_ALPHA16_SNORM: u32 = 36890;
pub const GL_INTENSITY16_SNORM: u32 = 36891;
pub const GL_RED_SNORM: u32 = 36752;
pub const GL_RG_SNORM: u32 = 36753;
pub const GL_RGB_SNORM: u32 = 36754;
pub const GL_RGBA_SNORM: u32 = 36755;
pub const GL_EXT_texture_swizzle: u32 = 1;
pub const GL_TEXTURE_SWIZZLE_R_EXT: u32 = 36418;
pub const GL_TEXTURE_SWIZZLE_G_EXT: u32 = 36419;
pub const GL_TEXTURE_SWIZZLE_B_EXT: u32 = 36420;
pub const GL_TEXTURE_SWIZZLE_A_EXT: u32 = 36421;
pub const GL_TEXTURE_SWIZZLE_RGBA_EXT: u32 = 36422;
pub const GL_EXT_timer_query: u32 = 1;
pub const GL_TIME_ELAPSED_EXT: u32 = 35007;
pub const GL_EXT_transform_feedback: u32 = 1;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_EXT: u32 = 35982;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT: u32 = 35972;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT: u32 = 35973;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT: u32 = 35983;
pub const GL_INTERLEAVED_ATTRIBS_EXT: u32 = 35980;
pub const GL_SEPARATE_ATTRIBS_EXT: u32 = 35981;
pub const GL_PRIMITIVES_GENERATED_EXT: u32 = 35975;
pub const GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT: u32 = 35976;
pub const GL_RASTERIZER_DISCARD_EXT: u32 = 35977;
pub const GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT: u32 = 35978;
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT: u32 = 35979;
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT: u32 = 35968;
pub const GL_TRANSFORM_FEEDBACK_VARYINGS_EXT: u32 = 35971;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT: u32 = 35967;
pub const GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT: u32 = 35958;
pub const GL_EXT_vertex_array: u32 = 1;
pub const GL_VERTEX_ARRAY_EXT: u32 = 32884;
pub const GL_NORMAL_ARRAY_EXT: u32 = 32885;
pub const GL_COLOR_ARRAY_EXT: u32 = 32886;
pub const GL_INDEX_ARRAY_EXT: u32 = 32887;
pub const GL_TEXTURE_COORD_ARRAY_EXT: u32 = 32888;
pub const GL_EDGE_FLAG_ARRAY_EXT: u32 = 32889;
pub const GL_VERTEX_ARRAY_SIZE_EXT: u32 = 32890;
pub const GL_VERTEX_ARRAY_TYPE_EXT: u32 = 32891;
pub const GL_VERTEX_ARRAY_STRIDE_EXT: u32 = 32892;
pub const GL_VERTEX_ARRAY_COUNT_EXT: u32 = 32893;
pub const GL_NORMAL_ARRAY_TYPE_EXT: u32 = 32894;
pub const GL_NORMAL_ARRAY_STRIDE_EXT: u32 = 32895;
pub const GL_NORMAL_ARRAY_COUNT_EXT: u32 = 32896;
pub const GL_COLOR_ARRAY_SIZE_EXT: u32 = 32897;
pub const GL_COLOR_ARRAY_TYPE_EXT: u32 = 32898;
pub const GL_COLOR_ARRAY_STRIDE_EXT: u32 = 32899;
pub const GL_COLOR_ARRAY_COUNT_EXT: u32 = 32900;
pub const GL_INDEX_ARRAY_TYPE_EXT: u32 = 32901;
pub const GL_INDEX_ARRAY_STRIDE_EXT: u32 = 32902;
pub const GL_INDEX_ARRAY_COUNT_EXT: u32 = 32903;
pub const GL_TEXTURE_COORD_ARRAY_SIZE_EXT: u32 = 32904;
pub const GL_TEXTURE_COORD_ARRAY_TYPE_EXT: u32 = 32905;
pub const GL_TEXTURE_COORD_ARRAY_STRIDE_EXT: u32 = 32906;
pub const GL_TEXTURE_COORD_ARRAY_COUNT_EXT: u32 = 32907;
pub const GL_EDGE_FLAG_ARRAY_STRIDE_EXT: u32 = 32908;
pub const GL_EDGE_FLAG_ARRAY_COUNT_EXT: u32 = 32909;
pub const GL_VERTEX_ARRAY_POINTER_EXT: u32 = 32910;
pub const GL_NORMAL_ARRAY_POINTER_EXT: u32 = 32911;
pub const GL_COLOR_ARRAY_POINTER_EXT: u32 = 32912;
pub const GL_INDEX_ARRAY_POINTER_EXT: u32 = 32913;
pub const GL_TEXTURE_COORD_ARRAY_POINTER_EXT: u32 = 32914;
pub const GL_EDGE_FLAG_ARRAY_POINTER_EXT: u32 = 32915;
pub const GL_EXT_vertex_array_bgra: u32 = 1;
pub const GL_EXT_vertex_attrib_64bit: u32 = 1;
pub const GL_DOUBLE_VEC2_EXT: u32 = 36860;
pub const GL_DOUBLE_VEC3_EXT: u32 = 36861;
pub const GL_DOUBLE_VEC4_EXT: u32 = 36862;
pub const GL_DOUBLE_MAT2_EXT: u32 = 36678;
pub const GL_DOUBLE_MAT3_EXT: u32 = 36679;
pub const GL_DOUBLE_MAT4_EXT: u32 = 36680;
pub const GL_DOUBLE_MAT2x3_EXT: u32 = 36681;
pub const GL_DOUBLE_MAT2x4_EXT: u32 = 36682;
pub const GL_DOUBLE_MAT3x2_EXT: u32 = 36683;
pub const GL_DOUBLE_MAT3x4_EXT: u32 = 36684;
pub const GL_DOUBLE_MAT4x2_EXT: u32 = 36685;
pub const GL_DOUBLE_MAT4x3_EXT: u32 = 36686;
pub const GL_EXT_vertex_shader: u32 = 1;
pub const GL_VERTEX_SHADER_EXT: u32 = 34688;
pub const GL_VERTEX_SHADER_BINDING_EXT: u32 = 34689;
pub const GL_OP_INDEX_EXT: u32 = 34690;
pub const GL_OP_NEGATE_EXT: u32 = 34691;
pub const GL_OP_DOT3_EXT: u32 = 34692;
pub const GL_OP_DOT4_EXT: u32 = 34693;
pub const GL_OP_MUL_EXT: u32 = 34694;
pub const GL_OP_ADD_EXT: u32 = 34695;
pub const GL_OP_MADD_EXT: u32 = 34696;
pub const GL_OP_FRAC_EXT: u32 = 34697;
pub const GL_OP_MAX_EXT: u32 = 34698;
pub const GL_OP_MIN_EXT: u32 = 34699;
pub const GL_OP_SET_GE_EXT: u32 = 34700;
pub const GL_OP_SET_LT_EXT: u32 = 34701;
pub const GL_OP_CLAMP_EXT: u32 = 34702;
pub const GL_OP_FLOOR_EXT: u32 = 34703;
pub const GL_OP_ROUND_EXT: u32 = 34704;
pub const GL_OP_EXP_BASE_2_EXT: u32 = 34705;
pub const GL_OP_LOG_BASE_2_EXT: u32 = 34706;
pub const GL_OP_POWER_EXT: u32 = 34707;
pub const GL_OP_RECIP_EXT: u32 = 34708;
pub const GL_OP_RECIP_SQRT_EXT: u32 = 34709;
pub const GL_OP_SUB_EXT: u32 = 34710;
pub const GL_OP_CROSS_PRODUCT_EXT: u32 = 34711;
pub const GL_OP_MULTIPLY_MATRIX_EXT: u32 = 34712;
pub const GL_OP_MOV_EXT: u32 = 34713;
pub const GL_OUTPUT_VERTEX_EXT: u32 = 34714;
pub const GL_OUTPUT_COLOR0_EXT: u32 = 34715;
pub const GL_OUTPUT_COLOR1_EXT: u32 = 34716;
pub const GL_OUTPUT_TEXTURE_COORD0_EXT: u32 = 34717;
pub const GL_OUTPUT_TEXTURE_COORD1_EXT: u32 = 34718;
pub const GL_OUTPUT_TEXTURE_COORD2_EXT: u32 = 34719;
pub const GL_OUTPUT_TEXTURE_COORD3_EXT: u32 = 34720;
pub const GL_OUTPUT_TEXTURE_COORD4_EXT: u32 = 34721;
pub const GL_OUTPUT_TEXTURE_COORD5_EXT: u32 = 34722;
pub const GL_OUTPUT_TEXTURE_COORD6_EXT: u32 = 34723;
pub const GL_OUTPUT_TEXTURE_COORD7_EXT: u32 = 34724;
pub const GL_OUTPUT_TEXTURE_COORD8_EXT: u32 = 34725;
pub const GL_OUTPUT_TEXTURE_COORD9_EXT: u32 = 34726;
pub const GL_OUTPUT_TEXTURE_COORD10_EXT: u32 = 34727;
pub const GL_OUTPUT_TEXTURE_COORD11_EXT: u32 = 34728;
pub const GL_OUTPUT_TEXTURE_COORD12_EXT: u32 = 34729;
pub const GL_OUTPUT_TEXTURE_COORD13_EXT: u32 = 34730;
pub const GL_OUTPUT_TEXTURE_COORD14_EXT: u32 = 34731;
pub const GL_OUTPUT_TEXTURE_COORD15_EXT: u32 = 34732;
pub const GL_OUTPUT_TEXTURE_COORD16_EXT: u32 = 34733;
pub const GL_OUTPUT_TEXTURE_COORD17_EXT: u32 = 34734;
pub const GL_OUTPUT_TEXTURE_COORD18_EXT: u32 = 34735;
pub const GL_OUTPUT_TEXTURE_COORD19_EXT: u32 = 34736;
pub const GL_OUTPUT_TEXTURE_COORD20_EXT: u32 = 34737;
pub const GL_OUTPUT_TEXTURE_COORD21_EXT: u32 = 34738;
pub const GL_OUTPUT_TEXTURE_COORD22_EXT: u32 = 34739;
pub const GL_OUTPUT_TEXTURE_COORD23_EXT: u32 = 34740;
pub const GL_OUTPUT_TEXTURE_COORD24_EXT: u32 = 34741;
pub const GL_OUTPUT_TEXTURE_COORD25_EXT: u32 = 34742;
pub const GL_OUTPUT_TEXTURE_COORD26_EXT: u32 = 34743;
pub const GL_OUTPUT_TEXTURE_COORD27_EXT: u32 = 34744;
pub const GL_OUTPUT_TEXTURE_COORD28_EXT: u32 = 34745;
pub const GL_OUTPUT_TEXTURE_COORD29_EXT: u32 = 34746;
pub const GL_OUTPUT_TEXTURE_COORD30_EXT: u32 = 34747;
pub const GL_OUTPUT_TEXTURE_COORD31_EXT: u32 = 34748;
pub const GL_OUTPUT_FOG_EXT: u32 = 34749;
pub const GL_SCALAR_EXT: u32 = 34750;
pub const GL_VECTOR_EXT: u32 = 34751;
pub const GL_MATRIX_EXT: u32 = 34752;
pub const GL_VARIANT_EXT: u32 = 34753;
pub const GL_INVARIANT_EXT: u32 = 34754;
pub const GL_LOCAL_CONSTANT_EXT: u32 = 34755;
pub const GL_LOCAL_EXT: u32 = 34756;
pub const GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT: u32 = 34757;
pub const GL_MAX_VERTEX_SHADER_VARIANTS_EXT: u32 = 34758;
pub const GL_MAX_VERTEX_SHADER_INVARIANTS_EXT: u32 = 34759;
pub const GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT: u32 = 34760;
pub const GL_MAX_VERTEX_SHADER_LOCALS_EXT: u32 = 34761;
pub const GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT: u32 = 34762;
pub const GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT: u32 = 34763;
pub const GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT: u32 = 34764;
pub const GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT: u32 = 34765;
pub const GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT: u32 = 34766;
pub const GL_VERTEX_SHADER_INSTRUCTIONS_EXT: u32 = 34767;
pub const GL_VERTEX_SHADER_VARIANTS_EXT: u32 = 34768;
pub const GL_VERTEX_SHADER_INVARIANTS_EXT: u32 = 34769;
pub const GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT: u32 = 34770;
pub const GL_VERTEX_SHADER_LOCALS_EXT: u32 = 34771;
pub const GL_VERTEX_SHADER_OPTIMIZED_EXT: u32 = 34772;
pub const GL_X_EXT: u32 = 34773;
pub const GL_Y_EXT: u32 = 34774;
pub const GL_Z_EXT: u32 = 34775;
pub const GL_W_EXT: u32 = 34776;
pub const GL_NEGATIVE_X_EXT: u32 = 34777;
pub const GL_NEGATIVE_Y_EXT: u32 = 34778;
pub const GL_NEGATIVE_Z_EXT: u32 = 34779;
pub const GL_NEGATIVE_W_EXT: u32 = 34780;
pub const GL_ZERO_EXT: u32 = 34781;
pub const GL_ONE_EXT: u32 = 34782;
pub const GL_NEGATIVE_ONE_EXT: u32 = 34783;
pub const GL_NORMALIZED_RANGE_EXT: u32 = 34784;
pub const GL_FULL_RANGE_EXT: u32 = 34785;
pub const GL_CURRENT_VERTEX_EXT: u32 = 34786;
pub const GL_MVP_MATRIX_EXT: u32 = 34787;
pub const GL_VARIANT_VALUE_EXT: u32 = 34788;
pub const GL_VARIANT_DATATYPE_EXT: u32 = 34789;
pub const GL_VARIANT_ARRAY_STRIDE_EXT: u32 = 34790;
pub const GL_VARIANT_ARRAY_TYPE_EXT: u32 = 34791;
pub const GL_VARIANT_ARRAY_EXT: u32 = 34792;
pub const GL_VARIANT_ARRAY_POINTER_EXT: u32 = 34793;
pub const GL_INVARIANT_VALUE_EXT: u32 = 34794;
pub const GL_INVARIANT_DATATYPE_EXT: u32 = 34795;
pub const GL_LOCAL_CONSTANT_VALUE_EXT: u32 = 34796;
pub const GL_LOCAL_CONSTANT_DATATYPE_EXT: u32 = 34797;
pub const GL_EXT_vertex_weighting: u32 = 1;
pub const GL_MODELVIEW0_STACK_DEPTH_EXT: u32 = 2979;
pub const GL_MODELVIEW1_STACK_DEPTH_EXT: u32 = 34050;
pub const GL_MODELVIEW0_MATRIX_EXT: u32 = 2982;
pub const GL_MODELVIEW1_MATRIX_EXT: u32 = 34054;
pub const GL_VERTEX_WEIGHTING_EXT: u32 = 34057;
pub const GL_MODELVIEW0_EXT: u32 = 5888;
pub const GL_MODELVIEW1_EXT: u32 = 34058;
pub const GL_CURRENT_VERTEX_WEIGHT_EXT: u32 = 34059;
pub const GL_VERTEX_WEIGHT_ARRAY_EXT: u32 = 34060;
pub const GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT: u32 = 34061;
pub const GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT: u32 = 34062;
pub const GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT: u32 = 34063;
pub const GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT: u32 = 34064;
pub const GL_EXT_x11_sync_object: u32 = 1;
pub const GL_SYNC_X11_FENCE_EXT: u32 = 37089;
pub const GL_GREMEDY_frame_terminator: u32 = 1;
pub const GL_GREMEDY_string_marker: u32 = 1;
pub const GL_HP_convolution_border_modes: u32 = 1;
pub const GL_IGNORE_BORDER_HP: u32 = 33104;
pub const GL_CONSTANT_BORDER_HP: u32 = 33105;
pub const GL_REPLICATE_BORDER_HP: u32 = 33107;
pub const GL_CONVOLUTION_BORDER_COLOR_HP: u32 = 33108;
pub const GL_HP_image_transform: u32 = 1;
pub const GL_IMAGE_SCALE_X_HP: u32 = 33109;
pub const GL_IMAGE_SCALE_Y_HP: u32 = 33110;
pub const GL_IMAGE_TRANSLATE_X_HP: u32 = 33111;
pub const GL_IMAGE_TRANSLATE_Y_HP: u32 = 33112;
pub const GL_IMAGE_ROTATE_ANGLE_HP: u32 = 33113;
pub const GL_IMAGE_ROTATE_ORIGIN_X_HP: u32 = 33114;
pub const GL_IMAGE_ROTATE_ORIGIN_Y_HP: u32 = 33115;
pub const GL_IMAGE_MAG_FILTER_HP: u32 = 33116;
pub const GL_IMAGE_MIN_FILTER_HP: u32 = 33117;
pub const GL_IMAGE_CUBIC_WEIGHT_HP: u32 = 33118;
pub const GL_CUBIC_HP: u32 = 33119;
pub const GL_AVERAGE_HP: u32 = 33120;
pub const GL_IMAGE_TRANSFORM_2D_HP: u32 = 33121;
pub const GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP: u32 = 33122;
pub const GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP: u32 = 33123;
pub const GL_HP_occlusion_test: u32 = 1;
pub const GL_OCCLUSION_TEST_HP: u32 = 33125;
pub const GL_OCCLUSION_TEST_RESULT_HP: u32 = 33126;
pub const GL_HP_texture_lighting: u32 = 1;
pub const GL_TEXTURE_LIGHTING_MODE_HP: u32 = 33127;
pub const GL_TEXTURE_POST_SPECULAR_HP: u32 = 33128;
pub const GL_TEXTURE_PRE_SPECULAR_HP: u32 = 33129;
pub const GL_IBM_cull_vertex: u32 = 1;
pub const GL_CULL_VERTEX_IBM: u32 = 103050;
pub const GL_IBM_multimode_draw_arrays: u32 = 1;
pub const GL_IBM_rasterpos_clip: u32 = 1;
pub const GL_RASTER_POSITION_UNCLIPPED_IBM: u32 = 103010;
pub const GL_IBM_static_data: u32 = 1;
pub const GL_ALL_STATIC_DATA_IBM: u32 = 103060;
pub const GL_STATIC_VERTEX_ARRAY_IBM: u32 = 103061;
pub const GL_IBM_texture_mirrored_repeat: u32 = 1;
pub const GL_MIRRORED_REPEAT_IBM: u32 = 33648;
pub const GL_IBM_vertex_array_lists: u32 = 1;
pub const GL_VERTEX_ARRAY_LIST_IBM: u32 = 103070;
pub const GL_NORMAL_ARRAY_LIST_IBM: u32 = 103071;
pub const GL_COLOR_ARRAY_LIST_IBM: u32 = 103072;
pub const GL_INDEX_ARRAY_LIST_IBM: u32 = 103073;
pub const GL_TEXTURE_COORD_ARRAY_LIST_IBM: u32 = 103074;
pub const GL_EDGE_FLAG_ARRAY_LIST_IBM: u32 = 103075;
pub const GL_FOG_COORDINATE_ARRAY_LIST_IBM: u32 = 103076;
pub const GL_SECONDARY_COLOR_ARRAY_LIST_IBM: u32 = 103077;
pub const GL_VERTEX_ARRAY_LIST_STRIDE_IBM: u32 = 103080;
pub const GL_NORMAL_ARRAY_LIST_STRIDE_IBM: u32 = 103081;
pub const GL_COLOR_ARRAY_LIST_STRIDE_IBM: u32 = 103082;
pub const GL_INDEX_ARRAY_LIST_STRIDE_IBM: u32 = 103083;
pub const GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM: u32 = 103084;
pub const GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM: u32 = 103085;
pub const GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM: u32 = 103086;
pub const GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM: u32 = 103087;
pub const GL_INGR_blend_func_separate: u32 = 1;
pub const GL_INGR_color_clamp: u32 = 1;
pub const GL_RED_MIN_CLAMP_INGR: u32 = 34144;
pub const GL_GREEN_MIN_CLAMP_INGR: u32 = 34145;
pub const GL_BLUE_MIN_CLAMP_INGR: u32 = 34146;
pub const GL_ALPHA_MIN_CLAMP_INGR: u32 = 34147;
pub const GL_RED_MAX_CLAMP_INGR: u32 = 34148;
pub const GL_GREEN_MAX_CLAMP_INGR: u32 = 34149;
pub const GL_BLUE_MAX_CLAMP_INGR: u32 = 34150;
pub const GL_ALPHA_MAX_CLAMP_INGR: u32 = 34151;
pub const GL_INGR_interlace_read: u32 = 1;
pub const GL_INTERLACE_READ_INGR: u32 = 34152;
pub const GL_INTEL_fragment_shader_ordering: u32 = 1;
pub const GL_INTEL_map_texture: u32 = 1;
pub const GL_TEXTURE_MEMORY_LAYOUT_INTEL: u32 = 33791;
pub const GL_LAYOUT_DEFAULT_INTEL: u32 = 0;
pub const GL_LAYOUT_LINEAR_INTEL: u32 = 1;
pub const GL_LAYOUT_LINEAR_CPU_CACHED_INTEL: u32 = 2;
pub const GL_INTEL_parallel_arrays: u32 = 1;
pub const GL_PARALLEL_ARRAYS_INTEL: u32 = 33780;
pub const GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL: u32 = 33781;
pub const GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL: u32 = 33782;
pub const GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL: u32 = 33783;
pub const GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL: u32 = 33784;
pub const GL_INTEL_performance_query: u32 = 1;
pub const GL_PERFQUERY_SINGLE_CONTEXT_INTEL: u32 = 0;
pub const GL_PERFQUERY_GLOBAL_CONTEXT_INTEL: u32 = 1;
pub const GL_PERFQUERY_WAIT_INTEL: u32 = 33787;
pub const GL_PERFQUERY_FLUSH_INTEL: u32 = 33786;
pub const GL_PERFQUERY_DONOT_FLUSH_INTEL: u32 = 33785;
pub const GL_PERFQUERY_COUNTER_EVENT_INTEL: u32 = 38128;
pub const GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL: u32 = 38129;
pub const GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL: u32 = 38130;
pub const GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL: u32 = 38131;
pub const GL_PERFQUERY_COUNTER_RAW_INTEL: u32 = 38132;
pub const GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL: u32 = 38133;
pub const GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL: u32 = 38136;
pub const GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL: u32 = 38137;
pub const GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL: u32 = 38138;
pub const GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL: u32 = 38139;
pub const GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL: u32 = 38140;
pub const GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL: u32 = 38141;
pub const GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL: u32 = 38142;
pub const GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL: u32 = 38143;
pub const GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL: u32 = 38144;
pub const GL_MESAX_texture_stack: u32 = 1;
pub const GL_TEXTURE_1D_STACK_MESAX: u32 = 34649;
pub const GL_TEXTURE_2D_STACK_MESAX: u32 = 34650;
pub const GL_PROXY_TEXTURE_1D_STACK_MESAX: u32 = 34651;
pub const GL_PROXY_TEXTURE_2D_STACK_MESAX: u32 = 34652;
pub const GL_TEXTURE_1D_STACK_BINDING_MESAX: u32 = 34653;
pub const GL_TEXTURE_2D_STACK_BINDING_MESAX: u32 = 34654;
pub const GL_MESA_pack_invert: u32 = 1;
pub const GL_PACK_INVERT_MESA: u32 = 34648;
pub const GL_MESA_resize_buffers: u32 = 1;
pub const GL_MESA_window_pos: u32 = 1;
pub const GL_MESA_ycbcr_texture: u32 = 1;
pub const GL_UNSIGNED_SHORT_8_8_MESA: u32 = 34234;
pub const GL_UNSIGNED_SHORT_8_8_REV_MESA: u32 = 34235;
pub const GL_YCBCR_MESA: u32 = 34647;
pub const GL_NVX_conditional_render: u32 = 1;
pub const GL_NVX_gpu_memory_info: u32 = 1;
pub const GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX: u32 = 36935;
pub const GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX: u32 = 36936;
pub const GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX: u32 = 36937;
pub const GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX: u32 = 36938;
pub const GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX: u32 = 36939;
pub const GL_NV_bindless_multi_draw_indirect: u32 = 1;
pub const GL_NV_bindless_texture: u32 = 1;
pub const GL_NV_blend_equation_advanced: u32 = 1;
pub const GL_BLEND_OVERLAP_NV: u32 = 37505;
pub const GL_BLEND_PREMULTIPLIED_SRC_NV: u32 = 37504;
pub const GL_BLUE_NV: u32 = 6405;
pub const GL_COLORBURN_NV: u32 = 37530;
pub const GL_COLORDODGE_NV: u32 = 37529;
pub const GL_CONJOINT_NV: u32 = 37508;
pub const GL_CONTRAST_NV: u32 = 37537;
pub const GL_DARKEN_NV: u32 = 37527;
pub const GL_DIFFERENCE_NV: u32 = 37534;
pub const GL_DISJOINT_NV: u32 = 37507;
pub const GL_DST_ATOP_NV: u32 = 37519;
pub const GL_DST_IN_NV: u32 = 37515;
pub const GL_DST_NV: u32 = 37511;
pub const GL_DST_OUT_NV: u32 = 37517;
pub const GL_DST_OVER_NV: u32 = 37513;
pub const GL_EXCLUSION_NV: u32 = 37536;
pub const GL_GREEN_NV: u32 = 6404;
pub const GL_HARDLIGHT_NV: u32 = 37531;
pub const GL_HARDMIX_NV: u32 = 37545;
pub const GL_HSL_COLOR_NV: u32 = 37551;
pub const GL_HSL_HUE_NV: u32 = 37549;
pub const GL_HSL_LUMINOSITY_NV: u32 = 37552;
pub const GL_HSL_SATURATION_NV: u32 = 37550;
pub const GL_INVERT_OVG_NV: u32 = 37556;
pub const GL_INVERT_RGB_NV: u32 = 37539;
pub const GL_LIGHTEN_NV: u32 = 37528;
pub const GL_LINEARBURN_NV: u32 = 37541;
pub const GL_LINEARDODGE_NV: u32 = 37540;
pub const GL_LINEARLIGHT_NV: u32 = 37543;
pub const GL_MINUS_CLAMPED_NV: u32 = 37555;
pub const GL_MINUS_NV: u32 = 37535;
pub const GL_MULTIPLY_NV: u32 = 37524;
pub const GL_OVERLAY_NV: u32 = 37526;
pub const GL_PINLIGHT_NV: u32 = 37544;
pub const GL_PLUS_CLAMPED_ALPHA_NV: u32 = 37554;
pub const GL_PLUS_CLAMPED_NV: u32 = 37553;
pub const GL_PLUS_DARKER_NV: u32 = 37522;
pub const GL_PLUS_NV: u32 = 37521;
pub const GL_RED_NV: u32 = 6403;
pub const GL_SCREEN_NV: u32 = 37525;
pub const GL_SOFTLIGHT_NV: u32 = 37532;
pub const GL_SRC_ATOP_NV: u32 = 37518;
pub const GL_SRC_IN_NV: u32 = 37514;
pub const GL_SRC_NV: u32 = 37510;
pub const GL_SRC_OUT_NV: u32 = 37516;
pub const GL_SRC_OVER_NV: u32 = 37512;
pub const GL_UNCORRELATED_NV: u32 = 37506;
pub const GL_VIVIDLIGHT_NV: u32 = 37542;
pub const GL_XOR_NV: u32 = 5382;
pub const GL_NV_blend_equation_advanced_coherent: u32 = 1;
pub const GL_BLEND_ADVANCED_COHERENT_NV: u32 = 37509;
pub const GL_NV_blend_square: u32 = 1;
pub const GL_NV_compute_program5: u32 = 1;
pub const GL_COMPUTE_PROGRAM_NV: u32 = 37115;
pub const GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV: u32 = 37116;
pub const GL_NV_conditional_render: u32 = 1;
pub const GL_QUERY_WAIT_NV: u32 = 36371;
pub const GL_QUERY_NO_WAIT_NV: u32 = 36372;
pub const GL_QUERY_BY_REGION_WAIT_NV: u32 = 36373;
pub const GL_QUERY_BY_REGION_NO_WAIT_NV: u32 = 36374;
pub const GL_NV_copy_depth_to_color: u32 = 1;
pub const GL_DEPTH_STENCIL_TO_RGBA_NV: u32 = 34926;
pub const GL_DEPTH_STENCIL_TO_BGRA_NV: u32 = 34927;
pub const GL_NV_copy_image: u32 = 1;
pub const GL_NV_deep_texture3D: u32 = 1;
pub const GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV: u32 = 37072;
pub const GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV: u32 = 37073;
pub const GL_NV_depth_buffer_float: u32 = 1;
pub const GL_DEPTH_COMPONENT32F_NV: u32 = 36267;
pub const GL_DEPTH32F_STENCIL8_NV: u32 = 36268;
pub const GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV: u32 = 36269;
pub const GL_DEPTH_BUFFER_FLOAT_MODE_NV: u32 = 36271;
pub const GL_NV_depth_clamp: u32 = 1;
pub const GL_DEPTH_CLAMP_NV: u32 = 34383;
pub const GL_NV_draw_texture: u32 = 1;
pub const GL_NV_evaluators: u32 = 1;
pub const GL_EVAL_2D_NV: u32 = 34496;
pub const GL_EVAL_TRIANGULAR_2D_NV: u32 = 34497;
pub const GL_MAP_TESSELLATION_NV: u32 = 34498;
pub const GL_MAP_ATTRIB_U_ORDER_NV: u32 = 34499;
pub const GL_MAP_ATTRIB_V_ORDER_NV: u32 = 34500;
pub const GL_EVAL_FRACTIONAL_TESSELLATION_NV: u32 = 34501;
pub const GL_EVAL_VERTEX_ATTRIB0_NV: u32 = 34502;
pub const GL_EVAL_VERTEX_ATTRIB1_NV: u32 = 34503;
pub const GL_EVAL_VERTEX_ATTRIB2_NV: u32 = 34504;
pub const GL_EVAL_VERTEX_ATTRIB3_NV: u32 = 34505;
pub const GL_EVAL_VERTEX_ATTRIB4_NV: u32 = 34506;
pub const GL_EVAL_VERTEX_ATTRIB5_NV: u32 = 34507;
pub const GL_EVAL_VERTEX_ATTRIB6_NV: u32 = 34508;
pub const GL_EVAL_VERTEX_ATTRIB7_NV: u32 = 34509;
pub const GL_EVAL_VERTEX_ATTRIB8_NV: u32 = 34510;
pub const GL_EVAL_VERTEX_ATTRIB9_NV: u32 = 34511;
pub const GL_EVAL_VERTEX_ATTRIB10_NV: u32 = 34512;
pub const GL_EVAL_VERTEX_ATTRIB11_NV: u32 = 34513;
pub const GL_EVAL_VERTEX_ATTRIB12_NV: u32 = 34514;
pub const GL_EVAL_VERTEX_ATTRIB13_NV: u32 = 34515;
pub const GL_EVAL_VERTEX_ATTRIB14_NV: u32 = 34516;
pub const GL_EVAL_VERTEX_ATTRIB15_NV: u32 = 34517;
pub const GL_MAX_MAP_TESSELLATION_NV: u32 = 34518;
pub const GL_MAX_RATIONAL_EVAL_ORDER_NV: u32 = 34519;
pub const GL_NV_explicit_multisample: u32 = 1;
pub const GL_SAMPLE_POSITION_NV: u32 = 36432;
pub const GL_SAMPLE_MASK_NV: u32 = 36433;
pub const GL_SAMPLE_MASK_VALUE_NV: u32 = 36434;
pub const GL_TEXTURE_BINDING_RENDERBUFFER_NV: u32 = 36435;
pub const GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV: u32 = 36436;
pub const GL_TEXTURE_RENDERBUFFER_NV: u32 = 36437;
pub const GL_SAMPLER_RENDERBUFFER_NV: u32 = 36438;
pub const GL_INT_SAMPLER_RENDERBUFFER_NV: u32 = 36439;
pub const GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV: u32 = 36440;
pub const GL_MAX_SAMPLE_MASK_WORDS_NV: u32 = 36441;
pub const GL_NV_fence: u32 = 1;
pub const GL_ALL_COMPLETED_NV: u32 = 34034;
pub const GL_FENCE_STATUS_NV: u32 = 34035;
pub const GL_FENCE_CONDITION_NV: u32 = 34036;
pub const GL_NV_float_buffer: u32 = 1;
pub const GL_FLOAT_R_NV: u32 = 34944;
pub const GL_FLOAT_RG_NV: u32 = 34945;
pub const GL_FLOAT_RGB_NV: u32 = 34946;
pub const GL_FLOAT_RGBA_NV: u32 = 34947;
pub const GL_FLOAT_R16_NV: u32 = 34948;
pub const GL_FLOAT_R32_NV: u32 = 34949;
pub const GL_FLOAT_RG16_NV: u32 = 34950;
pub const GL_FLOAT_RG32_NV: u32 = 34951;
pub const GL_FLOAT_RGB16_NV: u32 = 34952;
pub const GL_FLOAT_RGB32_NV: u32 = 34953;
pub const GL_FLOAT_RGBA16_NV: u32 = 34954;
pub const GL_FLOAT_RGBA32_NV: u32 = 34955;
pub const GL_TEXTURE_FLOAT_COMPONENTS_NV: u32 = 34956;
pub const GL_FLOAT_CLEAR_COLOR_VALUE_NV: u32 = 34957;
pub const GL_FLOAT_RGBA_MODE_NV: u32 = 34958;
pub const GL_NV_fog_distance: u32 = 1;
pub const GL_FOG_DISTANCE_MODE_NV: u32 = 34138;
pub const GL_EYE_RADIAL_NV: u32 = 34139;
pub const GL_EYE_PLANE_ABSOLUTE_NV: u32 = 34140;
pub const GL_NV_fragment_program: u32 = 1;
pub const GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV: u32 = 34920;
pub const GL_FRAGMENT_PROGRAM_NV: u32 = 34928;
pub const GL_MAX_TEXTURE_COORDS_NV: u32 = 34929;
pub const GL_MAX_TEXTURE_IMAGE_UNITS_NV: u32 = 34930;
pub const GL_FRAGMENT_PROGRAM_BINDING_NV: u32 = 34931;
pub const GL_PROGRAM_ERROR_STRING_NV: u32 = 34932;
pub const GL_NV_fragment_program2: u32 = 1;
pub const GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV: u32 = 35060;
pub const GL_MAX_PROGRAM_CALL_DEPTH_NV: u32 = 35061;
pub const GL_MAX_PROGRAM_IF_DEPTH_NV: u32 = 35062;
pub const GL_MAX_PROGRAM_LOOP_DEPTH_NV: u32 = 35063;
pub const GL_MAX_PROGRAM_LOOP_COUNT_NV: u32 = 35064;
pub const GL_NV_fragment_program4: u32 = 1;
pub const GL_NV_fragment_program_option: u32 = 1;
pub const GL_NV_framebuffer_multisample_coverage: u32 = 1;
pub const GL_RENDERBUFFER_COVERAGE_SAMPLES_NV: u32 = 36011;
pub const GL_RENDERBUFFER_COLOR_SAMPLES_NV: u32 = 36368;
pub const GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV: u32 = 36369;
pub const GL_MULTISAMPLE_COVERAGE_MODES_NV: u32 = 36370;
pub const GL_NV_geometry_program4: u32 = 1;
pub const GL_GEOMETRY_PROGRAM_NV: u32 = 35878;
pub const GL_MAX_PROGRAM_OUTPUT_VERTICES_NV: u32 = 35879;
pub const GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV: u32 = 35880;
pub const GL_NV_geometry_shader4: u32 = 1;
pub const GL_NV_gpu_program4: u32 = 1;
pub const GL_MIN_PROGRAM_TEXEL_OFFSET_NV: u32 = 35076;
pub const GL_MAX_PROGRAM_TEXEL_OFFSET_NV: u32 = 35077;
pub const GL_PROGRAM_ATTRIB_COMPONENTS_NV: u32 = 35078;
pub const GL_PROGRAM_RESULT_COMPONENTS_NV: u32 = 35079;
pub const GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV: u32 = 35080;
pub const GL_MAX_PROGRAM_RESULT_COMPONENTS_NV: u32 = 35081;
pub const GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV: u32 = 36261;
pub const GL_MAX_PROGRAM_GENERIC_RESULTS_NV: u32 = 36262;
pub const GL_NV_gpu_program5: u32 = 1;
pub const GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV: u32 = 36442;
pub const GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV: u32 = 36443;
pub const GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV: u32 = 36444;
pub const GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV: u32 = 36445;
pub const GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV: u32 = 36446;
pub const GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV: u32 = 36447;
pub const GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV: u32 = 36676;
pub const GL_MAX_PROGRAM_SUBROUTINE_NUM_NV: u32 = 36677;
pub const GL_NV_gpu_program5_mem_extended: u32 = 1;
pub const GL_NV_gpu_shader5: u32 = 1;
pub const GL_NV_half_float: u32 = 1;
pub const GL_HALF_FLOAT_NV: u32 = 5131;
pub const GL_NV_light_max_exponent: u32 = 1;
pub const GL_MAX_SHININESS_NV: u32 = 34052;
pub const GL_MAX_SPOT_EXPONENT_NV: u32 = 34053;
pub const GL_NV_multisample_coverage: u32 = 1;
pub const GL_COLOR_SAMPLES_NV: u32 = 36384;
pub const GL_NV_multisample_filter_hint: u32 = 1;
pub const GL_MULTISAMPLE_FILTER_HINT_NV: u32 = 34100;
pub const GL_NV_occlusion_query: u32 = 1;
pub const GL_PIXEL_COUNTER_BITS_NV: u32 = 34916;
pub const GL_CURRENT_OCCLUSION_QUERY_ID_NV: u32 = 34917;
pub const GL_PIXEL_COUNT_NV: u32 = 34918;
pub const GL_PIXEL_COUNT_AVAILABLE_NV: u32 = 34919;
pub const GL_NV_packed_depth_stencil: u32 = 1;
pub const GL_DEPTH_STENCIL_NV: u32 = 34041;
pub const GL_UNSIGNED_INT_24_8_NV: u32 = 34042;
pub const GL_NV_parameter_buffer_object: u32 = 1;
pub const GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV: u32 = 36256;
pub const GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV: u32 = 36257;
pub const GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV: u32 = 36258;
pub const GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV: u32 = 36259;
pub const GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV: u32 = 36260;
pub const GL_NV_parameter_buffer_object2: u32 = 1;
pub const GL_NV_path_rendering: u32 = 1;
pub const GL_PATH_FORMAT_SVG_NV: u32 = 36976;
pub const GL_PATH_FORMAT_PS_NV: u32 = 36977;
pub const GL_STANDARD_FONT_NAME_NV: u32 = 36978;
pub const GL_SYSTEM_FONT_NAME_NV: u32 = 36979;
pub const GL_FILE_NAME_NV: u32 = 36980;
pub const GL_PATH_STROKE_WIDTH_NV: u32 = 36981;
pub const GL_PATH_END_CAPS_NV: u32 = 36982;
pub const GL_PATH_INITIAL_END_CAP_NV: u32 = 36983;
pub const GL_PATH_TERMINAL_END_CAP_NV: u32 = 36984;
pub const GL_PATH_JOIN_STYLE_NV: u32 = 36985;
pub const GL_PATH_MITER_LIMIT_NV: u32 = 36986;
pub const GL_PATH_DASH_CAPS_NV: u32 = 36987;
pub const GL_PATH_INITIAL_DASH_CAP_NV: u32 = 36988;
pub const GL_PATH_TERMINAL_DASH_CAP_NV: u32 = 36989;
pub const GL_PATH_DASH_OFFSET_NV: u32 = 36990;
pub const GL_PATH_CLIENT_LENGTH_NV: u32 = 36991;
pub const GL_PATH_FILL_MODE_NV: u32 = 36992;
pub const GL_PATH_FILL_MASK_NV: u32 = 36993;
pub const GL_PATH_FILL_COVER_MODE_NV: u32 = 36994;
pub const GL_PATH_STROKE_COVER_MODE_NV: u32 = 36995;
pub const GL_PATH_STROKE_MASK_NV: u32 = 36996;
pub const GL_COUNT_UP_NV: u32 = 37000;
pub const GL_COUNT_DOWN_NV: u32 = 37001;
pub const GL_PATH_OBJECT_BOUNDING_BOX_NV: u32 = 37002;
pub const GL_CONVEX_HULL_NV: u32 = 37003;
pub const GL_BOUNDING_BOX_NV: u32 = 37005;
pub const GL_TRANSLATE_X_NV: u32 = 37006;
pub const GL_TRANSLATE_Y_NV: u32 = 37007;
pub const GL_TRANSLATE_2D_NV: u32 = 37008;
pub const GL_TRANSLATE_3D_NV: u32 = 37009;
pub const GL_AFFINE_2D_NV: u32 = 37010;
pub const GL_AFFINE_3D_NV: u32 = 37012;
pub const GL_TRANSPOSE_AFFINE_2D_NV: u32 = 37014;
pub const GL_TRANSPOSE_AFFINE_3D_NV: u32 = 37016;
pub const GL_UTF8_NV: u32 = 37018;
pub const GL_UTF16_NV: u32 = 37019;
pub const GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV: u32 = 37020;
pub const GL_PATH_COMMAND_COUNT_NV: u32 = 37021;
pub const GL_PATH_COORD_COUNT_NV: u32 = 37022;
pub const GL_PATH_DASH_ARRAY_COUNT_NV: u32 = 37023;
pub const GL_PATH_COMPUTED_LENGTH_NV: u32 = 37024;
pub const GL_PATH_FILL_BOUNDING_BOX_NV: u32 = 37025;
pub const GL_PATH_STROKE_BOUNDING_BOX_NV: u32 = 37026;
pub const GL_SQUARE_NV: u32 = 37027;
pub const GL_ROUND_NV: u32 = 37028;
pub const GL_TRIANGULAR_NV: u32 = 37029;
pub const GL_BEVEL_NV: u32 = 37030;
pub const GL_MITER_REVERT_NV: u32 = 37031;
pub const GL_MITER_TRUNCATE_NV: u32 = 37032;
pub const GL_SKIP_MISSING_GLYPH_NV: u32 = 37033;
pub const GL_USE_MISSING_GLYPH_NV: u32 = 37034;
pub const GL_PATH_ERROR_POSITION_NV: u32 = 37035;
pub const GL_PATH_FOG_GEN_MODE_NV: u32 = 37036;
pub const GL_ACCUM_ADJACENT_PAIRS_NV: u32 = 37037;
pub const GL_ADJACENT_PAIRS_NV: u32 = 37038;
pub const GL_FIRST_TO_REST_NV: u32 = 37039;
pub const GL_PATH_GEN_MODE_NV: u32 = 37040;
pub const GL_PATH_GEN_COEFF_NV: u32 = 37041;
pub const GL_PATH_GEN_COLOR_FORMAT_NV: u32 = 37042;
pub const GL_PATH_GEN_COMPONENTS_NV: u32 = 37043;
pub const GL_PATH_STENCIL_FUNC_NV: u32 = 37047;
pub const GL_PATH_STENCIL_REF_NV: u32 = 37048;
pub const GL_PATH_STENCIL_VALUE_MASK_NV: u32 = 37049;
pub const GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV: u32 = 37053;
pub const GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV: u32 = 37054;
pub const GL_PATH_COVER_DEPTH_FUNC_NV: u32 = 37055;
pub const GL_PATH_DASH_OFFSET_RESET_NV: u32 = 37044;
pub const GL_MOVE_TO_RESETS_NV: u32 = 37045;
pub const GL_MOVE_TO_CONTINUES_NV: u32 = 37046;
pub const GL_CLOSE_PATH_NV: u32 = 0;
pub const GL_MOVE_TO_NV: u32 = 2;
pub const GL_RELATIVE_MOVE_TO_NV: u32 = 3;
pub const GL_LINE_TO_NV: u32 = 4;
pub const GL_RELATIVE_LINE_TO_NV: u32 = 5;
pub const GL_HORIZONTAL_LINE_TO_NV: u32 = 6;
pub const GL_RELATIVE_HORIZONTAL_LINE_TO_NV: u32 = 7;
pub const GL_VERTICAL_LINE_TO_NV: u32 = 8;
pub const GL_RELATIVE_VERTICAL_LINE_TO_NV: u32 = 9;
pub const GL_QUADRATIC_CURVE_TO_NV: u32 = 10;
pub const GL_RELATIVE_QUADRATIC_CURVE_TO_NV: u32 = 11;
pub const GL_CUBIC_CURVE_TO_NV: u32 = 12;
pub const GL_RELATIVE_CUBIC_CURVE_TO_NV: u32 = 13;
pub const GL_SMOOTH_QUADRATIC_CURVE_TO_NV: u32 = 14;
pub const GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV: u32 = 15;
pub const GL_SMOOTH_CUBIC_CURVE_TO_NV: u32 = 16;
pub const GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV: u32 = 17;
pub const GL_SMALL_CCW_ARC_TO_NV: u32 = 18;
pub const GL_RELATIVE_SMALL_CCW_ARC_TO_NV: u32 = 19;
pub const GL_SMALL_CW_ARC_TO_NV: u32 = 20;
pub const GL_RELATIVE_SMALL_CW_ARC_TO_NV: u32 = 21;
pub const GL_LARGE_CCW_ARC_TO_NV: u32 = 22;
pub const GL_RELATIVE_LARGE_CCW_ARC_TO_NV: u32 = 23;
pub const GL_LARGE_CW_ARC_TO_NV: u32 = 24;
pub const GL_RELATIVE_LARGE_CW_ARC_TO_NV: u32 = 25;
pub const GL_RESTART_PATH_NV: u32 = 240;
pub const GL_DUP_FIRST_CUBIC_CURVE_TO_NV: u32 = 242;
pub const GL_DUP_LAST_CUBIC_CURVE_TO_NV: u32 = 244;
pub const GL_RECT_NV: u32 = 246;
pub const GL_CIRCULAR_CCW_ARC_TO_NV: u32 = 248;
pub const GL_CIRCULAR_CW_ARC_TO_NV: u32 = 250;
pub const GL_CIRCULAR_TANGENT_ARC_TO_NV: u32 = 252;
pub const GL_ARC_TO_NV: u32 = 254;
pub const GL_RELATIVE_ARC_TO_NV: u32 = 255;
pub const GL_BOLD_BIT_NV: u32 = 1;
pub const GL_ITALIC_BIT_NV: u32 = 2;
pub const GL_GLYPH_WIDTH_BIT_NV: u32 = 1;
pub const GL_GLYPH_HEIGHT_BIT_NV: u32 = 2;
pub const GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV: u32 = 4;
pub const GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV: u32 = 8;
pub const GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV: u32 = 16;
pub const GL_GLYPH_VERTICAL_BEARING_X_BIT_NV: u32 = 32;
pub const GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV: u32 = 64;
pub const GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV: u32 = 128;
pub const GL_GLYPH_HAS_KERNING_BIT_NV: u32 = 256;
pub const GL_FONT_X_MIN_BOUNDS_BIT_NV: u32 = 65536;
pub const GL_FONT_Y_MIN_BOUNDS_BIT_NV: u32 = 131072;
pub const GL_FONT_X_MAX_BOUNDS_BIT_NV: u32 = 262144;
pub const GL_FONT_Y_MAX_BOUNDS_BIT_NV: u32 = 524288;
pub const GL_FONT_UNITS_PER_EM_BIT_NV: u32 = 1048576;
pub const GL_FONT_ASCENDER_BIT_NV: u32 = 2097152;
pub const GL_FONT_DESCENDER_BIT_NV: u32 = 4194304;
pub const GL_FONT_HEIGHT_BIT_NV: u32 = 8388608;
pub const GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV: u32 = 16777216;
pub const GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV: u32 = 33554432;
pub const GL_FONT_UNDERLINE_POSITION_BIT_NV: u32 = 67108864;
pub const GL_FONT_UNDERLINE_THICKNESS_BIT_NV: u32 = 134217728;
pub const GL_FONT_HAS_KERNING_BIT_NV: u32 = 268435456;
pub const GL_PRIMARY_COLOR_NV: u32 = 34092;
pub const GL_SECONDARY_COLOR_NV: u32 = 34093;
pub const GL_NV_pixel_data_range: u32 = 1;
pub const GL_WRITE_PIXEL_DATA_RANGE_NV: u32 = 34936;
pub const GL_READ_PIXEL_DATA_RANGE_NV: u32 = 34937;
pub const GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV: u32 = 34938;
pub const GL_READ_PIXEL_DATA_RANGE_LENGTH_NV: u32 = 34939;
pub const GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV: u32 = 34940;
pub const GL_READ_PIXEL_DATA_RANGE_POINTER_NV: u32 = 34941;
pub const GL_NV_point_sprite: u32 = 1;
pub const GL_POINT_SPRITE_NV: u32 = 34913;
pub const GL_COORD_REPLACE_NV: u32 = 34914;
pub const GL_POINT_SPRITE_R_MODE_NV: u32 = 34915;
pub const GL_NV_present_video: u32 = 1;
pub const GL_FRAME_NV: u32 = 36390;
pub const GL_FIELDS_NV: u32 = 36391;
pub const GL_CURRENT_TIME_NV: u32 = 36392;
pub const GL_NUM_FILL_STREAMS_NV: u32 = 36393;
pub const GL_PRESENT_TIME_NV: u32 = 36394;
pub const GL_PRESENT_DURATION_NV: u32 = 36395;
pub const GL_NV_primitive_restart: u32 = 1;
pub const GL_PRIMITIVE_RESTART_NV: u32 = 34136;
pub const GL_PRIMITIVE_RESTART_INDEX_NV: u32 = 34137;
pub const GL_NV_register_combiners: u32 = 1;
pub const GL_REGISTER_COMBINERS_NV: u32 = 34082;
pub const GL_VARIABLE_A_NV: u32 = 34083;
pub const GL_VARIABLE_B_NV: u32 = 34084;
pub const GL_VARIABLE_C_NV: u32 = 34085;
pub const GL_VARIABLE_D_NV: u32 = 34086;
pub const GL_VARIABLE_E_NV: u32 = 34087;
pub const GL_VARIABLE_F_NV: u32 = 34088;
pub const GL_VARIABLE_G_NV: u32 = 34089;
pub const GL_CONSTANT_COLOR0_NV: u32 = 34090;
pub const GL_CONSTANT_COLOR1_NV: u32 = 34091;
pub const GL_SPARE0_NV: u32 = 34094;
pub const GL_SPARE1_NV: u32 = 34095;
pub const GL_DISCARD_NV: u32 = 34096;
pub const GL_E_TIMES_F_NV: u32 = 34097;
pub const GL_SPARE0_PLUS_SECONDARY_COLOR_NV: u32 = 34098;
pub const GL_UNSIGNED_IDENTITY_NV: u32 = 34102;
pub const GL_UNSIGNED_INVERT_NV: u32 = 34103;
pub const GL_EXPAND_NORMAL_NV: u32 = 34104;
pub const GL_EXPAND_NEGATE_NV: u32 = 34105;
pub const GL_HALF_BIAS_NORMAL_NV: u32 = 34106;
pub const GL_HALF_BIAS_NEGATE_NV: u32 = 34107;
pub const GL_SIGNED_IDENTITY_NV: u32 = 34108;
pub const GL_SIGNED_NEGATE_NV: u32 = 34109;
pub const GL_SCALE_BY_TWO_NV: u32 = 34110;
pub const GL_SCALE_BY_FOUR_NV: u32 = 34111;
pub const GL_SCALE_BY_ONE_HALF_NV: u32 = 34112;
pub const GL_BIAS_BY_NEGATIVE_ONE_HALF_NV: u32 = 34113;
pub const GL_COMBINER_INPUT_NV: u32 = 34114;
pub const GL_COMBINER_MAPPING_NV: u32 = 34115;
pub const GL_COMBINER_COMPONENT_USAGE_NV: u32 = 34116;
pub const GL_COMBINER_AB_DOT_PRODUCT_NV: u32 = 34117;
pub const GL_COMBINER_CD_DOT_PRODUCT_NV: u32 = 34118;
pub const GL_COMBINER_MUX_SUM_NV: u32 = 34119;
pub const GL_COMBINER_SCALE_NV: u32 = 34120;
pub const GL_COMBINER_BIAS_NV: u32 = 34121;
pub const GL_COMBINER_AB_OUTPUT_NV: u32 = 34122;
pub const GL_COMBINER_CD_OUTPUT_NV: u32 = 34123;
pub const GL_COMBINER_SUM_OUTPUT_NV: u32 = 34124;
pub const GL_MAX_GENERAL_COMBINERS_NV: u32 = 34125;
pub const GL_NUM_GENERAL_COMBINERS_NV: u32 = 34126;
pub const GL_COLOR_SUM_CLAMP_NV: u32 = 34127;
pub const GL_COMBINER0_NV: u32 = 34128;
pub const GL_COMBINER1_NV: u32 = 34129;
pub const GL_COMBINER2_NV: u32 = 34130;
pub const GL_COMBINER3_NV: u32 = 34131;
pub const GL_COMBINER4_NV: u32 = 34132;
pub const GL_COMBINER5_NV: u32 = 34133;
pub const GL_COMBINER6_NV: u32 = 34134;
pub const GL_COMBINER7_NV: u32 = 34135;
pub const GL_NV_register_combiners2: u32 = 1;
pub const GL_PER_STAGE_CONSTANTS_NV: u32 = 34101;
pub const GL_NV_shader_atomic_counters: u32 = 1;
pub const GL_NV_shader_atomic_float: u32 = 1;
pub const GL_NV_shader_buffer_load: u32 = 1;
pub const GL_BUFFER_GPU_ADDRESS_NV: u32 = 36637;
pub const GL_GPU_ADDRESS_NV: u32 = 36660;
pub const GL_MAX_SHADER_BUFFER_ADDRESS_NV: u32 = 36661;
pub const GL_NV_shader_buffer_store: u32 = 1;
pub const GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV: u32 = 16;
pub const GL_NV_shader_storage_buffer_object: u32 = 1;
pub const GL_NV_shader_thread_group: u32 = 1;
pub const GL_WARP_SIZE_NV: u32 = 37689;
pub const GL_WARPS_PER_SM_NV: u32 = 37690;
pub const GL_SM_COUNT_NV: u32 = 37691;
pub const GL_NV_shader_thread_shuffle: u32 = 1;
pub const GL_NV_tessellation_program5: u32 = 1;
pub const GL_MAX_PROGRAM_PATCH_ATTRIBS_NV: u32 = 34520;
pub const GL_TESS_CONTROL_PROGRAM_NV: u32 = 35102;
pub const GL_TESS_EVALUATION_PROGRAM_NV: u32 = 35103;
pub const GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV: u32 = 35956;
pub const GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV: u32 = 35957;
pub const GL_NV_texgen_emboss: u32 = 1;
pub const GL_EMBOSS_LIGHT_NV: u32 = 34141;
pub const GL_EMBOSS_CONSTANT_NV: u32 = 34142;
pub const GL_EMBOSS_MAP_NV: u32 = 34143;
pub const GL_NV_texgen_reflection: u32 = 1;
pub const GL_NORMAL_MAP_NV: u32 = 34065;
pub const GL_REFLECTION_MAP_NV: u32 = 34066;
pub const GL_NV_texture_barrier: u32 = 1;
pub const GL_NV_texture_compression_vtc: u32 = 1;
pub const GL_NV_texture_env_combine4: u32 = 1;
pub const GL_COMBINE4_NV: u32 = 34051;
pub const GL_SOURCE3_RGB_NV: u32 = 34179;
pub const GL_SOURCE3_ALPHA_NV: u32 = 34187;
pub const GL_OPERAND3_RGB_NV: u32 = 34195;
pub const GL_OPERAND3_ALPHA_NV: u32 = 34203;
pub const GL_NV_texture_expand_normal: u32 = 1;
pub const GL_TEXTURE_UNSIGNED_REMAP_MODE_NV: u32 = 34959;
pub const GL_NV_texture_multisample: u32 = 1;
pub const GL_TEXTURE_COVERAGE_SAMPLES_NV: u32 = 36933;
pub const GL_TEXTURE_COLOR_SAMPLES_NV: u32 = 36934;
pub const GL_NV_texture_rectangle: u32 = 1;
pub const GL_TEXTURE_RECTANGLE_NV: u32 = 34037;
pub const GL_TEXTURE_BINDING_RECTANGLE_NV: u32 = 34038;
pub const GL_PROXY_TEXTURE_RECTANGLE_NV: u32 = 34039;
pub const GL_MAX_RECTANGLE_TEXTURE_SIZE_NV: u32 = 34040;
pub const GL_NV_texture_shader: u32 = 1;
pub const GL_OFFSET_TEXTURE_RECTANGLE_NV: u32 = 34380;
pub const GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV: u32 = 34381;
pub const GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV: u32 = 34382;
pub const GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV: u32 = 34521;
pub const GL_UNSIGNED_INT_S8_S8_8_8_NV: u32 = 34522;
pub const GL_UNSIGNED_INT_8_8_S8_S8_REV_NV: u32 = 34523;
pub const GL_DSDT_MAG_INTENSITY_NV: u32 = 34524;
pub const GL_SHADER_CONSISTENT_NV: u32 = 34525;
pub const GL_TEXTURE_SHADER_NV: u32 = 34526;
pub const GL_SHADER_OPERATION_NV: u32 = 34527;
pub const GL_CULL_MODES_NV: u32 = 34528;
pub const GL_OFFSET_TEXTURE_MATRIX_NV: u32 = 34529;
pub const GL_OFFSET_TEXTURE_SCALE_NV: u32 = 34530;
pub const GL_OFFSET_TEXTURE_BIAS_NV: u32 = 34531;
pub const GL_OFFSET_TEXTURE_2D_MATRIX_NV: u32 = 34529;
pub const GL_OFFSET_TEXTURE_2D_SCALE_NV: u32 = 34530;
pub const GL_OFFSET_TEXTURE_2D_BIAS_NV: u32 = 34531;
pub const GL_PREVIOUS_TEXTURE_INPUT_NV: u32 = 34532;
pub const GL_CONST_EYE_NV: u32 = 34533;
pub const GL_PASS_THROUGH_NV: u32 = 34534;
pub const GL_CULL_FRAGMENT_NV: u32 = 34535;
pub const GL_OFFSET_TEXTURE_2D_NV: u32 = 34536;
pub const GL_DEPENDENT_AR_TEXTURE_2D_NV: u32 = 34537;
pub const GL_DEPENDENT_GB_TEXTURE_2D_NV: u32 = 34538;
pub const GL_DOT_PRODUCT_NV: u32 = 34540;
pub const GL_DOT_PRODUCT_DEPTH_REPLACE_NV: u32 = 34541;
pub const GL_DOT_PRODUCT_TEXTURE_2D_NV: u32 = 34542;
pub const GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV: u32 = 34544;
pub const GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV: u32 = 34545;
pub const GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV: u32 = 34546;
pub const GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV: u32 = 34547;
pub const GL_HILO_NV: u32 = 34548;
pub const GL_DSDT_NV: u32 = 34549;
pub const GL_DSDT_MAG_NV: u32 = 34550;
pub const GL_DSDT_MAG_VIB_NV: u32 = 34551;
pub const GL_HILO16_NV: u32 = 34552;
pub const GL_SIGNED_HILO_NV: u32 = 34553;
pub const GL_SIGNED_HILO16_NV: u32 = 34554;
pub const GL_SIGNED_RGBA_NV: u32 = 34555;
pub const GL_SIGNED_RGBA8_NV: u32 = 34556;
pub const GL_SIGNED_RGB_NV: u32 = 34558;
pub const GL_SIGNED_RGB8_NV: u32 = 34559;
pub const GL_SIGNED_LUMINANCE_NV: u32 = 34561;
pub const GL_SIGNED_LUMINANCE8_NV: u32 = 34562;
pub const GL_SIGNED_LUMINANCE_ALPHA_NV: u32 = 34563;
pub const GL_SIGNED_LUMINANCE8_ALPHA8_NV: u32 = 34564;
pub const GL_SIGNED_ALPHA_NV: u32 = 34565;
pub const GL_SIGNED_ALPHA8_NV: u32 = 34566;
pub const GL_SIGNED_INTENSITY_NV: u32 = 34567;
pub const GL_SIGNED_INTENSITY8_NV: u32 = 34568;
pub const GL_DSDT8_NV: u32 = 34569;
pub const GL_DSDT8_MAG8_NV: u32 = 34570;
pub const GL_DSDT8_MAG8_INTENSITY8_NV: u32 = 34571;
pub const GL_SIGNED_RGB_UNSIGNED_ALPHA_NV: u32 = 34572;
pub const GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV: u32 = 34573;
pub const GL_HI_SCALE_NV: u32 = 34574;
pub const GL_LO_SCALE_NV: u32 = 34575;
pub const GL_DS_SCALE_NV: u32 = 34576;
pub const GL_DT_SCALE_NV: u32 = 34577;
pub const GL_MAGNITUDE_SCALE_NV: u32 = 34578;
pub const GL_VIBRANCE_SCALE_NV: u32 = 34579;
pub const GL_HI_BIAS_NV: u32 = 34580;
pub const GL_LO_BIAS_NV: u32 = 34581;
pub const GL_DS_BIAS_NV: u32 = 34582;
pub const GL_DT_BIAS_NV: u32 = 34583;
pub const GL_MAGNITUDE_BIAS_NV: u32 = 34584;
pub const GL_VIBRANCE_BIAS_NV: u32 = 34585;
pub const GL_TEXTURE_BORDER_VALUES_NV: u32 = 34586;
pub const GL_TEXTURE_HI_SIZE_NV: u32 = 34587;
pub const GL_TEXTURE_LO_SIZE_NV: u32 = 34588;
pub const GL_TEXTURE_DS_SIZE_NV: u32 = 34589;
pub const GL_TEXTURE_DT_SIZE_NV: u32 = 34590;
pub const GL_TEXTURE_MAG_SIZE_NV: u32 = 34591;
pub const GL_NV_texture_shader2: u32 = 1;
pub const GL_DOT_PRODUCT_TEXTURE_3D_NV: u32 = 34543;
pub const GL_NV_texture_shader3: u32 = 1;
pub const GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV: u32 = 34896;
pub const GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV: u32 = 34897;
pub const GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV: u32 = 34898;
pub const GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV: u32 = 34899;
pub const GL_OFFSET_HILO_TEXTURE_2D_NV: u32 = 34900;
pub const GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV: u32 = 34901;
pub const GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV: u32 = 34902;
pub const GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV: u32 = 34903;
pub const GL_DEPENDENT_HILO_TEXTURE_2D_NV: u32 = 34904;
pub const GL_DEPENDENT_RGB_TEXTURE_3D_NV: u32 = 34905;
pub const GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV: u32 = 34906;
pub const GL_DOT_PRODUCT_PASS_THROUGH_NV: u32 = 34907;
pub const GL_DOT_PRODUCT_TEXTURE_1D_NV: u32 = 34908;
pub const GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV: u32 = 34909;
pub const GL_HILO8_NV: u32 = 34910;
pub const GL_SIGNED_HILO8_NV: u32 = 34911;
pub const GL_FORCE_BLUE_TO_ONE_NV: u32 = 34912;
pub const GL_NV_transform_feedback: u32 = 1;
pub const GL_BACK_PRIMARY_COLOR_NV: u32 = 35959;
pub const GL_BACK_SECONDARY_COLOR_NV: u32 = 35960;
pub const GL_TEXTURE_COORD_NV: u32 = 35961;
pub const GL_CLIP_DISTANCE_NV: u32 = 35962;
pub const GL_VERTEX_ID_NV: u32 = 35963;
pub const GL_PRIMITIVE_ID_NV: u32 = 35964;
pub const GL_GENERIC_ATTRIB_NV: u32 = 35965;
pub const GL_TRANSFORM_FEEDBACK_ATTRIBS_NV: u32 = 35966;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV: u32 = 35967;
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV: u32 = 35968;
pub const GL_ACTIVE_VARYINGS_NV: u32 = 35969;
pub const GL_ACTIVE_VARYING_MAX_LENGTH_NV: u32 = 35970;
pub const GL_TRANSFORM_FEEDBACK_VARYINGS_NV: u32 = 35971;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_START_NV: u32 = 35972;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV: u32 = 35973;
pub const GL_TRANSFORM_FEEDBACK_RECORD_NV: u32 = 35974;
pub const GL_PRIMITIVES_GENERATED_NV: u32 = 35975;
pub const GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV: u32 = 35976;
pub const GL_RASTERIZER_DISCARD_NV: u32 = 35977;
pub const GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV: u32 = 35978;
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV: u32 = 35979;
pub const GL_INTERLEAVED_ATTRIBS_NV: u32 = 35980;
pub const GL_SEPARATE_ATTRIBS_NV: u32 = 35981;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_NV: u32 = 35982;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV: u32 = 35983;
pub const GL_LAYER_NV: u32 = 36266;
pub const GL_NEXT_BUFFER_NV: i32 = -2;
pub const GL_SKIP_COMPONENTS4_NV: i32 = -3;
pub const GL_SKIP_COMPONENTS3_NV: i32 = -4;
pub const GL_SKIP_COMPONENTS2_NV: i32 = -5;
pub const GL_SKIP_COMPONENTS1_NV: i32 = -6;
pub const GL_NV_transform_feedback2: u32 = 1;
pub const GL_TRANSFORM_FEEDBACK_NV: u32 = 36386;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV: u32 = 36387;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV: u32 = 36388;
pub const GL_TRANSFORM_FEEDBACK_BINDING_NV: u32 = 36389;
pub const GL_NV_vdpau_interop: u32 = 1;
pub const GL_SURFACE_STATE_NV: u32 = 34539;
pub const GL_SURFACE_REGISTERED_NV: u32 = 34557;
pub const GL_SURFACE_MAPPED_NV: u32 = 34560;
pub const GL_WRITE_DISCARD_NV: u32 = 35006;
pub const GL_NV_vertex_array_range: u32 = 1;
pub const GL_VERTEX_ARRAY_RANGE_NV: u32 = 34077;
pub const GL_VERTEX_ARRAY_RANGE_LENGTH_NV: u32 = 34078;
pub const GL_VERTEX_ARRAY_RANGE_VALID_NV: u32 = 34079;
pub const GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV: u32 = 34080;
pub const GL_VERTEX_ARRAY_RANGE_POINTER_NV: u32 = 34081;
pub const GL_NV_vertex_array_range2: u32 = 1;
pub const GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV: u32 = 34099;
pub const GL_NV_vertex_attrib_integer_64bit: u32 = 1;
pub const GL_NV_vertex_buffer_unified_memory: u32 = 1;
pub const GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV: u32 = 36638;
pub const GL_ELEMENT_ARRAY_UNIFIED_NV: u32 = 36639;
pub const GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV: u32 = 36640;
pub const GL_VERTEX_ARRAY_ADDRESS_NV: u32 = 36641;
pub const GL_NORMAL_ARRAY_ADDRESS_NV: u32 = 36642;
pub const GL_COLOR_ARRAY_ADDRESS_NV: u32 = 36643;
pub const GL_INDEX_ARRAY_ADDRESS_NV: u32 = 36644;
pub const GL_TEXTURE_COORD_ARRAY_ADDRESS_NV: u32 = 36645;
pub const GL_EDGE_FLAG_ARRAY_ADDRESS_NV: u32 = 36646;
pub const GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV: u32 = 36647;
pub const GL_FOG_COORD_ARRAY_ADDRESS_NV: u32 = 36648;
pub const GL_ELEMENT_ARRAY_ADDRESS_NV: u32 = 36649;
pub const GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV: u32 = 36650;
pub const GL_VERTEX_ARRAY_LENGTH_NV: u32 = 36651;
pub const GL_NORMAL_ARRAY_LENGTH_NV: u32 = 36652;
pub const GL_COLOR_ARRAY_LENGTH_NV: u32 = 36653;
pub const GL_INDEX_ARRAY_LENGTH_NV: u32 = 36654;
pub const GL_TEXTURE_COORD_ARRAY_LENGTH_NV: u32 = 36655;
pub const GL_EDGE_FLAG_ARRAY_LENGTH_NV: u32 = 36656;
pub const GL_SECONDARY_COLOR_ARRAY_LENGTH_NV: u32 = 36657;
pub const GL_FOG_COORD_ARRAY_LENGTH_NV: u32 = 36658;
pub const GL_ELEMENT_ARRAY_LENGTH_NV: u32 = 36659;
pub const GL_DRAW_INDIRECT_UNIFIED_NV: u32 = 36672;
pub const GL_DRAW_INDIRECT_ADDRESS_NV: u32 = 36673;
pub const GL_DRAW_INDIRECT_LENGTH_NV: u32 = 36674;
pub const GL_NV_vertex_program: u32 = 1;
pub const GL_VERTEX_PROGRAM_NV: u32 = 34336;
pub const GL_VERTEX_STATE_PROGRAM_NV: u32 = 34337;
pub const GL_ATTRIB_ARRAY_SIZE_NV: u32 = 34339;
pub const GL_ATTRIB_ARRAY_STRIDE_NV: u32 = 34340;
pub const GL_ATTRIB_ARRAY_TYPE_NV: u32 = 34341;
pub const GL_CURRENT_ATTRIB_NV: u32 = 34342;
pub const GL_PROGRAM_LENGTH_NV: u32 = 34343;
pub const GL_PROGRAM_STRING_NV: u32 = 34344;
pub const GL_MODELVIEW_PROJECTION_NV: u32 = 34345;
pub const GL_IDENTITY_NV: u32 = 34346;
pub const GL_INVERSE_NV: u32 = 34347;
pub const GL_TRANSPOSE_NV: u32 = 34348;
pub const GL_INVERSE_TRANSPOSE_NV: u32 = 34349;
pub const GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV: u32 = 34350;
pub const GL_MAX_TRACK_MATRICES_NV: u32 = 34351;
pub const GL_MATRIX0_NV: u32 = 34352;
pub const GL_MATRIX1_NV: u32 = 34353;
pub const GL_MATRIX2_NV: u32 = 34354;
pub const GL_MATRIX3_NV: u32 = 34355;
pub const GL_MATRIX4_NV: u32 = 34356;
pub const GL_MATRIX5_NV: u32 = 34357;
pub const GL_MATRIX6_NV: u32 = 34358;
pub const GL_MATRIX7_NV: u32 = 34359;
pub const GL_CURRENT_MATRIX_STACK_DEPTH_NV: u32 = 34368;
pub const GL_CURRENT_MATRIX_NV: u32 = 34369;
pub const GL_VERTEX_PROGRAM_POINT_SIZE_NV: u32 = 34370;
pub const GL_VERTEX_PROGRAM_TWO_SIDE_NV: u32 = 34371;
pub const GL_PROGRAM_PARAMETER_NV: u32 = 34372;
pub const GL_ATTRIB_ARRAY_POINTER_NV: u32 = 34373;
pub const GL_PROGRAM_TARGET_NV: u32 = 34374;
pub const GL_PROGRAM_RESIDENT_NV: u32 = 34375;
pub const GL_TRACK_MATRIX_NV: u32 = 34376;
pub const GL_TRACK_MATRIX_TRANSFORM_NV: u32 = 34377;
pub const GL_VERTEX_PROGRAM_BINDING_NV: u32 = 34378;
pub const GL_PROGRAM_ERROR_POSITION_NV: u32 = 34379;
pub const GL_VERTEX_ATTRIB_ARRAY0_NV: u32 = 34384;
pub const GL_VERTEX_ATTRIB_ARRAY1_NV: u32 = 34385;
pub const GL_VERTEX_ATTRIB_ARRAY2_NV: u32 = 34386;
pub const GL_VERTEX_ATTRIB_ARRAY3_NV: u32 = 34387;
pub const GL_VERTEX_ATTRIB_ARRAY4_NV: u32 = 34388;
pub const GL_VERTEX_ATTRIB_ARRAY5_NV: u32 = 34389;
pub const GL_VERTEX_ATTRIB_ARRAY6_NV: u32 = 34390;
pub const GL_VERTEX_ATTRIB_ARRAY7_NV: u32 = 34391;
pub const GL_VERTEX_ATTRIB_ARRAY8_NV: u32 = 34392;
pub const GL_VERTEX_ATTRIB_ARRAY9_NV: u32 = 34393;
pub const GL_VERTEX_ATTRIB_ARRAY10_NV: u32 = 34394;
pub const GL_VERTEX_ATTRIB_ARRAY11_NV: u32 = 34395;
pub const GL_VERTEX_ATTRIB_ARRAY12_NV: u32 = 34396;
pub const GL_VERTEX_ATTRIB_ARRAY13_NV: u32 = 34397;
pub const GL_VERTEX_ATTRIB_ARRAY14_NV: u32 = 34398;
pub const GL_VERTEX_ATTRIB_ARRAY15_NV: u32 = 34399;
pub const GL_MAP1_VERTEX_ATTRIB0_4_NV: u32 = 34400;
pub const GL_MAP1_VERTEX_ATTRIB1_4_NV: u32 = 34401;
pub const GL_MAP1_VERTEX_ATTRIB2_4_NV: u32 = 34402;
pub const GL_MAP1_VERTEX_ATTRIB3_4_NV: u32 = 34403;
pub const GL_MAP1_VERTEX_ATTRIB4_4_NV: u32 = 34404;
pub const GL_MAP1_VERTEX_ATTRIB5_4_NV: u32 = 34405;
pub const GL_MAP1_VERTEX_ATTRIB6_4_NV: u32 = 34406;
pub const GL_MAP1_VERTEX_ATTRIB7_4_NV: u32 = 34407;
pub const GL_MAP1_VERTEX_ATTRIB8_4_NV: u32 = 34408;
pub const GL_MAP1_VERTEX_ATTRIB9_4_NV: u32 = 34409;
pub const GL_MAP1_VERTEX_ATTRIB10_4_NV: u32 = 34410;
pub const GL_MAP1_VERTEX_ATTRIB11_4_NV: u32 = 34411;
pub const GL_MAP1_VERTEX_ATTRIB12_4_NV: u32 = 34412;
pub const GL_MAP1_VERTEX_ATTRIB13_4_NV: u32 = 34413;
pub const GL_MAP1_VERTEX_ATTRIB14_4_NV: u32 = 34414;
pub const GL_MAP1_VERTEX_ATTRIB15_4_NV: u32 = 34415;
pub const GL_MAP2_VERTEX_ATTRIB0_4_NV: u32 = 34416;
pub const GL_MAP2_VERTEX_ATTRIB1_4_NV: u32 = 34417;
pub const GL_MAP2_VERTEX_ATTRIB2_4_NV: u32 = 34418;
pub const GL_MAP2_VERTEX_ATTRIB3_4_NV: u32 = 34419;
pub const GL_MAP2_VERTEX_ATTRIB4_4_NV: u32 = 34420;
pub const GL_MAP2_VERTEX_ATTRIB5_4_NV: u32 = 34421;
pub const GL_MAP2_VERTEX_ATTRIB6_4_NV: u32 = 34422;
pub const GL_MAP2_VERTEX_ATTRIB7_4_NV: u32 = 34423;
pub const GL_MAP2_VERTEX_ATTRIB8_4_NV: u32 = 34424;
pub const GL_MAP2_VERTEX_ATTRIB9_4_NV: u32 = 34425;
pub const GL_MAP2_VERTEX_ATTRIB10_4_NV: u32 = 34426;
pub const GL_MAP2_VERTEX_ATTRIB11_4_NV: u32 = 34427;
pub const GL_MAP2_VERTEX_ATTRIB12_4_NV: u32 = 34428;
pub const GL_MAP2_VERTEX_ATTRIB13_4_NV: u32 = 34429;
pub const GL_MAP2_VERTEX_ATTRIB14_4_NV: u32 = 34430;
pub const GL_MAP2_VERTEX_ATTRIB15_4_NV: u32 = 34431;
pub const GL_NV_vertex_program1_1: u32 = 1;
pub const GL_NV_vertex_program2: u32 = 1;
pub const GL_NV_vertex_program2_option: u32 = 1;
pub const GL_NV_vertex_program3: u32 = 1;
pub const GL_NV_vertex_program4: u32 = 1;
pub const GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV: u32 = 35069;
pub const GL_NV_video_capture: u32 = 1;
pub const GL_VIDEO_BUFFER_NV: u32 = 36896;
pub const GL_VIDEO_BUFFER_BINDING_NV: u32 = 36897;
pub const GL_FIELD_UPPER_NV: u32 = 36898;
pub const GL_FIELD_LOWER_NV: u32 = 36899;
pub const GL_NUM_VIDEO_CAPTURE_STREAMS_NV: u32 = 36900;
pub const GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV: u32 = 36901;
pub const GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV: u32 = 36902;
pub const GL_LAST_VIDEO_CAPTURE_STATUS_NV: u32 = 36903;
pub const GL_VIDEO_BUFFER_PITCH_NV: u32 = 36904;
pub const GL_VIDEO_COLOR_CONVERSION_MATRIX_NV: u32 = 36905;
pub const GL_VIDEO_COLOR_CONVERSION_MAX_NV: u32 = 36906;
pub const GL_VIDEO_COLOR_CONVERSION_MIN_NV: u32 = 36907;
pub const GL_VIDEO_COLOR_CONVERSION_OFFSET_NV: u32 = 36908;
pub const GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV: u32 = 36909;
pub const GL_PARTIAL_SUCCESS_NV: u32 = 36910;
pub const GL_SUCCESS_NV: u32 = 36911;
pub const GL_FAILURE_NV: u32 = 36912;
pub const GL_YCBYCR8_422_NV: u32 = 36913;
pub const GL_YCBAYCR8A_4224_NV: u32 = 36914;
pub const GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV: u32 = 36915;
pub const GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV: u32 = 36916;
pub const GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV: u32 = 36917;
pub const GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV: u32 = 36918;
pub const GL_Z4Y12Z4CB12Z4CR12_444_NV: u32 = 36919;
pub const GL_VIDEO_CAPTURE_FRAME_WIDTH_NV: u32 = 36920;
pub const GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV: u32 = 36921;
pub const GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV: u32 = 36922;
pub const GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV: u32 = 36923;
pub const GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV: u32 = 36924;
pub const GL_OML_interlace: u32 = 1;
pub const GL_INTERLACE_OML: u32 = 35200;
pub const GL_INTERLACE_READ_OML: u32 = 35201;
pub const GL_OML_resample: u32 = 1;
pub const GL_PACK_RESAMPLE_OML: u32 = 35204;
pub const GL_UNPACK_RESAMPLE_OML: u32 = 35205;
pub const GL_RESAMPLE_REPLICATE_OML: u32 = 35206;
pub const GL_RESAMPLE_ZERO_FILL_OML: u32 = 35207;
pub const GL_RESAMPLE_AVERAGE_OML: u32 = 35208;
pub const GL_RESAMPLE_DECIMATE_OML: u32 = 35209;
pub const GL_OML_subsample: u32 = 1;
pub const GL_FORMAT_SUBSAMPLE_24_24_OML: u32 = 35202;
pub const GL_FORMAT_SUBSAMPLE_244_244_OML: u32 = 35203;
pub const GL_PGI_misc_hints: u32 = 1;
pub const GL_PREFER_DOUBLEBUFFER_HINT_PGI: u32 = 107000;
pub const GL_CONSERVE_MEMORY_HINT_PGI: u32 = 107005;
pub const GL_RECLAIM_MEMORY_HINT_PGI: u32 = 107006;
pub const GL_NATIVE_GRAPHICS_HANDLE_PGI: u32 = 107010;
pub const GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI: u32 = 107011;
pub const GL_NATIVE_GRAPHICS_END_HINT_PGI: u32 = 107012;
pub const GL_ALWAYS_FAST_HINT_PGI: u32 = 107020;
pub const GL_ALWAYS_SOFT_HINT_PGI: u32 = 107021;
pub const GL_ALLOW_DRAW_OBJ_HINT_PGI: u32 = 107022;
pub const GL_ALLOW_DRAW_WIN_HINT_PGI: u32 = 107023;
pub const GL_ALLOW_DRAW_FRG_HINT_PGI: u32 = 107024;
pub const GL_ALLOW_DRAW_MEM_HINT_PGI: u32 = 107025;
pub const GL_STRICT_DEPTHFUNC_HINT_PGI: u32 = 107030;
pub const GL_STRICT_LIGHTING_HINT_PGI: u32 = 107031;
pub const GL_STRICT_SCISSOR_HINT_PGI: u32 = 107032;
pub const GL_FULL_STIPPLE_HINT_PGI: u32 = 107033;
pub const GL_CLIP_NEAR_HINT_PGI: u32 = 107040;
pub const GL_CLIP_FAR_HINT_PGI: u32 = 107041;
pub const GL_WIDE_LINE_HINT_PGI: u32 = 107042;
pub const GL_BACK_NORMALS_HINT_PGI: u32 = 107043;
pub const GL_PGI_vertex_hints: u32 = 1;
pub const GL_VERTEX_DATA_HINT_PGI: u32 = 107050;
pub const GL_VERTEX_CONSISTENT_HINT_PGI: u32 = 107051;
pub const GL_MATERIAL_SIDE_HINT_PGI: u32 = 107052;
pub const GL_MAX_VERTEX_HINT_PGI: u32 = 107053;
pub const GL_COLOR3_BIT_PGI: u32 = 65536;
pub const GL_COLOR4_BIT_PGI: u32 = 131072;
pub const GL_EDGEFLAG_BIT_PGI: u32 = 262144;
pub const GL_INDEX_BIT_PGI: u32 = 524288;
pub const GL_MAT_AMBIENT_BIT_PGI: u32 = 1048576;
pub const GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI: u32 = 2097152;
pub const GL_MAT_DIFFUSE_BIT_PGI: u32 = 4194304;
pub const GL_MAT_EMISSION_BIT_PGI: u32 = 8388608;
pub const GL_MAT_COLOR_INDEXES_BIT_PGI: u32 = 16777216;
pub const GL_MAT_SHININESS_BIT_PGI: u32 = 33554432;
pub const GL_MAT_SPECULAR_BIT_PGI: u32 = 67108864;
pub const GL_NORMAL_BIT_PGI: u32 = 134217728;
pub const GL_TEXCOORD1_BIT_PGI: u32 = 268435456;
pub const GL_TEXCOORD2_BIT_PGI: u32 = 536870912;
pub const GL_TEXCOORD3_BIT_PGI: u32 = 1073741824;
pub const GL_TEXCOORD4_BIT_PGI: u32 = 2147483648;
pub const GL_VERTEX23_BIT_PGI: u32 = 4;
pub const GL_VERTEX4_BIT_PGI: u32 = 8;
pub const GL_REND_screen_coordinates: u32 = 1;
pub const GL_SCREEN_COORDINATES_REND: u32 = 33936;
pub const GL_INVERTED_SCREEN_W_REND: u32 = 33937;
pub const GL_S3_s3tc: u32 = 1;
pub const GL_RGB_S3TC: u32 = 33696;
pub const GL_RGB4_S3TC: u32 = 33697;
pub const GL_RGBA_S3TC: u32 = 33698;
pub const GL_RGBA4_S3TC: u32 = 33699;
pub const GL_RGBA_DXT5_S3TC: u32 = 33700;
pub const GL_RGBA4_DXT5_S3TC: u32 = 33701;
pub const GL_SGIS_detail_texture: u32 = 1;
pub const GL_DETAIL_TEXTURE_2D_SGIS: u32 = 32917;
pub const GL_DETAIL_TEXTURE_2D_BINDING_SGIS: u32 = 32918;
pub const GL_LINEAR_DETAIL_SGIS: u32 = 32919;
pub const GL_LINEAR_DETAIL_ALPHA_SGIS: u32 = 32920;
pub const GL_LINEAR_DETAIL_COLOR_SGIS: u32 = 32921;
pub const GL_DETAIL_TEXTURE_LEVEL_SGIS: u32 = 32922;
pub const GL_DETAIL_TEXTURE_MODE_SGIS: u32 = 32923;
pub const GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS: u32 = 32924;
pub const GL_SGIS_fog_function: u32 = 1;
pub const GL_FOG_FUNC_SGIS: u32 = 33066;
pub const GL_FOG_FUNC_POINTS_SGIS: u32 = 33067;
pub const GL_MAX_FOG_FUNC_POINTS_SGIS: u32 = 33068;
pub const GL_SGIS_generate_mipmap: u32 = 1;
pub const GL_GENERATE_MIPMAP_SGIS: u32 = 33169;
pub const GL_GENERATE_MIPMAP_HINT_SGIS: u32 = 33170;
pub const GL_SGIS_multisample: u32 = 1;
pub const GL_MULTISAMPLE_SGIS: u32 = 32925;
pub const GL_SAMPLE_ALPHA_TO_MASK_SGIS: u32 = 32926;
pub const GL_SAMPLE_ALPHA_TO_ONE_SGIS: u32 = 32927;
pub const GL_SAMPLE_MASK_SGIS: u32 = 32928;
pub const GL_1PASS_SGIS: u32 = 32929;
pub const GL_2PASS_0_SGIS: u32 = 32930;
pub const GL_2PASS_1_SGIS: u32 = 32931;
pub const GL_4PASS_0_SGIS: u32 = 32932;
pub const GL_4PASS_1_SGIS: u32 = 32933;
pub const GL_4PASS_2_SGIS: u32 = 32934;
pub const GL_4PASS_3_SGIS: u32 = 32935;
pub const GL_SAMPLE_BUFFERS_SGIS: u32 = 32936;
pub const GL_SAMPLES_SGIS: u32 = 32937;
pub const GL_SAMPLE_MASK_VALUE_SGIS: u32 = 32938;
pub const GL_SAMPLE_MASK_INVERT_SGIS: u32 = 32939;
pub const GL_SAMPLE_PATTERN_SGIS: u32 = 32940;
pub const GL_SGIS_pixel_texture: u32 = 1;
pub const GL_PIXEL_TEXTURE_SGIS: u32 = 33619;
pub const GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS: u32 = 33620;
pub const GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS: u32 = 33621;
pub const GL_PIXEL_GROUP_COLOR_SGIS: u32 = 33622;
pub const GL_SGIS_point_line_texgen: u32 = 1;
pub const GL_EYE_DISTANCE_TO_POINT_SGIS: u32 = 33264;
pub const GL_OBJECT_DISTANCE_TO_POINT_SGIS: u32 = 33265;
pub const GL_EYE_DISTANCE_TO_LINE_SGIS: u32 = 33266;
pub const GL_OBJECT_DISTANCE_TO_LINE_SGIS: u32 = 33267;
pub const GL_EYE_POINT_SGIS: u32 = 33268;
pub const GL_OBJECT_POINT_SGIS: u32 = 33269;
pub const GL_EYE_LINE_SGIS: u32 = 33270;
pub const GL_OBJECT_LINE_SGIS: u32 = 33271;
pub const GL_SGIS_point_parameters: u32 = 1;
pub const GL_POINT_SIZE_MIN_SGIS: u32 = 33062;
pub const GL_POINT_SIZE_MAX_SGIS: u32 = 33063;
pub const GL_POINT_FADE_THRESHOLD_SIZE_SGIS: u32 = 33064;
pub const GL_DISTANCE_ATTENUATION_SGIS: u32 = 33065;
pub const GL_SGIS_sharpen_texture: u32 = 1;
pub const GL_LINEAR_SHARPEN_SGIS: u32 = 32941;
pub const GL_LINEAR_SHARPEN_ALPHA_SGIS: u32 = 32942;
pub const GL_LINEAR_SHARPEN_COLOR_SGIS: u32 = 32943;
pub const GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS: u32 = 32944;
pub const GL_SGIS_texture4D: u32 = 1;
pub const GL_PACK_SKIP_VOLUMES_SGIS: u32 = 33072;
pub const GL_PACK_IMAGE_DEPTH_SGIS: u32 = 33073;
pub const GL_UNPACK_SKIP_VOLUMES_SGIS: u32 = 33074;
pub const GL_UNPACK_IMAGE_DEPTH_SGIS: u32 = 33075;
pub const GL_TEXTURE_4D_SGIS: u32 = 33076;
pub const GL_PROXY_TEXTURE_4D_SGIS: u32 = 33077;
pub const GL_TEXTURE_4DSIZE_SGIS: u32 = 33078;
pub const GL_TEXTURE_WRAP_Q_SGIS: u32 = 33079;
pub const GL_MAX_4D_TEXTURE_SIZE_SGIS: u32 = 33080;
pub const GL_TEXTURE_4D_BINDING_SGIS: u32 = 33103;
pub const GL_SGIS_texture_border_clamp: u32 = 1;
pub const GL_CLAMP_TO_BORDER_SGIS: u32 = 33069;
pub const GL_SGIS_texture_color_mask: u32 = 1;
pub const GL_TEXTURE_COLOR_WRITEMASK_SGIS: u32 = 33263;
pub const GL_SGIS_texture_edge_clamp: u32 = 1;
pub const GL_CLAMP_TO_EDGE_SGIS: u32 = 33071;
pub const GL_SGIS_texture_filter4: u32 = 1;
pub const GL_FILTER4_SGIS: u32 = 33094;
pub const GL_TEXTURE_FILTER4_SIZE_SGIS: u32 = 33095;
pub const GL_SGIS_texture_lod: u32 = 1;
pub const GL_TEXTURE_MIN_LOD_SGIS: u32 = 33082;
pub const GL_TEXTURE_MAX_LOD_SGIS: u32 = 33083;
pub const GL_TEXTURE_BASE_LEVEL_SGIS: u32 = 33084;
pub const GL_TEXTURE_MAX_LEVEL_SGIS: u32 = 33085;
pub const GL_SGIS_texture_select: u32 = 1;
pub const GL_DUAL_ALPHA4_SGIS: u32 = 33040;
pub const GL_DUAL_ALPHA8_SGIS: u32 = 33041;
pub const GL_DUAL_ALPHA12_SGIS: u32 = 33042;
pub const GL_DUAL_ALPHA16_SGIS: u32 = 33043;
pub const GL_DUAL_LUMINANCE4_SGIS: u32 = 33044;
pub const GL_DUAL_LUMINANCE8_SGIS: u32 = 33045;
pub const GL_DUAL_LUMINANCE12_SGIS: u32 = 33046;
pub const GL_DUAL_LUMINANCE16_SGIS: u32 = 33047;
pub const GL_DUAL_INTENSITY4_SGIS: u32 = 33048;
pub const GL_DUAL_INTENSITY8_SGIS: u32 = 33049;
pub const GL_DUAL_INTENSITY12_SGIS: u32 = 33050;
pub const GL_DUAL_INTENSITY16_SGIS: u32 = 33051;
pub const GL_DUAL_LUMINANCE_ALPHA4_SGIS: u32 = 33052;
pub const GL_DUAL_LUMINANCE_ALPHA8_SGIS: u32 = 33053;
pub const GL_QUAD_ALPHA4_SGIS: u32 = 33054;
pub const GL_QUAD_ALPHA8_SGIS: u32 = 33055;
pub const GL_QUAD_LUMINANCE4_SGIS: u32 = 33056;
pub const GL_QUAD_LUMINANCE8_SGIS: u32 = 33057;
pub const GL_QUAD_INTENSITY4_SGIS: u32 = 33058;
pub const GL_QUAD_INTENSITY8_SGIS: u32 = 33059;
pub const GL_DUAL_TEXTURE_SELECT_SGIS: u32 = 33060;
pub const GL_QUAD_TEXTURE_SELECT_SGIS: u32 = 33061;
pub const GL_SGIX_async: u32 = 1;
pub const GL_ASYNC_MARKER_SGIX: u32 = 33577;
pub const GL_SGIX_async_histogram: u32 = 1;
pub const GL_ASYNC_HISTOGRAM_SGIX: u32 = 33580;
pub const GL_MAX_ASYNC_HISTOGRAM_SGIX: u32 = 33581;
pub const GL_SGIX_async_pixel: u32 = 1;
pub const GL_ASYNC_TEX_IMAGE_SGIX: u32 = 33628;
pub const GL_ASYNC_DRAW_PIXELS_SGIX: u32 = 33629;
pub const GL_ASYNC_READ_PIXELS_SGIX: u32 = 33630;
pub const GL_MAX_ASYNC_TEX_IMAGE_SGIX: u32 = 33631;
pub const GL_MAX_ASYNC_DRAW_PIXELS_SGIX: u32 = 33632;
pub const GL_MAX_ASYNC_READ_PIXELS_SGIX: u32 = 33633;
pub const GL_SGIX_blend_alpha_minmax: u32 = 1;
pub const GL_ALPHA_MIN_SGIX: u32 = 33568;
pub const GL_ALPHA_MAX_SGIX: u32 = 33569;
pub const GL_SGIX_calligraphic_fragment: u32 = 1;
pub const GL_CALLIGRAPHIC_FRAGMENT_SGIX: u32 = 33155;
pub const GL_SGIX_clipmap: u32 = 1;
pub const GL_LINEAR_CLIPMAP_LINEAR_SGIX: u32 = 33136;
pub const GL_TEXTURE_CLIPMAP_CENTER_SGIX: u32 = 33137;
pub const GL_TEXTURE_CLIPMAP_FRAME_SGIX: u32 = 33138;
pub const GL_TEXTURE_CLIPMAP_OFFSET_SGIX: u32 = 33139;
pub const GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX: u32 = 33140;
pub const GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX: u32 = 33141;
pub const GL_TEXTURE_CLIPMAP_DEPTH_SGIX: u32 = 33142;
pub const GL_MAX_CLIPMAP_DEPTH_SGIX: u32 = 33143;
pub const GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX: u32 = 33144;
pub const GL_NEAREST_CLIPMAP_NEAREST_SGIX: u32 = 33869;
pub const GL_NEAREST_CLIPMAP_LINEAR_SGIX: u32 = 33870;
pub const GL_LINEAR_CLIPMAP_NEAREST_SGIX: u32 = 33871;
pub const GL_SGIX_convolution_accuracy: u32 = 1;
pub const GL_CONVOLUTION_HINT_SGIX: u32 = 33558;
pub const GL_SGIX_depth_pass_instrument: u32 = 1;
pub const GL_SGIX_depth_texture: u32 = 1;
pub const GL_DEPTH_COMPONENT16_SGIX: u32 = 33189;
pub const GL_DEPTH_COMPONENT24_SGIX: u32 = 33190;
pub const GL_DEPTH_COMPONENT32_SGIX: u32 = 33191;
pub const GL_SGIX_flush_raster: u32 = 1;
pub const GL_SGIX_fog_offset: u32 = 1;
pub const GL_FOG_OFFSET_SGIX: u32 = 33176;
pub const GL_FOG_OFFSET_VALUE_SGIX: u32 = 33177;
pub const GL_SGIX_fragment_lighting: u32 = 1;
pub const GL_FRAGMENT_LIGHTING_SGIX: u32 = 33792;
pub const GL_FRAGMENT_COLOR_MATERIAL_SGIX: u32 = 33793;
pub const GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX: u32 = 33794;
pub const GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX: u32 = 33795;
pub const GL_MAX_FRAGMENT_LIGHTS_SGIX: u32 = 33796;
pub const GL_MAX_ACTIVE_LIGHTS_SGIX: u32 = 33797;
pub const GL_CURRENT_RASTER_NORMAL_SGIX: u32 = 33798;
pub const GL_LIGHT_ENV_MODE_SGIX: u32 = 33799;
pub const GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX: u32 = 33800;
pub const GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX: u32 = 33801;
pub const GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX: u32 = 33802;
pub const GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX: u32 = 33803;
pub const GL_FRAGMENT_LIGHT0_SGIX: u32 = 33804;
pub const GL_FRAGMENT_LIGHT1_SGIX: u32 = 33805;
pub const GL_FRAGMENT_LIGHT2_SGIX: u32 = 33806;
pub const GL_FRAGMENT_LIGHT3_SGIX: u32 = 33807;
pub const GL_FRAGMENT_LIGHT4_SGIX: u32 = 33808;
pub const GL_FRAGMENT_LIGHT5_SGIX: u32 = 33809;
pub const GL_FRAGMENT_LIGHT6_SGIX: u32 = 33810;
pub const GL_FRAGMENT_LIGHT7_SGIX: u32 = 33811;
pub const GL_SGIX_framezoom: u32 = 1;
pub const GL_FRAMEZOOM_SGIX: u32 = 33163;
pub const GL_FRAMEZOOM_FACTOR_SGIX: u32 = 33164;
pub const GL_MAX_FRAMEZOOM_FACTOR_SGIX: u32 = 33165;
pub const GL_SGIX_igloo_interface: u32 = 1;
pub const GL_SGIX_instruments: u32 = 1;
pub const GL_INSTRUMENT_BUFFER_POINTER_SGIX: u32 = 33152;
pub const GL_INSTRUMENT_MEASUREMENTS_SGIX: u32 = 33153;
pub const GL_SGIX_interlace: u32 = 1;
pub const GL_INTERLACE_SGIX: u32 = 32916;
pub const GL_SGIX_ir_instrument1: u32 = 1;
pub const GL_IR_INSTRUMENT1_SGIX: u32 = 33151;
pub const GL_SGIX_list_priority: u32 = 1;
pub const GL_LIST_PRIORITY_SGIX: u32 = 33154;
pub const GL_SGIX_pixel_texture: u32 = 1;
pub const GL_PIXEL_TEX_GEN_SGIX: u32 = 33081;
pub const GL_PIXEL_TEX_GEN_MODE_SGIX: u32 = 33579;
pub const GL_SGIX_pixel_tiles: u32 = 1;
pub const GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX: u32 = 33086;
pub const GL_PIXEL_TILE_CACHE_INCREMENT_SGIX: u32 = 33087;
pub const GL_PIXEL_TILE_WIDTH_SGIX: u32 = 33088;
pub const GL_PIXEL_TILE_HEIGHT_SGIX: u32 = 33089;
pub const GL_PIXEL_TILE_GRID_WIDTH_SGIX: u32 = 33090;
pub const GL_PIXEL_TILE_GRID_HEIGHT_SGIX: u32 = 33091;
pub const GL_PIXEL_TILE_GRID_DEPTH_SGIX: u32 = 33092;
pub const GL_PIXEL_TILE_CACHE_SIZE_SGIX: u32 = 33093;
pub const GL_SGIX_polynomial_ffd: u32 = 1;
pub const GL_TEXTURE_DEFORMATION_BIT_SGIX: u32 = 1;
pub const GL_GEOMETRY_DEFORMATION_BIT_SGIX: u32 = 2;
pub const GL_GEOMETRY_DEFORMATION_SGIX: u32 = 33172;
pub const GL_TEXTURE_DEFORMATION_SGIX: u32 = 33173;
pub const GL_DEFORMATIONS_MASK_SGIX: u32 = 33174;
pub const GL_MAX_DEFORMATION_ORDER_SGIX: u32 = 33175;
pub const GL_SGIX_reference_plane: u32 = 1;
pub const GL_REFERENCE_PLANE_SGIX: u32 = 33149;
pub const GL_REFERENCE_PLANE_EQUATION_SGIX: u32 = 33150;
pub const GL_SGIX_resample: u32 = 1;
pub const GL_PACK_RESAMPLE_SGIX: u32 = 33836;
pub const GL_UNPACK_RESAMPLE_SGIX: u32 = 33837;
pub const GL_RESAMPLE_REPLICATE_SGIX: u32 = 33838;
pub const GL_RESAMPLE_ZERO_FILL_SGIX: u32 = 33839;
pub const GL_RESAMPLE_DECIMATE_SGIX: u32 = 33840;
pub const GL_SGIX_scalebias_hint: u32 = 1;
pub const GL_SCALEBIAS_HINT_SGIX: u32 = 33570;
pub const GL_SGIX_shadow: u32 = 1;
pub const GL_TEXTURE_COMPARE_SGIX: u32 = 33178;
pub const GL_TEXTURE_COMPARE_OPERATOR_SGIX: u32 = 33179;
pub const GL_TEXTURE_LEQUAL_R_SGIX: u32 = 33180;
pub const GL_TEXTURE_GEQUAL_R_SGIX: u32 = 33181;
pub const GL_SGIX_shadow_ambient: u32 = 1;
pub const GL_SHADOW_AMBIENT_SGIX: u32 = 32959;
pub const GL_SGIX_sprite: u32 = 1;
pub const GL_SPRITE_SGIX: u32 = 33096;
pub const GL_SPRITE_MODE_SGIX: u32 = 33097;
pub const GL_SPRITE_AXIS_SGIX: u32 = 33098;
pub const GL_SPRITE_TRANSLATION_SGIX: u32 = 33099;
pub const GL_SPRITE_AXIAL_SGIX: u32 = 33100;
pub const GL_SPRITE_OBJECT_ALIGNED_SGIX: u32 = 33101;
pub const GL_SPRITE_EYE_ALIGNED_SGIX: u32 = 33102;
pub const GL_SGIX_subsample: u32 = 1;
pub const GL_PACK_SUBSAMPLE_RATE_SGIX: u32 = 34208;
pub const GL_UNPACK_SUBSAMPLE_RATE_SGIX: u32 = 34209;
pub const GL_PIXEL_SUBSAMPLE_4444_SGIX: u32 = 34210;
pub const GL_PIXEL_SUBSAMPLE_2424_SGIX: u32 = 34211;
pub const GL_PIXEL_SUBSAMPLE_4242_SGIX: u32 = 34212;
pub const GL_SGIX_tag_sample_buffer: u32 = 1;
pub const GL_SGIX_texture_add_env: u32 = 1;
pub const GL_TEXTURE_ENV_BIAS_SGIX: u32 = 32958;
pub const GL_SGIX_texture_coordinate_clamp: u32 = 1;
pub const GL_TEXTURE_MAX_CLAMP_S_SGIX: u32 = 33641;
pub const GL_TEXTURE_MAX_CLAMP_T_SGIX: u32 = 33642;
pub const GL_TEXTURE_MAX_CLAMP_R_SGIX: u32 = 33643;
pub const GL_SGIX_texture_lod_bias: u32 = 1;
pub const GL_TEXTURE_LOD_BIAS_S_SGIX: u32 = 33166;
pub const GL_TEXTURE_LOD_BIAS_T_SGIX: u32 = 33167;
pub const GL_TEXTURE_LOD_BIAS_R_SGIX: u32 = 33168;
pub const GL_SGIX_texture_multi_buffer: u32 = 1;
pub const GL_TEXTURE_MULTI_BUFFER_HINT_SGIX: u32 = 33070;
pub const GL_SGIX_texture_scale_bias: u32 = 1;
pub const GL_POST_TEXTURE_FILTER_BIAS_SGIX: u32 = 33145;
pub const GL_POST_TEXTURE_FILTER_SCALE_SGIX: u32 = 33146;
pub const GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX: u32 = 33147;
pub const GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX: u32 = 33148;
pub const GL_SGIX_vertex_preclip: u32 = 1;
pub const GL_VERTEX_PRECLIP_SGIX: u32 = 33774;
pub const GL_VERTEX_PRECLIP_HINT_SGIX: u32 = 33775;
pub const GL_SGIX_ycrcb: u32 = 1;
pub const GL_YCRCB_422_SGIX: u32 = 33211;
pub const GL_YCRCB_444_SGIX: u32 = 33212;
pub const GL_SGIX_ycrcb_subsample: u32 = 1;
pub const GL_SGIX_ycrcba: u32 = 1;
pub const GL_YCRCB_SGIX: u32 = 33560;
pub const GL_YCRCBA_SGIX: u32 = 33561;
pub const GL_SGI_color_matrix: u32 = 1;
pub const GL_COLOR_MATRIX_SGI: u32 = 32945;
pub const GL_COLOR_MATRIX_STACK_DEPTH_SGI: u32 = 32946;
pub const GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI: u32 = 32947;
pub const GL_POST_COLOR_MATRIX_RED_SCALE_SGI: u32 = 32948;
pub const GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI: u32 = 32949;
pub const GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI: u32 = 32950;
pub const GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI: u32 = 32951;
pub const GL_POST_COLOR_MATRIX_RED_BIAS_SGI: u32 = 32952;
pub const GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI: u32 = 32953;
pub const GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI: u32 = 32954;
pub const GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI: u32 = 32955;
pub const GL_SGI_color_table: u32 = 1;
pub const GL_COLOR_TABLE_SGI: u32 = 32976;
pub const GL_POST_CONVOLUTION_COLOR_TABLE_SGI: u32 = 32977;
pub const GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI: u32 = 32978;
pub const GL_PROXY_COLOR_TABLE_SGI: u32 = 32979;
pub const GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI: u32 = 32980;
pub const GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI: u32 = 32981;
pub const GL_COLOR_TABLE_SCALE_SGI: u32 = 32982;
pub const GL_COLOR_TABLE_BIAS_SGI: u32 = 32983;
pub const GL_COLOR_TABLE_FORMAT_SGI: u32 = 32984;
pub const GL_COLOR_TABLE_WIDTH_SGI: u32 = 32985;
pub const GL_COLOR_TABLE_RED_SIZE_SGI: u32 = 32986;
pub const GL_COLOR_TABLE_GREEN_SIZE_SGI: u32 = 32987;
pub const GL_COLOR_TABLE_BLUE_SIZE_SGI: u32 = 32988;
pub const GL_COLOR_TABLE_ALPHA_SIZE_SGI: u32 = 32989;
pub const GL_COLOR_TABLE_LUMINANCE_SIZE_SGI: u32 = 32990;
pub const GL_COLOR_TABLE_INTENSITY_SIZE_SGI: u32 = 32991;
pub const GL_SGI_texture_color_table: u32 = 1;
pub const GL_TEXTURE_COLOR_TABLE_SGI: u32 = 32956;
pub const GL_PROXY_TEXTURE_COLOR_TABLE_SGI: u32 = 32957;
pub const GL_SUNX_constant_data: u32 = 1;
pub const GL_UNPACK_CONSTANT_DATA_SUNX: u32 = 33237;
pub const GL_TEXTURE_CONSTANT_DATA_SUNX: u32 = 33238;
pub const GL_SUN_convolution_border_modes: u32 = 1;
pub const GL_WRAP_BORDER_SUN: u32 = 33236;
pub const GL_SUN_global_alpha: u32 = 1;
pub const GL_GLOBAL_ALPHA_SUN: u32 = 33241;
pub const GL_GLOBAL_ALPHA_FACTOR_SUN: u32 = 33242;
pub const GL_SUN_mesh_array: u32 = 1;
pub const GL_QUAD_MESH_SUN: u32 = 34324;
pub const GL_TRIANGLE_MESH_SUN: u32 = 34325;
pub const GL_SUN_slice_accum: u32 = 1;
pub const GL_SLICE_ACCUM_SUN: u32 = 34252;
pub const GL_SUN_triangle_list: u32 = 1;
pub const GL_RESTART_SUN: u32 = 1;
pub const GL_REPLACE_MIDDLE_SUN: u32 = 2;
pub const GL_REPLACE_OLDEST_SUN: u32 = 3;
pub const GL_TRIANGLE_LIST_SUN: u32 = 33239;
pub const GL_REPLACEMENT_CODE_SUN: u32 = 33240;
pub const GL_REPLACEMENT_CODE_ARRAY_SUN: u32 = 34240;
pub const GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN: u32 = 34241;
pub const GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN: u32 = 34242;
pub const GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN: u32 = 34243;
pub const GL_R1UI_V3F_SUN: u32 = 34244;
pub const GL_R1UI_C4UB_V3F_SUN: u32 = 34245;
pub const GL_R1UI_C3F_V3F_SUN: u32 = 34246;
pub const GL_R1UI_N3F_V3F_SUN: u32 = 34247;
pub const GL_R1UI_C4F_N3F_V3F_SUN: u32 = 34248;
pub const GL_R1UI_T2F_V3F_SUN: u32 = 34249;
pub const GL_R1UI_T2F_N3F_V3F_SUN: u32 = 34250;
pub const GL_R1UI_T2F_C4F_N3F_V3F_SUN: u32 = 34251;
pub const GL_SUN_vertex: u32 = 1;
pub const GL_WIN_phong_shading: u32 = 1;
pub const GL_PHONG_WIN: u32 = 33002;
pub const GL_PHONG_HINT_WIN: u32 = 33003;
pub const GL_WIN_specular_fog: u32 = 1;
pub const GL_FOG_SPECULAR_TEXTURE_WIN: u32 = 33004;
pub const GL_MESA_packed_depth_stencil: u32 = 1;
pub const GL_DEPTH_STENCIL_MESA: u32 = 34640;
pub const GL_UNSIGNED_INT_24_8_MESA: u32 = 34641;
pub const GL_UNSIGNED_INT_8_24_REV_MESA: u32 = 34642;
pub const GL_UNSIGNED_SHORT_15_1_MESA: u32 = 34643;
pub const GL_UNSIGNED_SHORT_1_15_REV_MESA: u32 = 34644;
pub const GL_ATI_blend_equation_separate: u32 = 1;
pub const GL_ALPHA_BLEND_EQUATION_ATI: u32 = 34877;
pub const GL_OES_EGL_image: u32 = 1;
pub type __u_char = ctypes::c_uchar;
pub type __u_short = ctypes::c_ushort;
pub type __u_int = ctypes::c_uint;
pub type __u_long = ctypes::c_ulong;
pub type __int8_t = ctypes::c_schar;
pub type __uint8_t = ctypes::c_uchar;
pub type __int16_t = ctypes::c_short;
pub type __uint16_t = ctypes::c_ushort;
pub type __int32_t = ctypes::c_int;
pub type __uint32_t = ctypes::c_uint;
pub type __int64_t = ctypes::c_long;
pub type __uint64_t = ctypes::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ctypes::c_long;
pub type __u_quad_t = ctypes::c_ulong;
pub type __intmax_t = ctypes::c_long;
pub type __uintmax_t = ctypes::c_ulong;
pub type __dev_t = ctypes::c_ulong;
pub type __uid_t = ctypes::c_uint;
pub type __gid_t = ctypes::c_uint;
pub type __ino_t = ctypes::c_ulong;
pub type __ino64_t = ctypes::c_ulong;
pub type __mode_t = ctypes::c_uint;
pub type __nlink_t = ctypes::c_ulong;
pub type __off_t = ctypes::c_long;
pub type __off64_t = ctypes::c_long;
pub type __pid_t = ctypes::c_int;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [ctypes::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::core::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::core::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ctypes::c_long;
pub type __rlim_t = ctypes::c_ulong;
pub type __rlim64_t = ctypes::c_ulong;
pub type __id_t = ctypes::c_uint;
pub type __time_t = ctypes::c_long;
pub type __useconds_t = ctypes::c_uint;
pub type __suseconds_t = ctypes::c_long;
pub type __suseconds64_t = ctypes::c_long;
pub type __daddr_t = ctypes::c_int;
pub type __key_t = ctypes::c_int;
pub type __clockid_t = ctypes::c_int;
pub type __timer_t = *mut ctypes::c_void;
pub type __blksize_t = ctypes::c_long;
pub type __blkcnt_t = ctypes::c_long;
pub type __blkcnt64_t = ctypes::c_long;
pub type __fsblkcnt_t = ctypes::c_ulong;
pub type __fsblkcnt64_t = ctypes::c_ulong;
pub type __fsfilcnt_t = ctypes::c_ulong;
pub type __fsfilcnt64_t = ctypes::c_ulong;
pub type __fsword_t = ctypes::c_long;
pub type __ssize_t = ctypes::c_long;
pub type __syscall_slong_t = ctypes::c_long;
pub type __syscall_ulong_t = ctypes::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ctypes::c_char;
pub type __intptr_t = ctypes::c_long;
pub type __socklen_t = ctypes::c_uint;
pub type __sig_atomic_t = ctypes::c_int;
pub type time_t = __time_t;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::core::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::core::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [ctypes::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::core::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::core::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__sigset_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::core::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::core::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type __fd_mask = ctypes::c_long;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::core::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::core::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<fd_set>())).__fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ctypes::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ctypes::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ctypes::c_int;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct timezone {
    pub tz_minuteswest: ctypes::c_int,
    pub tz_dsttime: ctypes::c_int,
}
#[test]
fn bindgen_test_layout_timezone() {
    assert_eq!(
        ::core::mem::size_of::<timezone>(),
        8usize,
        concat!("Size of: ", stringify!(timezone))
    );
    assert_eq!(
        ::core::mem::align_of::<timezone>(),
        4usize,
        concat!("Alignment of ", stringify!(timezone))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<timezone>())).tz_minuteswest as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timezone),
            "::",
            stringify!(tz_minuteswest)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<timezone>())).tz_dsttime as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(timezone),
            "::",
            stringify!(tz_dsttime)
        )
    );
}
extern "C" {
    pub fn gettimeofday(__tv: *mut timeval, __tz: *mut ctypes::c_void) -> ctypes::c_int;
}
extern "C" {
    pub fn settimeofday(__tv: *const timeval, __tz: *const timezone) -> ctypes::c_int;
}
extern "C" {
    pub fn adjtime(__delta: *const timeval, __olddelta: *mut timeval) -> ctypes::c_int;
}
pub const ITIMER_REAL: __itimer_which = 0;
pub const ITIMER_VIRTUAL: __itimer_which = 1;
pub const ITIMER_PROF: __itimer_which = 2;
pub type __itimer_which = ctypes::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct itimerval {
    pub it_interval: timeval,
    pub it_value: timeval,
}
#[test]
fn bindgen_test_layout_itimerval() {
    assert_eq!(
        ::core::mem::size_of::<itimerval>(),
        32usize,
        concat!("Size of: ", stringify!(itimerval))
    );
    assert_eq!(
        ::core::mem::align_of::<itimerval>(),
        8usize,
        concat!("Alignment of ", stringify!(itimerval))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<itimerval>())).it_interval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerval),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<itimerval>())).it_value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerval),
            "::",
            stringify!(it_value)
        )
    );
}
pub type __itimer_which_t = ctypes::c_int;
extern "C" {
    pub fn getitimer(__which: __itimer_which_t, __value: *mut itimerval) -> ctypes::c_int;
}
extern "C" {
    pub fn setitimer(
        __which: __itimer_which_t,
        __new: *const itimerval,
        __old: *mut itimerval,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn utimes(__file: *const ctypes::c_char, __tvp: *const timeval) -> ctypes::c_int;
}
extern "C" {
    pub fn lutimes(__file: *const ctypes::c_char, __tvp: *const timeval) -> ctypes::c_int;
}
extern "C" {
    pub fn futimes(__fd: ctypes::c_int, __tvp: *const timeval) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_GetPlatform() -> *const ctypes::c_char;
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type ssize_t = __ssize_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type size_t = ctypes::c_ulong;
pub type ulong = ctypes::c_ulong;
pub type ushort = ctypes::c_ushort;
pub type uint = ctypes::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ctypes::c_long;
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::core::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::core::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
impl Default for __pthread_internal_list {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[test]
fn bindgen_test_layout___pthread_internal_slist() {
    assert_eq!(
        ::core::mem::size_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        ::core::mem::align_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<__pthread_internal_slist>())).__next as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_slist),
            "::",
            stringify!(__next)
        )
    );
}
impl Default for __pthread_internal_slist {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ctypes::c_int,
    pub __count: ctypes::c_uint,
    pub __owner: ctypes::c_int,
    pub __nusers: ctypes::c_uint,
    pub __kind: ctypes::c_int,
    pub __spins: ctypes::c_short,
    pub __elision: ctypes::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    assert_eq!(
        ::core::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::core::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__pthread_mutex_s>())).__lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__pthread_mutex_s>())).__count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__pthread_mutex_s>())).__owner as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__pthread_mutex_s>())).__nusers as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__pthread_mutex_s>())).__kind as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__pthread_mutex_s>())).__spins as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__pthread_mutex_s>())).__elision as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__pthread_mutex_s>())).__list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
impl Default for __pthread_mutex_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ctypes::c_uint,
    pub __writers: ctypes::c_uint,
    pub __wrphase_futex: ctypes::c_uint,
    pub __writers_futex: ctypes::c_uint,
    pub __pad3: ctypes::c_uint,
    pub __pad4: ctypes::c_uint,
    pub __cur_writer: ctypes::c_int,
    pub __shared: ctypes::c_int,
    pub __rwelision: ctypes::c_schar,
    pub __pad1: [ctypes::c_uchar; 7usize],
    pub __pad2: ctypes::c_ulong,
    pub __flags: ctypes::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    assert_eq!(
        ::core::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::core::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<__pthread_rwlock_arch_t>())).__readers as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<__pthread_rwlock_arch_t>())).__writers as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<__pthread_rwlock_arch_t>())).__wrphase_futex as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<__pthread_rwlock_arch_t>())).__writers_futex as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__pthread_rwlock_arch_t>())).__pad3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__pthread_rwlock_arch_t>())).__pad4 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<__pthread_rwlock_arch_t>())).__cur_writer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<__pthread_rwlock_arch_t>())).__shared as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<__pthread_rwlock_arch_t>())).__rwelision as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__pthread_rwlock_arch_t>())).__pad1 as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__pthread_rwlock_arch_t>())).__pad2 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<__pthread_rwlock_arch_t>())).__flags as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [ctypes::c_uint; 2usize],
    pub __g_size: [ctypes::c_uint; 2usize],
    pub __g1_orig_size: ctypes::c_uint,
    pub __wrefs: ctypes::c_uint,
    pub __g_signals: [ctypes::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ctypes::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ctypes::c_uint,
    pub __high: ctypes::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq32 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq32)
        )
    );
}
impl Default for __pthread_cond_s__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ctypes::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ctypes::c_uint,
    pub __high: ctypes::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
    assert_eq!(
        ::core::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        ::core::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start32 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start32)
        )
    );
}
impl Default for __pthread_cond_s__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    assert_eq!(
        ::core::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::core::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__pthread_cond_s>())).__g_refs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__pthread_cond_s>())).__g_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<__pthread_cond_s>())).__g1_orig_size as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__pthread_cond_s>())).__wrefs as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__pthread_cond_s>())).__g_signals as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
impl Default for __pthread_cond_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type __tss_t = ctypes::c_uint;
pub type __thrd_t = ctypes::c_ulong;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct __once_flag {
    pub __data: ctypes::c_int,
}
#[test]
fn bindgen_test_layout___once_flag() {
    assert_eq!(
        ::core::mem::size_of::<__once_flag>(),
        4usize,
        concat!("Size of: ", stringify!(__once_flag))
    );
    assert_eq!(
        ::core::mem::align_of::<__once_flag>(),
        4usize,
        concat!("Alignment of ", stringify!(__once_flag))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__once_flag>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__once_flag),
            "::",
            stringify!(__data)
        )
    );
}
pub type pthread_t = ctypes::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [ctypes::c_char; 4usize],
    pub __align: ctypes::c_int,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::core::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::core::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<pthread_mutexattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<pthread_mutexattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_mutexattr_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [ctypes::c_char; 4usize],
    pub __align: ctypes::c_int,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::core::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::core::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<pthread_condattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<pthread_condattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_condattr_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type pthread_key_t = ctypes::c_uint;
pub type pthread_once_t = ctypes::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [ctypes::c_char; 56usize],
    pub __align: ctypes::c_long,
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::core::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::core::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<pthread_attr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<pthread_attr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_attr_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [ctypes::c_char; 40usize],
    pub __align: ctypes::c_long,
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::core::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::core::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_mutex_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [ctypes::c_char; 48usize],
    pub __align: ctypes::c_longlong,
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::core::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::core::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_cond_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [ctypes::c_char; 56usize],
    pub __align: ctypes::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::core::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::core::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_rwlock_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [ctypes::c_char; 8usize],
    pub __align: ctypes::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::core::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::core::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<pthread_rwlockattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<pthread_rwlockattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_rwlockattr_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type pthread_spinlock_t = ctypes::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [ctypes::c_char; 32usize],
    pub __align: ctypes::c_long,
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::core::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::core::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<pthread_barrier_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_barrier_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [ctypes::c_char; 4usize],
    pub __align: ctypes::c_int,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::core::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::core::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<pthread_barrierattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<pthread_barrierattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_barrierattr_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ctypes::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ctypes::c_uint,
    pub __wchb: [ctypes::c_char; 4usize],
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wch as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wchb as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
impl Default for __mbstate_t__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::core::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::core::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__mbstate_t>())).__count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__mbstate_t>())).__value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
impl Default for __mbstate_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    assert_eq!(
        ::core::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_G_fpos_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_G_fpos_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__state)
        )
    );
}
impl Default for _G_fpos_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    assert_eq!(
        ::core::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_G_fpos64_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_G_fpos64_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__state)
        )
    );
}
impl Default for _G_fpos64_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ctypes::c_void;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ctypes::c_int,
    pub _IO_read_ptr: *mut ctypes::c_char,
    pub _IO_read_end: *mut ctypes::c_char,
    pub _IO_read_base: *mut ctypes::c_char,
    pub _IO_write_base: *mut ctypes::c_char,
    pub _IO_write_ptr: *mut ctypes::c_char,
    pub _IO_write_end: *mut ctypes::c_char,
    pub _IO_buf_base: *mut ctypes::c_char,
    pub _IO_buf_end: *mut ctypes::c_char,
    pub _IO_save_base: *mut ctypes::c_char,
    pub _IO_backup_base: *mut ctypes::c_char,
    pub _IO_save_end: *mut ctypes::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ctypes::c_int,
    pub _flags2: ctypes::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ctypes::c_ushort,
    pub _vtable_offset: ctypes::c_schar,
    pub _shortbuf: [ctypes::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ctypes::c_void,
    pub __pad5: size_t,
    pub _mode: ctypes::c_int,
    pub _unused2: [ctypes::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::core::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::core::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_IO_FILE>()))._codecvt as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_IO_FILE>()))._wide_data as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_IO_FILE>()))._freeres_list as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_IO_FILE>()))._freeres_buf as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
impl Default for _IO_FILE {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type fpos_t = __fpos_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn remove(__filename: *const ctypes::c_char) -> ctypes::c_int;
}
extern "C" {
    pub fn rename(__old: *const ctypes::c_char, __new: *const ctypes::c_char) -> ctypes::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ctypes::c_int,
        __old: *const ctypes::c_char,
        __newfd: ctypes::c_int,
        __new: *const ctypes::c_char,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(__s: *mut ctypes::c_char) -> *mut ctypes::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ctypes::c_char) -> *mut ctypes::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ctypes::c_char,
        __pfx: *const ctypes::c_char,
    ) -> *mut ctypes::c_char;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ctypes::c_int;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ctypes::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ctypes::c_int;
}
extern "C" {
    pub fn fopen(__filename: *const ctypes::c_char, __modes: *const ctypes::c_char) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ctypes::c_char,
        __modes: *const ctypes::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ctypes::c_int, __modes: *const ctypes::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ctypes::c_void,
        __len: size_t,
        __modes: *const ctypes::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(__bufloc: *mut *mut ctypes::c_char, __sizeloc: *mut size_t) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ctypes::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ctypes::c_char,
        __modes: ctypes::c_int,
        __n: size_t,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ctypes::c_char, __size: size_t);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(__stream: *mut FILE, __format: *const ctypes::c_char, ...) -> ctypes::c_int;
}
extern "C" {
    pub fn printf(__format: *const ctypes::c_char, ...) -> ctypes::c_int;
}
extern "C" {
    pub fn sprintf(__s: *mut ctypes::c_char, __format: *const ctypes::c_char, ...)
        -> ctypes::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ctypes::c_char,
        __arg: *mut __va_list_tag,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn vprintf(__format: *const ctypes::c_char, __arg: *mut __va_list_tag) -> ctypes::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ctypes::c_char,
        __format: *const ctypes::c_char,
        __arg: *mut __va_list_tag,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ctypes::c_char,
        __maxlen: ctypes::c_ulong,
        __format: *const ctypes::c_char,
        ...
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ctypes::c_char,
        __maxlen: ctypes::c_ulong,
        __format: *const ctypes::c_char,
        __arg: *mut __va_list_tag,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ctypes::c_int,
        __fmt: *const ctypes::c_char,
        __arg: *mut __va_list_tag,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn dprintf(__fd: ctypes::c_int, __fmt: *const ctypes::c_char, ...) -> ctypes::c_int;
}
extern "C" {
    pub fn fscanf(__stream: *mut FILE, __format: *const ctypes::c_char, ...) -> ctypes::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ctypes::c_char, ...) -> ctypes::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ctypes::c_char,
        __format: *const ctypes::c_char,
        ...
    ) -> ctypes::c_int;
}
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(__stream: *mut FILE, __format: *const ctypes::c_char, ...) -> ctypes::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ctypes::c_char, ...) -> ctypes::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ctypes::c_char,
        __format: *const ctypes::c_char,
        ...
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ctypes::c_char,
        __arg: *mut __va_list_tag,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn vscanf(__format: *const ctypes::c_char, __arg: *mut __va_list_tag) -> ctypes::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ctypes::c_char,
        __format: *const ctypes::c_char,
        __arg: *mut __va_list_tag,
    ) -> ctypes::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ctypes::c_char,
        __arg: *mut __va_list_tag,
    ) -> ctypes::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(__format: *const ctypes::c_char, __arg: *mut __va_list_tag) -> ctypes::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ctypes::c_char,
        __format: *const ctypes::c_char,
        __arg: *mut __va_list_tag,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ctypes::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ctypes::c_int;
}
extern "C" {
    pub fn getchar() -> ctypes::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ctypes::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ctypes::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ctypes::c_int;
}
extern "C" {
    pub fn fputc(__c: ctypes::c_int, __stream: *mut FILE) -> ctypes::c_int;
}
extern "C" {
    pub fn putc(__c: ctypes::c_int, __stream: *mut FILE) -> ctypes::c_int;
}
extern "C" {
    pub fn putchar(__c: ctypes::c_int) -> ctypes::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ctypes::c_int, __stream: *mut FILE) -> ctypes::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ctypes::c_int, __stream: *mut FILE) -> ctypes::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ctypes::c_int) -> ctypes::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ctypes::c_int;
}
extern "C" {
    pub fn putw(__w: ctypes::c_int, __stream: *mut FILE) -> ctypes::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ctypes::c_char,
        __n: ctypes::c_int,
        __stream: *mut FILE,
    ) -> *mut ctypes::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ctypes::c_char,
        __n: *mut size_t,
        __delimiter: ctypes::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ctypes::c_char,
        __n: *mut size_t,
        __delimiter: ctypes::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ctypes::c_char,
        __n: *mut size_t,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ctypes::c_char, __stream: *mut FILE) -> ctypes::c_int;
}
extern "C" {
    pub fn puts(__s: *const ctypes::c_char) -> ctypes::c_int;
}
extern "C" {
    pub fn ungetc(__c: ctypes::c_int, __stream: *mut FILE) -> ctypes::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ctypes::c_void,
        __size: ctypes::c_ulong,
        __n: ctypes::c_ulong,
        __stream: *mut FILE,
    ) -> ctypes::c_ulong;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ctypes::c_void,
        __size: ctypes::c_ulong,
        __n: ctypes::c_ulong,
        __s: *mut FILE,
    ) -> ctypes::c_ulong;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ctypes::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ctypes::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ctypes::c_long,
        __whence: ctypes::c_int,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ctypes::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(__stream: *mut FILE, __off: __off_t, __whence: ctypes::c_int) -> ctypes::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ctypes::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ctypes::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ctypes::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ctypes::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ctypes::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ctypes::c_int;
}
extern "C" {
    pub fn perror(__s: *const ctypes::c_char);
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ctypes::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ctypes::c_int;
}
extern "C" {
    pub fn popen(__command: *const ctypes::c_char, __modes: *const ctypes::c_char) -> *mut FILE;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ctypes::c_int;
}
extern "C" {
    pub fn ctermid(__s: *mut ctypes::c_char) -> *mut ctypes::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ctypes::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ctypes::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: ctypes::c_int) -> ctypes::c_int;
}
pub type wchar_t = ctypes::c_int;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct div_t {
    pub quot: ctypes::c_int,
    pub rem: ctypes::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(
        ::core::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::core::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<div_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<div_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ctypes::c_long,
    pub rem: ctypes::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(
        ::core::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::core::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ctypes::c_longlong,
    pub rem: ctypes::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(
        ::core::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::core::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> size_t;
}
extern "C" {
    pub fn atof(__nptr: *const ctypes::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ctypes::c_char) -> ctypes::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ctypes::c_char) -> ctypes::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ctypes::c_char) -> ctypes::c_longlong;
}
extern "C" {
    pub fn strtod(__nptr: *const ctypes::c_char, __endptr: *mut *mut ctypes::c_char) -> f64;
}
extern "C" {
    pub fn strtof(__nptr: *const ctypes::c_char, __endptr: *mut *mut ctypes::c_char) -> f32;
}
extern "C" {
    pub fn strtold(__nptr: *const ctypes::c_char, __endptr: *mut *mut ctypes::c_char) -> u128;
}
extern "C" {
    pub fn strtol(
        __nptr: *const ctypes::c_char,
        __endptr: *mut *mut ctypes::c_char,
        __base: ctypes::c_int,
    ) -> ctypes::c_long;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const ctypes::c_char,
        __endptr: *mut *mut ctypes::c_char,
        __base: ctypes::c_int,
    ) -> ctypes::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const ctypes::c_char,
        __endptr: *mut *mut ctypes::c_char,
        __base: ctypes::c_int,
    ) -> ctypes::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const ctypes::c_char,
        __endptr: *mut *mut ctypes::c_char,
        __base: ctypes::c_int,
    ) -> ctypes::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const ctypes::c_char,
        __endptr: *mut *mut ctypes::c_char,
        __base: ctypes::c_int,
    ) -> ctypes::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const ctypes::c_char,
        __endptr: *mut *mut ctypes::c_char,
        __base: ctypes::c_int,
    ) -> ctypes::c_ulonglong;
}
extern "C" {
    pub fn l64a(__n: ctypes::c_long) -> *mut ctypes::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ctypes::c_char) -> ctypes::c_long;
}
extern "C" {
    pub fn random() -> ctypes::c_long;
}
extern "C" {
    pub fn srandom(__seed: ctypes::c_uint);
}
extern "C" {
    pub fn initstate(
        __seed: ctypes::c_uint,
        __statebuf: *mut ctypes::c_char,
        __statelen: size_t,
    ) -> *mut ctypes::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ctypes::c_char) -> *mut ctypes::c_char;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ctypes::c_int,
    pub rand_deg: ctypes::c_int,
    pub rand_sep: ctypes::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    assert_eq!(
        ::core::mem::size_of::<random_data>(),
        48usize,
        concat!("Size of: ", stringify!(random_data))
    );
    assert_eq!(
        ::core::mem::align_of::<random_data>(),
        8usize,
        concat!("Alignment of ", stringify!(random_data))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<random_data>())).fptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(fptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<random_data>())).rptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<random_data>())).state as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<random_data>())).rand_type as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<random_data>())).rand_deg as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_deg)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<random_data>())).rand_sep as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_sep)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<random_data>())).end_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(end_ptr)
        )
    );
}
impl Default for random_data {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ctypes::c_int;
}
extern "C" {
    pub fn srandom_r(__seed: ctypes::c_uint, __buf: *mut random_data) -> ctypes::c_int;
}
extern "C" {
    pub fn initstate_r(
        __seed: ctypes::c_uint,
        __statebuf: *mut ctypes::c_char,
        __statelen: size_t,
        __buf: *mut random_data,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn setstate_r(__statebuf: *mut ctypes::c_char, __buf: *mut random_data) -> ctypes::c_int;
}
extern "C" {
    pub fn rand() -> ctypes::c_int;
}
extern "C" {
    pub fn srand(__seed: ctypes::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ctypes::c_uint) -> ctypes::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ctypes::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ctypes::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ctypes::c_ushort) -> ctypes::c_long;
}
extern "C" {
    pub fn mrand48() -> ctypes::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ctypes::c_ushort) -> ctypes::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ctypes::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ctypes::c_ushort) -> *mut ctypes::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ctypes::c_ushort);
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct drand48_data {
    pub __x: [ctypes::c_ushort; 3usize],
    pub __old_x: [ctypes::c_ushort; 3usize],
    pub __c: ctypes::c_ushort,
    pub __init: ctypes::c_ushort,
    pub __a: ctypes::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    assert_eq!(
        ::core::mem::size_of::<drand48_data>(),
        24usize,
        concat!("Size of: ", stringify!(drand48_data))
    );
    assert_eq!(
        ::core::mem::align_of::<drand48_data>(),
        8usize,
        concat!("Alignment of ", stringify!(drand48_data))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<drand48_data>())).__x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__x)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<drand48_data>())).__old_x as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__old_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<drand48_data>())).__c as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__c)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<drand48_data>())).__init as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__init)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<drand48_data>())).__a as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__a)
        )
    );
}
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ctypes::c_int;
}
extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ctypes::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn lrand48_r(__buffer: *mut drand48_data, __result: *mut ctypes::c_long) -> ctypes::c_int;
}
extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ctypes::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ctypes::c_long,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn mrand48_r(__buffer: *mut drand48_data, __result: *mut ctypes::c_long) -> ctypes::c_int;
}
extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ctypes::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ctypes::c_long,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn srand48_r(__seedval: ctypes::c_long, __buffer: *mut drand48_data) -> ctypes::c_int;
}
extern "C" {
    pub fn seed48_r(__seed16v: *mut ctypes::c_ushort, __buffer: *mut drand48_data)
        -> ctypes::c_int;
}
extern "C" {
    pub fn lcong48_r(__param: *mut ctypes::c_ushort, __buffer: *mut drand48_data) -> ctypes::c_int;
}
extern "C" {
    pub fn malloc(__size: ctypes::c_ulong) -> *mut ctypes::c_void;
}
extern "C" {
    pub fn calloc(__nmemb: ctypes::c_ulong, __size: ctypes::c_ulong) -> *mut ctypes::c_void;
}
extern "C" {
    pub fn realloc(__ptr: *mut ctypes::c_void, __size: ctypes::c_ulong) -> *mut ctypes::c_void;
}
extern "C" {
    pub fn reallocarray(
        __ptr: *mut ctypes::c_void,
        __nmemb: size_t,
        __size: size_t,
    ) -> *mut ctypes::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ctypes::c_void);
}
extern "C" {
    pub fn alloca(__size: ctypes::c_ulong) -> *mut ctypes::c_void;
}
extern "C" {
    pub fn valloc(__size: size_t) -> *mut ctypes::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ctypes::c_void,
        __alignment: size_t,
        __size: size_t,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn aligned_alloc(__alignment: size_t, __size: size_t) -> *mut ctypes::c_void;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn atexit(__func: ::core::option::Option<unsafe extern "C" fn()>) -> ctypes::c_int;
}
extern "C" {
    pub fn at_quick_exit(__func: ::core::option::Option<unsafe extern "C" fn()>) -> ctypes::c_int;
}
extern "C" {
    pub fn on_exit(
        __func: ::core::option::Option<
            unsafe extern "C" fn(__status: ctypes::c_int, __arg: *mut ctypes::c_void),
        >,
        __arg: *mut ctypes::c_void,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn exit(__status: ctypes::c_int);
}
extern "C" {
    pub fn quick_exit(__status: ctypes::c_int);
}
extern "C" {
    pub fn _Exit(__status: ctypes::c_int);
}
extern "C" {
    pub fn getenv(__name: *const ctypes::c_char) -> *mut ctypes::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ctypes::c_char) -> ctypes::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const ctypes::c_char,
        __value: *const ctypes::c_char,
        __replace: ctypes::c_int,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ctypes::c_char) -> ctypes::c_int;
}
extern "C" {
    pub fn clearenv() -> ctypes::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ctypes::c_char) -> *mut ctypes::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ctypes::c_char) -> ctypes::c_int;
}
extern "C" {
    pub fn mkstemps(__template: *mut ctypes::c_char, __suffixlen: ctypes::c_int) -> ctypes::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ctypes::c_char) -> *mut ctypes::c_char;
}
extern "C" {
    pub fn system(__command: *const ctypes::c_char) -> ctypes::c_int;
}
extern "C" {
    pub fn realpath(
        __name: *const ctypes::c_char,
        __resolved: *mut ctypes::c_char,
    ) -> *mut ctypes::c_char;
}
pub type __compar_fn_t = ::core::option::Option<
    unsafe extern "C" fn(arg1: *const ctypes::c_void, arg2: *const ctypes::c_void) -> ctypes::c_int,
>;
extern "C" {
    pub fn bsearch(
        __key: *const ctypes::c_void,
        __base: *const ctypes::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: __compar_fn_t,
    ) -> *mut ctypes::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut ctypes::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn abs(__x: ctypes::c_int) -> ctypes::c_int;
}
extern "C" {
    pub fn labs(__x: ctypes::c_long) -> ctypes::c_long;
}
extern "C" {
    pub fn llabs(__x: ctypes::c_longlong) -> ctypes::c_longlong;
}
extern "C" {
    pub fn div(__numer: ctypes::c_int, __denom: ctypes::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ctypes::c_long, __denom: ctypes::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(__numer: ctypes::c_longlong, __denom: ctypes::c_longlong) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ctypes::c_int,
        __decpt: *mut ctypes::c_int,
        __sign: *mut ctypes::c_int,
    ) -> *mut ctypes::c_char;
}
extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ctypes::c_int,
        __decpt: *mut ctypes::c_int,
        __sign: *mut ctypes::c_int,
    ) -> *mut ctypes::c_char;
}
extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ctypes::c_int,
        __buf: *mut ctypes::c_char,
    ) -> *mut ctypes::c_char;
}
extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: ctypes::c_int,
        __decpt: *mut ctypes::c_int,
        __sign: *mut ctypes::c_int,
    ) -> *mut ctypes::c_char;
}
extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: ctypes::c_int,
        __decpt: *mut ctypes::c_int,
        __sign: *mut ctypes::c_int,
    ) -> *mut ctypes::c_char;
}
extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: ctypes::c_int,
        __buf: *mut ctypes::c_char,
    ) -> *mut ctypes::c_char;
}
extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ctypes::c_int,
        __decpt: *mut ctypes::c_int,
        __sign: *mut ctypes::c_int,
        __buf: *mut ctypes::c_char,
        __len: size_t,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ctypes::c_int,
        __decpt: *mut ctypes::c_int,
        __sign: *mut ctypes::c_int,
        __buf: *mut ctypes::c_char,
        __len: size_t,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: ctypes::c_int,
        __decpt: *mut ctypes::c_int,
        __sign: *mut ctypes::c_int,
        __buf: *mut ctypes::c_char,
        __len: size_t,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: ctypes::c_int,
        __decpt: *mut ctypes::c_int,
        __sign: *mut ctypes::c_int,
        __buf: *mut ctypes::c_char,
        __len: size_t,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ctypes::c_char, __n: size_t) -> ctypes::c_int;
}
extern "C" {
    pub fn mbtowc(__pwc: *mut wchar_t, __s: *const ctypes::c_char, __n: size_t) -> ctypes::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ctypes::c_char, __wchar: wchar_t) -> ctypes::c_int;
}
extern "C" {
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ctypes::c_char, __n: size_t) -> size_t;
}
extern "C" {
    pub fn wcstombs(__s: *mut ctypes::c_char, __pwcs: *const wchar_t, __n: size_t) -> size_t;
}
extern "C" {
    pub fn rpmatch(__response: *const ctypes::c_char) -> ctypes::c_int;
}
extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ctypes::c_char,
        __tokens: *const *mut ctypes::c_char,
        __valuep: *mut *mut ctypes::c_char,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ctypes::c_int) -> ctypes::c_int;
}
#[repr(C)]
#[repr(align(16))]
#[derive(Default, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ctypes::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::core::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::core::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
extern "C" {
    pub fn memcpy(
        __dest: *mut ctypes::c_void,
        __src: *const ctypes::c_void,
        __n: ctypes::c_ulong,
    ) -> *mut ctypes::c_void;
}
extern "C" {
    pub fn memmove(
        __dest: *mut ctypes::c_void,
        __src: *const ctypes::c_void,
        __n: ctypes::c_ulong,
    ) -> *mut ctypes::c_void;
}
extern "C" {
    pub fn memccpy(
        __dest: *mut ctypes::c_void,
        __src: *const ctypes::c_void,
        __c: ctypes::c_int,
        __n: ctypes::c_ulong,
    ) -> *mut ctypes::c_void;
}
extern "C" {
    pub fn memset(
        __s: *mut ctypes::c_void,
        __c: ctypes::c_int,
        __n: ctypes::c_ulong,
    ) -> *mut ctypes::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ctypes::c_void,
        __s2: *const ctypes::c_void,
        __n: ctypes::c_ulong,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn memchr(
        __s: *const ctypes::c_void,
        __c: ctypes::c_int,
        __n: ctypes::c_ulong,
    ) -> *mut ctypes::c_void;
}
extern "C" {
    pub fn strcpy(__dest: *mut ctypes::c_char, __src: *const ctypes::c_char)
        -> *mut ctypes::c_char;
}
extern "C" {
    pub fn strncpy(
        __dest: *mut ctypes::c_char,
        __src: *const ctypes::c_char,
        __n: ctypes::c_ulong,
    ) -> *mut ctypes::c_char;
}
extern "C" {
    pub fn strcat(__dest: *mut ctypes::c_char, __src: *const ctypes::c_char)
        -> *mut ctypes::c_char;
}
extern "C" {
    pub fn strncat(
        __dest: *mut ctypes::c_char,
        __src: *const ctypes::c_char,
        __n: ctypes::c_ulong,
    ) -> *mut ctypes::c_char;
}
extern "C" {
    pub fn strcmp(__s1: *const ctypes::c_char, __s2: *const ctypes::c_char) -> ctypes::c_int;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ctypes::c_char,
        __s2: *const ctypes::c_char,
        __n: ctypes::c_ulong,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn strcoll(__s1: *const ctypes::c_char, __s2: *const ctypes::c_char) -> ctypes::c_int;
}
extern "C" {
    pub fn strxfrm(
        __dest: *mut ctypes::c_char,
        __src: *const ctypes::c_char,
        __n: ctypes::c_ulong,
    ) -> ctypes::c_ulong;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ctypes::c_ushort,
    pub __ctype_tolower: *const ctypes::c_int,
    pub __ctype_toupper: *const ctypes::c_int,
    pub __names: [*const ctypes::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    assert_eq!(
        ::core::mem::size_of::<__locale_struct>(),
        232usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::core::mem::align_of::<__locale_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__locale_struct>())).__locales as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__locale_struct>())).__ctype_b as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<__locale_struct>())).__ctype_tolower as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<__locale_struct>())).__ctype_toupper as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__locale_struct>())).__names as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
impl Default for __locale_struct {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn strcoll_l(
        __s1: *const ctypes::c_char,
        __s2: *const ctypes::c_char,
        __l: locale_t,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        __dest: *mut ctypes::c_char,
        __src: *const ctypes::c_char,
        __n: size_t,
        __l: locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn strdup(__s: *const ctypes::c_char) -> *mut ctypes::c_char;
}
extern "C" {
    pub fn strndup(__string: *const ctypes::c_char, __n: ctypes::c_ulong) -> *mut ctypes::c_char;
}
extern "C" {
    pub fn strchr(__s: *const ctypes::c_char, __c: ctypes::c_int) -> *mut ctypes::c_char;
}
extern "C" {
    pub fn strrchr(__s: *const ctypes::c_char, __c: ctypes::c_int) -> *mut ctypes::c_char;
}
extern "C" {
    pub fn strcspn(__s: *const ctypes::c_char, __reject: *const ctypes::c_char) -> ctypes::c_ulong;
}
extern "C" {
    pub fn strspn(__s: *const ctypes::c_char, __accept: *const ctypes::c_char) -> ctypes::c_ulong;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ctypes::c_char,
        __accept: *const ctypes::c_char,
    ) -> *mut ctypes::c_char;
}
extern "C" {
    pub fn strstr(
        __haystack: *const ctypes::c_char,
        __needle: *const ctypes::c_char,
    ) -> *mut ctypes::c_char;
}
extern "C" {
    pub fn strtok(__s: *mut ctypes::c_char, __delim: *const ctypes::c_char) -> *mut ctypes::c_char;
}
extern "C" {
    pub fn __strtok_r(
        __s: *mut ctypes::c_char,
        __delim: *const ctypes::c_char,
        __save_ptr: *mut *mut ctypes::c_char,
    ) -> *mut ctypes::c_char;
}
extern "C" {
    pub fn strtok_r(
        __s: *mut ctypes::c_char,
        __delim: *const ctypes::c_char,
        __save_ptr: *mut *mut ctypes::c_char,
    ) -> *mut ctypes::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ctypes::c_char) -> ctypes::c_ulong;
}
extern "C" {
    pub fn strnlen(__string: *const ctypes::c_char, __maxlen: size_t) -> size_t;
}
extern "C" {
    pub fn strerror(__errnum: ctypes::c_int) -> *mut ctypes::c_char;
}
extern "C" {
    #[link_name = "\u{1}__xpg_strerror_r"]
    pub fn strerror_r(
        __errnum: ctypes::c_int,
        __buf: *mut ctypes::c_char,
        __buflen: size_t,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn strerror_l(__errnum: ctypes::c_int, __l: locale_t) -> *mut ctypes::c_char;
}
extern "C" {
    pub fn bcmp(
        __s1: *const ctypes::c_void,
        __s2: *const ctypes::c_void,
        __n: ctypes::c_ulong,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn bcopy(__src: *const ctypes::c_void, __dest: *mut ctypes::c_void, __n: size_t);
}
extern "C" {
    pub fn bzero(__s: *mut ctypes::c_void, __n: ctypes::c_ulong);
}
extern "C" {
    pub fn index(__s: *const ctypes::c_char, __c: ctypes::c_int) -> *mut ctypes::c_char;
}
extern "C" {
    pub fn rindex(__s: *const ctypes::c_char, __c: ctypes::c_int) -> *mut ctypes::c_char;
}
extern "C" {
    pub fn ffs(__i: ctypes::c_int) -> ctypes::c_int;
}
extern "C" {
    pub fn ffsl(__l: ctypes::c_long) -> ctypes::c_int;
}
extern "C" {
    pub fn ffsll(__ll: ctypes::c_longlong) -> ctypes::c_int;
}
extern "C" {
    pub fn strcasecmp(__s1: *const ctypes::c_char, __s2: *const ctypes::c_char) -> ctypes::c_int;
}
extern "C" {
    pub fn strncasecmp(
        __s1: *const ctypes::c_char,
        __s2: *const ctypes::c_char,
        __n: ctypes::c_ulong,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn strcasecmp_l(
        __s1: *const ctypes::c_char,
        __s2: *const ctypes::c_char,
        __loc: locale_t,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn strncasecmp_l(
        __s1: *const ctypes::c_char,
        __s2: *const ctypes::c_char,
        __n: size_t,
        __loc: locale_t,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn explicit_bzero(__s: *mut ctypes::c_void, __n: size_t);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ctypes::c_char,
        __delim: *const ctypes::c_char,
    ) -> *mut ctypes::c_char;
}
extern "C" {
    pub fn strsignal(__sig: ctypes::c_int) -> *mut ctypes::c_char;
}
extern "C" {
    pub fn __stpcpy(
        __dest: *mut ctypes::c_char,
        __src: *const ctypes::c_char,
    ) -> *mut ctypes::c_char;
}
extern "C" {
    pub fn stpcpy(__dest: *mut ctypes::c_char, __src: *const ctypes::c_char)
        -> *mut ctypes::c_char;
}
extern "C" {
    pub fn __stpncpy(
        __dest: *mut ctypes::c_char,
        __src: *const ctypes::c_char,
        __n: size_t,
    ) -> *mut ctypes::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dest: *mut ctypes::c_char,
        __src: *const ctypes::c_char,
        __n: ctypes::c_ulong,
    ) -> *mut ctypes::c_char;
}
pub type wint_t = ctypes::c_uint;
pub type mbstate_t = __mbstate_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm {
    _unused: [u8; 0],
}
extern "C" {
    pub fn wcscpy(__dest: *mut wchar_t, __src: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsncpy(__dest: *mut wchar_t, __src: *const wchar_t, __n: size_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscat(__dest: *mut wchar_t, __src: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsncat(__dest: *mut wchar_t, __src: *const wchar_t, __n: size_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscmp(__s1: *const ctypes::c_int, __s2: *const ctypes::c_int) -> ctypes::c_int;
}
extern "C" {
    pub fn wcsncmp(
        __s1: *const ctypes::c_int,
        __s2: *const ctypes::c_int,
        __n: ctypes::c_ulong,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn wcscasecmp(__s1: *const wchar_t, __s2: *const wchar_t) -> ctypes::c_int;
}
extern "C" {
    pub fn wcsncasecmp(__s1: *const wchar_t, __s2: *const wchar_t, __n: size_t) -> ctypes::c_int;
}
extern "C" {
    pub fn wcscasecmp_l(
        __s1: *const wchar_t,
        __s2: *const wchar_t,
        __loc: locale_t,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn wcsncasecmp_l(
        __s1: *const wchar_t,
        __s2: *const wchar_t,
        __n: size_t,
        __loc: locale_t,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn wcscoll(__s1: *const wchar_t, __s2: *const wchar_t) -> ctypes::c_int;
}
extern "C" {
    pub fn wcsxfrm(__s1: *mut wchar_t, __s2: *const wchar_t, __n: size_t) -> size_t;
}
extern "C" {
    pub fn wcscoll_l(__s1: *const wchar_t, __s2: *const wchar_t, __loc: locale_t) -> ctypes::c_int;
}
extern "C" {
    pub fn wcsxfrm_l(
        __s1: *mut wchar_t,
        __s2: *const wchar_t,
        __n: size_t,
        __loc: locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn wcsdup(__s: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcschr(__wcs: *const ctypes::c_int, __wc: ctypes::c_int) -> *mut ctypes::c_int;
}
extern "C" {
    pub fn wcsrchr(__wcs: *const wchar_t, __wc: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscspn(__wcs: *const wchar_t, __reject: *const wchar_t) -> size_t;
}
extern "C" {
    pub fn wcsspn(__wcs: *const wchar_t, __accept: *const wchar_t) -> size_t;
}
extern "C" {
    pub fn wcspbrk(__wcs: *const wchar_t, __accept: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsstr(__haystack: *const wchar_t, __needle: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcstok(
        __s: *mut wchar_t,
        __delim: *const wchar_t,
        __ptr: *mut *mut wchar_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn wcslen(__s: *const ctypes::c_int) -> ctypes::c_ulong;
}
extern "C" {
    pub fn wcsnlen(__s: *const wchar_t, __maxlen: size_t) -> size_t;
}
extern "C" {
    pub fn wmemchr(
        __s: *const ctypes::c_int,
        __c: ctypes::c_int,
        __n: ctypes::c_ulong,
    ) -> *mut ctypes::c_int;
}
extern "C" {
    pub fn wmemcmp(
        __s1: *const ctypes::c_int,
        __s2: *const ctypes::c_int,
        __n: ctypes::c_ulong,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn wmemcpy(
        __s1: *mut ctypes::c_int,
        __s2: *const ctypes::c_int,
        __n: ctypes::c_ulong,
    ) -> *mut ctypes::c_int;
}
extern "C" {
    pub fn wmemmove(
        __s1: *mut ctypes::c_int,
        __s2: *const ctypes::c_int,
        __n: ctypes::c_ulong,
    ) -> *mut ctypes::c_int;
}
extern "C" {
    pub fn wmemset(__s: *mut wchar_t, __c: wchar_t, __n: size_t) -> *mut wchar_t;
}
extern "C" {
    pub fn btowc(__c: ctypes::c_int) -> wint_t;
}
extern "C" {
    pub fn wctob(__c: wint_t) -> ctypes::c_int;
}
extern "C" {
    pub fn mbsinit(__ps: *const mbstate_t) -> ctypes::c_int;
}
extern "C" {
    pub fn mbrtowc(
        __pwc: *mut wchar_t,
        __s: *const ctypes::c_char,
        __n: size_t,
        __p: *mut mbstate_t,
    ) -> size_t;
}
extern "C" {
    pub fn wcrtomb(__s: *mut ctypes::c_char, __wc: wchar_t, __ps: *mut mbstate_t) -> size_t;
}
extern "C" {
    pub fn __mbrlen(__s: *const ctypes::c_char, __n: size_t, __ps: *mut mbstate_t) -> size_t;
}
extern "C" {
    pub fn mbrlen(__s: *const ctypes::c_char, __n: size_t, __ps: *mut mbstate_t) -> size_t;
}
extern "C" {
    pub fn mbsrtowcs(
        __dst: *mut wchar_t,
        __src: *mut *const ctypes::c_char,
        __len: size_t,
        __ps: *mut mbstate_t,
    ) -> size_t;
}
extern "C" {
    pub fn wcsrtombs(
        __dst: *mut ctypes::c_char,
        __src: *mut *const wchar_t,
        __len: size_t,
        __ps: *mut mbstate_t,
    ) -> size_t;
}
extern "C" {
    pub fn mbsnrtowcs(
        __dst: *mut wchar_t,
        __src: *mut *const ctypes::c_char,
        __nmc: size_t,
        __len: size_t,
        __ps: *mut mbstate_t,
    ) -> size_t;
}
extern "C" {
    pub fn wcsnrtombs(
        __dst: *mut ctypes::c_char,
        __src: *mut *const wchar_t,
        __nwc: size_t,
        __len: size_t,
        __ps: *mut mbstate_t,
    ) -> size_t;
}
extern "C" {
    pub fn wcstod(__nptr: *const wchar_t, __endptr: *mut *mut wchar_t) -> f64;
}
extern "C" {
    pub fn wcstof(__nptr: *const wchar_t, __endptr: *mut *mut wchar_t) -> f32;
}
extern "C" {
    pub fn wcstold(__nptr: *const wchar_t, __endptr: *mut *mut wchar_t) -> u128;
}
extern "C" {
    pub fn wcstol(
        __nptr: *const wchar_t,
        __endptr: *mut *mut wchar_t,
        __base: ctypes::c_int,
    ) -> ctypes::c_long;
}
extern "C" {
    pub fn wcstoul(
        __nptr: *const wchar_t,
        __endptr: *mut *mut wchar_t,
        __base: ctypes::c_int,
    ) -> ctypes::c_ulong;
}
extern "C" {
    pub fn wcstoll(
        __nptr: *const wchar_t,
        __endptr: *mut *mut wchar_t,
        __base: ctypes::c_int,
    ) -> ctypes::c_longlong;
}
extern "C" {
    pub fn wcstoull(
        __nptr: *const wchar_t,
        __endptr: *mut *mut wchar_t,
        __base: ctypes::c_int,
    ) -> ctypes::c_ulonglong;
}
extern "C" {
    pub fn wcpcpy(__dest: *mut wchar_t, __src: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcpncpy(__dest: *mut wchar_t, __src: *const wchar_t, __n: size_t) -> *mut wchar_t;
}
extern "C" {
    pub fn open_wmemstream(__bufloc: *mut *mut wchar_t, __sizeloc: *mut size_t) -> *mut __FILE;
}
extern "C" {
    pub fn fwide(__fp: *mut __FILE, __mode: ctypes::c_int) -> ctypes::c_int;
}
extern "C" {
    pub fn fwprintf(__stream: *mut __FILE, __format: *const wchar_t, ...) -> ctypes::c_int;
}
extern "C" {
    pub fn wprintf(__format: *const wchar_t, ...) -> ctypes::c_int;
}
extern "C" {
    pub fn swprintf(__s: *mut wchar_t, __n: size_t, __format: *const wchar_t, ...)
        -> ctypes::c_int;
}
extern "C" {
    pub fn vfwprintf(
        __s: *mut __FILE,
        __format: *const wchar_t,
        __arg: *mut __va_list_tag,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn vwprintf(__format: *const wchar_t, __arg: *mut __va_list_tag) -> ctypes::c_int;
}
extern "C" {
    pub fn vswprintf(
        __s: *mut wchar_t,
        __n: size_t,
        __format: *const wchar_t,
        __arg: *mut __va_list_tag,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn fwscanf(__stream: *mut __FILE, __format: *const wchar_t, ...) -> ctypes::c_int;
}
extern "C" {
    pub fn wscanf(__format: *const wchar_t, ...) -> ctypes::c_int;
}
extern "C" {
    pub fn swscanf(__s: *const wchar_t, __format: *const wchar_t, ...) -> ctypes::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_fwscanf"]
    pub fn fwscanf1(__stream: *mut __FILE, __format: *const wchar_t, ...) -> ctypes::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_wscanf"]
    pub fn wscanf1(__format: *const wchar_t, ...) -> ctypes::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_swscanf"]
    pub fn swscanf1(__s: *const wchar_t, __format: *const wchar_t, ...) -> ctypes::c_int;
}
extern "C" {
    pub fn vfwscanf(
        __s: *mut __FILE,
        __format: *const wchar_t,
        __arg: *mut __va_list_tag,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn vwscanf(__format: *const wchar_t, __arg: *mut __va_list_tag) -> ctypes::c_int;
}
extern "C" {
    pub fn vswscanf(
        __s: *const wchar_t,
        __format: *const wchar_t,
        __arg: *mut __va_list_tag,
    ) -> ctypes::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfwscanf"]
    pub fn vfwscanf1(
        __s: *mut __FILE,
        __format: *const wchar_t,
        __arg: *mut __va_list_tag,
    ) -> ctypes::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vwscanf"]
    pub fn vwscanf1(__format: *const wchar_t, __arg: *mut __va_list_tag) -> ctypes::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vswscanf"]
    pub fn vswscanf1(
        __s: *const wchar_t,
        __format: *const wchar_t,
        __arg: *mut __va_list_tag,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn fgetwc(__stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn getwc(__stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn getwchar() -> wint_t;
}
extern "C" {
    pub fn fputwc(__wc: wchar_t, __stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn putwc(__wc: wchar_t, __stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn putwchar(__wc: wchar_t) -> wint_t;
}
extern "C" {
    pub fn fgetws(__ws: *mut wchar_t, __n: ctypes::c_int, __stream: *mut __FILE) -> *mut wchar_t;
}
extern "C" {
    pub fn fputws(__ws: *const wchar_t, __stream: *mut __FILE) -> ctypes::c_int;
}
extern "C" {
    pub fn ungetwc(__wc: wint_t, __stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn wcsftime(
        __s: *mut wchar_t,
        __maxsize: size_t,
        __format: *const wchar_t,
        __tp: *const tm,
    ) -> size_t;
}
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ctypes::c_schar;
pub type int_fast16_t = ctypes::c_long;
pub type int_fast32_t = ctypes::c_long;
pub type int_fast64_t = ctypes::c_long;
pub type uint_fast8_t = ctypes::c_uchar;
pub type uint_fast16_t = ctypes::c_ulong;
pub type uint_fast32_t = ctypes::c_ulong;
pub type uint_fast64_t = ctypes::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type __gwchar_t = ctypes::c_int;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: ctypes::c_long,
    pub rem: ctypes::c_long,
}
#[test]
fn bindgen_test_layout_imaxdiv_t() {
    assert_eq!(
        ::core::mem::size_of::<imaxdiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        ::core::mem::align_of::<imaxdiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<imaxdiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<imaxdiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn imaxabs(__n: intmax_t) -> intmax_t;
}
extern "C" {
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(
        __nptr: *const ctypes::c_char,
        __endptr: *mut *mut ctypes::c_char,
        __base: ctypes::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn strtoumax(
        __nptr: *const ctypes::c_char,
        __endptr: *mut *mut ctypes::c_char,
        __base: ctypes::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ctypes::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ctypes::c_int,
    ) -> uintmax_t;
}
pub const _ISupper: ctypes::c_uint = 256;
pub const _ISlower: ctypes::c_uint = 512;
pub const _ISalpha: ctypes::c_uint = 1024;
pub const _ISdigit: ctypes::c_uint = 2048;
pub const _ISxdigit: ctypes::c_uint = 4096;
pub const _ISspace: ctypes::c_uint = 8192;
pub const _ISprint: ctypes::c_uint = 16384;
pub const _ISgraph: ctypes::c_uint = 32768;
pub const _ISblank: ctypes::c_uint = 1;
pub const _IScntrl: ctypes::c_uint = 2;
pub const _ISpunct: ctypes::c_uint = 4;
pub const _ISalnum: ctypes::c_uint = 8;
pub type _bindgen_ty_1 = ctypes::c_uint;
extern "C" {
    pub fn __ctype_b_loc() -> *mut *const ctypes::c_ushort;
}
extern "C" {
    pub fn __ctype_tolower_loc() -> *mut *const __int32_t;
}
extern "C" {
    pub fn __ctype_toupper_loc() -> *mut *const __int32_t;
}
extern "C" {
    pub fn isalnum(arg1: ctypes::c_int) -> ctypes::c_int;
}
extern "C" {
    pub fn isalpha(arg1: ctypes::c_int) -> ctypes::c_int;
}
extern "C" {
    pub fn iscntrl(arg1: ctypes::c_int) -> ctypes::c_int;
}
extern "C" {
    pub fn isdigit(arg1: ctypes::c_int) -> ctypes::c_int;
}
extern "C" {
    pub fn islower(arg1: ctypes::c_int) -> ctypes::c_int;
}
extern "C" {
    pub fn isgraph(arg1: ctypes::c_int) -> ctypes::c_int;
}
extern "C" {
    pub fn isprint(arg1: ctypes::c_int) -> ctypes::c_int;
}
extern "C" {
    pub fn ispunct(arg1: ctypes::c_int) -> ctypes::c_int;
}
extern "C" {
    pub fn isspace(arg1: ctypes::c_int) -> ctypes::c_int;
}
extern "C" {
    pub fn isupper(arg1: ctypes::c_int) -> ctypes::c_int;
}
extern "C" {
    pub fn isxdigit(arg1: ctypes::c_int) -> ctypes::c_int;
}
extern "C" {
    pub fn tolower(__c: ctypes::c_int) -> ctypes::c_int;
}
extern "C" {
    pub fn toupper(__c: ctypes::c_int) -> ctypes::c_int;
}
extern "C" {
    pub fn isblank(arg1: ctypes::c_int) -> ctypes::c_int;
}
extern "C" {
    pub fn isascii(__c: ctypes::c_int) -> ctypes::c_int;
}
extern "C" {
    pub fn toascii(__c: ctypes::c_int) -> ctypes::c_int;
}
extern "C" {
    pub fn _toupper(arg1: ctypes::c_int) -> ctypes::c_int;
}
extern "C" {
    pub fn _tolower(arg1: ctypes::c_int) -> ctypes::c_int;
}
extern "C" {
    pub fn isalnum_l(arg1: ctypes::c_int, arg2: locale_t) -> ctypes::c_int;
}
extern "C" {
    pub fn isalpha_l(arg1: ctypes::c_int, arg2: locale_t) -> ctypes::c_int;
}
extern "C" {
    pub fn iscntrl_l(arg1: ctypes::c_int, arg2: locale_t) -> ctypes::c_int;
}
extern "C" {
    pub fn isdigit_l(arg1: ctypes::c_int, arg2: locale_t) -> ctypes::c_int;
}
extern "C" {
    pub fn islower_l(arg1: ctypes::c_int, arg2: locale_t) -> ctypes::c_int;
}
extern "C" {
    pub fn isgraph_l(arg1: ctypes::c_int, arg2: locale_t) -> ctypes::c_int;
}
extern "C" {
    pub fn isprint_l(arg1: ctypes::c_int, arg2: locale_t) -> ctypes::c_int;
}
extern "C" {
    pub fn ispunct_l(arg1: ctypes::c_int, arg2: locale_t) -> ctypes::c_int;
}
extern "C" {
    pub fn isspace_l(arg1: ctypes::c_int, arg2: locale_t) -> ctypes::c_int;
}
extern "C" {
    pub fn isupper_l(arg1: ctypes::c_int, arg2: locale_t) -> ctypes::c_int;
}
extern "C" {
    pub fn isxdigit_l(arg1: ctypes::c_int, arg2: locale_t) -> ctypes::c_int;
}
extern "C" {
    pub fn isblank_l(arg1: ctypes::c_int, arg2: locale_t) -> ctypes::c_int;
}
extern "C" {
    pub fn __tolower_l(__c: ctypes::c_int, __l: locale_t) -> ctypes::c_int;
}
extern "C" {
    pub fn tolower_l(__c: ctypes::c_int, __l: locale_t) -> ctypes::c_int;
}
extern "C" {
    pub fn __toupper_l(__c: ctypes::c_int, __l: locale_t) -> ctypes::c_int;
}
extern "C" {
    pub fn toupper_l(__c: ctypes::c_int, __l: locale_t) -> ctypes::c_int;
}
pub type float_t = f32;
pub type double_t = f64;
extern "C" {
    pub fn __fpclassify(__value: f64) -> ctypes::c_int;
}
extern "C" {
    pub fn __signbit(__value: f64) -> ctypes::c_int;
}
extern "C" {
    pub fn __isinf(__value: f64) -> ctypes::c_int;
}
extern "C" {
    pub fn __finite(__value: f64) -> ctypes::c_int;
}
extern "C" {
    pub fn __isnan(__value: f64) -> ctypes::c_int;
}
extern "C" {
    pub fn __iseqsig(__x: f64, __y: f64) -> ctypes::c_int;
}
extern "C" {
    pub fn __issignaling(__value: f64) -> ctypes::c_int;
}
extern "C" {
    pub fn acos(__x: f64) -> f64;
}
extern "C" {
    pub fn __acos(__x: f64) -> f64;
}
extern "C" {
    pub fn asin(__x: f64) -> f64;
}
extern "C" {
    pub fn __asin(__x: f64) -> f64;
}
extern "C" {
    pub fn atan(__x: f64) -> f64;
}
extern "C" {
    pub fn __atan(__x: f64) -> f64;
}
extern "C" {
    pub fn atan2(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn __atan2(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn cos(__x: f64) -> f64;
}
extern "C" {
    pub fn __cos(__x: f64) -> f64;
}
extern "C" {
    pub fn sin(__x: f64) -> f64;
}
extern "C" {
    pub fn __sin(__x: f64) -> f64;
}
extern "C" {
    pub fn tan(__x: f64) -> f64;
}
extern "C" {
    pub fn __tan(__x: f64) -> f64;
}
extern "C" {
    pub fn cosh(__x: f64) -> f64;
}
extern "C" {
    pub fn __cosh(__x: f64) -> f64;
}
extern "C" {
    pub fn sinh(__x: f64) -> f64;
}
extern "C" {
    pub fn __sinh(__x: f64) -> f64;
}
extern "C" {
    pub fn tanh(__x: f64) -> f64;
}
extern "C" {
    pub fn __tanh(__x: f64) -> f64;
}
extern "C" {
    pub fn acosh(__x: f64) -> f64;
}
extern "C" {
    pub fn __acosh(__x: f64) -> f64;
}
extern "C" {
    pub fn asinh(__x: f64) -> f64;
}
extern "C" {
    pub fn __asinh(__x: f64) -> f64;
}
extern "C" {
    pub fn atanh(__x: f64) -> f64;
}
extern "C" {
    pub fn __atanh(__x: f64) -> f64;
}
extern "C" {
    pub fn exp(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp(__x: f64) -> f64;
}
extern "C" {
    pub fn frexp(__x: f64, __exponent: *mut ctypes::c_int) -> f64;
}
extern "C" {
    pub fn __frexp(__x: f64, __exponent: *mut ctypes::c_int) -> f64;
}
extern "C" {
    pub fn ldexp(__x: f64, __exponent: ctypes::c_int) -> f64;
}
extern "C" {
    pub fn __ldexp(__x: f64, __exponent: ctypes::c_int) -> f64;
}
extern "C" {
    pub fn log(__x: f64) -> f64;
}
extern "C" {
    pub fn __log(__x: f64) -> f64;
}
extern "C" {
    pub fn log10(__x: f64) -> f64;
}
extern "C" {
    pub fn __log10(__x: f64) -> f64;
}
extern "C" {
    pub fn modf(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn __modf(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn expm1(__x: f64) -> f64;
}
extern "C" {
    pub fn __expm1(__x: f64) -> f64;
}
extern "C" {
    pub fn log1p(__x: f64) -> f64;
}
extern "C" {
    pub fn __log1p(__x: f64) -> f64;
}
extern "C" {
    pub fn logb(__x: f64) -> f64;
}
extern "C" {
    pub fn __logb(__x: f64) -> f64;
}
extern "C" {
    pub fn exp2(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp2(__x: f64) -> f64;
}
extern "C" {
    pub fn log2(__x: f64) -> f64;
}
extern "C" {
    pub fn __log2(__x: f64) -> f64;
}
extern "C" {
    pub fn pow(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __pow(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn sqrt(__x: f64) -> f64;
}
extern "C" {
    pub fn __sqrt(__x: f64) -> f64;
}
extern "C" {
    pub fn hypot(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __hypot(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn cbrt(__x: f64) -> f64;
}
extern "C" {
    pub fn __cbrt(__x: f64) -> f64;
}
extern "C" {
    pub fn ceil(__x: f64) -> f64;
}
extern "C" {
    pub fn __ceil(__x: f64) -> f64;
}
extern "C" {
    pub fn fabs(__x: f64) -> f64;
}
extern "C" {
    pub fn __fabs(__x: f64) -> f64;
}
extern "C" {
    pub fn floor(__x: f64) -> f64;
}
extern "C" {
    pub fn __floor(__x: f64) -> f64;
}
extern "C" {
    pub fn fmod(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmod(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn isinf(__value: f64) -> ctypes::c_int;
}
extern "C" {
    pub fn finite(__value: f64) -> ctypes::c_int;
}
extern "C" {
    pub fn drem(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __drem(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn significand(__x: f64) -> f64;
}
extern "C" {
    pub fn __significand(__x: f64) -> f64;
}
extern "C" {
    pub fn copysign(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __copysign(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nan(__tagb: *const ctypes::c_char) -> f64;
}
extern "C" {
    pub fn __nan(__tagb: *const ctypes::c_char) -> f64;
}
extern "C" {
    pub fn isnan(__value: f64) -> ctypes::c_int;
}
extern "C" {
    pub fn j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn jn(arg1: ctypes::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __jn(arg1: ctypes::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn yn(arg1: ctypes::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __yn(arg1: ctypes::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn gamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __gamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgamma_r(arg1: f64, __signgamp: *mut ctypes::c_int) -> f64;
}
extern "C" {
    pub fn __lgamma_r(arg1: f64, __signgamp: *mut ctypes::c_int) -> f64;
}
extern "C" {
    pub fn rint(__x: f64) -> f64;
}
extern "C" {
    pub fn __rint(__x: f64) -> f64;
}
extern "C" {
    pub fn nextafter(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __nextafter(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nexttoward(__x: f64, __y: u128) -> f64;
}
extern "C" {
    pub fn __nexttoward(__x: f64, __y: u128) -> f64;
}
extern "C" {
    pub fn remainder(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __remainder(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn scalbn(__x: f64, __n: ctypes::c_int) -> f64;
}
extern "C" {
    pub fn __scalbn(__x: f64, __n: ctypes::c_int) -> f64;
}
extern "C" {
    pub fn ilogb(__x: f64) -> ctypes::c_int;
}
extern "C" {
    pub fn __ilogb(__x: f64) -> ctypes::c_int;
}
extern "C" {
    pub fn scalbln(__x: f64, __n: ctypes::c_long) -> f64;
}
extern "C" {
    pub fn __scalbln(__x: f64, __n: ctypes::c_long) -> f64;
}
extern "C" {
    pub fn nearbyint(__x: f64) -> f64;
}
extern "C" {
    pub fn __nearbyint(__x: f64) -> f64;
}
extern "C" {
    pub fn round(__x: f64) -> f64;
}
extern "C" {
    pub fn __round(__x: f64) -> f64;
}
extern "C" {
    pub fn trunc(__x: f64) -> f64;
}
extern "C" {
    pub fn __trunc(__x: f64) -> f64;
}
extern "C" {
    pub fn remquo(__x: f64, __y: f64, __quo: *mut ctypes::c_int) -> f64;
}
extern "C" {
    pub fn __remquo(__x: f64, __y: f64, __quo: *mut ctypes::c_int) -> f64;
}
extern "C" {
    pub fn lrint(__x: f64) -> ctypes::c_long;
}
extern "C" {
    pub fn __lrint(__x: f64) -> ctypes::c_long;
}
extern "C" {
    pub fn llrint(__x: f64) -> ctypes::c_longlong;
}
extern "C" {
    pub fn __llrint(__x: f64) -> ctypes::c_longlong;
}
extern "C" {
    pub fn lround(__x: f64) -> ctypes::c_long;
}
extern "C" {
    pub fn __lround(__x: f64) -> ctypes::c_long;
}
extern "C" {
    pub fn llround(__x: f64) -> ctypes::c_longlong;
}
extern "C" {
    pub fn __llround(__x: f64) -> ctypes::c_longlong;
}
extern "C" {
    pub fn fdim(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fdim(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmax(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmax(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmin(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmin(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fma(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn __fma(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn scalb(__x: f64, __n: f64) -> f64;
}
extern "C" {
    pub fn __scalb(__x: f64, __n: f64) -> f64;
}
extern "C" {
    pub fn __fpclassifyf(__value: f32) -> ctypes::c_int;
}
extern "C" {
    pub fn __signbitf(__value: f32) -> ctypes::c_int;
}
extern "C" {
    pub fn __isinff(__value: f32) -> ctypes::c_int;
}
extern "C" {
    pub fn __finitef(__value: f32) -> ctypes::c_int;
}
extern "C" {
    pub fn __isnanf(__value: f32) -> ctypes::c_int;
}
extern "C" {
    pub fn __iseqsigf(__x: f32, __y: f32) -> ctypes::c_int;
}
extern "C" {
    pub fn __issignalingf(__value: f32) -> ctypes::c_int;
}
extern "C" {
    pub fn acosf(__x: f32) -> f32;
}
extern "C" {
    pub fn __acosf(__x: f32) -> f32;
}
extern "C" {
    pub fn asinf(__x: f32) -> f32;
}
extern "C" {
    pub fn __asinf(__x: f32) -> f32;
}
extern "C" {
    pub fn atanf(__x: f32) -> f32;
}
extern "C" {
    pub fn __atanf(__x: f32) -> f32;
}
extern "C" {
    pub fn atan2f(__y: f32, __x: f32) -> f32;
}
extern "C" {
    pub fn __atan2f(__y: f32, __x: f32) -> f32;
}
extern "C" {
    pub fn cosf(__x: f32) -> f32;
}
extern "C" {
    pub fn __cosf(__x: f32) -> f32;
}
extern "C" {
    pub fn sinf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sinf(__x: f32) -> f32;
}
extern "C" {
    pub fn tanf(__x: f32) -> f32;
}
extern "C" {
    pub fn __tanf(__x: f32) -> f32;
}
extern "C" {
    pub fn coshf(__x: f32) -> f32;
}
extern "C" {
    pub fn __coshf(__x: f32) -> f32;
}
extern "C" {
    pub fn sinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn tanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __tanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn acoshf(__x: f32) -> f32;
}
extern "C" {
    pub fn __acoshf(__x: f32) -> f32;
}
extern "C" {
    pub fn asinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __asinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn atanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __atanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn expf(__x: f32) -> f32;
}
extern "C" {
    pub fn __expf(__x: f32) -> f32;
}
extern "C" {
    pub fn frexpf(__x: f32, __exponent: *mut ctypes::c_int) -> f32;
}
extern "C" {
    pub fn __frexpf(__x: f32, __exponent: *mut ctypes::c_int) -> f32;
}
extern "C" {
    pub fn ldexpf(__x: f32, __exponent: ctypes::c_int) -> f32;
}
extern "C" {
    pub fn __ldexpf(__x: f32, __exponent: ctypes::c_int) -> f32;
}
extern "C" {
    pub fn logf(__x: f32) -> f32;
}
extern "C" {
    pub fn __logf(__x: f32) -> f32;
}
extern "C" {
    pub fn log10f(__x: f32) -> f32;
}
extern "C" {
    pub fn __log10f(__x: f32) -> f32;
}
extern "C" {
    pub fn modff(__x: f32, __iptr: *mut f32) -> f32;
}
extern "C" {
    pub fn __modff(__x: f32, __iptr: *mut f32) -> f32;
}
extern "C" {
    pub fn expm1f(__x: f32) -> f32;
}
extern "C" {
    pub fn __expm1f(__x: f32) -> f32;
}
extern "C" {
    pub fn log1pf(__x: f32) -> f32;
}
extern "C" {
    pub fn __log1pf(__x: f32) -> f32;
}
extern "C" {
    pub fn logbf(__x: f32) -> f32;
}
extern "C" {
    pub fn __logbf(__x: f32) -> f32;
}
extern "C" {
    pub fn exp2f(__x: f32) -> f32;
}
extern "C" {
    pub fn __exp2f(__x: f32) -> f32;
}
extern "C" {
    pub fn log2f(__x: f32) -> f32;
}
extern "C" {
    pub fn __log2f(__x: f32) -> f32;
}
extern "C" {
    pub fn powf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __powf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn sqrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sqrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn hypotf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __hypotf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn cbrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn __cbrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn ceilf(__x: f32) -> f32;
}
extern "C" {
    pub fn __ceilf(__x: f32) -> f32;
}
extern "C" {
    pub fn fabsf(__x: f32) -> f32;
}
extern "C" {
    pub fn __fabsf(__x: f32) -> f32;
}
extern "C" {
    pub fn floorf(__x: f32) -> f32;
}
extern "C" {
    pub fn __floorf(__x: f32) -> f32;
}
extern "C" {
    pub fn fmodf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fmodf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn isinff(__value: f32) -> ctypes::c_int;
}
extern "C" {
    pub fn finitef(__value: f32) -> ctypes::c_int;
}
extern "C" {
    pub fn dremf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __dremf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn significandf(__x: f32) -> f32;
}
extern "C" {
    pub fn __significandf(__x: f32) -> f32;
}
extern "C" {
    pub fn copysignf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __copysignf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn nanf(__tagb: *const ctypes::c_char) -> f32;
}
extern "C" {
    pub fn __nanf(__tagb: *const ctypes::c_char) -> f32;
}
extern "C" {
    pub fn isnanf(__value: f32) -> ctypes::c_int;
}
extern "C" {
    pub fn j0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __j0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn j1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __j1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn jnf(arg1: ctypes::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn __jnf(arg1: ctypes::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn y0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __y0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn y1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __y1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn ynf(arg1: ctypes::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn __ynf(arg1: ctypes::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn __erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn gammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __gammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgammaf_r(arg1: f32, __signgamp: *mut ctypes::c_int) -> f32;
}
extern "C" {
    pub fn __lgammaf_r(arg1: f32, __signgamp: *mut ctypes::c_int) -> f32;
}
extern "C" {
    pub fn rintf(__x: f32) -> f32;
}
extern "C" {
    pub fn __rintf(__x: f32) -> f32;
}
extern "C" {
    pub fn nextafterf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __nextafterf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn nexttowardf(__x: f32, __y: u128) -> f32;
}
extern "C" {
    pub fn __nexttowardf(__x: f32, __y: u128) -> f32;
}
extern "C" {
    pub fn remainderf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __remainderf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn scalbnf(__x: f32, __n: ctypes::c_int) -> f32;
}
extern "C" {
    pub fn __scalbnf(__x: f32, __n: ctypes::c_int) -> f32;
}
extern "C" {
    pub fn ilogbf(__x: f32) -> ctypes::c_int;
}
extern "C" {
    pub fn __ilogbf(__x: f32) -> ctypes::c_int;
}
extern "C" {
    pub fn scalblnf(__x: f32, __n: ctypes::c_long) -> f32;
}
extern "C" {
    pub fn __scalblnf(__x: f32, __n: ctypes::c_long) -> f32;
}
extern "C" {
    pub fn nearbyintf(__x: f32) -> f32;
}
extern "C" {
    pub fn __nearbyintf(__x: f32) -> f32;
}
extern "C" {
    pub fn roundf(__x: f32) -> f32;
}
extern "C" {
    pub fn __roundf(__x: f32) -> f32;
}
extern "C" {
    pub fn truncf(__x: f32) -> f32;
}
extern "C" {
    pub fn __truncf(__x: f32) -> f32;
}
extern "C" {
    pub fn remquof(__x: f32, __y: f32, __quo: *mut ctypes::c_int) -> f32;
}
extern "C" {
    pub fn __remquof(__x: f32, __y: f32, __quo: *mut ctypes::c_int) -> f32;
}
extern "C" {
    pub fn lrintf(__x: f32) -> ctypes::c_long;
}
extern "C" {
    pub fn __lrintf(__x: f32) -> ctypes::c_long;
}
extern "C" {
    pub fn llrintf(__x: f32) -> ctypes::c_longlong;
}
extern "C" {
    pub fn __llrintf(__x: f32) -> ctypes::c_longlong;
}
extern "C" {
    pub fn lroundf(__x: f32) -> ctypes::c_long;
}
extern "C" {
    pub fn __lroundf(__x: f32) -> ctypes::c_long;
}
extern "C" {
    pub fn llroundf(__x: f32) -> ctypes::c_longlong;
}
extern "C" {
    pub fn __llroundf(__x: f32) -> ctypes::c_longlong;
}
extern "C" {
    pub fn fdimf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fdimf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fmaxf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fmaxf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fminf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fminf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fmaf(__x: f32, __y: f32, __z: f32) -> f32;
}
extern "C" {
    pub fn __fmaf(__x: f32, __y: f32, __z: f32) -> f32;
}
extern "C" {
    pub fn scalbf(__x: f32, __n: f32) -> f32;
}
extern "C" {
    pub fn __scalbf(__x: f32, __n: f32) -> f32;
}
extern "C" {
    pub fn __fpclassifyl(__value: u128) -> ctypes::c_int;
}
extern "C" {
    pub fn __signbitl(__value: u128) -> ctypes::c_int;
}
extern "C" {
    pub fn __isinfl(__value: u128) -> ctypes::c_int;
}
extern "C" {
    pub fn __finitel(__value: u128) -> ctypes::c_int;
}
extern "C" {
    pub fn __isnanl(__value: u128) -> ctypes::c_int;
}
extern "C" {
    pub fn __iseqsigl(__x: u128, __y: u128) -> ctypes::c_int;
}
extern "C" {
    pub fn __issignalingl(__value: u128) -> ctypes::c_int;
}
extern "C" {
    pub fn acosl(__x: u128) -> u128;
}
extern "C" {
    pub fn __acosl(__x: u128) -> u128;
}
extern "C" {
    pub fn asinl(__x: u128) -> u128;
}
extern "C" {
    pub fn __asinl(__x: u128) -> u128;
}
extern "C" {
    pub fn atanl(__x: u128) -> u128;
}
extern "C" {
    pub fn __atanl(__x: u128) -> u128;
}
extern "C" {
    pub fn atan2l(__y: u128, __x: u128) -> u128;
}
extern "C" {
    pub fn __atan2l(__y: u128, __x: u128) -> u128;
}
extern "C" {
    pub fn cosl(__x: u128) -> u128;
}
extern "C" {
    pub fn __cosl(__x: u128) -> u128;
}
extern "C" {
    pub fn sinl(__x: u128) -> u128;
}
extern "C" {
    pub fn __sinl(__x: u128) -> u128;
}
extern "C" {
    pub fn tanl(__x: u128) -> u128;
}
extern "C" {
    pub fn __tanl(__x: u128) -> u128;
}
extern "C" {
    pub fn coshl(__x: u128) -> u128;
}
extern "C" {
    pub fn __coshl(__x: u128) -> u128;
}
extern "C" {
    pub fn sinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __sinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn tanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __tanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn acoshl(__x: u128) -> u128;
}
extern "C" {
    pub fn __acoshl(__x: u128) -> u128;
}
extern "C" {
    pub fn asinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __asinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn atanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __atanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn expl(__x: u128) -> u128;
}
extern "C" {
    pub fn __expl(__x: u128) -> u128;
}
extern "C" {
    pub fn frexpl(__x: u128, __exponent: *mut ctypes::c_int) -> u128;
}
extern "C" {
    pub fn __frexpl(__x: u128, __exponent: *mut ctypes::c_int) -> u128;
}
extern "C" {
    pub fn ldexpl(__x: u128, __exponent: ctypes::c_int) -> u128;
}
extern "C" {
    pub fn __ldexpl(__x: u128, __exponent: ctypes::c_int) -> u128;
}
extern "C" {
    pub fn logl(__x: u128) -> u128;
}
extern "C" {
    pub fn __logl(__x: u128) -> u128;
}
extern "C" {
    pub fn log10l(__x: u128) -> u128;
}
extern "C" {
    pub fn __log10l(__x: u128) -> u128;
}
extern "C" {
    pub fn modfl(__x: u128, __iptr: *mut u128) -> u128;
}
extern "C" {
    pub fn __modfl(__x: u128, __iptr: *mut u128) -> u128;
}
extern "C" {
    pub fn expm1l(__x: u128) -> u128;
}
extern "C" {
    pub fn __expm1l(__x: u128) -> u128;
}
extern "C" {
    pub fn log1pl(__x: u128) -> u128;
}
extern "C" {
    pub fn __log1pl(__x: u128) -> u128;
}
extern "C" {
    pub fn logbl(__x: u128) -> u128;
}
extern "C" {
    pub fn __logbl(__x: u128) -> u128;
}
extern "C" {
    pub fn exp2l(__x: u128) -> u128;
}
extern "C" {
    pub fn __exp2l(__x: u128) -> u128;
}
extern "C" {
    pub fn log2l(__x: u128) -> u128;
}
extern "C" {
    pub fn __log2l(__x: u128) -> u128;
}
extern "C" {
    pub fn powl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __powl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn sqrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn __sqrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn hypotl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __hypotl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn cbrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn __cbrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn ceill(__x: u128) -> u128;
}
extern "C" {
    pub fn __ceill(__x: u128) -> u128;
}
extern "C" {
    pub fn fabsl(__x: u128) -> u128;
}
extern "C" {
    pub fn __fabsl(__x: u128) -> u128;
}
extern "C" {
    pub fn floorl(__x: u128) -> u128;
}
extern "C" {
    pub fn __floorl(__x: u128) -> u128;
}
extern "C" {
    pub fn fmodl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fmodl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn isinfl(__value: u128) -> ctypes::c_int;
}
extern "C" {
    pub fn finitel(__value: u128) -> ctypes::c_int;
}
extern "C" {
    pub fn dreml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __dreml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn significandl(__x: u128) -> u128;
}
extern "C" {
    pub fn __significandl(__x: u128) -> u128;
}
extern "C" {
    pub fn copysignl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __copysignl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn nanl(__tagb: *const ctypes::c_char) -> u128;
}
extern "C" {
    pub fn __nanl(__tagb: *const ctypes::c_char) -> u128;
}
extern "C" {
    pub fn isnanl(__value: u128) -> ctypes::c_int;
}
extern "C" {
    pub fn j0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __j0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn j1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __j1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn jnl(arg1: ctypes::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn __jnl(arg1: ctypes::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn y0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __y0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn y1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __y1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn ynl(arg1: ctypes::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn __ynl(arg1: ctypes::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn erfl(arg1: u128) -> u128;
}
extern "C" {
    pub fn __erfl(arg1: u128) -> u128;
}
extern "C" {
    pub fn erfcl(arg1: u128) -> u128;
}
extern "C" {
    pub fn __erfcl(arg1: u128) -> u128;
}
extern "C" {
    pub fn lgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn __lgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn tgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn __tgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn gammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn __gammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn lgammal_r(arg1: u128, __signgamp: *mut ctypes::c_int) -> u128;
}
extern "C" {
    pub fn __lgammal_r(arg1: u128, __signgamp: *mut ctypes::c_int) -> u128;
}
extern "C" {
    pub fn rintl(__x: u128) -> u128;
}
extern "C" {
    pub fn __rintl(__x: u128) -> u128;
}
extern "C" {
    pub fn nextafterl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __nextafterl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn nexttowardl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __nexttowardl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn remainderl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __remainderl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn scalbnl(__x: u128, __n: ctypes::c_int) -> u128;
}
extern "C" {
    pub fn __scalbnl(__x: u128, __n: ctypes::c_int) -> u128;
}
extern "C" {
    pub fn ilogbl(__x: u128) -> ctypes::c_int;
}
extern "C" {
    pub fn __ilogbl(__x: u128) -> ctypes::c_int;
}
extern "C" {
    pub fn scalblnl(__x: u128, __n: ctypes::c_long) -> u128;
}
extern "C" {
    pub fn __scalblnl(__x: u128, __n: ctypes::c_long) -> u128;
}
extern "C" {
    pub fn nearbyintl(__x: u128) -> u128;
}
extern "C" {
    pub fn __nearbyintl(__x: u128) -> u128;
}
extern "C" {
    pub fn roundl(__x: u128) -> u128;
}
extern "C" {
    pub fn __roundl(__x: u128) -> u128;
}
extern "C" {
    pub fn truncl(__x: u128) -> u128;
}
extern "C" {
    pub fn __truncl(__x: u128) -> u128;
}
extern "C" {
    pub fn remquol(__x: u128, __y: u128, __quo: *mut ctypes::c_int) -> u128;
}
extern "C" {
    pub fn __remquol(__x: u128, __y: u128, __quo: *mut ctypes::c_int) -> u128;
}
extern "C" {
    pub fn lrintl(__x: u128) -> ctypes::c_long;
}
extern "C" {
    pub fn __lrintl(__x: u128) -> ctypes::c_long;
}
extern "C" {
    pub fn llrintl(__x: u128) -> ctypes::c_longlong;
}
extern "C" {
    pub fn __llrintl(__x: u128) -> ctypes::c_longlong;
}
extern "C" {
    pub fn lroundl(__x: u128) -> ctypes::c_long;
}
extern "C" {
    pub fn __lroundl(__x: u128) -> ctypes::c_long;
}
extern "C" {
    pub fn llroundl(__x: u128) -> ctypes::c_longlong;
}
extern "C" {
    pub fn __llroundl(__x: u128) -> ctypes::c_longlong;
}
extern "C" {
    pub fn fdiml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fdiml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn fmaxl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fmaxl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn fminl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fminl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn fmal(__x: u128, __y: u128, __z: u128) -> u128;
}
extern "C" {
    pub fn __fmal(__x: u128, __y: u128, __z: u128) -> u128;
}
extern "C" {
    pub fn scalbl(__x: u128, __n: u128) -> u128;
}
extern "C" {
    pub fn __scalbl(__x: u128, __n: u128) -> u128;
}
extern "C" {
    pub static mut signgam: ctypes::c_int;
}
pub const FP_NAN: ctypes::c_uint = 0;
pub const FP_INFINITE: ctypes::c_uint = 1;
pub const FP_ZERO: ctypes::c_uint = 2;
pub const FP_SUBNORMAL: ctypes::c_uint = 3;
pub const FP_NORMAL: ctypes::c_uint = 4;
pub type _bindgen_ty_2 = ctypes::c_uint;
pub const SDL_FALSE: SDL_bool = 0;
pub const SDL_TRUE: SDL_bool = 1;
pub type SDL_bool = ctypes::c_uint;
pub type Sint8 = i8;
pub type Uint8 = u8;
pub type Sint16 = i16;
pub type Uint16 = u16;
pub type Sint32 = i32;
pub type Uint32 = u32;
pub type Sint64 = i64;
pub type Uint64 = u64;
pub type SDL_compile_time_assert_uint8 = [ctypes::c_int; 1usize];
pub type SDL_compile_time_assert_sint8 = [ctypes::c_int; 1usize];
pub type SDL_compile_time_assert_uint16 = [ctypes::c_int; 1usize];
pub type SDL_compile_time_assert_sint16 = [ctypes::c_int; 1usize];
pub type SDL_compile_time_assert_uint32 = [ctypes::c_int; 1usize];
pub type SDL_compile_time_assert_sint32 = [ctypes::c_int; 1usize];
pub type SDL_compile_time_assert_uint64 = [ctypes::c_int; 1usize];
pub type SDL_compile_time_assert_sint64 = [ctypes::c_int; 1usize];
pub const DUMMY_ENUM_VALUE: SDL_DUMMY_ENUM = 0;
pub type SDL_DUMMY_ENUM = ctypes::c_uint;
pub type SDL_compile_time_assert_enum = [ctypes::c_int; 1usize];
extern "C" {
    pub fn SDL_malloc(size: size_t) -> *mut ctypes::c_void;
}
extern "C" {
    pub fn SDL_calloc(nmemb: size_t, size: size_t) -> *mut ctypes::c_void;
}
extern "C" {
    pub fn SDL_realloc(mem: *mut ctypes::c_void, size: size_t) -> *mut ctypes::c_void;
}
extern "C" {
    pub fn SDL_free(mem: *mut ctypes::c_void);
}
pub type SDL_malloc_func =
    ::core::option::Option<unsafe extern "C" fn(size: size_t) -> *mut ctypes::c_void>;
pub type SDL_calloc_func = ::core::option::Option<
    unsafe extern "C" fn(nmemb: size_t, size: size_t) -> *mut ctypes::c_void,
>;
pub type SDL_realloc_func = ::core::option::Option<
    unsafe extern "C" fn(mem: *mut ctypes::c_void, size: size_t) -> *mut ctypes::c_void,
>;
pub type SDL_free_func = ::core::option::Option<unsafe extern "C" fn(mem: *mut ctypes::c_void)>;
extern "C" {
    pub fn SDL_GetMemoryFunctions(
        malloc_func: *mut SDL_malloc_func,
        calloc_func: *mut SDL_calloc_func,
        realloc_func: *mut SDL_realloc_func,
        free_func: *mut SDL_free_func,
    );
}
extern "C" {
    pub fn SDL_SetMemoryFunctions(
        malloc_func: SDL_malloc_func,
        calloc_func: SDL_calloc_func,
        realloc_func: SDL_realloc_func,
        free_func: SDL_free_func,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_GetNumAllocations() -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_getenv(name: *const ctypes::c_char) -> *mut ctypes::c_char;
}
extern "C" {
    pub fn SDL_setenv(
        name: *const ctypes::c_char,
        value: *const ctypes::c_char,
        overwrite: ctypes::c_int,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_qsort(
        base: *mut ctypes::c_void,
        nmemb: size_t,
        size: size_t,
        compare: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *const ctypes::c_void,
                arg2: *const ctypes::c_void,
            ) -> ctypes::c_int,
        >,
    );
}
extern "C" {
    pub fn SDL_abs(x: ctypes::c_int) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_isalpha(x: ctypes::c_int) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_isalnum(x: ctypes::c_int) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_isblank(x: ctypes::c_int) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_iscntrl(x: ctypes::c_int) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_isdigit(x: ctypes::c_int) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_isxdigit(x: ctypes::c_int) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_ispunct(x: ctypes::c_int) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_isspace(x: ctypes::c_int) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_isupper(x: ctypes::c_int) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_islower(x: ctypes::c_int) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_isprint(x: ctypes::c_int) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_isgraph(x: ctypes::c_int) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_toupper(x: ctypes::c_int) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_tolower(x: ctypes::c_int) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_crc32(crc: Uint32, data: *const ctypes::c_void, len: size_t) -> Uint32;
}
extern "C" {
    pub fn SDL_memset(
        dst: *mut ctypes::c_void,
        c: ctypes::c_int,
        len: size_t,
    ) -> *mut ctypes::c_void;
}
extern "C" {
    pub fn SDL_memcpy(
        dst: *mut ctypes::c_void,
        src: *const ctypes::c_void,
        len: size_t,
    ) -> *mut ctypes::c_void;
}
extern "C" {
    pub fn SDL_memmove(
        dst: *mut ctypes::c_void,
        src: *const ctypes::c_void,
        len: size_t,
    ) -> *mut ctypes::c_void;
}
extern "C" {
    pub fn SDL_memcmp(
        s1: *const ctypes::c_void,
        s2: *const ctypes::c_void,
        len: size_t,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_wcslen(wstr: *const wchar_t) -> size_t;
}
extern "C" {
    pub fn SDL_wcslcpy(dst: *mut wchar_t, src: *const wchar_t, maxlen: size_t) -> size_t;
}
extern "C" {
    pub fn SDL_wcslcat(dst: *mut wchar_t, src: *const wchar_t, maxlen: size_t) -> size_t;
}
extern "C" {
    pub fn SDL_wcsdup(wstr: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn SDL_wcsstr(haystack: *const wchar_t, needle: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn SDL_wcscmp(str1: *const wchar_t, str2: *const wchar_t) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_wcsncmp(str1: *const wchar_t, str2: *const wchar_t, maxlen: size_t)
        -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_wcscasecmp(str1: *const wchar_t, str2: *const wchar_t) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_wcsncasecmp(
        str1: *const wchar_t,
        str2: *const wchar_t,
        len: size_t,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_strlen(str_: *const ctypes::c_char) -> size_t;
}
extern "C" {
    pub fn SDL_strlcpy(
        dst: *mut ctypes::c_char,
        src: *const ctypes::c_char,
        maxlen: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn SDL_utf8strlcpy(
        dst: *mut ctypes::c_char,
        src: *const ctypes::c_char,
        dst_bytes: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn SDL_strlcat(
        dst: *mut ctypes::c_char,
        src: *const ctypes::c_char,
        maxlen: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn SDL_strdup(str_: *const ctypes::c_char) -> *mut ctypes::c_char;
}
extern "C" {
    pub fn SDL_strrev(str_: *mut ctypes::c_char) -> *mut ctypes::c_char;
}
extern "C" {
    pub fn SDL_strupr(str_: *mut ctypes::c_char) -> *mut ctypes::c_char;
}
extern "C" {
    pub fn SDL_strlwr(str_: *mut ctypes::c_char) -> *mut ctypes::c_char;
}
extern "C" {
    pub fn SDL_strchr(str_: *const ctypes::c_char, c: ctypes::c_int) -> *mut ctypes::c_char;
}
extern "C" {
    pub fn SDL_strrchr(str_: *const ctypes::c_char, c: ctypes::c_int) -> *mut ctypes::c_char;
}
extern "C" {
    pub fn SDL_strstr(
        haystack: *const ctypes::c_char,
        needle: *const ctypes::c_char,
    ) -> *mut ctypes::c_char;
}
extern "C" {
    pub fn SDL_strtokr(
        s1: *mut ctypes::c_char,
        s2: *const ctypes::c_char,
        saveptr: *mut *mut ctypes::c_char,
    ) -> *mut ctypes::c_char;
}
extern "C" {
    pub fn SDL_utf8strlen(str_: *const ctypes::c_char) -> size_t;
}
extern "C" {
    pub fn SDL_itoa(
        value: ctypes::c_int,
        str_: *mut ctypes::c_char,
        radix: ctypes::c_int,
    ) -> *mut ctypes::c_char;
}
extern "C" {
    pub fn SDL_uitoa(
        value: ctypes::c_uint,
        str_: *mut ctypes::c_char,
        radix: ctypes::c_int,
    ) -> *mut ctypes::c_char;
}
extern "C" {
    pub fn SDL_ltoa(
        value: ctypes::c_long,
        str_: *mut ctypes::c_char,
        radix: ctypes::c_int,
    ) -> *mut ctypes::c_char;
}
extern "C" {
    pub fn SDL_ultoa(
        value: ctypes::c_ulong,
        str_: *mut ctypes::c_char,
        radix: ctypes::c_int,
    ) -> *mut ctypes::c_char;
}
extern "C" {
    pub fn SDL_lltoa(
        value: Sint64,
        str_: *mut ctypes::c_char,
        radix: ctypes::c_int,
    ) -> *mut ctypes::c_char;
}
extern "C" {
    pub fn SDL_ulltoa(
        value: Uint64,
        str_: *mut ctypes::c_char,
        radix: ctypes::c_int,
    ) -> *mut ctypes::c_char;
}
extern "C" {
    pub fn SDL_atoi(str_: *const ctypes::c_char) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_atof(str_: *const ctypes::c_char) -> f64;
}
extern "C" {
    pub fn SDL_strtol(
        str_: *const ctypes::c_char,
        endp: *mut *mut ctypes::c_char,
        base: ctypes::c_int,
    ) -> ctypes::c_long;
}
extern "C" {
    pub fn SDL_strtoul(
        str_: *const ctypes::c_char,
        endp: *mut *mut ctypes::c_char,
        base: ctypes::c_int,
    ) -> ctypes::c_ulong;
}
extern "C" {
    pub fn SDL_strtoll(
        str_: *const ctypes::c_char,
        endp: *mut *mut ctypes::c_char,
        base: ctypes::c_int,
    ) -> Sint64;
}
extern "C" {
    pub fn SDL_strtoull(
        str_: *const ctypes::c_char,
        endp: *mut *mut ctypes::c_char,
        base: ctypes::c_int,
    ) -> Uint64;
}
extern "C" {
    pub fn SDL_strtod(str_: *const ctypes::c_char, endp: *mut *mut ctypes::c_char) -> f64;
}
extern "C" {
    pub fn SDL_strcmp(str1: *const ctypes::c_char, str2: *const ctypes::c_char) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_strncmp(
        str1: *const ctypes::c_char,
        str2: *const ctypes::c_char,
        maxlen: size_t,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_strcasecmp(
        str1: *const ctypes::c_char,
        str2: *const ctypes::c_char,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_strncasecmp(
        str1: *const ctypes::c_char,
        str2: *const ctypes::c_char,
        len: size_t,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_sscanf(
        text: *const ctypes::c_char,
        fmt: *const ctypes::c_char,
        ...
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_vsscanf(
        text: *const ctypes::c_char,
        fmt: *const ctypes::c_char,
        ap: *mut __va_list_tag,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_snprintf(
        text: *mut ctypes::c_char,
        maxlen: size_t,
        fmt: *const ctypes::c_char,
        ...
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_vsnprintf(
        text: *mut ctypes::c_char,
        maxlen: size_t,
        fmt: *const ctypes::c_char,
        ap: *mut __va_list_tag,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_acos(x: f64) -> f64;
}
extern "C" {
    pub fn SDL_acosf(x: f32) -> f32;
}
extern "C" {
    pub fn SDL_asin(x: f64) -> f64;
}
extern "C" {
    pub fn SDL_asinf(x: f32) -> f32;
}
extern "C" {
    pub fn SDL_atan(x: f64) -> f64;
}
extern "C" {
    pub fn SDL_atanf(x: f32) -> f32;
}
extern "C" {
    pub fn SDL_atan2(x: f64, y: f64) -> f64;
}
extern "C" {
    pub fn SDL_atan2f(x: f32, y: f32) -> f32;
}
extern "C" {
    pub fn SDL_ceil(x: f64) -> f64;
}
extern "C" {
    pub fn SDL_ceilf(x: f32) -> f32;
}
extern "C" {
    pub fn SDL_copysign(x: f64, y: f64) -> f64;
}
extern "C" {
    pub fn SDL_copysignf(x: f32, y: f32) -> f32;
}
extern "C" {
    pub fn SDL_cos(x: f64) -> f64;
}
extern "C" {
    pub fn SDL_cosf(x: f32) -> f32;
}
extern "C" {
    pub fn SDL_exp(x: f64) -> f64;
}
extern "C" {
    pub fn SDL_expf(x: f32) -> f32;
}
extern "C" {
    pub fn SDL_fabs(x: f64) -> f64;
}
extern "C" {
    pub fn SDL_fabsf(x: f32) -> f32;
}
extern "C" {
    pub fn SDL_floor(x: f64) -> f64;
}
extern "C" {
    pub fn SDL_floorf(x: f32) -> f32;
}
extern "C" {
    pub fn SDL_trunc(x: f64) -> f64;
}
extern "C" {
    pub fn SDL_truncf(x: f32) -> f32;
}
extern "C" {
    pub fn SDL_fmod(x: f64, y: f64) -> f64;
}
extern "C" {
    pub fn SDL_fmodf(x: f32, y: f32) -> f32;
}
extern "C" {
    pub fn SDL_log(x: f64) -> f64;
}
extern "C" {
    pub fn SDL_logf(x: f32) -> f32;
}
extern "C" {
    pub fn SDL_log10(x: f64) -> f64;
}
extern "C" {
    pub fn SDL_log10f(x: f32) -> f32;
}
extern "C" {
    pub fn SDL_pow(x: f64, y: f64) -> f64;
}
extern "C" {
    pub fn SDL_powf(x: f32, y: f32) -> f32;
}
extern "C" {
    pub fn SDL_round(x: f64) -> f64;
}
extern "C" {
    pub fn SDL_roundf(x: f32) -> f32;
}
extern "C" {
    pub fn SDL_lround(x: f64) -> ctypes::c_long;
}
extern "C" {
    pub fn SDL_lroundf(x: f32) -> ctypes::c_long;
}
extern "C" {
    pub fn SDL_scalbn(x: f64, n: ctypes::c_int) -> f64;
}
extern "C" {
    pub fn SDL_scalbnf(x: f32, n: ctypes::c_int) -> f32;
}
extern "C" {
    pub fn SDL_sin(x: f64) -> f64;
}
extern "C" {
    pub fn SDL_sinf(x: f32) -> f32;
}
extern "C" {
    pub fn SDL_sqrt(x: f64) -> f64;
}
extern "C" {
    pub fn SDL_sqrtf(x: f32) -> f32;
}
extern "C" {
    pub fn SDL_tan(x: f64) -> f64;
}
extern "C" {
    pub fn SDL_tanf(x: f32) -> f32;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _SDL_iconv_t {
    _unused: [u8; 0],
}
pub type SDL_iconv_t = *mut _SDL_iconv_t;
extern "C" {
    pub fn SDL_iconv_open(
        tocode: *const ctypes::c_char,
        fromcode: *const ctypes::c_char,
    ) -> SDL_iconv_t;
}
extern "C" {
    pub fn SDL_iconv_close(cd: SDL_iconv_t) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_iconv(
        cd: SDL_iconv_t,
        inbuf: *mut *const ctypes::c_char,
        inbytesleft: *mut size_t,
        outbuf: *mut *mut ctypes::c_char,
        outbytesleft: *mut size_t,
    ) -> size_t;
}
extern "C" {
    pub fn SDL_iconv_string(
        tocode: *const ctypes::c_char,
        fromcode: *const ctypes::c_char,
        inbuf: *const ctypes::c_char,
        inbytesleft: size_t,
    ) -> *mut ctypes::c_char;
}
pub type SDL_main_func = ::core::option::Option<
    unsafe extern "C" fn(argc: ctypes::c_int, argv: *mut *mut ctypes::c_char) -> ctypes::c_int,
>;
extern "C" {
    pub fn SDL_main(argc: ctypes::c_int, argv: *mut *mut ctypes::c_char) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_SetMainReady();
}
pub const SDL_ASSERTION_RETRY: SDL_AssertState = 0;
pub const SDL_ASSERTION_BREAK: SDL_AssertState = 1;
pub const SDL_ASSERTION_ABORT: SDL_AssertState = 2;
pub const SDL_ASSERTION_IGNORE: SDL_AssertState = 3;
pub const SDL_ASSERTION_ALWAYS_IGNORE: SDL_AssertState = 4;
pub type SDL_AssertState = ctypes::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SDL_AssertData {
    pub always_ignore: ctypes::c_int,
    pub trigger_count: ctypes::c_uint,
    pub condition: *const ctypes::c_char,
    pub filename: *const ctypes::c_char,
    pub linenum: ctypes::c_int,
    pub function: *const ctypes::c_char,
    pub next: *const SDL_AssertData,
}
#[test]
fn bindgen_test_layout_SDL_AssertData() {
    assert_eq!(
        ::core::mem::size_of::<SDL_AssertData>(),
        48usize,
        concat!("Size of: ", stringify!(SDL_AssertData))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_AssertData>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_AssertData))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_AssertData>())).always_ignore as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AssertData),
            "::",
            stringify!(always_ignore)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_AssertData>())).trigger_count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AssertData),
            "::",
            stringify!(trigger_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_AssertData>())).condition as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AssertData),
            "::",
            stringify!(condition)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_AssertData>())).filename as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AssertData),
            "::",
            stringify!(filename)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_AssertData>())).linenum as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AssertData),
            "::",
            stringify!(linenum)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_AssertData>())).function as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AssertData),
            "::",
            stringify!(function)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_AssertData>())).next as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AssertData),
            "::",
            stringify!(next)
        )
    );
}
impl Default for SDL_AssertData {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn SDL_ReportAssertion(
        arg1: *mut SDL_AssertData,
        arg2: *const ctypes::c_char,
        arg3: *const ctypes::c_char,
        arg4: ctypes::c_int,
    ) -> SDL_AssertState;
}
pub type SDL_AssertionHandler = ::core::option::Option<
    unsafe extern "C" fn(
        data: *const SDL_AssertData,
        userdata: *mut ctypes::c_void,
    ) -> SDL_AssertState,
>;
extern "C" {
    pub fn SDL_SetAssertionHandler(handler: SDL_AssertionHandler, userdata: *mut ctypes::c_void);
}
extern "C" {
    pub fn SDL_GetDefaultAssertionHandler() -> SDL_AssertionHandler;
}
extern "C" {
    pub fn SDL_GetAssertionHandler(puserdata: *mut *mut ctypes::c_void) -> SDL_AssertionHandler;
}
extern "C" {
    pub fn SDL_GetAssertionReport() -> *const SDL_AssertData;
}
extern "C" {
    pub fn SDL_ResetAssertionReport();
}
pub type SDL_SpinLock = ctypes::c_int;
extern "C" {
    pub fn SDL_AtomicTryLock(lock: *mut SDL_SpinLock) -> SDL_bool;
}
extern "C" {
    pub fn SDL_AtomicLock(lock: *mut SDL_SpinLock);
}
extern "C" {
    pub fn SDL_AtomicUnlock(lock: *mut SDL_SpinLock);
}
extern "C" {
    pub fn SDL_MemoryBarrierReleaseFunction();
}
extern "C" {
    pub fn SDL_MemoryBarrierAcquireFunction();
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct SDL_atomic_t {
    pub value: ctypes::c_int,
}
#[test]
fn bindgen_test_layout_SDL_atomic_t() {
    assert_eq!(
        ::core::mem::size_of::<SDL_atomic_t>(),
        4usize,
        concat!("Size of: ", stringify!(SDL_atomic_t))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_atomic_t>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_atomic_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_atomic_t>())).value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_atomic_t),
            "::",
            stringify!(value)
        )
    );
}
extern "C" {
    pub fn SDL_AtomicCAS(
        a: *mut SDL_atomic_t,
        oldval: ctypes::c_int,
        newval: ctypes::c_int,
    ) -> SDL_bool;
}
extern "C" {
    pub fn SDL_AtomicSet(a: *mut SDL_atomic_t, v: ctypes::c_int) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_AtomicGet(a: *mut SDL_atomic_t) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_AtomicAdd(a: *mut SDL_atomic_t, v: ctypes::c_int) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_AtomicCASPtr(
        a: *mut *mut ctypes::c_void,
        oldval: *mut ctypes::c_void,
        newval: *mut ctypes::c_void,
    ) -> SDL_bool;
}
extern "C" {
    pub fn SDL_AtomicSetPtr(
        a: *mut *mut ctypes::c_void,
        v: *mut ctypes::c_void,
    ) -> *mut ctypes::c_void;
}
extern "C" {
    pub fn SDL_AtomicGetPtr(a: *mut *mut ctypes::c_void) -> *mut ctypes::c_void;
}
extern "C" {
    pub fn SDL_SetError(fmt: *const ctypes::c_char, ...) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_GetError() -> *const ctypes::c_char;
}
extern "C" {
    pub fn SDL_GetErrorMsg(
        errstr: *mut ctypes::c_char,
        maxlen: ctypes::c_int,
    ) -> *mut ctypes::c_char;
}
extern "C" {
    pub fn SDL_ClearError();
}
pub const SDL_ENOMEM: SDL_errorcode = 0;
pub const SDL_EFREAD: SDL_errorcode = 1;
pub const SDL_EFWRITE: SDL_errorcode = 2;
pub const SDL_EFSEEK: SDL_errorcode = 3;
pub const SDL_UNSUPPORTED: SDL_errorcode = 4;
pub const SDL_LASTERROR: SDL_errorcode = 5;
pub type SDL_errorcode = ctypes::c_uint;
extern "C" {
    pub fn SDL_Error(code: SDL_errorcode) -> ctypes::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SDL_mutex {
    _unused: [u8; 0],
}
extern "C" {
    pub fn SDL_CreateMutex() -> *mut SDL_mutex;
}
extern "C" {
    pub fn SDL_LockMutex(mutex: *mut SDL_mutex) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_TryLockMutex(mutex: *mut SDL_mutex) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_UnlockMutex(mutex: *mut SDL_mutex) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_DestroyMutex(mutex: *mut SDL_mutex);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SDL_semaphore {
    _unused: [u8; 0],
}
pub type SDL_sem = SDL_semaphore;
extern "C" {
    pub fn SDL_CreateSemaphore(initial_value: Uint32) -> *mut SDL_sem;
}
extern "C" {
    pub fn SDL_DestroySemaphore(sem: *mut SDL_sem);
}
extern "C" {
    pub fn SDL_SemWait(sem: *mut SDL_sem) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_SemTryWait(sem: *mut SDL_sem) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_SemWaitTimeout(sem: *mut SDL_sem, ms: Uint32) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_SemPost(sem: *mut SDL_sem) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_SemValue(sem: *mut SDL_sem) -> Uint32;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SDL_cond {
    _unused: [u8; 0],
}
extern "C" {
    pub fn SDL_CreateCond() -> *mut SDL_cond;
}
extern "C" {
    pub fn SDL_DestroyCond(cond: *mut SDL_cond);
}
extern "C" {
    pub fn SDL_CondSignal(cond: *mut SDL_cond) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_CondBroadcast(cond: *mut SDL_cond) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_CondWait(cond: *mut SDL_cond, mutex: *mut SDL_mutex) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_CondWaitTimeout(
        cond: *mut SDL_cond,
        mutex: *mut SDL_mutex,
        ms: Uint32,
    ) -> ctypes::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SDL_Thread {
    _unused: [u8; 0],
}
pub type SDL_threadID = ctypes::c_ulong;
pub type SDL_TLSID = ctypes::c_uint;
pub const SDL_THREAD_PRIORITY_LOW: SDL_ThreadPriority = 0;
pub const SDL_THREAD_PRIORITY_NORMAL: SDL_ThreadPriority = 1;
pub const SDL_THREAD_PRIORITY_HIGH: SDL_ThreadPriority = 2;
pub const SDL_THREAD_PRIORITY_TIME_CRITICAL: SDL_ThreadPriority = 3;
pub type SDL_ThreadPriority = ctypes::c_uint;
pub type SDL_ThreadFunction =
    ::core::option::Option<unsafe extern "C" fn(data: *mut ctypes::c_void) -> ctypes::c_int>;
extern "C" {
    pub fn SDL_CreateThread(
        fn_: SDL_ThreadFunction,
        name: *const ctypes::c_char,
        data: *mut ctypes::c_void,
    ) -> *mut SDL_Thread;
}
extern "C" {
    pub fn SDL_CreateThreadWithStackSize(
        fn_: SDL_ThreadFunction,
        name: *const ctypes::c_char,
        stacksize: size_t,
        data: *mut ctypes::c_void,
    ) -> *mut SDL_Thread;
}
extern "C" {
    pub fn SDL_GetThreadName(thread: *mut SDL_Thread) -> *const ctypes::c_char;
}
extern "C" {
    pub fn SDL_ThreadID() -> SDL_threadID;
}
extern "C" {
    pub fn SDL_GetThreadID(thread: *mut SDL_Thread) -> SDL_threadID;
}
extern "C" {
    pub fn SDL_SetThreadPriority(priority: SDL_ThreadPriority) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_WaitThread(thread: *mut SDL_Thread, status: *mut ctypes::c_int);
}
extern "C" {
    pub fn SDL_DetachThread(thread: *mut SDL_Thread);
}
extern "C" {
    pub fn SDL_TLSCreate() -> SDL_TLSID;
}
extern "C" {
    pub fn SDL_TLSGet(id: SDL_TLSID) -> *mut ctypes::c_void;
}
extern "C" {
    pub fn SDL_TLSSet(
        id: SDL_TLSID,
        value: *const ctypes::c_void,
        destructor: ::core::option::Option<unsafe extern "C" fn(arg1: *mut ctypes::c_void)>,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_TLSCleanup();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SDL_RWops {
    pub size: ::core::option::Option<unsafe extern "C" fn(context: *mut SDL_RWops) -> Sint64>,
    pub seek: ::core::option::Option<
        unsafe extern "C" fn(
            context: *mut SDL_RWops,
            offset: Sint64,
            whence: ctypes::c_int,
        ) -> Sint64,
    >,
    pub read: ::core::option::Option<
        unsafe extern "C" fn(
            context: *mut SDL_RWops,
            ptr: *mut ctypes::c_void,
            size: size_t,
            maxnum: size_t,
        ) -> size_t,
    >,
    pub write: ::core::option::Option<
        unsafe extern "C" fn(
            context: *mut SDL_RWops,
            ptr: *const ctypes::c_void,
            size: size_t,
            num: size_t,
        ) -> size_t,
    >,
    pub close:
        ::core::option::Option<unsafe extern "C" fn(context: *mut SDL_RWops) -> ctypes::c_int>,
    pub type_: Uint32,
    pub hidden: SDL_RWops__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union SDL_RWops__bindgen_ty_1 {
    pub stdio: SDL_RWops__bindgen_ty_1__bindgen_ty_1,
    pub mem: SDL_RWops__bindgen_ty_1__bindgen_ty_2,
    pub unknown: SDL_RWops__bindgen_ty_1__bindgen_ty_3,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SDL_RWops__bindgen_ty_1__bindgen_ty_1 {
    pub autoclose: SDL_bool,
    pub fp: *mut FILE,
}
#[test]
fn bindgen_test_layout_SDL_RWops__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<SDL_RWops__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(SDL_RWops__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_RWops__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(SDL_RWops__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SDL_RWops__bindgen_ty_1__bindgen_ty_1>())).autoclose as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RWops__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(autoclose)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SDL_RWops__bindgen_ty_1__bindgen_ty_1>())).fp as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RWops__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(fp)
        )
    );
}
impl Default for SDL_RWops__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SDL_RWops__bindgen_ty_1__bindgen_ty_2 {
    pub base: *mut Uint8,
    pub here: *mut Uint8,
    pub stop: *mut Uint8,
}
#[test]
fn bindgen_test_layout_SDL_RWops__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::core::mem::size_of::<SDL_RWops__bindgen_ty_1__bindgen_ty_2>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(SDL_RWops__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_RWops__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(SDL_RWops__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SDL_RWops__bindgen_ty_1__bindgen_ty_2>())).base as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RWops__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SDL_RWops__bindgen_ty_1__bindgen_ty_2>())).here as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RWops__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(here)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SDL_RWops__bindgen_ty_1__bindgen_ty_2>())).stop as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RWops__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(stop)
        )
    );
}
impl Default for SDL_RWops__bindgen_ty_1__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SDL_RWops__bindgen_ty_1__bindgen_ty_3 {
    pub data1: *mut ctypes::c_void,
    pub data2: *mut ctypes::c_void,
}
#[test]
fn bindgen_test_layout_SDL_RWops__bindgen_ty_1__bindgen_ty_3() {
    assert_eq!(
        ::core::mem::size_of::<SDL_RWops__bindgen_ty_1__bindgen_ty_3>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(SDL_RWops__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_RWops__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(SDL_RWops__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SDL_RWops__bindgen_ty_1__bindgen_ty_3>())).data1 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RWops__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(data1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SDL_RWops__bindgen_ty_1__bindgen_ty_3>())).data2 as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RWops__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(data2)
        )
    );
}
impl Default for SDL_RWops__bindgen_ty_1__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_SDL_RWops__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<SDL_RWops__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(SDL_RWops__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_RWops__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_RWops__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_RWops__bindgen_ty_1>())).stdio as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RWops__bindgen_ty_1),
            "::",
            stringify!(stdio)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_RWops__bindgen_ty_1>())).mem as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RWops__bindgen_ty_1),
            "::",
            stringify!(mem)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SDL_RWops__bindgen_ty_1>())).unknown as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RWops__bindgen_ty_1),
            "::",
            stringify!(unknown)
        )
    );
}
impl Default for SDL_RWops__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_SDL_RWops() {
    assert_eq!(
        ::core::mem::size_of::<SDL_RWops>(),
        72usize,
        concat!("Size of: ", stringify!(SDL_RWops))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_RWops>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_RWops))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_RWops>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RWops),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_RWops>())).seek as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RWops),
            "::",
            stringify!(seek)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_RWops>())).read as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RWops),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_RWops>())).write as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RWops),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_RWops>())).close as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RWops),
            "::",
            stringify!(close)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_RWops>())).type_ as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RWops),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_RWops>())).hidden as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RWops),
            "::",
            stringify!(hidden)
        )
    );
}
impl Default for SDL_RWops {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn SDL_RWFromFile(
        file: *const ctypes::c_char,
        mode: *const ctypes::c_char,
    ) -> *mut SDL_RWops;
}
extern "C" {
    pub fn SDL_RWFromFP(fp: *mut FILE, autoclose: SDL_bool) -> *mut SDL_RWops;
}
extern "C" {
    pub fn SDL_RWFromMem(mem: *mut ctypes::c_void, size: ctypes::c_int) -> *mut SDL_RWops;
}
extern "C" {
    pub fn SDL_RWFromConstMem(mem: *const ctypes::c_void, size: ctypes::c_int) -> *mut SDL_RWops;
}
extern "C" {
    pub fn SDL_AllocRW() -> *mut SDL_RWops;
}
extern "C" {
    pub fn SDL_FreeRW(area: *mut SDL_RWops);
}
extern "C" {
    pub fn SDL_RWsize(context: *mut SDL_RWops) -> Sint64;
}
extern "C" {
    pub fn SDL_RWseek(context: *mut SDL_RWops, offset: Sint64, whence: ctypes::c_int) -> Sint64;
}
extern "C" {
    pub fn SDL_RWtell(context: *mut SDL_RWops) -> Sint64;
}
extern "C" {
    pub fn SDL_RWread(
        context: *mut SDL_RWops,
        ptr: *mut ctypes::c_void,
        size: size_t,
        maxnum: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn SDL_RWwrite(
        context: *mut SDL_RWops,
        ptr: *const ctypes::c_void,
        size: size_t,
        num: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn SDL_RWclose(context: *mut SDL_RWops) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_LoadFile_RW(
        src: *mut SDL_RWops,
        datasize: *mut size_t,
        freesrc: ctypes::c_int,
    ) -> *mut ctypes::c_void;
}
extern "C" {
    pub fn SDL_LoadFile(file: *const ctypes::c_char, datasize: *mut size_t) -> *mut ctypes::c_void;
}
extern "C" {
    pub fn SDL_ReadU8(src: *mut SDL_RWops) -> Uint8;
}
extern "C" {
    pub fn SDL_ReadLE16(src: *mut SDL_RWops) -> Uint16;
}
extern "C" {
    pub fn SDL_ReadBE16(src: *mut SDL_RWops) -> Uint16;
}
extern "C" {
    pub fn SDL_ReadLE32(src: *mut SDL_RWops) -> Uint32;
}
extern "C" {
    pub fn SDL_ReadBE32(src: *mut SDL_RWops) -> Uint32;
}
extern "C" {
    pub fn SDL_ReadLE64(src: *mut SDL_RWops) -> Uint64;
}
extern "C" {
    pub fn SDL_ReadBE64(src: *mut SDL_RWops) -> Uint64;
}
extern "C" {
    pub fn SDL_WriteU8(dst: *mut SDL_RWops, value: Uint8) -> size_t;
}
extern "C" {
    pub fn SDL_WriteLE16(dst: *mut SDL_RWops, value: Uint16) -> size_t;
}
extern "C" {
    pub fn SDL_WriteBE16(dst: *mut SDL_RWops, value: Uint16) -> size_t;
}
extern "C" {
    pub fn SDL_WriteLE32(dst: *mut SDL_RWops, value: Uint32) -> size_t;
}
extern "C" {
    pub fn SDL_WriteBE32(dst: *mut SDL_RWops, value: Uint32) -> size_t;
}
extern "C" {
    pub fn SDL_WriteLE64(dst: *mut SDL_RWops, value: Uint64) -> size_t;
}
extern "C" {
    pub fn SDL_WriteBE64(dst: *mut SDL_RWops, value: Uint64) -> size_t;
}
pub type SDL_AudioFormat = Uint16;
pub type SDL_AudioCallback = ::core::option::Option<
    unsafe extern "C" fn(userdata: *mut ctypes::c_void, stream: *mut Uint8, len: ctypes::c_int),
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SDL_AudioSpec {
    pub freq: ctypes::c_int,
    pub format: SDL_AudioFormat,
    pub channels: Uint8,
    pub silence: Uint8,
    pub samples: Uint16,
    pub padding: Uint16,
    pub size: Uint32,
    pub callback: SDL_AudioCallback,
    pub userdata: *mut ctypes::c_void,
}
#[test]
fn bindgen_test_layout_SDL_AudioSpec() {
    assert_eq!(
        ::core::mem::size_of::<SDL_AudioSpec>(),
        32usize,
        concat!("Size of: ", stringify!(SDL_AudioSpec))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_AudioSpec>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_AudioSpec))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_AudioSpec>())).freq as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AudioSpec),
            "::",
            stringify!(freq)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_AudioSpec>())).format as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AudioSpec),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_AudioSpec>())).channels as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AudioSpec),
            "::",
            stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_AudioSpec>())).silence as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AudioSpec),
            "::",
            stringify!(silence)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_AudioSpec>())).samples as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AudioSpec),
            "::",
            stringify!(samples)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_AudioSpec>())).padding as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AudioSpec),
            "::",
            stringify!(padding)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_AudioSpec>())).size as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AudioSpec),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_AudioSpec>())).callback as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AudioSpec),
            "::",
            stringify!(callback)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_AudioSpec>())).userdata as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AudioSpec),
            "::",
            stringify!(userdata)
        )
    );
}
impl Default for SDL_AudioSpec {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SDL_AudioFilter =
    ::core::option::Option<unsafe extern "C" fn(cvt: *mut SDL_AudioCVT, format: SDL_AudioFormat)>;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct SDL_AudioCVT {
    pub needed: ctypes::c_int,
    pub src_format: SDL_AudioFormat,
    pub dst_format: SDL_AudioFormat,
    pub rate_incr: f64,
    pub buf: *mut Uint8,
    pub len: ctypes::c_int,
    pub len_cvt: ctypes::c_int,
    pub len_mult: ctypes::c_int,
    pub len_ratio: f64,
    pub filters: [SDL_AudioFilter; 10usize],
    pub filter_index: ctypes::c_int,
}
#[test]
fn bindgen_test_layout_SDL_AudioCVT() {
    assert_eq!(
        ::core::mem::size_of::<SDL_AudioCVT>(),
        128usize,
        concat!("Size of: ", stringify!(SDL_AudioCVT))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_AudioCVT>(),
        1usize,
        concat!("Alignment of ", stringify!(SDL_AudioCVT))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_AudioCVT>())).needed as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AudioCVT),
            "::",
            stringify!(needed)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_AudioCVT>())).src_format as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AudioCVT),
            "::",
            stringify!(src_format)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_AudioCVT>())).dst_format as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AudioCVT),
            "::",
            stringify!(dst_format)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_AudioCVT>())).rate_incr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AudioCVT),
            "::",
            stringify!(rate_incr)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_AudioCVT>())).buf as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AudioCVT),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_AudioCVT>())).len as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AudioCVT),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_AudioCVT>())).len_cvt as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AudioCVT),
            "::",
            stringify!(len_cvt)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_AudioCVT>())).len_mult as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AudioCVT),
            "::",
            stringify!(len_mult)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_AudioCVT>())).len_ratio as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AudioCVT),
            "::",
            stringify!(len_ratio)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_AudioCVT>())).filters as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AudioCVT),
            "::",
            stringify!(filters)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_AudioCVT>())).filter_index as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AudioCVT),
            "::",
            stringify!(filter_index)
        )
    );
}
impl Default for SDL_AudioCVT {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn SDL_GetNumAudioDrivers() -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_GetAudioDriver(index: ctypes::c_int) -> *const ctypes::c_char;
}
extern "C" {
    pub fn SDL_AudioInit(driver_name: *const ctypes::c_char) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_AudioQuit();
}
extern "C" {
    pub fn SDL_GetCurrentAudioDriver() -> *const ctypes::c_char;
}
extern "C" {
    pub fn SDL_OpenAudio(
        desired: *mut SDL_AudioSpec,
        obtained: *mut SDL_AudioSpec,
    ) -> ctypes::c_int;
}
pub type SDL_AudioDeviceID = Uint32;
extern "C" {
    pub fn SDL_GetNumAudioDevices(iscapture: ctypes::c_int) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_GetAudioDeviceName(
        index: ctypes::c_int,
        iscapture: ctypes::c_int,
    ) -> *const ctypes::c_char;
}
extern "C" {
    pub fn SDL_GetAudioDeviceSpec(
        index: ctypes::c_int,
        iscapture: ctypes::c_int,
        spec: *mut SDL_AudioSpec,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_OpenAudioDevice(
        device: *const ctypes::c_char,
        iscapture: ctypes::c_int,
        desired: *const SDL_AudioSpec,
        obtained: *mut SDL_AudioSpec,
        allowed_changes: ctypes::c_int,
    ) -> SDL_AudioDeviceID;
}
pub const SDL_AUDIO_STOPPED: SDL_AudioStatus = 0;
pub const SDL_AUDIO_PLAYING: SDL_AudioStatus = 1;
pub const SDL_AUDIO_PAUSED: SDL_AudioStatus = 2;
pub type SDL_AudioStatus = ctypes::c_uint;
extern "C" {
    pub fn SDL_GetAudioStatus() -> SDL_AudioStatus;
}
extern "C" {
    pub fn SDL_GetAudioDeviceStatus(dev: SDL_AudioDeviceID) -> SDL_AudioStatus;
}
extern "C" {
    pub fn SDL_PauseAudio(pause_on: ctypes::c_int);
}
extern "C" {
    pub fn SDL_PauseAudioDevice(dev: SDL_AudioDeviceID, pause_on: ctypes::c_int);
}
extern "C" {
    pub fn SDL_LoadWAV_RW(
        src: *mut SDL_RWops,
        freesrc: ctypes::c_int,
        spec: *mut SDL_AudioSpec,
        audio_buf: *mut *mut Uint8,
        audio_len: *mut Uint32,
    ) -> *mut SDL_AudioSpec;
}
extern "C" {
    pub fn SDL_FreeWAV(audio_buf: *mut Uint8);
}
extern "C" {
    pub fn SDL_BuildAudioCVT(
        cvt: *mut SDL_AudioCVT,
        src_format: SDL_AudioFormat,
        src_channels: Uint8,
        src_rate: ctypes::c_int,
        dst_format: SDL_AudioFormat,
        dst_channels: Uint8,
        dst_rate: ctypes::c_int,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_ConvertAudio(cvt: *mut SDL_AudioCVT) -> ctypes::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _SDL_AudioStream {
    _unused: [u8; 0],
}
pub type SDL_AudioStream = _SDL_AudioStream;
extern "C" {
    pub fn SDL_NewAudioStream(
        src_format: SDL_AudioFormat,
        src_channels: Uint8,
        src_rate: ctypes::c_int,
        dst_format: SDL_AudioFormat,
        dst_channels: Uint8,
        dst_rate: ctypes::c_int,
    ) -> *mut SDL_AudioStream;
}
extern "C" {
    pub fn SDL_AudioStreamPut(
        stream: *mut SDL_AudioStream,
        buf: *const ctypes::c_void,
        len: ctypes::c_int,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_AudioStreamGet(
        stream: *mut SDL_AudioStream,
        buf: *mut ctypes::c_void,
        len: ctypes::c_int,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_AudioStreamAvailable(stream: *mut SDL_AudioStream) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_AudioStreamFlush(stream: *mut SDL_AudioStream) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_AudioStreamClear(stream: *mut SDL_AudioStream);
}
extern "C" {
    pub fn SDL_FreeAudioStream(stream: *mut SDL_AudioStream);
}
extern "C" {
    pub fn SDL_MixAudio(dst: *mut Uint8, src: *const Uint8, len: Uint32, volume: ctypes::c_int);
}
extern "C" {
    pub fn SDL_MixAudioFormat(
        dst: *mut Uint8,
        src: *const Uint8,
        format: SDL_AudioFormat,
        len: Uint32,
        volume: ctypes::c_int,
    );
}
extern "C" {
    pub fn SDL_QueueAudio(
        dev: SDL_AudioDeviceID,
        data: *const ctypes::c_void,
        len: Uint32,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_DequeueAudio(
        dev: SDL_AudioDeviceID,
        data: *mut ctypes::c_void,
        len: Uint32,
    ) -> Uint32;
}
extern "C" {
    pub fn SDL_GetQueuedAudioSize(dev: SDL_AudioDeviceID) -> Uint32;
}
extern "C" {
    pub fn SDL_ClearQueuedAudio(dev: SDL_AudioDeviceID);
}
extern "C" {
    pub fn SDL_LockAudio();
}
extern "C" {
    pub fn SDL_LockAudioDevice(dev: SDL_AudioDeviceID);
}
extern "C" {
    pub fn SDL_UnlockAudio();
}
extern "C" {
    pub fn SDL_UnlockAudioDevice(dev: SDL_AudioDeviceID);
}
extern "C" {
    pub fn SDL_CloseAudio();
}
extern "C" {
    pub fn SDL_CloseAudioDevice(dev: SDL_AudioDeviceID);
}
extern "C" {
    pub fn SDL_SetClipboardText(text: *const ctypes::c_char) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_GetClipboardText() -> *mut ctypes::c_char;
}
extern "C" {
    pub fn SDL_HasClipboardText() -> SDL_bool;
}
pub type __m64 = [ctypes::c_longlong; 1usize];
pub type __v1di = [ctypes::c_longlong; 1usize];
pub type __v2si = [ctypes::c_int; 2usize];
pub type __v4hi = [ctypes::c_short; 4usize];
pub type __v8qi = [ctypes::c_char; 8usize];
pub type __v4si = [ctypes::c_int; 4usize];
pub type __v4sf = [f32; 4usize];
pub type __m128 = [f32; 4usize];
pub type __m128_u = [f32; 4usize];
pub type __v4su = [ctypes::c_uint; 4usize];
extern "C" {
    pub fn _mm_sfence();
}
extern "C" {
    pub fn _mm_getcsr() -> ctypes::c_uint;
}
extern "C" {
    pub fn _mm_setcsr(__i: ctypes::c_uint);
}
pub type __m128d = [f64; 2usize];
pub type __m128i = [ctypes::c_longlong; 2usize];
pub type __m128d_u = [f64; 2usize];
pub type __m128i_u = [ctypes::c_longlong; 2usize];
pub type __v2df = [f64; 2usize];
pub type __v2di = [ctypes::c_longlong; 2usize];
pub type __v8hi = [ctypes::c_short; 8usize];
pub type __v16qi = [ctypes::c_char; 16usize];
pub type __v2du = [ctypes::c_ulonglong; 2usize];
pub type __v8hu = [ctypes::c_ushort; 8usize];
pub type __v16qu = [ctypes::c_uchar; 16usize];
pub type __v16qs = [ctypes::c_schar; 16usize];
extern "C" {
    pub fn _mm_clflush(__p: *const ctypes::c_void);
}
extern "C" {
    pub fn _mm_lfence();
}
extern "C" {
    pub fn _mm_mfence();
}
extern "C" {
    pub fn _mm_pause();
}
pub type __v4df = [f64; 4usize];
pub type __v8sf = [f32; 8usize];
pub type __v4di = [ctypes::c_longlong; 4usize];
pub type __v8si = [ctypes::c_int; 8usize];
pub type __v16hi = [ctypes::c_short; 16usize];
pub type __v32qi = [ctypes::c_char; 32usize];
pub type __v4du = [ctypes::c_ulonglong; 4usize];
pub type __v8su = [ctypes::c_uint; 8usize];
pub type __v16hu = [ctypes::c_ushort; 16usize];
pub type __v32qu = [ctypes::c_uchar; 32usize];
pub type __v32qs = [ctypes::c_schar; 32usize];
pub type __m256 = [f32; 8usize];
pub type __m256d = [f64; 4usize];
pub type __m256i = [ctypes::c_longlong; 4usize];
pub type __m256_u = [f32; 8usize];
pub type __m256d_u = [f64; 4usize];
pub type __m256i_u = [ctypes::c_longlong; 4usize];
pub type __v64qi = [ctypes::c_char; 64usize];
pub type __v32hi = [ctypes::c_short; 32usize];
pub type __v8df = [f64; 8usize];
pub type __v16sf = [f32; 16usize];
pub type __v8di = [ctypes::c_longlong; 8usize];
pub type __v16si = [ctypes::c_int; 16usize];
pub type __v64qu = [ctypes::c_uchar; 64usize];
pub type __v32hu = [ctypes::c_ushort; 32usize];
pub type __v8du = [ctypes::c_ulonglong; 8usize];
pub type __v16su = [ctypes::c_uint; 16usize];
pub type __m512 = [f32; 16usize];
pub type __m512d = [f64; 8usize];
pub type __m512i = [ctypes::c_longlong; 8usize];
pub type __m512_u = [f32; 16usize];
pub type __m512d_u = [f64; 8usize];
pub type __m512i_u = [ctypes::c_longlong; 8usize];
pub type __mmask8 = ctypes::c_uchar;
pub type __mmask16 = ctypes::c_ushort;
pub const _MM_CMPINT_EQ: _MM_CMPINT_ENUM = 0;
pub const _MM_CMPINT_LT: _MM_CMPINT_ENUM = 1;
pub const _MM_CMPINT_LE: _MM_CMPINT_ENUM = 2;
pub const _MM_CMPINT_UNUSED: _MM_CMPINT_ENUM = 3;
pub const _MM_CMPINT_NE: _MM_CMPINT_ENUM = 4;
pub const _MM_CMPINT_NLT: _MM_CMPINT_ENUM = 5;
pub const _MM_CMPINT_NLE: _MM_CMPINT_ENUM = 6;
pub type _MM_CMPINT_ENUM = ctypes::c_uint;
pub const _MM_PERM_AAAA: _MM_PERM_ENUM = 0;
pub const _MM_PERM_AAAB: _MM_PERM_ENUM = 1;
pub const _MM_PERM_AAAC: _MM_PERM_ENUM = 2;
pub const _MM_PERM_AAAD: _MM_PERM_ENUM = 3;
pub const _MM_PERM_AABA: _MM_PERM_ENUM = 4;
pub const _MM_PERM_AABB: _MM_PERM_ENUM = 5;
pub const _MM_PERM_AABC: _MM_PERM_ENUM = 6;
pub const _MM_PERM_AABD: _MM_PERM_ENUM = 7;
pub const _MM_PERM_AACA: _MM_PERM_ENUM = 8;
pub const _MM_PERM_AACB: _MM_PERM_ENUM = 9;
pub const _MM_PERM_AACC: _MM_PERM_ENUM = 10;
pub const _MM_PERM_AACD: _MM_PERM_ENUM = 11;
pub const _MM_PERM_AADA: _MM_PERM_ENUM = 12;
pub const _MM_PERM_AADB: _MM_PERM_ENUM = 13;
pub const _MM_PERM_AADC: _MM_PERM_ENUM = 14;
pub const _MM_PERM_AADD: _MM_PERM_ENUM = 15;
pub const _MM_PERM_ABAA: _MM_PERM_ENUM = 16;
pub const _MM_PERM_ABAB: _MM_PERM_ENUM = 17;
pub const _MM_PERM_ABAC: _MM_PERM_ENUM = 18;
pub const _MM_PERM_ABAD: _MM_PERM_ENUM = 19;
pub const _MM_PERM_ABBA: _MM_PERM_ENUM = 20;
pub const _MM_PERM_ABBB: _MM_PERM_ENUM = 21;
pub const _MM_PERM_ABBC: _MM_PERM_ENUM = 22;
pub const _MM_PERM_ABBD: _MM_PERM_ENUM = 23;
pub const _MM_PERM_ABCA: _MM_PERM_ENUM = 24;
pub const _MM_PERM_ABCB: _MM_PERM_ENUM = 25;
pub const _MM_PERM_ABCC: _MM_PERM_ENUM = 26;
pub const _MM_PERM_ABCD: _MM_PERM_ENUM = 27;
pub const _MM_PERM_ABDA: _MM_PERM_ENUM = 28;
pub const _MM_PERM_ABDB: _MM_PERM_ENUM = 29;
pub const _MM_PERM_ABDC: _MM_PERM_ENUM = 30;
pub const _MM_PERM_ABDD: _MM_PERM_ENUM = 31;
pub const _MM_PERM_ACAA: _MM_PERM_ENUM = 32;
pub const _MM_PERM_ACAB: _MM_PERM_ENUM = 33;
pub const _MM_PERM_ACAC: _MM_PERM_ENUM = 34;
pub const _MM_PERM_ACAD: _MM_PERM_ENUM = 35;
pub const _MM_PERM_ACBA: _MM_PERM_ENUM = 36;
pub const _MM_PERM_ACBB: _MM_PERM_ENUM = 37;
pub const _MM_PERM_ACBC: _MM_PERM_ENUM = 38;
pub const _MM_PERM_ACBD: _MM_PERM_ENUM = 39;
pub const _MM_PERM_ACCA: _MM_PERM_ENUM = 40;
pub const _MM_PERM_ACCB: _MM_PERM_ENUM = 41;
pub const _MM_PERM_ACCC: _MM_PERM_ENUM = 42;
pub const _MM_PERM_ACCD: _MM_PERM_ENUM = 43;
pub const _MM_PERM_ACDA: _MM_PERM_ENUM = 44;
pub const _MM_PERM_ACDB: _MM_PERM_ENUM = 45;
pub const _MM_PERM_ACDC: _MM_PERM_ENUM = 46;
pub const _MM_PERM_ACDD: _MM_PERM_ENUM = 47;
pub const _MM_PERM_ADAA: _MM_PERM_ENUM = 48;
pub const _MM_PERM_ADAB: _MM_PERM_ENUM = 49;
pub const _MM_PERM_ADAC: _MM_PERM_ENUM = 50;
pub const _MM_PERM_ADAD: _MM_PERM_ENUM = 51;
pub const _MM_PERM_ADBA: _MM_PERM_ENUM = 52;
pub const _MM_PERM_ADBB: _MM_PERM_ENUM = 53;
pub const _MM_PERM_ADBC: _MM_PERM_ENUM = 54;
pub const _MM_PERM_ADBD: _MM_PERM_ENUM = 55;
pub const _MM_PERM_ADCA: _MM_PERM_ENUM = 56;
pub const _MM_PERM_ADCB: _MM_PERM_ENUM = 57;
pub const _MM_PERM_ADCC: _MM_PERM_ENUM = 58;
pub const _MM_PERM_ADCD: _MM_PERM_ENUM = 59;
pub const _MM_PERM_ADDA: _MM_PERM_ENUM = 60;
pub const _MM_PERM_ADDB: _MM_PERM_ENUM = 61;
pub const _MM_PERM_ADDC: _MM_PERM_ENUM = 62;
pub const _MM_PERM_ADDD: _MM_PERM_ENUM = 63;
pub const _MM_PERM_BAAA: _MM_PERM_ENUM = 64;
pub const _MM_PERM_BAAB: _MM_PERM_ENUM = 65;
pub const _MM_PERM_BAAC: _MM_PERM_ENUM = 66;
pub const _MM_PERM_BAAD: _MM_PERM_ENUM = 67;
pub const _MM_PERM_BABA: _MM_PERM_ENUM = 68;
pub const _MM_PERM_BABB: _MM_PERM_ENUM = 69;
pub const _MM_PERM_BABC: _MM_PERM_ENUM = 70;
pub const _MM_PERM_BABD: _MM_PERM_ENUM = 71;
pub const _MM_PERM_BACA: _MM_PERM_ENUM = 72;
pub const _MM_PERM_BACB: _MM_PERM_ENUM = 73;
pub const _MM_PERM_BACC: _MM_PERM_ENUM = 74;
pub const _MM_PERM_BACD: _MM_PERM_ENUM = 75;
pub const _MM_PERM_BADA: _MM_PERM_ENUM = 76;
pub const _MM_PERM_BADB: _MM_PERM_ENUM = 77;
pub const _MM_PERM_BADC: _MM_PERM_ENUM = 78;
pub const _MM_PERM_BADD: _MM_PERM_ENUM = 79;
pub const _MM_PERM_BBAA: _MM_PERM_ENUM = 80;
pub const _MM_PERM_BBAB: _MM_PERM_ENUM = 81;
pub const _MM_PERM_BBAC: _MM_PERM_ENUM = 82;
pub const _MM_PERM_BBAD: _MM_PERM_ENUM = 83;
pub const _MM_PERM_BBBA: _MM_PERM_ENUM = 84;
pub const _MM_PERM_BBBB: _MM_PERM_ENUM = 85;
pub const _MM_PERM_BBBC: _MM_PERM_ENUM = 86;
pub const _MM_PERM_BBBD: _MM_PERM_ENUM = 87;
pub const _MM_PERM_BBCA: _MM_PERM_ENUM = 88;
pub const _MM_PERM_BBCB: _MM_PERM_ENUM = 89;
pub const _MM_PERM_BBCC: _MM_PERM_ENUM = 90;
pub const _MM_PERM_BBCD: _MM_PERM_ENUM = 91;
pub const _MM_PERM_BBDA: _MM_PERM_ENUM = 92;
pub const _MM_PERM_BBDB: _MM_PERM_ENUM = 93;
pub const _MM_PERM_BBDC: _MM_PERM_ENUM = 94;
pub const _MM_PERM_BBDD: _MM_PERM_ENUM = 95;
pub const _MM_PERM_BCAA: _MM_PERM_ENUM = 96;
pub const _MM_PERM_BCAB: _MM_PERM_ENUM = 97;
pub const _MM_PERM_BCAC: _MM_PERM_ENUM = 98;
pub const _MM_PERM_BCAD: _MM_PERM_ENUM = 99;
pub const _MM_PERM_BCBA: _MM_PERM_ENUM = 100;
pub const _MM_PERM_BCBB: _MM_PERM_ENUM = 101;
pub const _MM_PERM_BCBC: _MM_PERM_ENUM = 102;
pub const _MM_PERM_BCBD: _MM_PERM_ENUM = 103;
pub const _MM_PERM_BCCA: _MM_PERM_ENUM = 104;
pub const _MM_PERM_BCCB: _MM_PERM_ENUM = 105;
pub const _MM_PERM_BCCC: _MM_PERM_ENUM = 106;
pub const _MM_PERM_BCCD: _MM_PERM_ENUM = 107;
pub const _MM_PERM_BCDA: _MM_PERM_ENUM = 108;
pub const _MM_PERM_BCDB: _MM_PERM_ENUM = 109;
pub const _MM_PERM_BCDC: _MM_PERM_ENUM = 110;
pub const _MM_PERM_BCDD: _MM_PERM_ENUM = 111;
pub const _MM_PERM_BDAA: _MM_PERM_ENUM = 112;
pub const _MM_PERM_BDAB: _MM_PERM_ENUM = 113;
pub const _MM_PERM_BDAC: _MM_PERM_ENUM = 114;
pub const _MM_PERM_BDAD: _MM_PERM_ENUM = 115;
pub const _MM_PERM_BDBA: _MM_PERM_ENUM = 116;
pub const _MM_PERM_BDBB: _MM_PERM_ENUM = 117;
pub const _MM_PERM_BDBC: _MM_PERM_ENUM = 118;
pub const _MM_PERM_BDBD: _MM_PERM_ENUM = 119;
pub const _MM_PERM_BDCA: _MM_PERM_ENUM = 120;
pub const _MM_PERM_BDCB: _MM_PERM_ENUM = 121;
pub const _MM_PERM_BDCC: _MM_PERM_ENUM = 122;
pub const _MM_PERM_BDCD: _MM_PERM_ENUM = 123;
pub const _MM_PERM_BDDA: _MM_PERM_ENUM = 124;
pub const _MM_PERM_BDDB: _MM_PERM_ENUM = 125;
pub const _MM_PERM_BDDC: _MM_PERM_ENUM = 126;
pub const _MM_PERM_BDDD: _MM_PERM_ENUM = 127;
pub const _MM_PERM_CAAA: _MM_PERM_ENUM = 128;
pub const _MM_PERM_CAAB: _MM_PERM_ENUM = 129;
pub const _MM_PERM_CAAC: _MM_PERM_ENUM = 130;
pub const _MM_PERM_CAAD: _MM_PERM_ENUM = 131;
pub const _MM_PERM_CABA: _MM_PERM_ENUM = 132;
pub const _MM_PERM_CABB: _MM_PERM_ENUM = 133;
pub const _MM_PERM_CABC: _MM_PERM_ENUM = 134;
pub const _MM_PERM_CABD: _MM_PERM_ENUM = 135;
pub const _MM_PERM_CACA: _MM_PERM_ENUM = 136;
pub const _MM_PERM_CACB: _MM_PERM_ENUM = 137;
pub const _MM_PERM_CACC: _MM_PERM_ENUM = 138;
pub const _MM_PERM_CACD: _MM_PERM_ENUM = 139;
pub const _MM_PERM_CADA: _MM_PERM_ENUM = 140;
pub const _MM_PERM_CADB: _MM_PERM_ENUM = 141;
pub const _MM_PERM_CADC: _MM_PERM_ENUM = 142;
pub const _MM_PERM_CADD: _MM_PERM_ENUM = 143;
pub const _MM_PERM_CBAA: _MM_PERM_ENUM = 144;
pub const _MM_PERM_CBAB: _MM_PERM_ENUM = 145;
pub const _MM_PERM_CBAC: _MM_PERM_ENUM = 146;
pub const _MM_PERM_CBAD: _MM_PERM_ENUM = 147;
pub const _MM_PERM_CBBA: _MM_PERM_ENUM = 148;
pub const _MM_PERM_CBBB: _MM_PERM_ENUM = 149;
pub const _MM_PERM_CBBC: _MM_PERM_ENUM = 150;
pub const _MM_PERM_CBBD: _MM_PERM_ENUM = 151;
pub const _MM_PERM_CBCA: _MM_PERM_ENUM = 152;
pub const _MM_PERM_CBCB: _MM_PERM_ENUM = 153;
pub const _MM_PERM_CBCC: _MM_PERM_ENUM = 154;
pub const _MM_PERM_CBCD: _MM_PERM_ENUM = 155;
pub const _MM_PERM_CBDA: _MM_PERM_ENUM = 156;
pub const _MM_PERM_CBDB: _MM_PERM_ENUM = 157;
pub const _MM_PERM_CBDC: _MM_PERM_ENUM = 158;
pub const _MM_PERM_CBDD: _MM_PERM_ENUM = 159;
pub const _MM_PERM_CCAA: _MM_PERM_ENUM = 160;
pub const _MM_PERM_CCAB: _MM_PERM_ENUM = 161;
pub const _MM_PERM_CCAC: _MM_PERM_ENUM = 162;
pub const _MM_PERM_CCAD: _MM_PERM_ENUM = 163;
pub const _MM_PERM_CCBA: _MM_PERM_ENUM = 164;
pub const _MM_PERM_CCBB: _MM_PERM_ENUM = 165;
pub const _MM_PERM_CCBC: _MM_PERM_ENUM = 166;
pub const _MM_PERM_CCBD: _MM_PERM_ENUM = 167;
pub const _MM_PERM_CCCA: _MM_PERM_ENUM = 168;
pub const _MM_PERM_CCCB: _MM_PERM_ENUM = 169;
pub const _MM_PERM_CCCC: _MM_PERM_ENUM = 170;
pub const _MM_PERM_CCCD: _MM_PERM_ENUM = 171;
pub const _MM_PERM_CCDA: _MM_PERM_ENUM = 172;
pub const _MM_PERM_CCDB: _MM_PERM_ENUM = 173;
pub const _MM_PERM_CCDC: _MM_PERM_ENUM = 174;
pub const _MM_PERM_CCDD: _MM_PERM_ENUM = 175;
pub const _MM_PERM_CDAA: _MM_PERM_ENUM = 176;
pub const _MM_PERM_CDAB: _MM_PERM_ENUM = 177;
pub const _MM_PERM_CDAC: _MM_PERM_ENUM = 178;
pub const _MM_PERM_CDAD: _MM_PERM_ENUM = 179;
pub const _MM_PERM_CDBA: _MM_PERM_ENUM = 180;
pub const _MM_PERM_CDBB: _MM_PERM_ENUM = 181;
pub const _MM_PERM_CDBC: _MM_PERM_ENUM = 182;
pub const _MM_PERM_CDBD: _MM_PERM_ENUM = 183;
pub const _MM_PERM_CDCA: _MM_PERM_ENUM = 184;
pub const _MM_PERM_CDCB: _MM_PERM_ENUM = 185;
pub const _MM_PERM_CDCC: _MM_PERM_ENUM = 186;
pub const _MM_PERM_CDCD: _MM_PERM_ENUM = 187;
pub const _MM_PERM_CDDA: _MM_PERM_ENUM = 188;
pub const _MM_PERM_CDDB: _MM_PERM_ENUM = 189;
pub const _MM_PERM_CDDC: _MM_PERM_ENUM = 190;
pub const _MM_PERM_CDDD: _MM_PERM_ENUM = 191;
pub const _MM_PERM_DAAA: _MM_PERM_ENUM = 192;
pub const _MM_PERM_DAAB: _MM_PERM_ENUM = 193;
pub const _MM_PERM_DAAC: _MM_PERM_ENUM = 194;
pub const _MM_PERM_DAAD: _MM_PERM_ENUM = 195;
pub const _MM_PERM_DABA: _MM_PERM_ENUM = 196;
pub const _MM_PERM_DABB: _MM_PERM_ENUM = 197;
pub const _MM_PERM_DABC: _MM_PERM_ENUM = 198;
pub const _MM_PERM_DABD: _MM_PERM_ENUM = 199;
pub const _MM_PERM_DACA: _MM_PERM_ENUM = 200;
pub const _MM_PERM_DACB: _MM_PERM_ENUM = 201;
pub const _MM_PERM_DACC: _MM_PERM_ENUM = 202;
pub const _MM_PERM_DACD: _MM_PERM_ENUM = 203;
pub const _MM_PERM_DADA: _MM_PERM_ENUM = 204;
pub const _MM_PERM_DADB: _MM_PERM_ENUM = 205;
pub const _MM_PERM_DADC: _MM_PERM_ENUM = 206;
pub const _MM_PERM_DADD: _MM_PERM_ENUM = 207;
pub const _MM_PERM_DBAA: _MM_PERM_ENUM = 208;
pub const _MM_PERM_DBAB: _MM_PERM_ENUM = 209;
pub const _MM_PERM_DBAC: _MM_PERM_ENUM = 210;
pub const _MM_PERM_DBAD: _MM_PERM_ENUM = 211;
pub const _MM_PERM_DBBA: _MM_PERM_ENUM = 212;
pub const _MM_PERM_DBBB: _MM_PERM_ENUM = 213;
pub const _MM_PERM_DBBC: _MM_PERM_ENUM = 214;
pub const _MM_PERM_DBBD: _MM_PERM_ENUM = 215;
pub const _MM_PERM_DBCA: _MM_PERM_ENUM = 216;
pub const _MM_PERM_DBCB: _MM_PERM_ENUM = 217;
pub const _MM_PERM_DBCC: _MM_PERM_ENUM = 218;
pub const _MM_PERM_DBCD: _MM_PERM_ENUM = 219;
pub const _MM_PERM_DBDA: _MM_PERM_ENUM = 220;
pub const _MM_PERM_DBDB: _MM_PERM_ENUM = 221;
pub const _MM_PERM_DBDC: _MM_PERM_ENUM = 222;
pub const _MM_PERM_DBDD: _MM_PERM_ENUM = 223;
pub const _MM_PERM_DCAA: _MM_PERM_ENUM = 224;
pub const _MM_PERM_DCAB: _MM_PERM_ENUM = 225;
pub const _MM_PERM_DCAC: _MM_PERM_ENUM = 226;
pub const _MM_PERM_DCAD: _MM_PERM_ENUM = 227;
pub const _MM_PERM_DCBA: _MM_PERM_ENUM = 228;
pub const _MM_PERM_DCBB: _MM_PERM_ENUM = 229;
pub const _MM_PERM_DCBC: _MM_PERM_ENUM = 230;
pub const _MM_PERM_DCBD: _MM_PERM_ENUM = 231;
pub const _MM_PERM_DCCA: _MM_PERM_ENUM = 232;
pub const _MM_PERM_DCCB: _MM_PERM_ENUM = 233;
pub const _MM_PERM_DCCC: _MM_PERM_ENUM = 234;
pub const _MM_PERM_DCCD: _MM_PERM_ENUM = 235;
pub const _MM_PERM_DCDA: _MM_PERM_ENUM = 236;
pub const _MM_PERM_DCDB: _MM_PERM_ENUM = 237;
pub const _MM_PERM_DCDC: _MM_PERM_ENUM = 238;
pub const _MM_PERM_DCDD: _MM_PERM_ENUM = 239;
pub const _MM_PERM_DDAA: _MM_PERM_ENUM = 240;
pub const _MM_PERM_DDAB: _MM_PERM_ENUM = 241;
pub const _MM_PERM_DDAC: _MM_PERM_ENUM = 242;
pub const _MM_PERM_DDAD: _MM_PERM_ENUM = 243;
pub const _MM_PERM_DDBA: _MM_PERM_ENUM = 244;
pub const _MM_PERM_DDBB: _MM_PERM_ENUM = 245;
pub const _MM_PERM_DDBC: _MM_PERM_ENUM = 246;
pub const _MM_PERM_DDBD: _MM_PERM_ENUM = 247;
pub const _MM_PERM_DDCA: _MM_PERM_ENUM = 248;
pub const _MM_PERM_DDCB: _MM_PERM_ENUM = 249;
pub const _MM_PERM_DDCC: _MM_PERM_ENUM = 250;
pub const _MM_PERM_DDCD: _MM_PERM_ENUM = 251;
pub const _MM_PERM_DDDA: _MM_PERM_ENUM = 252;
pub const _MM_PERM_DDDB: _MM_PERM_ENUM = 253;
pub const _MM_PERM_DDDC: _MM_PERM_ENUM = 254;
pub const _MM_PERM_DDDD: _MM_PERM_ENUM = 255;
pub type _MM_PERM_ENUM = ctypes::c_uint;
pub const _MM_MANT_NORM_1_2: _MM_MANTISSA_NORM_ENUM = 0;
pub const _MM_MANT_NORM_p5_2: _MM_MANTISSA_NORM_ENUM = 1;
pub const _MM_MANT_NORM_p5_1: _MM_MANTISSA_NORM_ENUM = 2;
pub const _MM_MANT_NORM_p75_1p5: _MM_MANTISSA_NORM_ENUM = 3;
pub type _MM_MANTISSA_NORM_ENUM = ctypes::c_uint;
pub const _MM_MANT_SIGN_src: _MM_MANTISSA_SIGN_ENUM = 0;
pub const _MM_MANT_SIGN_zero: _MM_MANTISSA_SIGN_ENUM = 1;
pub const _MM_MANT_SIGN_nan: _MM_MANTISSA_SIGN_ENUM = 2;
pub type _MM_MANTISSA_SIGN_ENUM = ctypes::c_uint;
pub type __v2hi = [ctypes::c_short; 2usize];
pub type __v4qi = [ctypes::c_char; 4usize];
pub type __v2qi = [ctypes::c_char; 2usize];
pub type __mmask32 = ctypes::c_uint;
pub type __mmask64 = ctypes::c_ulonglong;
pub type __m512bh = [ctypes::c_short; 32usize];
pub type __m256bh = [ctypes::c_short; 16usize];
pub type __bfloat16 = ctypes::c_ushort;
pub type __m128bh = [ctypes::c_short; 8usize];
pub type _tile1024i = [ctypes::c_int; 256usize];
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub struct __tile1024i_str {
    pub row: ctypes::c_ushort,
    pub col: ctypes::c_ushort,
    pub __bindgen_padding_0: [u64; 7usize],
    pub tile: _tile1024i,
}
#[test]
fn bindgen_test_layout___tile1024i_str() {
    assert_eq!(
        ::core::mem::size_of::<__tile1024i_str>(),
        1088usize,
        concat!("Size of: ", stringify!(__tile1024i_str))
    );
    assert_eq!(
        ::core::mem::align_of::<__tile1024i_str>(),
        64usize,
        concat!("Alignment of ", stringify!(__tile1024i_str))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__tile1024i_str>())).row as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__tile1024i_str),
            "::",
            stringify!(row)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__tile1024i_str>())).col as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__tile1024i_str),
            "::",
            stringify!(col)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__tile1024i_str>())).tile as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__tile1024i_str),
            "::",
            stringify!(tile)
        )
    );
}
impl Default for __tile1024i_str {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type __tile1024i = __tile1024i_str;
extern "C" {
    pub fn SDL_GetCPUCount() -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_GetCPUCacheLineSize() -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_HasRDTSC() -> SDL_bool;
}
extern "C" {
    pub fn SDL_HasAltiVec() -> SDL_bool;
}
extern "C" {
    pub fn SDL_HasMMX() -> SDL_bool;
}
extern "C" {
    pub fn SDL_Has3DNow() -> SDL_bool;
}
extern "C" {
    pub fn SDL_HasSSE() -> SDL_bool;
}
extern "C" {
    pub fn SDL_HasSSE2() -> SDL_bool;
}
extern "C" {
    pub fn SDL_HasSSE3() -> SDL_bool;
}
extern "C" {
    pub fn SDL_HasSSE41() -> SDL_bool;
}
extern "C" {
    pub fn SDL_HasSSE42() -> SDL_bool;
}
extern "C" {
    pub fn SDL_HasAVX() -> SDL_bool;
}
extern "C" {
    pub fn SDL_HasAVX2() -> SDL_bool;
}
extern "C" {
    pub fn SDL_HasAVX512F() -> SDL_bool;
}
extern "C" {
    pub fn SDL_HasARMSIMD() -> SDL_bool;
}
extern "C" {
    pub fn SDL_HasNEON() -> SDL_bool;
}
extern "C" {
    pub fn SDL_GetSystemRAM() -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_SIMDGetAlignment() -> size_t;
}
extern "C" {
    pub fn SDL_SIMDAlloc(len: size_t) -> *mut ctypes::c_void;
}
extern "C" {
    pub fn SDL_SIMDRealloc(mem: *mut ctypes::c_void, len: size_t) -> *mut ctypes::c_void;
}
extern "C" {
    pub fn SDL_SIMDFree(ptr: *mut ctypes::c_void);
}
pub const SDL_PIXELTYPE_UNKNOWN: SDL_PixelType = 0;
pub const SDL_PIXELTYPE_INDEX1: SDL_PixelType = 1;
pub const SDL_PIXELTYPE_INDEX4: SDL_PixelType = 2;
pub const SDL_PIXELTYPE_INDEX8: SDL_PixelType = 3;
pub const SDL_PIXELTYPE_PACKED8: SDL_PixelType = 4;
pub const SDL_PIXELTYPE_PACKED16: SDL_PixelType = 5;
pub const SDL_PIXELTYPE_PACKED32: SDL_PixelType = 6;
pub const SDL_PIXELTYPE_ARRAYU8: SDL_PixelType = 7;
pub const SDL_PIXELTYPE_ARRAYU16: SDL_PixelType = 8;
pub const SDL_PIXELTYPE_ARRAYU32: SDL_PixelType = 9;
pub const SDL_PIXELTYPE_ARRAYF16: SDL_PixelType = 10;
pub const SDL_PIXELTYPE_ARRAYF32: SDL_PixelType = 11;
pub type SDL_PixelType = ctypes::c_uint;
pub const SDL_BITMAPORDER_NONE: SDL_BitmapOrder = 0;
pub const SDL_BITMAPORDER_4321: SDL_BitmapOrder = 1;
pub const SDL_BITMAPORDER_1234: SDL_BitmapOrder = 2;
pub type SDL_BitmapOrder = ctypes::c_uint;
pub const SDL_PACKEDORDER_NONE: SDL_PackedOrder = 0;
pub const SDL_PACKEDORDER_XRGB: SDL_PackedOrder = 1;
pub const SDL_PACKEDORDER_RGBX: SDL_PackedOrder = 2;
pub const SDL_PACKEDORDER_ARGB: SDL_PackedOrder = 3;
pub const SDL_PACKEDORDER_RGBA: SDL_PackedOrder = 4;
pub const SDL_PACKEDORDER_XBGR: SDL_PackedOrder = 5;
pub const SDL_PACKEDORDER_BGRX: SDL_PackedOrder = 6;
pub const SDL_PACKEDORDER_ABGR: SDL_PackedOrder = 7;
pub const SDL_PACKEDORDER_BGRA: SDL_PackedOrder = 8;
pub type SDL_PackedOrder = ctypes::c_uint;
pub const SDL_ARRAYORDER_NONE: SDL_ArrayOrder = 0;
pub const SDL_ARRAYORDER_RGB: SDL_ArrayOrder = 1;
pub const SDL_ARRAYORDER_RGBA: SDL_ArrayOrder = 2;
pub const SDL_ARRAYORDER_ARGB: SDL_ArrayOrder = 3;
pub const SDL_ARRAYORDER_BGR: SDL_ArrayOrder = 4;
pub const SDL_ARRAYORDER_BGRA: SDL_ArrayOrder = 5;
pub const SDL_ARRAYORDER_ABGR: SDL_ArrayOrder = 6;
pub type SDL_ArrayOrder = ctypes::c_uint;
pub const SDL_PACKEDLAYOUT_NONE: SDL_PackedLayout = 0;
pub const SDL_PACKEDLAYOUT_332: SDL_PackedLayout = 1;
pub const SDL_PACKEDLAYOUT_4444: SDL_PackedLayout = 2;
pub const SDL_PACKEDLAYOUT_1555: SDL_PackedLayout = 3;
pub const SDL_PACKEDLAYOUT_5551: SDL_PackedLayout = 4;
pub const SDL_PACKEDLAYOUT_565: SDL_PackedLayout = 5;
pub const SDL_PACKEDLAYOUT_8888: SDL_PackedLayout = 6;
pub const SDL_PACKEDLAYOUT_2101010: SDL_PackedLayout = 7;
pub const SDL_PACKEDLAYOUT_1010102: SDL_PackedLayout = 8;
pub type SDL_PackedLayout = ctypes::c_uint;
pub const SDL_PIXELFORMAT_UNKNOWN: SDL_PixelFormatEnum = 0;
pub const SDL_PIXELFORMAT_INDEX1LSB: SDL_PixelFormatEnum = 286261504;
pub const SDL_PIXELFORMAT_INDEX1MSB: SDL_PixelFormatEnum = 287310080;
pub const SDL_PIXELFORMAT_INDEX4LSB: SDL_PixelFormatEnum = 303039488;
pub const SDL_PIXELFORMAT_INDEX4MSB: SDL_PixelFormatEnum = 304088064;
pub const SDL_PIXELFORMAT_INDEX8: SDL_PixelFormatEnum = 318769153;
pub const SDL_PIXELFORMAT_RGB332: SDL_PixelFormatEnum = 336660481;
pub const SDL_PIXELFORMAT_XRGB4444: SDL_PixelFormatEnum = 353504258;
pub const SDL_PIXELFORMAT_RGB444: SDL_PixelFormatEnum = 353504258;
pub const SDL_PIXELFORMAT_XBGR4444: SDL_PixelFormatEnum = 357698562;
pub const SDL_PIXELFORMAT_BGR444: SDL_PixelFormatEnum = 357698562;
pub const SDL_PIXELFORMAT_XRGB1555: SDL_PixelFormatEnum = 353570562;
pub const SDL_PIXELFORMAT_RGB555: SDL_PixelFormatEnum = 353570562;
pub const SDL_PIXELFORMAT_XBGR1555: SDL_PixelFormatEnum = 357764866;
pub const SDL_PIXELFORMAT_BGR555: SDL_PixelFormatEnum = 357764866;
pub const SDL_PIXELFORMAT_ARGB4444: SDL_PixelFormatEnum = 355602434;
pub const SDL_PIXELFORMAT_RGBA4444: SDL_PixelFormatEnum = 356651010;
pub const SDL_PIXELFORMAT_ABGR4444: SDL_PixelFormatEnum = 359796738;
pub const SDL_PIXELFORMAT_BGRA4444: SDL_PixelFormatEnum = 360845314;
pub const SDL_PIXELFORMAT_ARGB1555: SDL_PixelFormatEnum = 355667970;
pub const SDL_PIXELFORMAT_RGBA5551: SDL_PixelFormatEnum = 356782082;
pub const SDL_PIXELFORMAT_ABGR1555: SDL_PixelFormatEnum = 359862274;
pub const SDL_PIXELFORMAT_BGRA5551: SDL_PixelFormatEnum = 360976386;
pub const SDL_PIXELFORMAT_RGB565: SDL_PixelFormatEnum = 353701890;
pub const SDL_PIXELFORMAT_BGR565: SDL_PixelFormatEnum = 357896194;
pub const SDL_PIXELFORMAT_RGB24: SDL_PixelFormatEnum = 386930691;
pub const SDL_PIXELFORMAT_BGR24: SDL_PixelFormatEnum = 390076419;
pub const SDL_PIXELFORMAT_XRGB8888: SDL_PixelFormatEnum = 370546692;
pub const SDL_PIXELFORMAT_RGB888: SDL_PixelFormatEnum = 370546692;
pub const SDL_PIXELFORMAT_RGBX8888: SDL_PixelFormatEnum = 371595268;
pub const SDL_PIXELFORMAT_XBGR8888: SDL_PixelFormatEnum = 374740996;
pub const SDL_PIXELFORMAT_BGR888: SDL_PixelFormatEnum = 374740996;
pub const SDL_PIXELFORMAT_BGRX8888: SDL_PixelFormatEnum = 375789572;
pub const SDL_PIXELFORMAT_ARGB8888: SDL_PixelFormatEnum = 372645892;
pub const SDL_PIXELFORMAT_RGBA8888: SDL_PixelFormatEnum = 373694468;
pub const SDL_PIXELFORMAT_ABGR8888: SDL_PixelFormatEnum = 376840196;
pub const SDL_PIXELFORMAT_BGRA8888: SDL_PixelFormatEnum = 377888772;
pub const SDL_PIXELFORMAT_ARGB2101010: SDL_PixelFormatEnum = 372711428;
pub const SDL_PIXELFORMAT_RGBA32: SDL_PixelFormatEnum = 376840196;
pub const SDL_PIXELFORMAT_ARGB32: SDL_PixelFormatEnum = 377888772;
pub const SDL_PIXELFORMAT_BGRA32: SDL_PixelFormatEnum = 372645892;
pub const SDL_PIXELFORMAT_ABGR32: SDL_PixelFormatEnum = 373694468;
pub const SDL_PIXELFORMAT_YV12: SDL_PixelFormatEnum = 842094169;
pub const SDL_PIXELFORMAT_IYUV: SDL_PixelFormatEnum = 1448433993;
pub const SDL_PIXELFORMAT_YUY2: SDL_PixelFormatEnum = 844715353;
pub const SDL_PIXELFORMAT_UYVY: SDL_PixelFormatEnum = 1498831189;
pub const SDL_PIXELFORMAT_YVYU: SDL_PixelFormatEnum = 1431918169;
pub const SDL_PIXELFORMAT_NV12: SDL_PixelFormatEnum = 842094158;
pub const SDL_PIXELFORMAT_NV21: SDL_PixelFormatEnum = 825382478;
pub const SDL_PIXELFORMAT_EXTERNAL_OES: SDL_PixelFormatEnum = 542328143;
pub type SDL_PixelFormatEnum = ctypes::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct SDL_Color {
    pub r: Uint8,
    pub g: Uint8,
    pub b: Uint8,
    pub a: Uint8,
}
#[test]
fn bindgen_test_layout_SDL_Color() {
    assert_eq!(
        ::core::mem::size_of::<SDL_Color>(),
        4usize,
        concat!("Size of: ", stringify!(SDL_Color))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_Color>(),
        1usize,
        concat!("Alignment of ", stringify!(SDL_Color))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Color>())).r as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Color),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Color>())).g as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Color),
            "::",
            stringify!(g)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Color>())).b as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Color),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Color>())).a as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Color),
            "::",
            stringify!(a)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SDL_Palette {
    pub ncolors: ctypes::c_int,
    pub colors: *mut SDL_Color,
    pub version: Uint32,
    pub refcount: ctypes::c_int,
}
#[test]
fn bindgen_test_layout_SDL_Palette() {
    assert_eq!(
        ::core::mem::size_of::<SDL_Palette>(),
        24usize,
        concat!("Size of: ", stringify!(SDL_Palette))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_Palette>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_Palette))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Palette>())).ncolors as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Palette),
            "::",
            stringify!(ncolors)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Palette>())).colors as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Palette),
            "::",
            stringify!(colors)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Palette>())).version as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Palette),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Palette>())).refcount as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Palette),
            "::",
            stringify!(refcount)
        )
    );
}
impl Default for SDL_Palette {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SDL_PixelFormat {
    pub format: Uint32,
    pub palette: *mut SDL_Palette,
    pub BitsPerPixel: Uint8,
    pub BytesPerPixel: Uint8,
    pub padding: [Uint8; 2usize],
    pub Rmask: Uint32,
    pub Gmask: Uint32,
    pub Bmask: Uint32,
    pub Amask: Uint32,
    pub Rloss: Uint8,
    pub Gloss: Uint8,
    pub Bloss: Uint8,
    pub Aloss: Uint8,
    pub Rshift: Uint8,
    pub Gshift: Uint8,
    pub Bshift: Uint8,
    pub Ashift: Uint8,
    pub refcount: ctypes::c_int,
    pub next: *mut SDL_PixelFormat,
}
#[test]
fn bindgen_test_layout_SDL_PixelFormat() {
    assert_eq!(
        ::core::mem::size_of::<SDL_PixelFormat>(),
        56usize,
        concat!("Size of: ", stringify!(SDL_PixelFormat))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_PixelFormat>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_PixelFormat))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_PixelFormat>())).format as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_PixelFormat),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_PixelFormat>())).palette as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_PixelFormat),
            "::",
            stringify!(palette)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_PixelFormat>())).BitsPerPixel as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_PixelFormat),
            "::",
            stringify!(BitsPerPixel)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_PixelFormat>())).BytesPerPixel as *const _ as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_PixelFormat),
            "::",
            stringify!(BytesPerPixel)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_PixelFormat>())).padding as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_PixelFormat),
            "::",
            stringify!(padding)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_PixelFormat>())).Rmask as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_PixelFormat),
            "::",
            stringify!(Rmask)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_PixelFormat>())).Gmask as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_PixelFormat),
            "::",
            stringify!(Gmask)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_PixelFormat>())).Bmask as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_PixelFormat),
            "::",
            stringify!(Bmask)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_PixelFormat>())).Amask as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_PixelFormat),
            "::",
            stringify!(Amask)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_PixelFormat>())).Rloss as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_PixelFormat),
            "::",
            stringify!(Rloss)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_PixelFormat>())).Gloss as *const _ as usize },
        37usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_PixelFormat),
            "::",
            stringify!(Gloss)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_PixelFormat>())).Bloss as *const _ as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_PixelFormat),
            "::",
            stringify!(Bloss)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_PixelFormat>())).Aloss as *const _ as usize },
        39usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_PixelFormat),
            "::",
            stringify!(Aloss)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_PixelFormat>())).Rshift as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_PixelFormat),
            "::",
            stringify!(Rshift)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_PixelFormat>())).Gshift as *const _ as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_PixelFormat),
            "::",
            stringify!(Gshift)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_PixelFormat>())).Bshift as *const _ as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_PixelFormat),
            "::",
            stringify!(Bshift)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_PixelFormat>())).Ashift as *const _ as usize },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_PixelFormat),
            "::",
            stringify!(Ashift)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_PixelFormat>())).refcount as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_PixelFormat),
            "::",
            stringify!(refcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_PixelFormat>())).next as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_PixelFormat),
            "::",
            stringify!(next)
        )
    );
}
impl Default for SDL_PixelFormat {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn SDL_GetPixelFormatName(format: Uint32) -> *const ctypes::c_char;
}
extern "C" {
    pub fn SDL_PixelFormatEnumToMasks(
        format: Uint32,
        bpp: *mut ctypes::c_int,
        Rmask: *mut Uint32,
        Gmask: *mut Uint32,
        Bmask: *mut Uint32,
        Amask: *mut Uint32,
    ) -> SDL_bool;
}
extern "C" {
    pub fn SDL_MasksToPixelFormatEnum(
        bpp: ctypes::c_int,
        Rmask: Uint32,
        Gmask: Uint32,
        Bmask: Uint32,
        Amask: Uint32,
    ) -> Uint32;
}
extern "C" {
    pub fn SDL_AllocFormat(pixel_format: Uint32) -> *mut SDL_PixelFormat;
}
extern "C" {
    pub fn SDL_FreeFormat(format: *mut SDL_PixelFormat);
}
extern "C" {
    pub fn SDL_AllocPalette(ncolors: ctypes::c_int) -> *mut SDL_Palette;
}
extern "C" {
    pub fn SDL_SetPixelFormatPalette(
        format: *mut SDL_PixelFormat,
        palette: *mut SDL_Palette,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_SetPaletteColors(
        palette: *mut SDL_Palette,
        colors: *const SDL_Color,
        firstcolor: ctypes::c_int,
        ncolors: ctypes::c_int,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_FreePalette(palette: *mut SDL_Palette);
}
extern "C" {
    pub fn SDL_MapRGB(format: *const SDL_PixelFormat, r: Uint8, g: Uint8, b: Uint8) -> Uint32;
}
extern "C" {
    pub fn SDL_MapRGBA(
        format: *const SDL_PixelFormat,
        r: Uint8,
        g: Uint8,
        b: Uint8,
        a: Uint8,
    ) -> Uint32;
}
extern "C" {
    pub fn SDL_GetRGB(
        pixel: Uint32,
        format: *const SDL_PixelFormat,
        r: *mut Uint8,
        g: *mut Uint8,
        b: *mut Uint8,
    );
}
extern "C" {
    pub fn SDL_GetRGBA(
        pixel: Uint32,
        format: *const SDL_PixelFormat,
        r: *mut Uint8,
        g: *mut Uint8,
        b: *mut Uint8,
        a: *mut Uint8,
    );
}
extern "C" {
    pub fn SDL_CalculateGammaRamp(gamma: f32, ramp: *mut Uint16);
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct SDL_Point {
    pub x: ctypes::c_int,
    pub y: ctypes::c_int,
}
#[test]
fn bindgen_test_layout_SDL_Point() {
    assert_eq!(
        ::core::mem::size_of::<SDL_Point>(),
        8usize,
        concat!("Size of: ", stringify!(SDL_Point))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_Point>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_Point))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Point>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Point),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Point>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Point),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct SDL_FPoint {
    pub x: f32,
    pub y: f32,
}
#[test]
fn bindgen_test_layout_SDL_FPoint() {
    assert_eq!(
        ::core::mem::size_of::<SDL_FPoint>(),
        8usize,
        concat!("Size of: ", stringify!(SDL_FPoint))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_FPoint>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_FPoint))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_FPoint>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_FPoint),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_FPoint>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_FPoint),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct SDL_Rect {
    pub x: ctypes::c_int,
    pub y: ctypes::c_int,
    pub w: ctypes::c_int,
    pub h: ctypes::c_int,
}
#[test]
fn bindgen_test_layout_SDL_Rect() {
    assert_eq!(
        ::core::mem::size_of::<SDL_Rect>(),
        16usize,
        concat!("Size of: ", stringify!(SDL_Rect))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_Rect>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_Rect))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Rect>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Rect),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Rect>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Rect),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Rect>())).w as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Rect),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Rect>())).h as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Rect),
            "::",
            stringify!(h)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct SDL_FRect {
    pub x: f32,
    pub y: f32,
    pub w: f32,
    pub h: f32,
}
#[test]
fn bindgen_test_layout_SDL_FRect() {
    assert_eq!(
        ::core::mem::size_of::<SDL_FRect>(),
        16usize,
        concat!("Size of: ", stringify!(SDL_FRect))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_FRect>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_FRect))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_FRect>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_FRect),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_FRect>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_FRect),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_FRect>())).w as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_FRect),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_FRect>())).h as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_FRect),
            "::",
            stringify!(h)
        )
    );
}
extern "C" {
    pub fn SDL_HasIntersection(A: *const SDL_Rect, B: *const SDL_Rect) -> SDL_bool;
}
extern "C" {
    pub fn SDL_IntersectRect(
        A: *const SDL_Rect,
        B: *const SDL_Rect,
        result: *mut SDL_Rect,
    ) -> SDL_bool;
}
extern "C" {
    pub fn SDL_UnionRect(A: *const SDL_Rect, B: *const SDL_Rect, result: *mut SDL_Rect);
}
extern "C" {
    pub fn SDL_EnclosePoints(
        points: *const SDL_Point,
        count: ctypes::c_int,
        clip: *const SDL_Rect,
        result: *mut SDL_Rect,
    ) -> SDL_bool;
}
extern "C" {
    pub fn SDL_IntersectRectAndLine(
        rect: *const SDL_Rect,
        X1: *mut ctypes::c_int,
        Y1: *mut ctypes::c_int,
        X2: *mut ctypes::c_int,
        Y2: *mut ctypes::c_int,
    ) -> SDL_bool;
}
pub const SDL_BLENDMODE_NONE: SDL_BlendMode = 0;
pub const SDL_BLENDMODE_BLEND: SDL_BlendMode = 1;
pub const SDL_BLENDMODE_ADD: SDL_BlendMode = 2;
pub const SDL_BLENDMODE_MOD: SDL_BlendMode = 4;
pub const SDL_BLENDMODE_MUL: SDL_BlendMode = 8;
pub const SDL_BLENDMODE_INVALID: SDL_BlendMode = 2147483647;
pub type SDL_BlendMode = ctypes::c_uint;
pub const SDL_BLENDOPERATION_ADD: SDL_BlendOperation = 1;
pub const SDL_BLENDOPERATION_SUBTRACT: SDL_BlendOperation = 2;
pub const SDL_BLENDOPERATION_REV_SUBTRACT: SDL_BlendOperation = 3;
pub const SDL_BLENDOPERATION_MINIMUM: SDL_BlendOperation = 4;
pub const SDL_BLENDOPERATION_MAXIMUM: SDL_BlendOperation = 5;
pub type SDL_BlendOperation = ctypes::c_uint;
pub const SDL_BLENDFACTOR_ZERO: SDL_BlendFactor = 1;
pub const SDL_BLENDFACTOR_ONE: SDL_BlendFactor = 2;
pub const SDL_BLENDFACTOR_SRC_COLOR: SDL_BlendFactor = 3;
pub const SDL_BLENDFACTOR_ONE_MINUS_SRC_COLOR: SDL_BlendFactor = 4;
pub const SDL_BLENDFACTOR_SRC_ALPHA: SDL_BlendFactor = 5;
pub const SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA: SDL_BlendFactor = 6;
pub const SDL_BLENDFACTOR_DST_COLOR: SDL_BlendFactor = 7;
pub const SDL_BLENDFACTOR_ONE_MINUS_DST_COLOR: SDL_BlendFactor = 8;
pub const SDL_BLENDFACTOR_DST_ALPHA: SDL_BlendFactor = 9;
pub const SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA: SDL_BlendFactor = 10;
pub type SDL_BlendFactor = ctypes::c_uint;
extern "C" {
    pub fn SDL_ComposeCustomBlendMode(
        srcColorFactor: SDL_BlendFactor,
        dstColorFactor: SDL_BlendFactor,
        colorOperation: SDL_BlendOperation,
        srcAlphaFactor: SDL_BlendFactor,
        dstAlphaFactor: SDL_BlendFactor,
        alphaOperation: SDL_BlendOperation,
    ) -> SDL_BlendMode;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SDL_Surface {
    pub flags: Uint32,
    pub format: *mut SDL_PixelFormat,
    pub w: ctypes::c_int,
    pub h: ctypes::c_int,
    pub pitch: ctypes::c_int,
    pub pixels: *mut ctypes::c_void,
    pub userdata: *mut ctypes::c_void,
    pub locked: ctypes::c_int,
    pub list_blitmap: *mut ctypes::c_void,
    pub clip_rect: SDL_Rect,
    pub map: *mut SDL_BlitMap,
    pub refcount: ctypes::c_int,
}
#[test]
fn bindgen_test_layout_SDL_Surface() {
    assert_eq!(
        ::core::mem::size_of::<SDL_Surface>(),
        96usize,
        concat!("Size of: ", stringify!(SDL_Surface))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_Surface>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_Surface))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Surface>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Surface),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Surface>())).format as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Surface),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Surface>())).w as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Surface),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Surface>())).h as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Surface),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Surface>())).pitch as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Surface),
            "::",
            stringify!(pitch)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Surface>())).pixels as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Surface),
            "::",
            stringify!(pixels)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Surface>())).userdata as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Surface),
            "::",
            stringify!(userdata)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Surface>())).locked as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Surface),
            "::",
            stringify!(locked)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Surface>())).list_blitmap as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Surface),
            "::",
            stringify!(list_blitmap)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Surface>())).clip_rect as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Surface),
            "::",
            stringify!(clip_rect)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Surface>())).map as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Surface),
            "::",
            stringify!(map)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Surface>())).refcount as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Surface),
            "::",
            stringify!(refcount)
        )
    );
}
impl Default for SDL_Surface {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SDL_blit = ::core::option::Option<
    unsafe extern "C" fn(
        src: *mut SDL_Surface,
        srcrect: *mut SDL_Rect,
        dst: *mut SDL_Surface,
        dstrect: *mut SDL_Rect,
    ) -> ctypes::c_int,
>;
pub const SDL_YUV_CONVERSION_JPEG: SDL_YUV_CONVERSION_MODE = 0;
pub const SDL_YUV_CONVERSION_BT601: SDL_YUV_CONVERSION_MODE = 1;
pub const SDL_YUV_CONVERSION_BT709: SDL_YUV_CONVERSION_MODE = 2;
pub const SDL_YUV_CONVERSION_AUTOMATIC: SDL_YUV_CONVERSION_MODE = 3;
pub type SDL_YUV_CONVERSION_MODE = ctypes::c_uint;
extern "C" {
    pub fn SDL_CreateRGBSurface(
        flags: Uint32,
        width: ctypes::c_int,
        height: ctypes::c_int,
        depth: ctypes::c_int,
        Rmask: Uint32,
        Gmask: Uint32,
        Bmask: Uint32,
        Amask: Uint32,
    ) -> *mut SDL_Surface;
}
extern "C" {
    pub fn SDL_CreateRGBSurfaceWithFormat(
        flags: Uint32,
        width: ctypes::c_int,
        height: ctypes::c_int,
        depth: ctypes::c_int,
        format: Uint32,
    ) -> *mut SDL_Surface;
}
extern "C" {
    pub fn SDL_CreateRGBSurfaceFrom(
        pixels: *mut ctypes::c_void,
        width: ctypes::c_int,
        height: ctypes::c_int,
        depth: ctypes::c_int,
        pitch: ctypes::c_int,
        Rmask: Uint32,
        Gmask: Uint32,
        Bmask: Uint32,
        Amask: Uint32,
    ) -> *mut SDL_Surface;
}
extern "C" {
    pub fn SDL_CreateRGBSurfaceWithFormatFrom(
        pixels: *mut ctypes::c_void,
        width: ctypes::c_int,
        height: ctypes::c_int,
        depth: ctypes::c_int,
        pitch: ctypes::c_int,
        format: Uint32,
    ) -> *mut SDL_Surface;
}
extern "C" {
    pub fn SDL_FreeSurface(surface: *mut SDL_Surface);
}
extern "C" {
    pub fn SDL_SetSurfacePalette(
        surface: *mut SDL_Surface,
        palette: *mut SDL_Palette,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_LockSurface(surface: *mut SDL_Surface) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_UnlockSurface(surface: *mut SDL_Surface);
}
extern "C" {
    pub fn SDL_LoadBMP_RW(src: *mut SDL_RWops, freesrc: ctypes::c_int) -> *mut SDL_Surface;
}
extern "C" {
    pub fn SDL_SaveBMP_RW(
        surface: *mut SDL_Surface,
        dst: *mut SDL_RWops,
        freedst: ctypes::c_int,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_SetSurfaceRLE(surface: *mut SDL_Surface, flag: ctypes::c_int) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_HasSurfaceRLE(surface: *mut SDL_Surface) -> SDL_bool;
}
extern "C" {
    pub fn SDL_SetColorKey(
        surface: *mut SDL_Surface,
        flag: ctypes::c_int,
        key: Uint32,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_HasColorKey(surface: *mut SDL_Surface) -> SDL_bool;
}
extern "C" {
    pub fn SDL_GetColorKey(surface: *mut SDL_Surface, key: *mut Uint32) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_SetSurfaceColorMod(
        surface: *mut SDL_Surface,
        r: Uint8,
        g: Uint8,
        b: Uint8,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_GetSurfaceColorMod(
        surface: *mut SDL_Surface,
        r: *mut Uint8,
        g: *mut Uint8,
        b: *mut Uint8,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_SetSurfaceAlphaMod(surface: *mut SDL_Surface, alpha: Uint8) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_GetSurfaceAlphaMod(surface: *mut SDL_Surface, alpha: *mut Uint8) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_SetSurfaceBlendMode(
        surface: *mut SDL_Surface,
        blendMode: SDL_BlendMode,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_GetSurfaceBlendMode(
        surface: *mut SDL_Surface,
        blendMode: *mut SDL_BlendMode,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_SetClipRect(surface: *mut SDL_Surface, rect: *const SDL_Rect) -> SDL_bool;
}
extern "C" {
    pub fn SDL_GetClipRect(surface: *mut SDL_Surface, rect: *mut SDL_Rect);
}
extern "C" {
    pub fn SDL_DuplicateSurface(surface: *mut SDL_Surface) -> *mut SDL_Surface;
}
extern "C" {
    pub fn SDL_ConvertSurface(
        src: *mut SDL_Surface,
        fmt: *const SDL_PixelFormat,
        flags: Uint32,
    ) -> *mut SDL_Surface;
}
extern "C" {
    pub fn SDL_ConvertSurfaceFormat(
        src: *mut SDL_Surface,
        pixel_format: Uint32,
        flags: Uint32,
    ) -> *mut SDL_Surface;
}
extern "C" {
    pub fn SDL_ConvertPixels(
        width: ctypes::c_int,
        height: ctypes::c_int,
        src_format: Uint32,
        src: *const ctypes::c_void,
        src_pitch: ctypes::c_int,
        dst_format: Uint32,
        dst: *mut ctypes::c_void,
        dst_pitch: ctypes::c_int,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_FillRect(
        dst: *mut SDL_Surface,
        rect: *const SDL_Rect,
        color: Uint32,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_FillRects(
        dst: *mut SDL_Surface,
        rects: *const SDL_Rect,
        count: ctypes::c_int,
        color: Uint32,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_UpperBlit(
        src: *mut SDL_Surface,
        srcrect: *const SDL_Rect,
        dst: *mut SDL_Surface,
        dstrect: *mut SDL_Rect,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_LowerBlit(
        src: *mut SDL_Surface,
        srcrect: *mut SDL_Rect,
        dst: *mut SDL_Surface,
        dstrect: *mut SDL_Rect,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_SoftStretch(
        src: *mut SDL_Surface,
        srcrect: *const SDL_Rect,
        dst: *mut SDL_Surface,
        dstrect: *const SDL_Rect,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_SoftStretchLinear(
        src: *mut SDL_Surface,
        srcrect: *const SDL_Rect,
        dst: *mut SDL_Surface,
        dstrect: *const SDL_Rect,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_UpperBlitScaled(
        src: *mut SDL_Surface,
        srcrect: *const SDL_Rect,
        dst: *mut SDL_Surface,
        dstrect: *mut SDL_Rect,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_LowerBlitScaled(
        src: *mut SDL_Surface,
        srcrect: *mut SDL_Rect,
        dst: *mut SDL_Surface,
        dstrect: *mut SDL_Rect,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_SetYUVConversionMode(mode: SDL_YUV_CONVERSION_MODE);
}
extern "C" {
    pub fn SDL_GetYUVConversionMode() -> SDL_YUV_CONVERSION_MODE;
}
extern "C" {
    pub fn SDL_GetYUVConversionModeForResolution(
        width: ctypes::c_int,
        height: ctypes::c_int,
    ) -> SDL_YUV_CONVERSION_MODE;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SDL_DisplayMode {
    pub format: Uint32,
    pub w: ctypes::c_int,
    pub h: ctypes::c_int,
    pub refresh_rate: ctypes::c_int,
    pub driverdata: *mut ctypes::c_void,
}
#[test]
fn bindgen_test_layout_SDL_DisplayMode() {
    assert_eq!(
        ::core::mem::size_of::<SDL_DisplayMode>(),
        24usize,
        concat!("Size of: ", stringify!(SDL_DisplayMode))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_DisplayMode>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_DisplayMode))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_DisplayMode>())).format as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_DisplayMode),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_DisplayMode>())).w as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_DisplayMode),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_DisplayMode>())).h as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_DisplayMode),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_DisplayMode>())).refresh_rate as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_DisplayMode),
            "::",
            stringify!(refresh_rate)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_DisplayMode>())).driverdata as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_DisplayMode),
            "::",
            stringify!(driverdata)
        )
    );
}
impl Default for SDL_DisplayMode {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SDL_Window {
    _unused: [u8; 0],
}
pub const SDL_WINDOW_FULLSCREEN: SDL_WindowFlags = 1;
pub const SDL_WINDOW_OPENGL: SDL_WindowFlags = 2;
pub const SDL_WINDOW_SHOWN: SDL_WindowFlags = 4;
pub const SDL_WINDOW_HIDDEN: SDL_WindowFlags = 8;
pub const SDL_WINDOW_BORDERLESS: SDL_WindowFlags = 16;
pub const SDL_WINDOW_RESIZABLE: SDL_WindowFlags = 32;
pub const SDL_WINDOW_MINIMIZED: SDL_WindowFlags = 64;
pub const SDL_WINDOW_MAXIMIZED: SDL_WindowFlags = 128;
pub const SDL_WINDOW_MOUSE_GRABBED: SDL_WindowFlags = 256;
pub const SDL_WINDOW_INPUT_FOCUS: SDL_WindowFlags = 512;
pub const SDL_WINDOW_MOUSE_FOCUS: SDL_WindowFlags = 1024;
pub const SDL_WINDOW_FULLSCREEN_DESKTOP: SDL_WindowFlags = 4097;
pub const SDL_WINDOW_FOREIGN: SDL_WindowFlags = 2048;
pub const SDL_WINDOW_ALLOW_HIGHDPI: SDL_WindowFlags = 8192;
pub const SDL_WINDOW_MOUSE_CAPTURE: SDL_WindowFlags = 16384;
pub const SDL_WINDOW_ALWAYS_ON_TOP: SDL_WindowFlags = 32768;
pub const SDL_WINDOW_SKIP_TASKBAR: SDL_WindowFlags = 65536;
pub const SDL_WINDOW_UTILITY: SDL_WindowFlags = 131072;
pub const SDL_WINDOW_TOOLTIP: SDL_WindowFlags = 262144;
pub const SDL_WINDOW_POPUP_MENU: SDL_WindowFlags = 524288;
pub const SDL_WINDOW_KEYBOARD_GRABBED: SDL_WindowFlags = 1048576;
pub const SDL_WINDOW_VULKAN: SDL_WindowFlags = 268435456;
pub const SDL_WINDOW_METAL: SDL_WindowFlags = 536870912;
pub const SDL_WINDOW_INPUT_GRABBED: SDL_WindowFlags = 256;
pub type SDL_WindowFlags = ctypes::c_uint;
pub const SDL_WINDOWEVENT_NONE: SDL_WindowEventID = 0;
pub const SDL_WINDOWEVENT_SHOWN: SDL_WindowEventID = 1;
pub const SDL_WINDOWEVENT_HIDDEN: SDL_WindowEventID = 2;
pub const SDL_WINDOWEVENT_EXPOSED: SDL_WindowEventID = 3;
pub const SDL_WINDOWEVENT_MOVED: SDL_WindowEventID = 4;
pub const SDL_WINDOWEVENT_RESIZED: SDL_WindowEventID = 5;
pub const SDL_WINDOWEVENT_SIZE_CHANGED: SDL_WindowEventID = 6;
pub const SDL_WINDOWEVENT_MINIMIZED: SDL_WindowEventID = 7;
pub const SDL_WINDOWEVENT_MAXIMIZED: SDL_WindowEventID = 8;
pub const SDL_WINDOWEVENT_RESTORED: SDL_WindowEventID = 9;
pub const SDL_WINDOWEVENT_ENTER: SDL_WindowEventID = 10;
pub const SDL_WINDOWEVENT_LEAVE: SDL_WindowEventID = 11;
pub const SDL_WINDOWEVENT_FOCUS_GAINED: SDL_WindowEventID = 12;
pub const SDL_WINDOWEVENT_FOCUS_LOST: SDL_WindowEventID = 13;
pub const SDL_WINDOWEVENT_CLOSE: SDL_WindowEventID = 14;
pub const SDL_WINDOWEVENT_TAKE_FOCUS: SDL_WindowEventID = 15;
pub const SDL_WINDOWEVENT_HIT_TEST: SDL_WindowEventID = 16;
pub type SDL_WindowEventID = ctypes::c_uint;
pub const SDL_DISPLAYEVENT_NONE: SDL_DisplayEventID = 0;
pub const SDL_DISPLAYEVENT_ORIENTATION: SDL_DisplayEventID = 1;
pub const SDL_DISPLAYEVENT_CONNECTED: SDL_DisplayEventID = 2;
pub const SDL_DISPLAYEVENT_DISCONNECTED: SDL_DisplayEventID = 3;
pub type SDL_DisplayEventID = ctypes::c_uint;
pub const SDL_ORIENTATION_UNKNOWN: SDL_DisplayOrientation = 0;
pub const SDL_ORIENTATION_LANDSCAPE: SDL_DisplayOrientation = 1;
pub const SDL_ORIENTATION_LANDSCAPE_FLIPPED: SDL_DisplayOrientation = 2;
pub const SDL_ORIENTATION_PORTRAIT: SDL_DisplayOrientation = 3;
pub const SDL_ORIENTATION_PORTRAIT_FLIPPED: SDL_DisplayOrientation = 4;
pub type SDL_DisplayOrientation = ctypes::c_uint;
pub const SDL_FLASH_CANCEL: SDL_FlashOperation = 0;
pub const SDL_FLASH_BRIEFLY: SDL_FlashOperation = 1;
pub const SDL_FLASH_UNTIL_FOCUSED: SDL_FlashOperation = 2;
pub type SDL_FlashOperation = ctypes::c_uint;
pub type SDL_GLContext = *mut ctypes::c_void;
pub const SDL_GL_RED_SIZE: SDL_GLattr = 0;
pub const SDL_GL_GREEN_SIZE: SDL_GLattr = 1;
pub const SDL_GL_BLUE_SIZE: SDL_GLattr = 2;
pub const SDL_GL_ALPHA_SIZE: SDL_GLattr = 3;
pub const SDL_GL_BUFFER_SIZE: SDL_GLattr = 4;
pub const SDL_GL_DOUBLEBUFFER: SDL_GLattr = 5;
pub const SDL_GL_DEPTH_SIZE: SDL_GLattr = 6;
pub const SDL_GL_STENCIL_SIZE: SDL_GLattr = 7;
pub const SDL_GL_ACCUM_RED_SIZE: SDL_GLattr = 8;
pub const SDL_GL_ACCUM_GREEN_SIZE: SDL_GLattr = 9;
pub const SDL_GL_ACCUM_BLUE_SIZE: SDL_GLattr = 10;
pub const SDL_GL_ACCUM_ALPHA_SIZE: SDL_GLattr = 11;
pub const SDL_GL_STEREO: SDL_GLattr = 12;
pub const SDL_GL_MULTISAMPLEBUFFERS: SDL_GLattr = 13;
pub const SDL_GL_MULTISAMPLESAMPLES: SDL_GLattr = 14;
pub const SDL_GL_ACCELERATED_VISUAL: SDL_GLattr = 15;
pub const SDL_GL_RETAINED_BACKING: SDL_GLattr = 16;
pub const SDL_GL_CONTEXT_MAJOR_VERSION: SDL_GLattr = 17;
pub const SDL_GL_CONTEXT_MINOR_VERSION: SDL_GLattr = 18;
pub const SDL_GL_CONTEXT_EGL: SDL_GLattr = 19;
pub const SDL_GL_CONTEXT_FLAGS: SDL_GLattr = 20;
pub const SDL_GL_CONTEXT_PROFILE_MASK: SDL_GLattr = 21;
pub const SDL_GL_SHARE_WITH_CURRENT_CONTEXT: SDL_GLattr = 22;
pub const SDL_GL_FRAMEBUFFER_SRGB_CAPABLE: SDL_GLattr = 23;
pub const SDL_GL_CONTEXT_RELEASE_BEHAVIOR: SDL_GLattr = 24;
pub const SDL_GL_CONTEXT_RESET_NOTIFICATION: SDL_GLattr = 25;
pub const SDL_GL_CONTEXT_NO_ERROR: SDL_GLattr = 26;
pub type SDL_GLattr = ctypes::c_uint;
pub const SDL_GL_CONTEXT_PROFILE_CORE: SDL_GLprofile = 1;
pub const SDL_GL_CONTEXT_PROFILE_COMPATIBILITY: SDL_GLprofile = 2;
pub const SDL_GL_CONTEXT_PROFILE_ES: SDL_GLprofile = 4;
pub type SDL_GLprofile = ctypes::c_uint;
pub const SDL_GL_CONTEXT_DEBUG_FLAG: SDL_GLcontextFlag = 1;
pub const SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG: SDL_GLcontextFlag = 2;
pub const SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG: SDL_GLcontextFlag = 4;
pub const SDL_GL_CONTEXT_RESET_ISOLATION_FLAG: SDL_GLcontextFlag = 8;
pub type SDL_GLcontextFlag = ctypes::c_uint;
pub const SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE: SDL_GLcontextReleaseFlag = 0;
pub const SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH: SDL_GLcontextReleaseFlag = 1;
pub type SDL_GLcontextReleaseFlag = ctypes::c_uint;
pub const SDL_GL_CONTEXT_RESET_NO_NOTIFICATION: SDL_GLContextResetNotification = 0;
pub const SDL_GL_CONTEXT_RESET_LOSE_CONTEXT: SDL_GLContextResetNotification = 1;
pub type SDL_GLContextResetNotification = ctypes::c_uint;
extern "C" {
    pub fn SDL_GetNumVideoDrivers() -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_GetVideoDriver(index: ctypes::c_int) -> *const ctypes::c_char;
}
extern "C" {
    pub fn SDL_VideoInit(driver_name: *const ctypes::c_char) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_VideoQuit();
}
extern "C" {
    pub fn SDL_GetCurrentVideoDriver() -> *const ctypes::c_char;
}
extern "C" {
    pub fn SDL_GetNumVideoDisplays() -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_GetDisplayName(displayIndex: ctypes::c_int) -> *const ctypes::c_char;
}
extern "C" {
    pub fn SDL_GetDisplayBounds(displayIndex: ctypes::c_int, rect: *mut SDL_Rect) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_GetDisplayUsableBounds(
        displayIndex: ctypes::c_int,
        rect: *mut SDL_Rect,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_GetDisplayDPI(
        displayIndex: ctypes::c_int,
        ddpi: *mut f32,
        hdpi: *mut f32,
        vdpi: *mut f32,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_GetDisplayOrientation(displayIndex: ctypes::c_int) -> SDL_DisplayOrientation;
}
extern "C" {
    pub fn SDL_GetNumDisplayModes(displayIndex: ctypes::c_int) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_GetDisplayMode(
        displayIndex: ctypes::c_int,
        modeIndex: ctypes::c_int,
        mode: *mut SDL_DisplayMode,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_GetDesktopDisplayMode(
        displayIndex: ctypes::c_int,
        mode: *mut SDL_DisplayMode,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_GetCurrentDisplayMode(
        displayIndex: ctypes::c_int,
        mode: *mut SDL_DisplayMode,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_GetClosestDisplayMode(
        displayIndex: ctypes::c_int,
        mode: *const SDL_DisplayMode,
        closest: *mut SDL_DisplayMode,
    ) -> *mut SDL_DisplayMode;
}
extern "C" {
    pub fn SDL_GetWindowDisplayIndex(window: *mut SDL_Window) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_SetWindowDisplayMode(
        window: *mut SDL_Window,
        mode: *const SDL_DisplayMode,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_GetWindowDisplayMode(
        window: *mut SDL_Window,
        mode: *mut SDL_DisplayMode,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_GetWindowPixelFormat(window: *mut SDL_Window) -> Uint32;
}
extern "C" {
    pub fn SDL_CreateWindow(
        title: *const ctypes::c_char,
        x: ctypes::c_int,
        y: ctypes::c_int,
        w: ctypes::c_int,
        h: ctypes::c_int,
        flags: Uint32,
    ) -> *mut SDL_Window;
}
extern "C" {
    pub fn SDL_CreateWindowFrom(data: *const ctypes::c_void) -> *mut SDL_Window;
}
extern "C" {
    pub fn SDL_GetWindowID(window: *mut SDL_Window) -> Uint32;
}
extern "C" {
    pub fn SDL_GetWindowFromID(id: Uint32) -> *mut SDL_Window;
}
extern "C" {
    pub fn SDL_GetWindowFlags(window: *mut SDL_Window) -> Uint32;
}
extern "C" {
    pub fn SDL_SetWindowTitle(window: *mut SDL_Window, title: *const ctypes::c_char);
}
extern "C" {
    pub fn SDL_GetWindowTitle(window: *mut SDL_Window) -> *const ctypes::c_char;
}
extern "C" {
    pub fn SDL_SetWindowIcon(window: *mut SDL_Window, icon: *mut SDL_Surface);
}
extern "C" {
    pub fn SDL_SetWindowData(
        window: *mut SDL_Window,
        name: *const ctypes::c_char,
        userdata: *mut ctypes::c_void,
    ) -> *mut ctypes::c_void;
}
extern "C" {
    pub fn SDL_GetWindowData(
        window: *mut SDL_Window,
        name: *const ctypes::c_char,
    ) -> *mut ctypes::c_void;
}
extern "C" {
    pub fn SDL_SetWindowPosition(window: *mut SDL_Window, x: ctypes::c_int, y: ctypes::c_int);
}
extern "C" {
    pub fn SDL_GetWindowPosition(
        window: *mut SDL_Window,
        x: *mut ctypes::c_int,
        y: *mut ctypes::c_int,
    );
}
extern "C" {
    pub fn SDL_SetWindowSize(window: *mut SDL_Window, w: ctypes::c_int, h: ctypes::c_int);
}
extern "C" {
    pub fn SDL_GetWindowSize(window: *mut SDL_Window, w: *mut ctypes::c_int, h: *mut ctypes::c_int);
}
extern "C" {
    pub fn SDL_GetWindowBordersSize(
        window: *mut SDL_Window,
        top: *mut ctypes::c_int,
        left: *mut ctypes::c_int,
        bottom: *mut ctypes::c_int,
        right: *mut ctypes::c_int,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_SetWindowMinimumSize(
        window: *mut SDL_Window,
        min_w: ctypes::c_int,
        min_h: ctypes::c_int,
    );
}
extern "C" {
    pub fn SDL_GetWindowMinimumSize(
        window: *mut SDL_Window,
        w: *mut ctypes::c_int,
        h: *mut ctypes::c_int,
    );
}
extern "C" {
    pub fn SDL_SetWindowMaximumSize(
        window: *mut SDL_Window,
        max_w: ctypes::c_int,
        max_h: ctypes::c_int,
    );
}
extern "C" {
    pub fn SDL_GetWindowMaximumSize(
        window: *mut SDL_Window,
        w: *mut ctypes::c_int,
        h: *mut ctypes::c_int,
    );
}
extern "C" {
    pub fn SDL_SetWindowBordered(window: *mut SDL_Window, bordered: SDL_bool);
}
extern "C" {
    pub fn SDL_SetWindowResizable(window: *mut SDL_Window, resizable: SDL_bool);
}
extern "C" {
    pub fn SDL_SetWindowAlwaysOnTop(window: *mut SDL_Window, on_top: SDL_bool);
}
extern "C" {
    pub fn SDL_ShowWindow(window: *mut SDL_Window);
}
extern "C" {
    pub fn SDL_HideWindow(window: *mut SDL_Window);
}
extern "C" {
    pub fn SDL_RaiseWindow(window: *mut SDL_Window);
}
extern "C" {
    pub fn SDL_MaximizeWindow(window: *mut SDL_Window);
}
extern "C" {
    pub fn SDL_MinimizeWindow(window: *mut SDL_Window);
}
extern "C" {
    pub fn SDL_RestoreWindow(window: *mut SDL_Window);
}
extern "C" {
    pub fn SDL_SetWindowFullscreen(window: *mut SDL_Window, flags: Uint32) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_GetWindowSurface(window: *mut SDL_Window) -> *mut SDL_Surface;
}
extern "C" {
    pub fn SDL_UpdateWindowSurface(window: *mut SDL_Window) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_UpdateWindowSurfaceRects(
        window: *mut SDL_Window,
        rects: *const SDL_Rect,
        numrects: ctypes::c_int,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_SetWindowGrab(window: *mut SDL_Window, grabbed: SDL_bool);
}
extern "C" {
    pub fn SDL_SetWindowKeyboardGrab(window: *mut SDL_Window, grabbed: SDL_bool);
}
extern "C" {
    pub fn SDL_SetWindowMouseGrab(window: *mut SDL_Window, grabbed: SDL_bool);
}
extern "C" {
    pub fn SDL_GetWindowGrab(window: *mut SDL_Window) -> SDL_bool;
}
extern "C" {
    pub fn SDL_GetWindowKeyboardGrab(window: *mut SDL_Window) -> SDL_bool;
}
extern "C" {
    pub fn SDL_GetWindowMouseGrab(window: *mut SDL_Window) -> SDL_bool;
}
extern "C" {
    pub fn SDL_GetGrabbedWindow() -> *mut SDL_Window;
}
extern "C" {
    pub fn SDL_SetWindowBrightness(window: *mut SDL_Window, brightness: f32) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_GetWindowBrightness(window: *mut SDL_Window) -> f32;
}
extern "C" {
    pub fn SDL_SetWindowOpacity(window: *mut SDL_Window, opacity: f32) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_GetWindowOpacity(window: *mut SDL_Window, out_opacity: *mut f32) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_SetWindowModalFor(
        modal_window: *mut SDL_Window,
        parent_window: *mut SDL_Window,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_SetWindowInputFocus(window: *mut SDL_Window) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_SetWindowGammaRamp(
        window: *mut SDL_Window,
        red: *const Uint16,
        green: *const Uint16,
        blue: *const Uint16,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_GetWindowGammaRamp(
        window: *mut SDL_Window,
        red: *mut Uint16,
        green: *mut Uint16,
        blue: *mut Uint16,
    ) -> ctypes::c_int;
}
pub const SDL_HITTEST_NORMAL: SDL_HitTestResult = 0;
pub const SDL_HITTEST_DRAGGABLE: SDL_HitTestResult = 1;
pub const SDL_HITTEST_RESIZE_TOPLEFT: SDL_HitTestResult = 2;
pub const SDL_HITTEST_RESIZE_TOP: SDL_HitTestResult = 3;
pub const SDL_HITTEST_RESIZE_TOPRIGHT: SDL_HitTestResult = 4;
pub const SDL_HITTEST_RESIZE_RIGHT: SDL_HitTestResult = 5;
pub const SDL_HITTEST_RESIZE_BOTTOMRIGHT: SDL_HitTestResult = 6;
pub const SDL_HITTEST_RESIZE_BOTTOM: SDL_HitTestResult = 7;
pub const SDL_HITTEST_RESIZE_BOTTOMLEFT: SDL_HitTestResult = 8;
pub const SDL_HITTEST_RESIZE_LEFT: SDL_HitTestResult = 9;
pub type SDL_HitTestResult = ctypes::c_uint;
pub type SDL_HitTest = ::core::option::Option<
    unsafe extern "C" fn(
        win: *mut SDL_Window,
        area: *const SDL_Point,
        data: *mut ctypes::c_void,
    ) -> SDL_HitTestResult,
>;
extern "C" {
    pub fn SDL_SetWindowHitTest(
        window: *mut SDL_Window,
        callback: SDL_HitTest,
        callback_data: *mut ctypes::c_void,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_FlashWindow(window: *mut SDL_Window, operation: SDL_FlashOperation)
        -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_DestroyWindow(window: *mut SDL_Window);
}
extern "C" {
    pub fn SDL_IsScreenSaverEnabled() -> SDL_bool;
}
extern "C" {
    pub fn SDL_EnableScreenSaver();
}
extern "C" {
    pub fn SDL_DisableScreenSaver();
}
extern "C" {
    pub fn SDL_GL_LoadLibrary(path: *const ctypes::c_char) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_GL_GetProcAddress(proc_: *const ctypes::c_char) -> *mut ctypes::c_void;
}
extern "C" {
    pub fn SDL_GL_UnloadLibrary();
}
extern "C" {
    pub fn SDL_GL_ExtensionSupported(extension: *const ctypes::c_char) -> SDL_bool;
}
extern "C" {
    pub fn SDL_GL_ResetAttributes();
}
extern "C" {
    pub fn SDL_GL_SetAttribute(attr: SDL_GLattr, value: ctypes::c_int) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_GL_GetAttribute(attr: SDL_GLattr, value: *mut ctypes::c_int) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_GL_CreateContext(window: *mut SDL_Window) -> SDL_GLContext;
}
extern "C" {
    pub fn SDL_GL_MakeCurrent(window: *mut SDL_Window, context: SDL_GLContext) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_GL_GetCurrentWindow() -> *mut SDL_Window;
}
extern "C" {
    pub fn SDL_GL_GetCurrentContext() -> SDL_GLContext;
}
extern "C" {
    pub fn SDL_GL_GetDrawableSize(
        window: *mut SDL_Window,
        w: *mut ctypes::c_int,
        h: *mut ctypes::c_int,
    );
}
extern "C" {
    pub fn SDL_GL_SetSwapInterval(interval: ctypes::c_int) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_GL_GetSwapInterval() -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_GL_SwapWindow(window: *mut SDL_Window);
}
extern "C" {
    pub fn SDL_GL_DeleteContext(context: SDL_GLContext);
}
pub const SDL_SCANCODE_UNKNOWN: SDL_Scancode = 0;
pub const SDL_SCANCODE_A: SDL_Scancode = 4;
pub const SDL_SCANCODE_B: SDL_Scancode = 5;
pub const SDL_SCANCODE_C: SDL_Scancode = 6;
pub const SDL_SCANCODE_D: SDL_Scancode = 7;
pub const SDL_SCANCODE_E: SDL_Scancode = 8;
pub const SDL_SCANCODE_F: SDL_Scancode = 9;
pub const SDL_SCANCODE_G: SDL_Scancode = 10;
pub const SDL_SCANCODE_H: SDL_Scancode = 11;
pub const SDL_SCANCODE_I: SDL_Scancode = 12;
pub const SDL_SCANCODE_J: SDL_Scancode = 13;
pub const SDL_SCANCODE_K: SDL_Scancode = 14;
pub const SDL_SCANCODE_L: SDL_Scancode = 15;
pub const SDL_SCANCODE_M: SDL_Scancode = 16;
pub const SDL_SCANCODE_N: SDL_Scancode = 17;
pub const SDL_SCANCODE_O: SDL_Scancode = 18;
pub const SDL_SCANCODE_P: SDL_Scancode = 19;
pub const SDL_SCANCODE_Q: SDL_Scancode = 20;
pub const SDL_SCANCODE_R: SDL_Scancode = 21;
pub const SDL_SCANCODE_S: SDL_Scancode = 22;
pub const SDL_SCANCODE_T: SDL_Scancode = 23;
pub const SDL_SCANCODE_U: SDL_Scancode = 24;
pub const SDL_SCANCODE_V: SDL_Scancode = 25;
pub const SDL_SCANCODE_W: SDL_Scancode = 26;
pub const SDL_SCANCODE_X: SDL_Scancode = 27;
pub const SDL_SCANCODE_Y: SDL_Scancode = 28;
pub const SDL_SCANCODE_Z: SDL_Scancode = 29;
pub const SDL_SCANCODE_1: SDL_Scancode = 30;
pub const SDL_SCANCODE_2: SDL_Scancode = 31;
pub const SDL_SCANCODE_3: SDL_Scancode = 32;
pub const SDL_SCANCODE_4: SDL_Scancode = 33;
pub const SDL_SCANCODE_5: SDL_Scancode = 34;
pub const SDL_SCANCODE_6: SDL_Scancode = 35;
pub const SDL_SCANCODE_7: SDL_Scancode = 36;
pub const SDL_SCANCODE_8: SDL_Scancode = 37;
pub const SDL_SCANCODE_9: SDL_Scancode = 38;
pub const SDL_SCANCODE_0: SDL_Scancode = 39;
pub const SDL_SCANCODE_RETURN: SDL_Scancode = 40;
pub const SDL_SCANCODE_ESCAPE: SDL_Scancode = 41;
pub const SDL_SCANCODE_BACKSPACE: SDL_Scancode = 42;
pub const SDL_SCANCODE_TAB: SDL_Scancode = 43;
pub const SDL_SCANCODE_SPACE: SDL_Scancode = 44;
pub const SDL_SCANCODE_MINUS: SDL_Scancode = 45;
pub const SDL_SCANCODE_EQUALS: SDL_Scancode = 46;
pub const SDL_SCANCODE_LEFTBRACKET: SDL_Scancode = 47;
pub const SDL_SCANCODE_RIGHTBRACKET: SDL_Scancode = 48;
pub const SDL_SCANCODE_BACKSLASH: SDL_Scancode = 49;
pub const SDL_SCANCODE_NONUSHASH: SDL_Scancode = 50;
pub const SDL_SCANCODE_SEMICOLON: SDL_Scancode = 51;
pub const SDL_SCANCODE_APOSTROPHE: SDL_Scancode = 52;
pub const SDL_SCANCODE_GRAVE: SDL_Scancode = 53;
pub const SDL_SCANCODE_COMMA: SDL_Scancode = 54;
pub const SDL_SCANCODE_PERIOD: SDL_Scancode = 55;
pub const SDL_SCANCODE_SLASH: SDL_Scancode = 56;
pub const SDL_SCANCODE_CAPSLOCK: SDL_Scancode = 57;
pub const SDL_SCANCODE_F1: SDL_Scancode = 58;
pub const SDL_SCANCODE_F2: SDL_Scancode = 59;
pub const SDL_SCANCODE_F3: SDL_Scancode = 60;
pub const SDL_SCANCODE_F4: SDL_Scancode = 61;
pub const SDL_SCANCODE_F5: SDL_Scancode = 62;
pub const SDL_SCANCODE_F6: SDL_Scancode = 63;
pub const SDL_SCANCODE_F7: SDL_Scancode = 64;
pub const SDL_SCANCODE_F8: SDL_Scancode = 65;
pub const SDL_SCANCODE_F9: SDL_Scancode = 66;
pub const SDL_SCANCODE_F10: SDL_Scancode = 67;
pub const SDL_SCANCODE_F11: SDL_Scancode = 68;
pub const SDL_SCANCODE_F12: SDL_Scancode = 69;
pub const SDL_SCANCODE_PRINTSCREEN: SDL_Scancode = 70;
pub const SDL_SCANCODE_SCROLLLOCK: SDL_Scancode = 71;
pub const SDL_SCANCODE_PAUSE: SDL_Scancode = 72;
pub const SDL_SCANCODE_INSERT: SDL_Scancode = 73;
pub const SDL_SCANCODE_HOME: SDL_Scancode = 74;
pub const SDL_SCANCODE_PAGEUP: SDL_Scancode = 75;
pub const SDL_SCANCODE_DELETE: SDL_Scancode = 76;
pub const SDL_SCANCODE_END: SDL_Scancode = 77;
pub const SDL_SCANCODE_PAGEDOWN: SDL_Scancode = 78;
pub const SDL_SCANCODE_RIGHT: SDL_Scancode = 79;
pub const SDL_SCANCODE_LEFT: SDL_Scancode = 80;
pub const SDL_SCANCODE_DOWN: SDL_Scancode = 81;
pub const SDL_SCANCODE_UP: SDL_Scancode = 82;
pub const SDL_SCANCODE_NUMLOCKCLEAR: SDL_Scancode = 83;
pub const SDL_SCANCODE_KP_DIVIDE: SDL_Scancode = 84;
pub const SDL_SCANCODE_KP_MULTIPLY: SDL_Scancode = 85;
pub const SDL_SCANCODE_KP_MINUS: SDL_Scancode = 86;
pub const SDL_SCANCODE_KP_PLUS: SDL_Scancode = 87;
pub const SDL_SCANCODE_KP_ENTER: SDL_Scancode = 88;
pub const SDL_SCANCODE_KP_1: SDL_Scancode = 89;
pub const SDL_SCANCODE_KP_2: SDL_Scancode = 90;
pub const SDL_SCANCODE_KP_3: SDL_Scancode = 91;
pub const SDL_SCANCODE_KP_4: SDL_Scancode = 92;
pub const SDL_SCANCODE_KP_5: SDL_Scancode = 93;
pub const SDL_SCANCODE_KP_6: SDL_Scancode = 94;
pub const SDL_SCANCODE_KP_7: SDL_Scancode = 95;
pub const SDL_SCANCODE_KP_8: SDL_Scancode = 96;
pub const SDL_SCANCODE_KP_9: SDL_Scancode = 97;
pub const SDL_SCANCODE_KP_0: SDL_Scancode = 98;
pub const SDL_SCANCODE_KP_PERIOD: SDL_Scancode = 99;
pub const SDL_SCANCODE_NONUSBACKSLASH: SDL_Scancode = 100;
pub const SDL_SCANCODE_APPLICATION: SDL_Scancode = 101;
pub const SDL_SCANCODE_POWER: SDL_Scancode = 102;
pub const SDL_SCANCODE_KP_EQUALS: SDL_Scancode = 103;
pub const SDL_SCANCODE_F13: SDL_Scancode = 104;
pub const SDL_SCANCODE_F14: SDL_Scancode = 105;
pub const SDL_SCANCODE_F15: SDL_Scancode = 106;
pub const SDL_SCANCODE_F16: SDL_Scancode = 107;
pub const SDL_SCANCODE_F17: SDL_Scancode = 108;
pub const SDL_SCANCODE_F18: SDL_Scancode = 109;
pub const SDL_SCANCODE_F19: SDL_Scancode = 110;
pub const SDL_SCANCODE_F20: SDL_Scancode = 111;
pub const SDL_SCANCODE_F21: SDL_Scancode = 112;
pub const SDL_SCANCODE_F22: SDL_Scancode = 113;
pub const SDL_SCANCODE_F23: SDL_Scancode = 114;
pub const SDL_SCANCODE_F24: SDL_Scancode = 115;
pub const SDL_SCANCODE_EXECUTE: SDL_Scancode = 116;
pub const SDL_SCANCODE_HELP: SDL_Scancode = 117;
pub const SDL_SCANCODE_MENU: SDL_Scancode = 118;
pub const SDL_SCANCODE_SELECT: SDL_Scancode = 119;
pub const SDL_SCANCODE_STOP: SDL_Scancode = 120;
pub const SDL_SCANCODE_AGAIN: SDL_Scancode = 121;
pub const SDL_SCANCODE_UNDO: SDL_Scancode = 122;
pub const SDL_SCANCODE_CUT: SDL_Scancode = 123;
pub const SDL_SCANCODE_COPY: SDL_Scancode = 124;
pub const SDL_SCANCODE_PASTE: SDL_Scancode = 125;
pub const SDL_SCANCODE_FIND: SDL_Scancode = 126;
pub const SDL_SCANCODE_MUTE: SDL_Scancode = 127;
pub const SDL_SCANCODE_VOLUMEUP: SDL_Scancode = 128;
pub const SDL_SCANCODE_VOLUMEDOWN: SDL_Scancode = 129;
pub const SDL_SCANCODE_KP_COMMA: SDL_Scancode = 133;
pub const SDL_SCANCODE_KP_EQUALSAS400: SDL_Scancode = 134;
pub const SDL_SCANCODE_INTERNATIONAL1: SDL_Scancode = 135;
pub const SDL_SCANCODE_INTERNATIONAL2: SDL_Scancode = 136;
pub const SDL_SCANCODE_INTERNATIONAL3: SDL_Scancode = 137;
pub const SDL_SCANCODE_INTERNATIONAL4: SDL_Scancode = 138;
pub const SDL_SCANCODE_INTERNATIONAL5: SDL_Scancode = 139;
pub const SDL_SCANCODE_INTERNATIONAL6: SDL_Scancode = 140;
pub const SDL_SCANCODE_INTERNATIONAL7: SDL_Scancode = 141;
pub const SDL_SCANCODE_INTERNATIONAL8: SDL_Scancode = 142;
pub const SDL_SCANCODE_INTERNATIONAL9: SDL_Scancode = 143;
pub const SDL_SCANCODE_LANG1: SDL_Scancode = 144;
pub const SDL_SCANCODE_LANG2: SDL_Scancode = 145;
pub const SDL_SCANCODE_LANG3: SDL_Scancode = 146;
pub const SDL_SCANCODE_LANG4: SDL_Scancode = 147;
pub const SDL_SCANCODE_LANG5: SDL_Scancode = 148;
pub const SDL_SCANCODE_LANG6: SDL_Scancode = 149;
pub const SDL_SCANCODE_LANG7: SDL_Scancode = 150;
pub const SDL_SCANCODE_LANG8: SDL_Scancode = 151;
pub const SDL_SCANCODE_LANG9: SDL_Scancode = 152;
pub const SDL_SCANCODE_ALTERASE: SDL_Scancode = 153;
pub const SDL_SCANCODE_SYSREQ: SDL_Scancode = 154;
pub const SDL_SCANCODE_CANCEL: SDL_Scancode = 155;
pub const SDL_SCANCODE_CLEAR: SDL_Scancode = 156;
pub const SDL_SCANCODE_PRIOR: SDL_Scancode = 157;
pub const SDL_SCANCODE_RETURN2: SDL_Scancode = 158;
pub const SDL_SCANCODE_SEPARATOR: SDL_Scancode = 159;
pub const SDL_SCANCODE_OUT: SDL_Scancode = 160;
pub const SDL_SCANCODE_OPER: SDL_Scancode = 161;
pub const SDL_SCANCODE_CLEARAGAIN: SDL_Scancode = 162;
pub const SDL_SCANCODE_CRSEL: SDL_Scancode = 163;
pub const SDL_SCANCODE_EXSEL: SDL_Scancode = 164;
pub const SDL_SCANCODE_KP_00: SDL_Scancode = 176;
pub const SDL_SCANCODE_KP_000: SDL_Scancode = 177;
pub const SDL_SCANCODE_THOUSANDSSEPARATOR: SDL_Scancode = 178;
pub const SDL_SCANCODE_DECIMALSEPARATOR: SDL_Scancode = 179;
pub const SDL_SCANCODE_CURRENCYUNIT: SDL_Scancode = 180;
pub const SDL_SCANCODE_CURRENCYSUBUNIT: SDL_Scancode = 181;
pub const SDL_SCANCODE_KP_LEFTPAREN: SDL_Scancode = 182;
pub const SDL_SCANCODE_KP_RIGHTPAREN: SDL_Scancode = 183;
pub const SDL_SCANCODE_KP_LEFTBRACE: SDL_Scancode = 184;
pub const SDL_SCANCODE_KP_RIGHTBRACE: SDL_Scancode = 185;
pub const SDL_SCANCODE_KP_TAB: SDL_Scancode = 186;
pub const SDL_SCANCODE_KP_BACKSPACE: SDL_Scancode = 187;
pub const SDL_SCANCODE_KP_A: SDL_Scancode = 188;
pub const SDL_SCANCODE_KP_B: SDL_Scancode = 189;
pub const SDL_SCANCODE_KP_C: SDL_Scancode = 190;
pub const SDL_SCANCODE_KP_D: SDL_Scancode = 191;
pub const SDL_SCANCODE_KP_E: SDL_Scancode = 192;
pub const SDL_SCANCODE_KP_F: SDL_Scancode = 193;
pub const SDL_SCANCODE_KP_XOR: SDL_Scancode = 194;
pub const SDL_SCANCODE_KP_POWER: SDL_Scancode = 195;
pub const SDL_SCANCODE_KP_PERCENT: SDL_Scancode = 196;
pub const SDL_SCANCODE_KP_LESS: SDL_Scancode = 197;
pub const SDL_SCANCODE_KP_GREATER: SDL_Scancode = 198;
pub const SDL_SCANCODE_KP_AMPERSAND: SDL_Scancode = 199;
pub const SDL_SCANCODE_KP_DBLAMPERSAND: SDL_Scancode = 200;
pub const SDL_SCANCODE_KP_VERTICALBAR: SDL_Scancode = 201;
pub const SDL_SCANCODE_KP_DBLVERTICALBAR: SDL_Scancode = 202;
pub const SDL_SCANCODE_KP_COLON: SDL_Scancode = 203;
pub const SDL_SCANCODE_KP_HASH: SDL_Scancode = 204;
pub const SDL_SCANCODE_KP_SPACE: SDL_Scancode = 205;
pub const SDL_SCANCODE_KP_AT: SDL_Scancode = 206;
pub const SDL_SCANCODE_KP_EXCLAM: SDL_Scancode = 207;
pub const SDL_SCANCODE_KP_MEMSTORE: SDL_Scancode = 208;
pub const SDL_SCANCODE_KP_MEMRECALL: SDL_Scancode = 209;
pub const SDL_SCANCODE_KP_MEMCLEAR: SDL_Scancode = 210;
pub const SDL_SCANCODE_KP_MEMADD: SDL_Scancode = 211;
pub const SDL_SCANCODE_KP_MEMSUBTRACT: SDL_Scancode = 212;
pub const SDL_SCANCODE_KP_MEMMULTIPLY: SDL_Scancode = 213;
pub const SDL_SCANCODE_KP_MEMDIVIDE: SDL_Scancode = 214;
pub const SDL_SCANCODE_KP_PLUSMINUS: SDL_Scancode = 215;
pub const SDL_SCANCODE_KP_CLEAR: SDL_Scancode = 216;
pub const SDL_SCANCODE_KP_CLEARENTRY: SDL_Scancode = 217;
pub const SDL_SCANCODE_KP_BINARY: SDL_Scancode = 218;
pub const SDL_SCANCODE_KP_OCTAL: SDL_Scancode = 219;
pub const SDL_SCANCODE_KP_DECIMAL: SDL_Scancode = 220;
pub const SDL_SCANCODE_KP_HEXADECIMAL: SDL_Scancode = 221;
pub const SDL_SCANCODE_LCTRL: SDL_Scancode = 224;
pub const SDL_SCANCODE_LSHIFT: SDL_Scancode = 225;
pub const SDL_SCANCODE_LALT: SDL_Scancode = 226;
pub const SDL_SCANCODE_LGUI: SDL_Scancode = 227;
pub const SDL_SCANCODE_RCTRL: SDL_Scancode = 228;
pub const SDL_SCANCODE_RSHIFT: SDL_Scancode = 229;
pub const SDL_SCANCODE_RALT: SDL_Scancode = 230;
pub const SDL_SCANCODE_RGUI: SDL_Scancode = 231;
pub const SDL_SCANCODE_MODE: SDL_Scancode = 257;
pub const SDL_SCANCODE_AUDIONEXT: SDL_Scancode = 258;
pub const SDL_SCANCODE_AUDIOPREV: SDL_Scancode = 259;
pub const SDL_SCANCODE_AUDIOSTOP: SDL_Scancode = 260;
pub const SDL_SCANCODE_AUDIOPLAY: SDL_Scancode = 261;
pub const SDL_SCANCODE_AUDIOMUTE: SDL_Scancode = 262;
pub const SDL_SCANCODE_MEDIASELECT: SDL_Scancode = 263;
pub const SDL_SCANCODE_WWW: SDL_Scancode = 264;
pub const SDL_SCANCODE_MAIL: SDL_Scancode = 265;
pub const SDL_SCANCODE_CALCULATOR: SDL_Scancode = 266;
pub const SDL_SCANCODE_COMPUTER: SDL_Scancode = 267;
pub const SDL_SCANCODE_AC_SEARCH: SDL_Scancode = 268;
pub const SDL_SCANCODE_AC_HOME: SDL_Scancode = 269;
pub const SDL_SCANCODE_AC_BACK: SDL_Scancode = 270;
pub const SDL_SCANCODE_AC_FORWARD: SDL_Scancode = 271;
pub const SDL_SCANCODE_AC_STOP: SDL_Scancode = 272;
pub const SDL_SCANCODE_AC_REFRESH: SDL_Scancode = 273;
pub const SDL_SCANCODE_AC_BOOKMARKS: SDL_Scancode = 274;
pub const SDL_SCANCODE_BRIGHTNESSDOWN: SDL_Scancode = 275;
pub const SDL_SCANCODE_BRIGHTNESSUP: SDL_Scancode = 276;
pub const SDL_SCANCODE_DISPLAYSWITCH: SDL_Scancode = 277;
pub const SDL_SCANCODE_KBDILLUMTOGGLE: SDL_Scancode = 278;
pub const SDL_SCANCODE_KBDILLUMDOWN: SDL_Scancode = 279;
pub const SDL_SCANCODE_KBDILLUMUP: SDL_Scancode = 280;
pub const SDL_SCANCODE_EJECT: SDL_Scancode = 281;
pub const SDL_SCANCODE_SLEEP: SDL_Scancode = 282;
pub const SDL_SCANCODE_APP1: SDL_Scancode = 283;
pub const SDL_SCANCODE_APP2: SDL_Scancode = 284;
pub const SDL_SCANCODE_AUDIOREWIND: SDL_Scancode = 285;
pub const SDL_SCANCODE_AUDIOFASTFORWARD: SDL_Scancode = 286;
pub const SDL_NUM_SCANCODES: SDL_Scancode = 512;
pub type SDL_Scancode = ctypes::c_uint;
pub type SDL_Keycode = Sint32;
pub const SDLK_UNKNOWN: SDL_KeyCode = 0;
pub const SDLK_RETURN: SDL_KeyCode = 13;
pub const SDLK_ESCAPE: SDL_KeyCode = 27;
pub const SDLK_BACKSPACE: SDL_KeyCode = 8;
pub const SDLK_TAB: SDL_KeyCode = 9;
pub const SDLK_SPACE: SDL_KeyCode = 32;
pub const SDLK_EXCLAIM: SDL_KeyCode = 33;
pub const SDLK_QUOTEDBL: SDL_KeyCode = 34;
pub const SDLK_HASH: SDL_KeyCode = 35;
pub const SDLK_PERCENT: SDL_KeyCode = 37;
pub const SDLK_DOLLAR: SDL_KeyCode = 36;
pub const SDLK_AMPERSAND: SDL_KeyCode = 38;
pub const SDLK_QUOTE: SDL_KeyCode = 39;
pub const SDLK_LEFTPAREN: SDL_KeyCode = 40;
pub const SDLK_RIGHTPAREN: SDL_KeyCode = 41;
pub const SDLK_ASTERISK: SDL_KeyCode = 42;
pub const SDLK_PLUS: SDL_KeyCode = 43;
pub const SDLK_COMMA: SDL_KeyCode = 44;
pub const SDLK_MINUS: SDL_KeyCode = 45;
pub const SDLK_PERIOD: SDL_KeyCode = 46;
pub const SDLK_SLASH: SDL_KeyCode = 47;
pub const SDLK_0: SDL_KeyCode = 48;
pub const SDLK_1: SDL_KeyCode = 49;
pub const SDLK_2: SDL_KeyCode = 50;
pub const SDLK_3: SDL_KeyCode = 51;
pub const SDLK_4: SDL_KeyCode = 52;
pub const SDLK_5: SDL_KeyCode = 53;
pub const SDLK_6: SDL_KeyCode = 54;
pub const SDLK_7: SDL_KeyCode = 55;
pub const SDLK_8: SDL_KeyCode = 56;
pub const SDLK_9: SDL_KeyCode = 57;
pub const SDLK_COLON: SDL_KeyCode = 58;
pub const SDLK_SEMICOLON: SDL_KeyCode = 59;
pub const SDLK_LESS: SDL_KeyCode = 60;
pub const SDLK_EQUALS: SDL_KeyCode = 61;
pub const SDLK_GREATER: SDL_KeyCode = 62;
pub const SDLK_QUESTION: SDL_KeyCode = 63;
pub const SDLK_AT: SDL_KeyCode = 64;
pub const SDLK_LEFTBRACKET: SDL_KeyCode = 91;
pub const SDLK_BACKSLASH: SDL_KeyCode = 92;
pub const SDLK_RIGHTBRACKET: SDL_KeyCode = 93;
pub const SDLK_CARET: SDL_KeyCode = 94;
pub const SDLK_UNDERSCORE: SDL_KeyCode = 95;
pub const SDLK_BACKQUOTE: SDL_KeyCode = 96;
pub const SDLK_a: SDL_KeyCode = 97;
pub const SDLK_b: SDL_KeyCode = 98;
pub const SDLK_c: SDL_KeyCode = 99;
pub const SDLK_d: SDL_KeyCode = 100;
pub const SDLK_e: SDL_KeyCode = 101;
pub const SDLK_f: SDL_KeyCode = 102;
pub const SDLK_g: SDL_KeyCode = 103;
pub const SDLK_h: SDL_KeyCode = 104;
pub const SDLK_i: SDL_KeyCode = 105;
pub const SDLK_j: SDL_KeyCode = 106;
pub const SDLK_k: SDL_KeyCode = 107;
pub const SDLK_l: SDL_KeyCode = 108;
pub const SDLK_m: SDL_KeyCode = 109;
pub const SDLK_n: SDL_KeyCode = 110;
pub const SDLK_o: SDL_KeyCode = 111;
pub const SDLK_p: SDL_KeyCode = 112;
pub const SDLK_q: SDL_KeyCode = 113;
pub const SDLK_r: SDL_KeyCode = 114;
pub const SDLK_s: SDL_KeyCode = 115;
pub const SDLK_t: SDL_KeyCode = 116;
pub const SDLK_u: SDL_KeyCode = 117;
pub const SDLK_v: SDL_KeyCode = 118;
pub const SDLK_w: SDL_KeyCode = 119;
pub const SDLK_x: SDL_KeyCode = 120;
pub const SDLK_y: SDL_KeyCode = 121;
pub const SDLK_z: SDL_KeyCode = 122;
pub const SDLK_CAPSLOCK: SDL_KeyCode = 1073741881;
pub const SDLK_F1: SDL_KeyCode = 1073741882;
pub const SDLK_F2: SDL_KeyCode = 1073741883;
pub const SDLK_F3: SDL_KeyCode = 1073741884;
pub const SDLK_F4: SDL_KeyCode = 1073741885;
pub const SDLK_F5: SDL_KeyCode = 1073741886;
pub const SDLK_F6: SDL_KeyCode = 1073741887;
pub const SDLK_F7: SDL_KeyCode = 1073741888;
pub const SDLK_F8: SDL_KeyCode = 1073741889;
pub const SDLK_F9: SDL_KeyCode = 1073741890;
pub const SDLK_F10: SDL_KeyCode = 1073741891;
pub const SDLK_F11: SDL_KeyCode = 1073741892;
pub const SDLK_F12: SDL_KeyCode = 1073741893;
pub const SDLK_PRINTSCREEN: SDL_KeyCode = 1073741894;
pub const SDLK_SCROLLLOCK: SDL_KeyCode = 1073741895;
pub const SDLK_PAUSE: SDL_KeyCode = 1073741896;
pub const SDLK_INSERT: SDL_KeyCode = 1073741897;
pub const SDLK_HOME: SDL_KeyCode = 1073741898;
pub const SDLK_PAGEUP: SDL_KeyCode = 1073741899;
pub const SDLK_DELETE: SDL_KeyCode = 127;
pub const SDLK_END: SDL_KeyCode = 1073741901;
pub const SDLK_PAGEDOWN: SDL_KeyCode = 1073741902;
pub const SDLK_RIGHT: SDL_KeyCode = 1073741903;
pub const SDLK_LEFT: SDL_KeyCode = 1073741904;
pub const SDLK_DOWN: SDL_KeyCode = 1073741905;
pub const SDLK_UP: SDL_KeyCode = 1073741906;
pub const SDLK_NUMLOCKCLEAR: SDL_KeyCode = 1073741907;
pub const SDLK_KP_DIVIDE: SDL_KeyCode = 1073741908;
pub const SDLK_KP_MULTIPLY: SDL_KeyCode = 1073741909;
pub const SDLK_KP_MINUS: SDL_KeyCode = 1073741910;
pub const SDLK_KP_PLUS: SDL_KeyCode = 1073741911;
pub const SDLK_KP_ENTER: SDL_KeyCode = 1073741912;
pub const SDLK_KP_1: SDL_KeyCode = 1073741913;
pub const SDLK_KP_2: SDL_KeyCode = 1073741914;
pub const SDLK_KP_3: SDL_KeyCode = 1073741915;
pub const SDLK_KP_4: SDL_KeyCode = 1073741916;
pub const SDLK_KP_5: SDL_KeyCode = 1073741917;
pub const SDLK_KP_6: SDL_KeyCode = 1073741918;
pub const SDLK_KP_7: SDL_KeyCode = 1073741919;
pub const SDLK_KP_8: SDL_KeyCode = 1073741920;
pub const SDLK_KP_9: SDL_KeyCode = 1073741921;
pub const SDLK_KP_0: SDL_KeyCode = 1073741922;
pub const SDLK_KP_PERIOD: SDL_KeyCode = 1073741923;
pub const SDLK_APPLICATION: SDL_KeyCode = 1073741925;
pub const SDLK_POWER: SDL_KeyCode = 1073741926;
pub const SDLK_KP_EQUALS: SDL_KeyCode = 1073741927;
pub const SDLK_F13: SDL_KeyCode = 1073741928;
pub const SDLK_F14: SDL_KeyCode = 1073741929;
pub const SDLK_F15: SDL_KeyCode = 1073741930;
pub const SDLK_F16: SDL_KeyCode = 1073741931;
pub const SDLK_F17: SDL_KeyCode = 1073741932;
pub const SDLK_F18: SDL_KeyCode = 1073741933;
pub const SDLK_F19: SDL_KeyCode = 1073741934;
pub const SDLK_F20: SDL_KeyCode = 1073741935;
pub const SDLK_F21: SDL_KeyCode = 1073741936;
pub const SDLK_F22: SDL_KeyCode = 1073741937;
pub const SDLK_F23: SDL_KeyCode = 1073741938;
pub const SDLK_F24: SDL_KeyCode = 1073741939;
pub const SDLK_EXECUTE: SDL_KeyCode = 1073741940;
pub const SDLK_HELP: SDL_KeyCode = 1073741941;
pub const SDLK_MENU: SDL_KeyCode = 1073741942;
pub const SDLK_SELECT: SDL_KeyCode = 1073741943;
pub const SDLK_STOP: SDL_KeyCode = 1073741944;
pub const SDLK_AGAIN: SDL_KeyCode = 1073741945;
pub const SDLK_UNDO: SDL_KeyCode = 1073741946;
pub const SDLK_CUT: SDL_KeyCode = 1073741947;
pub const SDLK_COPY: SDL_KeyCode = 1073741948;
pub const SDLK_PASTE: SDL_KeyCode = 1073741949;
pub const SDLK_FIND: SDL_KeyCode = 1073741950;
pub const SDLK_MUTE: SDL_KeyCode = 1073741951;
pub const SDLK_VOLUMEUP: SDL_KeyCode = 1073741952;
pub const SDLK_VOLUMEDOWN: SDL_KeyCode = 1073741953;
pub const SDLK_KP_COMMA: SDL_KeyCode = 1073741957;
pub const SDLK_KP_EQUALSAS400: SDL_KeyCode = 1073741958;
pub const SDLK_ALTERASE: SDL_KeyCode = 1073741977;
pub const SDLK_SYSREQ: SDL_KeyCode = 1073741978;
pub const SDLK_CANCEL: SDL_KeyCode = 1073741979;
pub const SDLK_CLEAR: SDL_KeyCode = 1073741980;
pub const SDLK_PRIOR: SDL_KeyCode = 1073741981;
pub const SDLK_RETURN2: SDL_KeyCode = 1073741982;
pub const SDLK_SEPARATOR: SDL_KeyCode = 1073741983;
pub const SDLK_OUT: SDL_KeyCode = 1073741984;
pub const SDLK_OPER: SDL_KeyCode = 1073741985;
pub const SDLK_CLEARAGAIN: SDL_KeyCode = 1073741986;
pub const SDLK_CRSEL: SDL_KeyCode = 1073741987;
pub const SDLK_EXSEL: SDL_KeyCode = 1073741988;
pub const SDLK_KP_00: SDL_KeyCode = 1073742000;
pub const SDLK_KP_000: SDL_KeyCode = 1073742001;
pub const SDLK_THOUSANDSSEPARATOR: SDL_KeyCode = 1073742002;
pub const SDLK_DECIMALSEPARATOR: SDL_KeyCode = 1073742003;
pub const SDLK_CURRENCYUNIT: SDL_KeyCode = 1073742004;
pub const SDLK_CURRENCYSUBUNIT: SDL_KeyCode = 1073742005;
pub const SDLK_KP_LEFTPAREN: SDL_KeyCode = 1073742006;
pub const SDLK_KP_RIGHTPAREN: SDL_KeyCode = 1073742007;
pub const SDLK_KP_LEFTBRACE: SDL_KeyCode = 1073742008;
pub const SDLK_KP_RIGHTBRACE: SDL_KeyCode = 1073742009;
pub const SDLK_KP_TAB: SDL_KeyCode = 1073742010;
pub const SDLK_KP_BACKSPACE: SDL_KeyCode = 1073742011;
pub const SDLK_KP_A: SDL_KeyCode = 1073742012;
pub const SDLK_KP_B: SDL_KeyCode = 1073742013;
pub const SDLK_KP_C: SDL_KeyCode = 1073742014;
pub const SDLK_KP_D: SDL_KeyCode = 1073742015;
pub const SDLK_KP_E: SDL_KeyCode = 1073742016;
pub const SDLK_KP_F: SDL_KeyCode = 1073742017;
pub const SDLK_KP_XOR: SDL_KeyCode = 1073742018;
pub const SDLK_KP_POWER: SDL_KeyCode = 1073742019;
pub const SDLK_KP_PERCENT: SDL_KeyCode = 1073742020;
pub const SDLK_KP_LESS: SDL_KeyCode = 1073742021;
pub const SDLK_KP_GREATER: SDL_KeyCode = 1073742022;
pub const SDLK_KP_AMPERSAND: SDL_KeyCode = 1073742023;
pub const SDLK_KP_DBLAMPERSAND: SDL_KeyCode = 1073742024;
pub const SDLK_KP_VERTICALBAR: SDL_KeyCode = 1073742025;
pub const SDLK_KP_DBLVERTICALBAR: SDL_KeyCode = 1073742026;
pub const SDLK_KP_COLON: SDL_KeyCode = 1073742027;
pub const SDLK_KP_HASH: SDL_KeyCode = 1073742028;
pub const SDLK_KP_SPACE: SDL_KeyCode = 1073742029;
pub const SDLK_KP_AT: SDL_KeyCode = 1073742030;
pub const SDLK_KP_EXCLAM: SDL_KeyCode = 1073742031;
pub const SDLK_KP_MEMSTORE: SDL_KeyCode = 1073742032;
pub const SDLK_KP_MEMRECALL: SDL_KeyCode = 1073742033;
pub const SDLK_KP_MEMCLEAR: SDL_KeyCode = 1073742034;
pub const SDLK_KP_MEMADD: SDL_KeyCode = 1073742035;
pub const SDLK_KP_MEMSUBTRACT: SDL_KeyCode = 1073742036;
pub const SDLK_KP_MEMMULTIPLY: SDL_KeyCode = 1073742037;
pub const SDLK_KP_MEMDIVIDE: SDL_KeyCode = 1073742038;
pub const SDLK_KP_PLUSMINUS: SDL_KeyCode = 1073742039;
pub const SDLK_KP_CLEAR: SDL_KeyCode = 1073742040;
pub const SDLK_KP_CLEARENTRY: SDL_KeyCode = 1073742041;
pub const SDLK_KP_BINARY: SDL_KeyCode = 1073742042;
pub const SDLK_KP_OCTAL: SDL_KeyCode = 1073742043;
pub const SDLK_KP_DECIMAL: SDL_KeyCode = 1073742044;
pub const SDLK_KP_HEXADECIMAL: SDL_KeyCode = 1073742045;
pub const SDLK_LCTRL: SDL_KeyCode = 1073742048;
pub const SDLK_LSHIFT: SDL_KeyCode = 1073742049;
pub const SDLK_LALT: SDL_KeyCode = 1073742050;
pub const SDLK_LGUI: SDL_KeyCode = 1073742051;
pub const SDLK_RCTRL: SDL_KeyCode = 1073742052;
pub const SDLK_RSHIFT: SDL_KeyCode = 1073742053;
pub const SDLK_RALT: SDL_KeyCode = 1073742054;
pub const SDLK_RGUI: SDL_KeyCode = 1073742055;
pub const SDLK_MODE: SDL_KeyCode = 1073742081;
pub const SDLK_AUDIONEXT: SDL_KeyCode = 1073742082;
pub const SDLK_AUDIOPREV: SDL_KeyCode = 1073742083;
pub const SDLK_AUDIOSTOP: SDL_KeyCode = 1073742084;
pub const SDLK_AUDIOPLAY: SDL_KeyCode = 1073742085;
pub const SDLK_AUDIOMUTE: SDL_KeyCode = 1073742086;
pub const SDLK_MEDIASELECT: SDL_KeyCode = 1073742087;
pub const SDLK_WWW: SDL_KeyCode = 1073742088;
pub const SDLK_MAIL: SDL_KeyCode = 1073742089;
pub const SDLK_CALCULATOR: SDL_KeyCode = 1073742090;
pub const SDLK_COMPUTER: SDL_KeyCode = 1073742091;
pub const SDLK_AC_SEARCH: SDL_KeyCode = 1073742092;
pub const SDLK_AC_HOME: SDL_KeyCode = 1073742093;
pub const SDLK_AC_BACK: SDL_KeyCode = 1073742094;
pub const SDLK_AC_FORWARD: SDL_KeyCode = 1073742095;
pub const SDLK_AC_STOP: SDL_KeyCode = 1073742096;
pub const SDLK_AC_REFRESH: SDL_KeyCode = 1073742097;
pub const SDLK_AC_BOOKMARKS: SDL_KeyCode = 1073742098;
pub const SDLK_BRIGHTNESSDOWN: SDL_KeyCode = 1073742099;
pub const SDLK_BRIGHTNESSUP: SDL_KeyCode = 1073742100;
pub const SDLK_DISPLAYSWITCH: SDL_KeyCode = 1073742101;
pub const SDLK_KBDILLUMTOGGLE: SDL_KeyCode = 1073742102;
pub const SDLK_KBDILLUMDOWN: SDL_KeyCode = 1073742103;
pub const SDLK_KBDILLUMUP: SDL_KeyCode = 1073742104;
pub const SDLK_EJECT: SDL_KeyCode = 1073742105;
pub const SDLK_SLEEP: SDL_KeyCode = 1073742106;
pub const SDLK_APP1: SDL_KeyCode = 1073742107;
pub const SDLK_APP2: SDL_KeyCode = 1073742108;
pub const SDLK_AUDIOREWIND: SDL_KeyCode = 1073742109;
pub const SDLK_AUDIOFASTFORWARD: SDL_KeyCode = 1073742110;
pub type SDL_KeyCode = ctypes::c_uint;
pub const KMOD_NONE: SDL_Keymod = 0;
pub const KMOD_LSHIFT: SDL_Keymod = 1;
pub const KMOD_RSHIFT: SDL_Keymod = 2;
pub const KMOD_LCTRL: SDL_Keymod = 64;
pub const KMOD_RCTRL: SDL_Keymod = 128;
pub const KMOD_LALT: SDL_Keymod = 256;
pub const KMOD_RALT: SDL_Keymod = 512;
pub const KMOD_LGUI: SDL_Keymod = 1024;
pub const KMOD_RGUI: SDL_Keymod = 2048;
pub const KMOD_NUM: SDL_Keymod = 4096;
pub const KMOD_CAPS: SDL_Keymod = 8192;
pub const KMOD_MODE: SDL_Keymod = 16384;
pub const KMOD_RESERVED: SDL_Keymod = 32768;
pub const KMOD_CTRL: SDL_Keymod = 192;
pub const KMOD_SHIFT: SDL_Keymod = 3;
pub const KMOD_ALT: SDL_Keymod = 768;
pub const KMOD_GUI: SDL_Keymod = 3072;
pub type SDL_Keymod = ctypes::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SDL_Keysym {
    pub scancode: SDL_Scancode,
    pub sym: SDL_Keycode,
    pub mod_: Uint16,
    pub unused: Uint32,
}
#[test]
fn bindgen_test_layout_SDL_Keysym() {
    assert_eq!(
        ::core::mem::size_of::<SDL_Keysym>(),
        16usize,
        concat!("Size of: ", stringify!(SDL_Keysym))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_Keysym>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_Keysym))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Keysym>())).scancode as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Keysym),
            "::",
            stringify!(scancode)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Keysym>())).sym as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Keysym),
            "::",
            stringify!(sym)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Keysym>())).mod_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Keysym),
            "::",
            stringify!(mod_)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Keysym>())).unused as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Keysym),
            "::",
            stringify!(unused)
        )
    );
}
impl Default for SDL_Keysym {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn SDL_GetKeyboardFocus() -> *mut SDL_Window;
}
extern "C" {
    pub fn SDL_GetKeyboardState(numkeys: *mut ctypes::c_int) -> *const Uint8;
}
extern "C" {
    pub fn SDL_GetModState() -> SDL_Keymod;
}
extern "C" {
    pub fn SDL_SetModState(modstate: SDL_Keymod);
}
extern "C" {
    pub fn SDL_GetKeyFromScancode(scancode: SDL_Scancode) -> SDL_Keycode;
}
extern "C" {
    pub fn SDL_GetScancodeFromKey(key: SDL_Keycode) -> SDL_Scancode;
}
extern "C" {
    pub fn SDL_GetScancodeName(scancode: SDL_Scancode) -> *const ctypes::c_char;
}
extern "C" {
    pub fn SDL_GetScancodeFromName(name: *const ctypes::c_char) -> SDL_Scancode;
}
extern "C" {
    pub fn SDL_GetKeyName(key: SDL_Keycode) -> *const ctypes::c_char;
}
extern "C" {
    pub fn SDL_GetKeyFromName(name: *const ctypes::c_char) -> SDL_Keycode;
}
extern "C" {
    pub fn SDL_StartTextInput();
}
extern "C" {
    pub fn SDL_IsTextInputActive() -> SDL_bool;
}
extern "C" {
    pub fn SDL_StopTextInput();
}
extern "C" {
    pub fn SDL_SetTextInputRect(rect: *mut SDL_Rect);
}
extern "C" {
    pub fn SDL_HasScreenKeyboardSupport() -> SDL_bool;
}
extern "C" {
    pub fn SDL_IsScreenKeyboardShown(window: *mut SDL_Window) -> SDL_bool;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SDL_Cursor {
    _unused: [u8; 0],
}
pub const SDL_SYSTEM_CURSOR_ARROW: SDL_SystemCursor = 0;
pub const SDL_SYSTEM_CURSOR_IBEAM: SDL_SystemCursor = 1;
pub const SDL_SYSTEM_CURSOR_WAIT: SDL_SystemCursor = 2;
pub const SDL_SYSTEM_CURSOR_CROSSHAIR: SDL_SystemCursor = 3;
pub const SDL_SYSTEM_CURSOR_WAITARROW: SDL_SystemCursor = 4;
pub const SDL_SYSTEM_CURSOR_SIZENWSE: SDL_SystemCursor = 5;
pub const SDL_SYSTEM_CURSOR_SIZENESW: SDL_SystemCursor = 6;
pub const SDL_SYSTEM_CURSOR_SIZEWE: SDL_SystemCursor = 7;
pub const SDL_SYSTEM_CURSOR_SIZENS: SDL_SystemCursor = 8;
pub const SDL_SYSTEM_CURSOR_SIZEALL: SDL_SystemCursor = 9;
pub const SDL_SYSTEM_CURSOR_NO: SDL_SystemCursor = 10;
pub const SDL_SYSTEM_CURSOR_HAND: SDL_SystemCursor = 11;
pub const SDL_NUM_SYSTEM_CURSORS: SDL_SystemCursor = 12;
pub type SDL_SystemCursor = ctypes::c_uint;
pub const SDL_MOUSEWHEEL_NORMAL: SDL_MouseWheelDirection = 0;
pub const SDL_MOUSEWHEEL_FLIPPED: SDL_MouseWheelDirection = 1;
pub type SDL_MouseWheelDirection = ctypes::c_uint;
extern "C" {
    pub fn SDL_GetMouseFocus() -> *mut SDL_Window;
}
extern "C" {
    pub fn SDL_GetMouseState(x: *mut ctypes::c_int, y: *mut ctypes::c_int) -> Uint32;
}
extern "C" {
    pub fn SDL_GetGlobalMouseState(x: *mut ctypes::c_int, y: *mut ctypes::c_int) -> Uint32;
}
extern "C" {
    pub fn SDL_GetRelativeMouseState(x: *mut ctypes::c_int, y: *mut ctypes::c_int) -> Uint32;
}
extern "C" {
    pub fn SDL_WarpMouseInWindow(window: *mut SDL_Window, x: ctypes::c_int, y: ctypes::c_int);
}
extern "C" {
    pub fn SDL_WarpMouseGlobal(x: ctypes::c_int, y: ctypes::c_int) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_SetRelativeMouseMode(enabled: SDL_bool) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_CaptureMouse(enabled: SDL_bool) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_GetRelativeMouseMode() -> SDL_bool;
}
extern "C" {
    pub fn SDL_CreateCursor(
        data: *const Uint8,
        mask: *const Uint8,
        w: ctypes::c_int,
        h: ctypes::c_int,
        hot_x: ctypes::c_int,
        hot_y: ctypes::c_int,
    ) -> *mut SDL_Cursor;
}
extern "C" {
    pub fn SDL_CreateColorCursor(
        surface: *mut SDL_Surface,
        hot_x: ctypes::c_int,
        hot_y: ctypes::c_int,
    ) -> *mut SDL_Cursor;
}
extern "C" {
    pub fn SDL_CreateSystemCursor(id: SDL_SystemCursor) -> *mut SDL_Cursor;
}
extern "C" {
    pub fn SDL_SetCursor(cursor: *mut SDL_Cursor);
}
extern "C" {
    pub fn SDL_GetCursor() -> *mut SDL_Cursor;
}
extern "C" {
    pub fn SDL_GetDefaultCursor() -> *mut SDL_Cursor;
}
extern "C" {
    pub fn SDL_FreeCursor(cursor: *mut SDL_Cursor);
}
extern "C" {
    pub fn SDL_ShowCursor(toggle: ctypes::c_int) -> ctypes::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _SDL_Joystick {
    _unused: [u8; 0],
}
pub type SDL_Joystick = _SDL_Joystick;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct SDL_JoystickGUID {
    pub data: [Uint8; 16usize],
}
#[test]
fn bindgen_test_layout_SDL_JoystickGUID() {
    assert_eq!(
        ::core::mem::size_of::<SDL_JoystickGUID>(),
        16usize,
        concat!("Size of: ", stringify!(SDL_JoystickGUID))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_JoystickGUID>(),
        1usize,
        concat!("Alignment of ", stringify!(SDL_JoystickGUID))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_JoystickGUID>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoystickGUID),
            "::",
            stringify!(data)
        )
    );
}
pub type SDL_JoystickID = Sint32;
pub const SDL_JOYSTICK_TYPE_UNKNOWN: SDL_JoystickType = 0;
pub const SDL_JOYSTICK_TYPE_GAMECONTROLLER: SDL_JoystickType = 1;
pub const SDL_JOYSTICK_TYPE_WHEEL: SDL_JoystickType = 2;
pub const SDL_JOYSTICK_TYPE_ARCADE_STICK: SDL_JoystickType = 3;
pub const SDL_JOYSTICK_TYPE_FLIGHT_STICK: SDL_JoystickType = 4;
pub const SDL_JOYSTICK_TYPE_DANCE_PAD: SDL_JoystickType = 5;
pub const SDL_JOYSTICK_TYPE_GUITAR: SDL_JoystickType = 6;
pub const SDL_JOYSTICK_TYPE_DRUM_KIT: SDL_JoystickType = 7;
pub const SDL_JOYSTICK_TYPE_ARCADE_PAD: SDL_JoystickType = 8;
pub const SDL_JOYSTICK_TYPE_THROTTLE: SDL_JoystickType = 9;
pub type SDL_JoystickType = ctypes::c_uint;
pub const SDL_JOYSTICK_POWER_UNKNOWN: SDL_JoystickPowerLevel = -1;
pub const SDL_JOYSTICK_POWER_EMPTY: SDL_JoystickPowerLevel = 0;
pub const SDL_JOYSTICK_POWER_LOW: SDL_JoystickPowerLevel = 1;
pub const SDL_JOYSTICK_POWER_MEDIUM: SDL_JoystickPowerLevel = 2;
pub const SDL_JOYSTICK_POWER_FULL: SDL_JoystickPowerLevel = 3;
pub const SDL_JOYSTICK_POWER_WIRED: SDL_JoystickPowerLevel = 4;
pub const SDL_JOYSTICK_POWER_MAX: SDL_JoystickPowerLevel = 5;
pub type SDL_JoystickPowerLevel = ctypes::c_int;
extern "C" {
    pub fn SDL_LockJoysticks();
}
extern "C" {
    pub fn SDL_UnlockJoysticks();
}
extern "C" {
    pub fn SDL_NumJoysticks() -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_JoystickNameForIndex(device_index: ctypes::c_int) -> *const ctypes::c_char;
}
extern "C" {
    pub fn SDL_JoystickGetDevicePlayerIndex(device_index: ctypes::c_int) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_JoystickGetDeviceGUID(device_index: ctypes::c_int) -> SDL_JoystickGUID;
}
extern "C" {
    pub fn SDL_JoystickGetDeviceVendor(device_index: ctypes::c_int) -> Uint16;
}
extern "C" {
    pub fn SDL_JoystickGetDeviceProduct(device_index: ctypes::c_int) -> Uint16;
}
extern "C" {
    pub fn SDL_JoystickGetDeviceProductVersion(device_index: ctypes::c_int) -> Uint16;
}
extern "C" {
    pub fn SDL_JoystickGetDeviceType(device_index: ctypes::c_int) -> SDL_JoystickType;
}
extern "C" {
    pub fn SDL_JoystickGetDeviceInstanceID(device_index: ctypes::c_int) -> SDL_JoystickID;
}
extern "C" {
    pub fn SDL_JoystickOpen(device_index: ctypes::c_int) -> *mut SDL_Joystick;
}
extern "C" {
    pub fn SDL_JoystickFromInstanceID(instance_id: SDL_JoystickID) -> *mut SDL_Joystick;
}
extern "C" {
    pub fn SDL_JoystickFromPlayerIndex(player_index: ctypes::c_int) -> *mut SDL_Joystick;
}
extern "C" {
    pub fn SDL_JoystickAttachVirtual(
        type_: SDL_JoystickType,
        naxes: ctypes::c_int,
        nbuttons: ctypes::c_int,
        nhats: ctypes::c_int,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_JoystickDetachVirtual(device_index: ctypes::c_int) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_JoystickIsVirtual(device_index: ctypes::c_int) -> SDL_bool;
}
extern "C" {
    pub fn SDL_JoystickSetVirtualAxis(
        joystick: *mut SDL_Joystick,
        axis: ctypes::c_int,
        value: Sint16,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_JoystickSetVirtualButton(
        joystick: *mut SDL_Joystick,
        button: ctypes::c_int,
        value: Uint8,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_JoystickSetVirtualHat(
        joystick: *mut SDL_Joystick,
        hat: ctypes::c_int,
        value: Uint8,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_JoystickName(joystick: *mut SDL_Joystick) -> *const ctypes::c_char;
}
extern "C" {
    pub fn SDL_JoystickGetPlayerIndex(joystick: *mut SDL_Joystick) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_JoystickSetPlayerIndex(joystick: *mut SDL_Joystick, player_index: ctypes::c_int);
}
extern "C" {
    pub fn SDL_JoystickGetGUID(joystick: *mut SDL_Joystick) -> SDL_JoystickGUID;
}
extern "C" {
    pub fn SDL_JoystickGetVendor(joystick: *mut SDL_Joystick) -> Uint16;
}
extern "C" {
    pub fn SDL_JoystickGetProduct(joystick: *mut SDL_Joystick) -> Uint16;
}
extern "C" {
    pub fn SDL_JoystickGetProductVersion(joystick: *mut SDL_Joystick) -> Uint16;
}
extern "C" {
    pub fn SDL_JoystickGetSerial(joystick: *mut SDL_Joystick) -> *const ctypes::c_char;
}
extern "C" {
    pub fn SDL_JoystickGetType(joystick: *mut SDL_Joystick) -> SDL_JoystickType;
}
extern "C" {
    pub fn SDL_JoystickGetGUIDString(
        guid: SDL_JoystickGUID,
        pszGUID: *mut ctypes::c_char,
        cbGUID: ctypes::c_int,
    );
}
extern "C" {
    pub fn SDL_JoystickGetGUIDFromString(pchGUID: *const ctypes::c_char) -> SDL_JoystickGUID;
}
extern "C" {
    pub fn SDL_JoystickGetAttached(joystick: *mut SDL_Joystick) -> SDL_bool;
}
extern "C" {
    pub fn SDL_JoystickInstanceID(joystick: *mut SDL_Joystick) -> SDL_JoystickID;
}
extern "C" {
    pub fn SDL_JoystickNumAxes(joystick: *mut SDL_Joystick) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_JoystickNumBalls(joystick: *mut SDL_Joystick) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_JoystickNumHats(joystick: *mut SDL_Joystick) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_JoystickNumButtons(joystick: *mut SDL_Joystick) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_JoystickUpdate();
}
extern "C" {
    pub fn SDL_JoystickEventState(state: ctypes::c_int) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_JoystickGetAxis(joystick: *mut SDL_Joystick, axis: ctypes::c_int) -> Sint16;
}
extern "C" {
    pub fn SDL_JoystickGetAxisInitialState(
        joystick: *mut SDL_Joystick,
        axis: ctypes::c_int,
        state: *mut Sint16,
    ) -> SDL_bool;
}
extern "C" {
    pub fn SDL_JoystickGetHat(joystick: *mut SDL_Joystick, hat: ctypes::c_int) -> Uint8;
}
extern "C" {
    pub fn SDL_JoystickGetBall(
        joystick: *mut SDL_Joystick,
        ball: ctypes::c_int,
        dx: *mut ctypes::c_int,
        dy: *mut ctypes::c_int,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_JoystickGetButton(joystick: *mut SDL_Joystick, button: ctypes::c_int) -> Uint8;
}
extern "C" {
    pub fn SDL_JoystickRumble(
        joystick: *mut SDL_Joystick,
        low_frequency_rumble: Uint16,
        high_frequency_rumble: Uint16,
        duration_ms: Uint32,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_JoystickRumbleTriggers(
        joystick: *mut SDL_Joystick,
        left_rumble: Uint16,
        right_rumble: Uint16,
        duration_ms: Uint32,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_JoystickHasLED(joystick: *mut SDL_Joystick) -> SDL_bool;
}
extern "C" {
    pub fn SDL_JoystickSetLED(
        joystick: *mut SDL_Joystick,
        red: Uint8,
        green: Uint8,
        blue: Uint8,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_JoystickSendEffect(
        joystick: *mut SDL_Joystick,
        data: *const ctypes::c_void,
        size: ctypes::c_int,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_JoystickClose(joystick: *mut SDL_Joystick);
}
extern "C" {
    pub fn SDL_JoystickCurrentPowerLevel(joystick: *mut SDL_Joystick) -> SDL_JoystickPowerLevel;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _SDL_Sensor {
    _unused: [u8; 0],
}
pub type SDL_Sensor = _SDL_Sensor;
pub type SDL_SensorID = Sint32;
pub const SDL_SENSOR_INVALID: SDL_SensorType = -1;
pub const SDL_SENSOR_UNKNOWN: SDL_SensorType = 0;
pub const SDL_SENSOR_ACCEL: SDL_SensorType = 1;
pub const SDL_SENSOR_GYRO: SDL_SensorType = 2;
pub type SDL_SensorType = ctypes::c_int;
extern "C" {
    pub fn SDL_LockSensors();
}
extern "C" {
    pub fn SDL_UnlockSensors();
}
extern "C" {
    pub fn SDL_NumSensors() -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_SensorGetDeviceName(device_index: ctypes::c_int) -> *const ctypes::c_char;
}
extern "C" {
    pub fn SDL_SensorGetDeviceType(device_index: ctypes::c_int) -> SDL_SensorType;
}
extern "C" {
    pub fn SDL_SensorGetDeviceNonPortableType(device_index: ctypes::c_int) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_SensorGetDeviceInstanceID(device_index: ctypes::c_int) -> SDL_SensorID;
}
extern "C" {
    pub fn SDL_SensorOpen(device_index: ctypes::c_int) -> *mut SDL_Sensor;
}
extern "C" {
    pub fn SDL_SensorFromInstanceID(instance_id: SDL_SensorID) -> *mut SDL_Sensor;
}
extern "C" {
    pub fn SDL_SensorGetName(sensor: *mut SDL_Sensor) -> *const ctypes::c_char;
}
extern "C" {
    pub fn SDL_SensorGetType(sensor: *mut SDL_Sensor) -> SDL_SensorType;
}
extern "C" {
    pub fn SDL_SensorGetNonPortableType(sensor: *mut SDL_Sensor) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_SensorGetInstanceID(sensor: *mut SDL_Sensor) -> SDL_SensorID;
}
extern "C" {
    pub fn SDL_SensorGetData(
        sensor: *mut SDL_Sensor,
        data: *mut f32,
        num_values: ctypes::c_int,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_SensorClose(sensor: *mut SDL_Sensor);
}
extern "C" {
    pub fn SDL_SensorUpdate();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _SDL_GameController {
    _unused: [u8; 0],
}
pub type SDL_GameController = _SDL_GameController;
pub const SDL_CONTROLLER_TYPE_UNKNOWN: SDL_GameControllerType = 0;
pub const SDL_CONTROLLER_TYPE_XBOX360: SDL_GameControllerType = 1;
pub const SDL_CONTROLLER_TYPE_XBOXONE: SDL_GameControllerType = 2;
pub const SDL_CONTROLLER_TYPE_PS3: SDL_GameControllerType = 3;
pub const SDL_CONTROLLER_TYPE_PS4: SDL_GameControllerType = 4;
pub const SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_PRO: SDL_GameControllerType = 5;
pub const SDL_CONTROLLER_TYPE_VIRTUAL: SDL_GameControllerType = 6;
pub const SDL_CONTROLLER_TYPE_PS5: SDL_GameControllerType = 7;
pub const SDL_CONTROLLER_TYPE_AMAZON_LUNA: SDL_GameControllerType = 8;
pub const SDL_CONTROLLER_TYPE_GOOGLE_STADIA: SDL_GameControllerType = 9;
pub type SDL_GameControllerType = ctypes::c_uint;
pub const SDL_CONTROLLER_BINDTYPE_NONE: SDL_GameControllerBindType = 0;
pub const SDL_CONTROLLER_BINDTYPE_BUTTON: SDL_GameControllerBindType = 1;
pub const SDL_CONTROLLER_BINDTYPE_AXIS: SDL_GameControllerBindType = 2;
pub const SDL_CONTROLLER_BINDTYPE_HAT: SDL_GameControllerBindType = 3;
pub type SDL_GameControllerBindType = ctypes::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SDL_GameControllerButtonBind {
    pub bindType: SDL_GameControllerBindType,
    pub value: SDL_GameControllerButtonBind__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union SDL_GameControllerButtonBind__bindgen_ty_1 {
    pub button: ctypes::c_int,
    pub axis: ctypes::c_int,
    pub hat: SDL_GameControllerButtonBind__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct SDL_GameControllerButtonBind__bindgen_ty_1__bindgen_ty_1 {
    pub hat: ctypes::c_int,
    pub hat_mask: ctypes::c_int,
}
#[test]
fn bindgen_test_layout_SDL_GameControllerButtonBind__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<SDL_GameControllerButtonBind__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(SDL_GameControllerButtonBind__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_GameControllerButtonBind__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(SDL_GameControllerButtonBind__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SDL_GameControllerButtonBind__bindgen_ty_1__bindgen_ty_1>()))
                .hat as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GameControllerButtonBind__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(hat)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SDL_GameControllerButtonBind__bindgen_ty_1__bindgen_ty_1>()))
                .hat_mask as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GameControllerButtonBind__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(hat_mask)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_GameControllerButtonBind__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<SDL_GameControllerButtonBind__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(SDL_GameControllerButtonBind__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_GameControllerButtonBind__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(SDL_GameControllerButtonBind__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SDL_GameControllerButtonBind__bindgen_ty_1>())).button
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GameControllerButtonBind__bindgen_ty_1),
            "::",
            stringify!(button)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SDL_GameControllerButtonBind__bindgen_ty_1>())).axis as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GameControllerButtonBind__bindgen_ty_1),
            "::",
            stringify!(axis)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SDL_GameControllerButtonBind__bindgen_ty_1>())).hat as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GameControllerButtonBind__bindgen_ty_1),
            "::",
            stringify!(hat)
        )
    );
}
impl Default for SDL_GameControllerButtonBind__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_SDL_GameControllerButtonBind() {
    assert_eq!(
        ::core::mem::size_of::<SDL_GameControllerButtonBind>(),
        12usize,
        concat!("Size of: ", stringify!(SDL_GameControllerButtonBind))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_GameControllerButtonBind>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_GameControllerButtonBind))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SDL_GameControllerButtonBind>())).bindType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GameControllerButtonBind),
            "::",
            stringify!(bindType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SDL_GameControllerButtonBind>())).value as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GameControllerButtonBind),
            "::",
            stringify!(value)
        )
    );
}
impl Default for SDL_GameControllerButtonBind {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn SDL_GameControllerAddMappingsFromRW(
        rw: *mut SDL_RWops,
        freerw: ctypes::c_int,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_GameControllerAddMapping(mappingString: *const ctypes::c_char) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_GameControllerNumMappings() -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_GameControllerMappingForIndex(mapping_index: ctypes::c_int) -> *mut ctypes::c_char;
}
extern "C" {
    pub fn SDL_GameControllerMappingForGUID(guid: SDL_JoystickGUID) -> *mut ctypes::c_char;
}
extern "C" {
    pub fn SDL_GameControllerMapping(
        gamecontroller: *mut SDL_GameController,
    ) -> *mut ctypes::c_char;
}
extern "C" {
    pub fn SDL_IsGameController(joystick_index: ctypes::c_int) -> SDL_bool;
}
extern "C" {
    pub fn SDL_GameControllerNameForIndex(joystick_index: ctypes::c_int) -> *const ctypes::c_char;
}
extern "C" {
    pub fn SDL_GameControllerTypeForIndex(joystick_index: ctypes::c_int) -> SDL_GameControllerType;
}
extern "C" {
    pub fn SDL_GameControllerMappingForDeviceIndex(
        joystick_index: ctypes::c_int,
    ) -> *mut ctypes::c_char;
}
extern "C" {
    pub fn SDL_GameControllerOpen(joystick_index: ctypes::c_int) -> *mut SDL_GameController;
}
extern "C" {
    pub fn SDL_GameControllerFromInstanceID(joyid: SDL_JoystickID) -> *mut SDL_GameController;
}
extern "C" {
    pub fn SDL_GameControllerFromPlayerIndex(
        player_index: ctypes::c_int,
    ) -> *mut SDL_GameController;
}
extern "C" {
    pub fn SDL_GameControllerName(gamecontroller: *mut SDL_GameController)
        -> *const ctypes::c_char;
}
extern "C" {
    pub fn SDL_GameControllerGetType(
        gamecontroller: *mut SDL_GameController,
    ) -> SDL_GameControllerType;
}
extern "C" {
    pub fn SDL_GameControllerGetPlayerIndex(
        gamecontroller: *mut SDL_GameController,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_GameControllerSetPlayerIndex(
        gamecontroller: *mut SDL_GameController,
        player_index: ctypes::c_int,
    );
}
extern "C" {
    pub fn SDL_GameControllerGetVendor(gamecontroller: *mut SDL_GameController) -> Uint16;
}
extern "C" {
    pub fn SDL_GameControllerGetProduct(gamecontroller: *mut SDL_GameController) -> Uint16;
}
extern "C" {
    pub fn SDL_GameControllerGetProductVersion(gamecontroller: *mut SDL_GameController) -> Uint16;
}
extern "C" {
    pub fn SDL_GameControllerGetSerial(
        gamecontroller: *mut SDL_GameController,
    ) -> *const ctypes::c_char;
}
extern "C" {
    pub fn SDL_GameControllerGetAttached(gamecontroller: *mut SDL_GameController) -> SDL_bool;
}
extern "C" {
    pub fn SDL_GameControllerGetJoystick(
        gamecontroller: *mut SDL_GameController,
    ) -> *mut SDL_Joystick;
}
extern "C" {
    pub fn SDL_GameControllerEventState(state: ctypes::c_int) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_GameControllerUpdate();
}
pub const SDL_CONTROLLER_AXIS_INVALID: SDL_GameControllerAxis = -1;
pub const SDL_CONTROLLER_AXIS_LEFTX: SDL_GameControllerAxis = 0;
pub const SDL_CONTROLLER_AXIS_LEFTY: SDL_GameControllerAxis = 1;
pub const SDL_CONTROLLER_AXIS_RIGHTX: SDL_GameControllerAxis = 2;
pub const SDL_CONTROLLER_AXIS_RIGHTY: SDL_GameControllerAxis = 3;
pub const SDL_CONTROLLER_AXIS_TRIGGERLEFT: SDL_GameControllerAxis = 4;
pub const SDL_CONTROLLER_AXIS_TRIGGERRIGHT: SDL_GameControllerAxis = 5;
pub const SDL_CONTROLLER_AXIS_MAX: SDL_GameControllerAxis = 6;
pub type SDL_GameControllerAxis = ctypes::c_int;
extern "C" {
    pub fn SDL_GameControllerGetAxisFromString(
        str_: *const ctypes::c_char,
    ) -> SDL_GameControllerAxis;
}
extern "C" {
    pub fn SDL_GameControllerGetStringForAxis(
        axis: SDL_GameControllerAxis,
    ) -> *const ctypes::c_char;
}
extern "C" {
    pub fn SDL_GameControllerGetBindForAxis(
        gamecontroller: *mut SDL_GameController,
        axis: SDL_GameControllerAxis,
    ) -> SDL_GameControllerButtonBind;
}
extern "C" {
    pub fn SDL_GameControllerHasAxis(
        gamecontroller: *mut SDL_GameController,
        axis: SDL_GameControllerAxis,
    ) -> SDL_bool;
}
extern "C" {
    pub fn SDL_GameControllerGetAxis(
        gamecontroller: *mut SDL_GameController,
        axis: SDL_GameControllerAxis,
    ) -> Sint16;
}
pub const SDL_CONTROLLER_BUTTON_INVALID: SDL_GameControllerButton = -1;
pub const SDL_CONTROLLER_BUTTON_A: SDL_GameControllerButton = 0;
pub const SDL_CONTROLLER_BUTTON_B: SDL_GameControllerButton = 1;
pub const SDL_CONTROLLER_BUTTON_X: SDL_GameControllerButton = 2;
pub const SDL_CONTROLLER_BUTTON_Y: SDL_GameControllerButton = 3;
pub const SDL_CONTROLLER_BUTTON_BACK: SDL_GameControllerButton = 4;
pub const SDL_CONTROLLER_BUTTON_GUIDE: SDL_GameControllerButton = 5;
pub const SDL_CONTROLLER_BUTTON_START: SDL_GameControllerButton = 6;
pub const SDL_CONTROLLER_BUTTON_LEFTSTICK: SDL_GameControllerButton = 7;
pub const SDL_CONTROLLER_BUTTON_RIGHTSTICK: SDL_GameControllerButton = 8;
pub const SDL_CONTROLLER_BUTTON_LEFTSHOULDER: SDL_GameControllerButton = 9;
pub const SDL_CONTROLLER_BUTTON_RIGHTSHOULDER: SDL_GameControllerButton = 10;
pub const SDL_CONTROLLER_BUTTON_DPAD_UP: SDL_GameControllerButton = 11;
pub const SDL_CONTROLLER_BUTTON_DPAD_DOWN: SDL_GameControllerButton = 12;
pub const SDL_CONTROLLER_BUTTON_DPAD_LEFT: SDL_GameControllerButton = 13;
pub const SDL_CONTROLLER_BUTTON_DPAD_RIGHT: SDL_GameControllerButton = 14;
pub const SDL_CONTROLLER_BUTTON_MISC1: SDL_GameControllerButton = 15;
pub const SDL_CONTROLLER_BUTTON_PADDLE1: SDL_GameControllerButton = 16;
pub const SDL_CONTROLLER_BUTTON_PADDLE2: SDL_GameControllerButton = 17;
pub const SDL_CONTROLLER_BUTTON_PADDLE3: SDL_GameControllerButton = 18;
pub const SDL_CONTROLLER_BUTTON_PADDLE4: SDL_GameControllerButton = 19;
pub const SDL_CONTROLLER_BUTTON_TOUCHPAD: SDL_GameControllerButton = 20;
pub const SDL_CONTROLLER_BUTTON_MAX: SDL_GameControllerButton = 21;
pub type SDL_GameControllerButton = ctypes::c_int;
extern "C" {
    pub fn SDL_GameControllerGetButtonFromString(
        str_: *const ctypes::c_char,
    ) -> SDL_GameControllerButton;
}
extern "C" {
    pub fn SDL_GameControllerGetStringForButton(
        button: SDL_GameControllerButton,
    ) -> *const ctypes::c_char;
}
extern "C" {
    pub fn SDL_GameControllerGetBindForButton(
        gamecontroller: *mut SDL_GameController,
        button: SDL_GameControllerButton,
    ) -> SDL_GameControllerButtonBind;
}
extern "C" {
    pub fn SDL_GameControllerHasButton(
        gamecontroller: *mut SDL_GameController,
        button: SDL_GameControllerButton,
    ) -> SDL_bool;
}
extern "C" {
    pub fn SDL_GameControllerGetButton(
        gamecontroller: *mut SDL_GameController,
        button: SDL_GameControllerButton,
    ) -> Uint8;
}
extern "C" {
    pub fn SDL_GameControllerGetNumTouchpads(
        gamecontroller: *mut SDL_GameController,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_GameControllerGetNumTouchpadFingers(
        gamecontroller: *mut SDL_GameController,
        touchpad: ctypes::c_int,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_GameControllerGetTouchpadFinger(
        gamecontroller: *mut SDL_GameController,
        touchpad: ctypes::c_int,
        finger: ctypes::c_int,
        state: *mut Uint8,
        x: *mut f32,
        y: *mut f32,
        pressure: *mut f32,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_GameControllerHasSensor(
        gamecontroller: *mut SDL_GameController,
        type_: SDL_SensorType,
    ) -> SDL_bool;
}
extern "C" {
    pub fn SDL_GameControllerSetSensorEnabled(
        gamecontroller: *mut SDL_GameController,
        type_: SDL_SensorType,
        enabled: SDL_bool,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_GameControllerIsSensorEnabled(
        gamecontroller: *mut SDL_GameController,
        type_: SDL_SensorType,
    ) -> SDL_bool;
}
extern "C" {
    pub fn SDL_GameControllerGetSensorDataRate(
        gamecontroller: *mut SDL_GameController,
        type_: SDL_SensorType,
    ) -> f32;
}
extern "C" {
    pub fn SDL_GameControllerGetSensorData(
        gamecontroller: *mut SDL_GameController,
        type_: SDL_SensorType,
        data: *mut f32,
        num_values: ctypes::c_int,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_GameControllerRumble(
        gamecontroller: *mut SDL_GameController,
        low_frequency_rumble: Uint16,
        high_frequency_rumble: Uint16,
        duration_ms: Uint32,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_GameControllerRumbleTriggers(
        gamecontroller: *mut SDL_GameController,
        left_rumble: Uint16,
        right_rumble: Uint16,
        duration_ms: Uint32,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_GameControllerHasLED(gamecontroller: *mut SDL_GameController) -> SDL_bool;
}
extern "C" {
    pub fn SDL_GameControllerSetLED(
        gamecontroller: *mut SDL_GameController,
        red: Uint8,
        green: Uint8,
        blue: Uint8,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_GameControllerSendEffect(
        gamecontroller: *mut SDL_GameController,
        data: *const ctypes::c_void,
        size: ctypes::c_int,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_GameControllerClose(gamecontroller: *mut SDL_GameController);
}
pub type SDL_TouchID = Sint64;
pub type SDL_FingerID = Sint64;
pub const SDL_TOUCH_DEVICE_INVALID: SDL_TouchDeviceType = -1;
pub const SDL_TOUCH_DEVICE_DIRECT: SDL_TouchDeviceType = 0;
pub const SDL_TOUCH_DEVICE_INDIRECT_ABSOLUTE: SDL_TouchDeviceType = 1;
pub const SDL_TOUCH_DEVICE_INDIRECT_RELATIVE: SDL_TouchDeviceType = 2;
pub type SDL_TouchDeviceType = ctypes::c_int;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct SDL_Finger {
    pub id: SDL_FingerID,
    pub x: f32,
    pub y: f32,
    pub pressure: f32,
}
#[test]
fn bindgen_test_layout_SDL_Finger() {
    assert_eq!(
        ::core::mem::size_of::<SDL_Finger>(),
        24usize,
        concat!("Size of: ", stringify!(SDL_Finger))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_Finger>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_Finger))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Finger>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Finger),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Finger>())).x as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Finger),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Finger>())).y as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Finger),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Finger>())).pressure as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Finger),
            "::",
            stringify!(pressure)
        )
    );
}
extern "C" {
    pub fn SDL_GetNumTouchDevices() -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_GetTouchDevice(index: ctypes::c_int) -> SDL_TouchID;
}
extern "C" {
    pub fn SDL_GetTouchDeviceType(touchID: SDL_TouchID) -> SDL_TouchDeviceType;
}
extern "C" {
    pub fn SDL_GetNumTouchFingers(touchID: SDL_TouchID) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_GetTouchFinger(touchID: SDL_TouchID, index: ctypes::c_int) -> *mut SDL_Finger;
}
pub type SDL_GestureID = Sint64;
extern "C" {
    pub fn SDL_RecordGesture(touchId: SDL_TouchID) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_SaveAllDollarTemplates(dst: *mut SDL_RWops) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_SaveDollarTemplate(gestureId: SDL_GestureID, dst: *mut SDL_RWops) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_LoadDollarTemplates(touchId: SDL_TouchID, src: *mut SDL_RWops) -> ctypes::c_int;
}
pub const SDL_FIRSTEVENT: SDL_EventType = 0;
pub const SDL_QUIT: SDL_EventType = 256;
pub const SDL_APP_TERMINATING: SDL_EventType = 257;
pub const SDL_APP_LOWMEMORY: SDL_EventType = 258;
pub const SDL_APP_WILLENTERBACKGROUND: SDL_EventType = 259;
pub const SDL_APP_DIDENTERBACKGROUND: SDL_EventType = 260;
pub const SDL_APP_WILLENTERFOREGROUND: SDL_EventType = 261;
pub const SDL_APP_DIDENTERFOREGROUND: SDL_EventType = 262;
pub const SDL_LOCALECHANGED: SDL_EventType = 263;
pub const SDL_DISPLAYEVENT: SDL_EventType = 336;
pub const SDL_WINDOWEVENT: SDL_EventType = 512;
pub const SDL_SYSWMEVENT: SDL_EventType = 513;
pub const SDL_KEYDOWN: SDL_EventType = 768;
pub const SDL_KEYUP: SDL_EventType = 769;
pub const SDL_TEXTEDITING: SDL_EventType = 770;
pub const SDL_TEXTINPUT: SDL_EventType = 771;
pub const SDL_KEYMAPCHANGED: SDL_EventType = 772;
pub const SDL_MOUSEMOTION: SDL_EventType = 1024;
pub const SDL_MOUSEBUTTONDOWN: SDL_EventType = 1025;
pub const SDL_MOUSEBUTTONUP: SDL_EventType = 1026;
pub const SDL_MOUSEWHEEL: SDL_EventType = 1027;
pub const SDL_JOYAXISMOTION: SDL_EventType = 1536;
pub const SDL_JOYBALLMOTION: SDL_EventType = 1537;
pub const SDL_JOYHATMOTION: SDL_EventType = 1538;
pub const SDL_JOYBUTTONDOWN: SDL_EventType = 1539;
pub const SDL_JOYBUTTONUP: SDL_EventType = 1540;
pub const SDL_JOYDEVICEADDED: SDL_EventType = 1541;
pub const SDL_JOYDEVICEREMOVED: SDL_EventType = 1542;
pub const SDL_CONTROLLERAXISMOTION: SDL_EventType = 1616;
pub const SDL_CONTROLLERBUTTONDOWN: SDL_EventType = 1617;
pub const SDL_CONTROLLERBUTTONUP: SDL_EventType = 1618;
pub const SDL_CONTROLLERDEVICEADDED: SDL_EventType = 1619;
pub const SDL_CONTROLLERDEVICEREMOVED: SDL_EventType = 1620;
pub const SDL_CONTROLLERDEVICEREMAPPED: SDL_EventType = 1621;
pub const SDL_CONTROLLERTOUCHPADDOWN: SDL_EventType = 1622;
pub const SDL_CONTROLLERTOUCHPADMOTION: SDL_EventType = 1623;
pub const SDL_CONTROLLERTOUCHPADUP: SDL_EventType = 1624;
pub const SDL_CONTROLLERSENSORUPDATE: SDL_EventType = 1625;
pub const SDL_FINGERDOWN: SDL_EventType = 1792;
pub const SDL_FINGERUP: SDL_EventType = 1793;
pub const SDL_FINGERMOTION: SDL_EventType = 1794;
pub const SDL_DOLLARGESTURE: SDL_EventType = 2048;
pub const SDL_DOLLARRECORD: SDL_EventType = 2049;
pub const SDL_MULTIGESTURE: SDL_EventType = 2050;
pub const SDL_CLIPBOARDUPDATE: SDL_EventType = 2304;
pub const SDL_DROPFILE: SDL_EventType = 4096;
pub const SDL_DROPTEXT: SDL_EventType = 4097;
pub const SDL_DROPBEGIN: SDL_EventType = 4098;
pub const SDL_DROPCOMPLETE: SDL_EventType = 4099;
pub const SDL_AUDIODEVICEADDED: SDL_EventType = 4352;
pub const SDL_AUDIODEVICEREMOVED: SDL_EventType = 4353;
pub const SDL_SENSORUPDATE: SDL_EventType = 4608;
pub const SDL_RENDER_TARGETS_RESET: SDL_EventType = 8192;
pub const SDL_RENDER_DEVICE_RESET: SDL_EventType = 8193;
pub const SDL_USEREVENT: SDL_EventType = 32768;
pub const SDL_LASTEVENT: SDL_EventType = 65535;
pub type SDL_EventType = ctypes::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct SDL_CommonEvent {
    pub type_: Uint32,
    pub timestamp: Uint32,
}
#[test]
fn bindgen_test_layout_SDL_CommonEvent() {
    assert_eq!(
        ::core::mem::size_of::<SDL_CommonEvent>(),
        8usize,
        concat!("Size of: ", stringify!(SDL_CommonEvent))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_CommonEvent>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_CommonEvent))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_CommonEvent>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_CommonEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_CommonEvent>())).timestamp as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_CommonEvent),
            "::",
            stringify!(timestamp)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct SDL_DisplayEvent {
    pub type_: Uint32,
    pub timestamp: Uint32,
    pub display: Uint32,
    pub event: Uint8,
    pub padding1: Uint8,
    pub padding2: Uint8,
    pub padding3: Uint8,
    pub data1: Sint32,
}
#[test]
fn bindgen_test_layout_SDL_DisplayEvent() {
    assert_eq!(
        ::core::mem::size_of::<SDL_DisplayEvent>(),
        20usize,
        concat!("Size of: ", stringify!(SDL_DisplayEvent))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_DisplayEvent>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_DisplayEvent))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_DisplayEvent>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_DisplayEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_DisplayEvent>())).timestamp as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_DisplayEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_DisplayEvent>())).display as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_DisplayEvent),
            "::",
            stringify!(display)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_DisplayEvent>())).event as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_DisplayEvent),
            "::",
            stringify!(event)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_DisplayEvent>())).padding1 as *const _ as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_DisplayEvent),
            "::",
            stringify!(padding1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_DisplayEvent>())).padding2 as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_DisplayEvent),
            "::",
            stringify!(padding2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_DisplayEvent>())).padding3 as *const _ as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_DisplayEvent),
            "::",
            stringify!(padding3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_DisplayEvent>())).data1 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_DisplayEvent),
            "::",
            stringify!(data1)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct SDL_WindowEvent {
    pub type_: Uint32,
    pub timestamp: Uint32,
    pub windowID: Uint32,
    pub event: Uint8,
    pub padding1: Uint8,
    pub padding2: Uint8,
    pub padding3: Uint8,
    pub data1: Sint32,
    pub data2: Sint32,
}
#[test]
fn bindgen_test_layout_SDL_WindowEvent() {
    assert_eq!(
        ::core::mem::size_of::<SDL_WindowEvent>(),
        24usize,
        concat!("Size of: ", stringify!(SDL_WindowEvent))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_WindowEvent>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_WindowEvent))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_WindowEvent>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_WindowEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_WindowEvent>())).timestamp as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_WindowEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_WindowEvent>())).windowID as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_WindowEvent),
            "::",
            stringify!(windowID)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_WindowEvent>())).event as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_WindowEvent),
            "::",
            stringify!(event)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_WindowEvent>())).padding1 as *const _ as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_WindowEvent),
            "::",
            stringify!(padding1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_WindowEvent>())).padding2 as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_WindowEvent),
            "::",
            stringify!(padding2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_WindowEvent>())).padding3 as *const _ as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_WindowEvent),
            "::",
            stringify!(padding3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_WindowEvent>())).data1 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_WindowEvent),
            "::",
            stringify!(data1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_WindowEvent>())).data2 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_WindowEvent),
            "::",
            stringify!(data2)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SDL_KeyboardEvent {
    pub type_: Uint32,
    pub timestamp: Uint32,
    pub windowID: Uint32,
    pub state: Uint8,
    pub repeat: Uint8,
    pub padding2: Uint8,
    pub padding3: Uint8,
    pub keysym: SDL_Keysym,
}
#[test]
fn bindgen_test_layout_SDL_KeyboardEvent() {
    assert_eq!(
        ::core::mem::size_of::<SDL_KeyboardEvent>(),
        32usize,
        concat!("Size of: ", stringify!(SDL_KeyboardEvent))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_KeyboardEvent>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_KeyboardEvent))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_KeyboardEvent>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_KeyboardEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_KeyboardEvent>())).timestamp as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_KeyboardEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_KeyboardEvent>())).windowID as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_KeyboardEvent),
            "::",
            stringify!(windowID)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_KeyboardEvent>())).state as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_KeyboardEvent),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_KeyboardEvent>())).repeat as *const _ as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_KeyboardEvent),
            "::",
            stringify!(repeat)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_KeyboardEvent>())).padding2 as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_KeyboardEvent),
            "::",
            stringify!(padding2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_KeyboardEvent>())).padding3 as *const _ as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_KeyboardEvent),
            "::",
            stringify!(padding3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_KeyboardEvent>())).keysym as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_KeyboardEvent),
            "::",
            stringify!(keysym)
        )
    );
}
impl Default for SDL_KeyboardEvent {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct SDL_TextEditingEvent {
    pub type_: Uint32,
    pub timestamp: Uint32,
    pub windowID: Uint32,
    pub text: [ctypes::c_char; 32usize],
    pub start: Sint32,
    pub length: Sint32,
}
#[test]
fn bindgen_test_layout_SDL_TextEditingEvent() {
    assert_eq!(
        ::core::mem::size_of::<SDL_TextEditingEvent>(),
        52usize,
        concat!("Size of: ", stringify!(SDL_TextEditingEvent))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_TextEditingEvent>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_TextEditingEvent))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_TextEditingEvent>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TextEditingEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_TextEditingEvent>())).timestamp as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TextEditingEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_TextEditingEvent>())).windowID as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TextEditingEvent),
            "::",
            stringify!(windowID)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_TextEditingEvent>())).text as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TextEditingEvent),
            "::",
            stringify!(text)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_TextEditingEvent>())).start as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TextEditingEvent),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_TextEditingEvent>())).length as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TextEditingEvent),
            "::",
            stringify!(length)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct SDL_TextInputEvent {
    pub type_: Uint32,
    pub timestamp: Uint32,
    pub windowID: Uint32,
    pub text: [ctypes::c_char; 32usize],
}
#[test]
fn bindgen_test_layout_SDL_TextInputEvent() {
    assert_eq!(
        ::core::mem::size_of::<SDL_TextInputEvent>(),
        44usize,
        concat!("Size of: ", stringify!(SDL_TextInputEvent))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_TextInputEvent>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_TextInputEvent))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_TextInputEvent>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TextInputEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_TextInputEvent>())).timestamp as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TextInputEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_TextInputEvent>())).windowID as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TextInputEvent),
            "::",
            stringify!(windowID)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_TextInputEvent>())).text as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TextInputEvent),
            "::",
            stringify!(text)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct SDL_MouseMotionEvent {
    pub type_: Uint32,
    pub timestamp: Uint32,
    pub windowID: Uint32,
    pub which: Uint32,
    pub state: Uint32,
    pub x: Sint32,
    pub y: Sint32,
    pub xrel: Sint32,
    pub yrel: Sint32,
}
#[test]
fn bindgen_test_layout_SDL_MouseMotionEvent() {
    assert_eq!(
        ::core::mem::size_of::<SDL_MouseMotionEvent>(),
        36usize,
        concat!("Size of: ", stringify!(SDL_MouseMotionEvent))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_MouseMotionEvent>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_MouseMotionEvent))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_MouseMotionEvent>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseMotionEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_MouseMotionEvent>())).timestamp as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseMotionEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_MouseMotionEvent>())).windowID as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseMotionEvent),
            "::",
            stringify!(windowID)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_MouseMotionEvent>())).which as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseMotionEvent),
            "::",
            stringify!(which)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_MouseMotionEvent>())).state as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseMotionEvent),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_MouseMotionEvent>())).x as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseMotionEvent),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_MouseMotionEvent>())).y as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseMotionEvent),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_MouseMotionEvent>())).xrel as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseMotionEvent),
            "::",
            stringify!(xrel)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_MouseMotionEvent>())).yrel as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseMotionEvent),
            "::",
            stringify!(yrel)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct SDL_MouseButtonEvent {
    pub type_: Uint32,
    pub timestamp: Uint32,
    pub windowID: Uint32,
    pub which: Uint32,
    pub button: Uint8,
    pub state: Uint8,
    pub clicks: Uint8,
    pub padding1: Uint8,
    pub x: Sint32,
    pub y: Sint32,
}
#[test]
fn bindgen_test_layout_SDL_MouseButtonEvent() {
    assert_eq!(
        ::core::mem::size_of::<SDL_MouseButtonEvent>(),
        28usize,
        concat!("Size of: ", stringify!(SDL_MouseButtonEvent))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_MouseButtonEvent>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_MouseButtonEvent))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_MouseButtonEvent>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseButtonEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_MouseButtonEvent>())).timestamp as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseButtonEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_MouseButtonEvent>())).windowID as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseButtonEvent),
            "::",
            stringify!(windowID)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_MouseButtonEvent>())).which as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseButtonEvent),
            "::",
            stringify!(which)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_MouseButtonEvent>())).button as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseButtonEvent),
            "::",
            stringify!(button)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_MouseButtonEvent>())).state as *const _ as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseButtonEvent),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_MouseButtonEvent>())).clicks as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseButtonEvent),
            "::",
            stringify!(clicks)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_MouseButtonEvent>())).padding1 as *const _ as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseButtonEvent),
            "::",
            stringify!(padding1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_MouseButtonEvent>())).x as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseButtonEvent),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_MouseButtonEvent>())).y as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseButtonEvent),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct SDL_MouseWheelEvent {
    pub type_: Uint32,
    pub timestamp: Uint32,
    pub windowID: Uint32,
    pub which: Uint32,
    pub x: Sint32,
    pub y: Sint32,
    pub direction: Uint32,
}
#[test]
fn bindgen_test_layout_SDL_MouseWheelEvent() {
    assert_eq!(
        ::core::mem::size_of::<SDL_MouseWheelEvent>(),
        28usize,
        concat!("Size of: ", stringify!(SDL_MouseWheelEvent))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_MouseWheelEvent>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_MouseWheelEvent))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_MouseWheelEvent>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseWheelEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_MouseWheelEvent>())).timestamp as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseWheelEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_MouseWheelEvent>())).windowID as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseWheelEvent),
            "::",
            stringify!(windowID)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_MouseWheelEvent>())).which as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseWheelEvent),
            "::",
            stringify!(which)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_MouseWheelEvent>())).x as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseWheelEvent),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_MouseWheelEvent>())).y as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseWheelEvent),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_MouseWheelEvent>())).direction as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseWheelEvent),
            "::",
            stringify!(direction)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct SDL_JoyAxisEvent {
    pub type_: Uint32,
    pub timestamp: Uint32,
    pub which: SDL_JoystickID,
    pub axis: Uint8,
    pub padding1: Uint8,
    pub padding2: Uint8,
    pub padding3: Uint8,
    pub value: Sint16,
    pub padding4: Uint16,
}
#[test]
fn bindgen_test_layout_SDL_JoyAxisEvent() {
    assert_eq!(
        ::core::mem::size_of::<SDL_JoyAxisEvent>(),
        20usize,
        concat!("Size of: ", stringify!(SDL_JoyAxisEvent))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_JoyAxisEvent>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_JoyAxisEvent))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_JoyAxisEvent>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyAxisEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_JoyAxisEvent>())).timestamp as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyAxisEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_JoyAxisEvent>())).which as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyAxisEvent),
            "::",
            stringify!(which)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_JoyAxisEvent>())).axis as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyAxisEvent),
            "::",
            stringify!(axis)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_JoyAxisEvent>())).padding1 as *const _ as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyAxisEvent),
            "::",
            stringify!(padding1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_JoyAxisEvent>())).padding2 as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyAxisEvent),
            "::",
            stringify!(padding2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_JoyAxisEvent>())).padding3 as *const _ as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyAxisEvent),
            "::",
            stringify!(padding3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_JoyAxisEvent>())).value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyAxisEvent),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_JoyAxisEvent>())).padding4 as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyAxisEvent),
            "::",
            stringify!(padding4)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct SDL_JoyBallEvent {
    pub type_: Uint32,
    pub timestamp: Uint32,
    pub which: SDL_JoystickID,
    pub ball: Uint8,
    pub padding1: Uint8,
    pub padding2: Uint8,
    pub padding3: Uint8,
    pub xrel: Sint16,
    pub yrel: Sint16,
}
#[test]
fn bindgen_test_layout_SDL_JoyBallEvent() {
    assert_eq!(
        ::core::mem::size_of::<SDL_JoyBallEvent>(),
        20usize,
        concat!("Size of: ", stringify!(SDL_JoyBallEvent))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_JoyBallEvent>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_JoyBallEvent))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_JoyBallEvent>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyBallEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_JoyBallEvent>())).timestamp as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyBallEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_JoyBallEvent>())).which as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyBallEvent),
            "::",
            stringify!(which)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_JoyBallEvent>())).ball as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyBallEvent),
            "::",
            stringify!(ball)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_JoyBallEvent>())).padding1 as *const _ as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyBallEvent),
            "::",
            stringify!(padding1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_JoyBallEvent>())).padding2 as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyBallEvent),
            "::",
            stringify!(padding2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_JoyBallEvent>())).padding3 as *const _ as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyBallEvent),
            "::",
            stringify!(padding3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_JoyBallEvent>())).xrel as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyBallEvent),
            "::",
            stringify!(xrel)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_JoyBallEvent>())).yrel as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyBallEvent),
            "::",
            stringify!(yrel)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct SDL_JoyHatEvent {
    pub type_: Uint32,
    pub timestamp: Uint32,
    pub which: SDL_JoystickID,
    pub hat: Uint8,
    pub value: Uint8,
    pub padding1: Uint8,
    pub padding2: Uint8,
}
#[test]
fn bindgen_test_layout_SDL_JoyHatEvent() {
    assert_eq!(
        ::core::mem::size_of::<SDL_JoyHatEvent>(),
        16usize,
        concat!("Size of: ", stringify!(SDL_JoyHatEvent))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_JoyHatEvent>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_JoyHatEvent))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_JoyHatEvent>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyHatEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_JoyHatEvent>())).timestamp as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyHatEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_JoyHatEvent>())).which as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyHatEvent),
            "::",
            stringify!(which)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_JoyHatEvent>())).hat as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyHatEvent),
            "::",
            stringify!(hat)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_JoyHatEvent>())).value as *const _ as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyHatEvent),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_JoyHatEvent>())).padding1 as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyHatEvent),
            "::",
            stringify!(padding1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_JoyHatEvent>())).padding2 as *const _ as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyHatEvent),
            "::",
            stringify!(padding2)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct SDL_JoyButtonEvent {
    pub type_: Uint32,
    pub timestamp: Uint32,
    pub which: SDL_JoystickID,
    pub button: Uint8,
    pub state: Uint8,
    pub padding1: Uint8,
    pub padding2: Uint8,
}
#[test]
fn bindgen_test_layout_SDL_JoyButtonEvent() {
    assert_eq!(
        ::core::mem::size_of::<SDL_JoyButtonEvent>(),
        16usize,
        concat!("Size of: ", stringify!(SDL_JoyButtonEvent))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_JoyButtonEvent>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_JoyButtonEvent))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_JoyButtonEvent>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyButtonEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_JoyButtonEvent>())).timestamp as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyButtonEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_JoyButtonEvent>())).which as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyButtonEvent),
            "::",
            stringify!(which)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_JoyButtonEvent>())).button as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyButtonEvent),
            "::",
            stringify!(button)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_JoyButtonEvent>())).state as *const _ as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyButtonEvent),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_JoyButtonEvent>())).padding1 as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyButtonEvent),
            "::",
            stringify!(padding1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_JoyButtonEvent>())).padding2 as *const _ as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyButtonEvent),
            "::",
            stringify!(padding2)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct SDL_JoyDeviceEvent {
    pub type_: Uint32,
    pub timestamp: Uint32,
    pub which: Sint32,
}
#[test]
fn bindgen_test_layout_SDL_JoyDeviceEvent() {
    assert_eq!(
        ::core::mem::size_of::<SDL_JoyDeviceEvent>(),
        12usize,
        concat!("Size of: ", stringify!(SDL_JoyDeviceEvent))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_JoyDeviceEvent>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_JoyDeviceEvent))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_JoyDeviceEvent>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyDeviceEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_JoyDeviceEvent>())).timestamp as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyDeviceEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_JoyDeviceEvent>())).which as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyDeviceEvent),
            "::",
            stringify!(which)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct SDL_ControllerAxisEvent {
    pub type_: Uint32,
    pub timestamp: Uint32,
    pub which: SDL_JoystickID,
    pub axis: Uint8,
    pub padding1: Uint8,
    pub padding2: Uint8,
    pub padding3: Uint8,
    pub value: Sint16,
    pub padding4: Uint16,
}
#[test]
fn bindgen_test_layout_SDL_ControllerAxisEvent() {
    assert_eq!(
        ::core::mem::size_of::<SDL_ControllerAxisEvent>(),
        20usize,
        concat!("Size of: ", stringify!(SDL_ControllerAxisEvent))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_ControllerAxisEvent>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_ControllerAxisEvent))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_ControllerAxisEvent>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_ControllerAxisEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SDL_ControllerAxisEvent>())).timestamp as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_ControllerAxisEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_ControllerAxisEvent>())).which as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_ControllerAxisEvent),
            "::",
            stringify!(which)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_ControllerAxisEvent>())).axis as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_ControllerAxisEvent),
            "::",
            stringify!(axis)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SDL_ControllerAxisEvent>())).padding1 as *const _ as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_ControllerAxisEvent),
            "::",
            stringify!(padding1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SDL_ControllerAxisEvent>())).padding2 as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_ControllerAxisEvent),
            "::",
            stringify!(padding2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SDL_ControllerAxisEvent>())).padding3 as *const _ as usize
        },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_ControllerAxisEvent),
            "::",
            stringify!(padding3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_ControllerAxisEvent>())).value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_ControllerAxisEvent),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SDL_ControllerAxisEvent>())).padding4 as *const _ as usize
        },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_ControllerAxisEvent),
            "::",
            stringify!(padding4)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct SDL_ControllerButtonEvent {
    pub type_: Uint32,
    pub timestamp: Uint32,
    pub which: SDL_JoystickID,
    pub button: Uint8,
    pub state: Uint8,
    pub padding1: Uint8,
    pub padding2: Uint8,
}
#[test]
fn bindgen_test_layout_SDL_ControllerButtonEvent() {
    assert_eq!(
        ::core::mem::size_of::<SDL_ControllerButtonEvent>(),
        16usize,
        concat!("Size of: ", stringify!(SDL_ControllerButtonEvent))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_ControllerButtonEvent>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_ControllerButtonEvent))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SDL_ControllerButtonEvent>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_ControllerButtonEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SDL_ControllerButtonEvent>())).timestamp as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_ControllerButtonEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SDL_ControllerButtonEvent>())).which as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_ControllerButtonEvent),
            "::",
            stringify!(which)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SDL_ControllerButtonEvent>())).button as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_ControllerButtonEvent),
            "::",
            stringify!(button)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SDL_ControllerButtonEvent>())).state as *const _ as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_ControllerButtonEvent),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SDL_ControllerButtonEvent>())).padding1 as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_ControllerButtonEvent),
            "::",
            stringify!(padding1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SDL_ControllerButtonEvent>())).padding2 as *const _ as usize
        },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_ControllerButtonEvent),
            "::",
            stringify!(padding2)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct SDL_ControllerDeviceEvent {
    pub type_: Uint32,
    pub timestamp: Uint32,
    pub which: Sint32,
}
#[test]
fn bindgen_test_layout_SDL_ControllerDeviceEvent() {
    assert_eq!(
        ::core::mem::size_of::<SDL_ControllerDeviceEvent>(),
        12usize,
        concat!("Size of: ", stringify!(SDL_ControllerDeviceEvent))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_ControllerDeviceEvent>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_ControllerDeviceEvent))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SDL_ControllerDeviceEvent>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_ControllerDeviceEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SDL_ControllerDeviceEvent>())).timestamp as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_ControllerDeviceEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SDL_ControllerDeviceEvent>())).which as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_ControllerDeviceEvent),
            "::",
            stringify!(which)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct SDL_ControllerTouchpadEvent {
    pub type_: Uint32,
    pub timestamp: Uint32,
    pub which: SDL_JoystickID,
    pub touchpad: Sint32,
    pub finger: Sint32,
    pub x: f32,
    pub y: f32,
    pub pressure: f32,
}
#[test]
fn bindgen_test_layout_SDL_ControllerTouchpadEvent() {
    assert_eq!(
        ::core::mem::size_of::<SDL_ControllerTouchpadEvent>(),
        32usize,
        concat!("Size of: ", stringify!(SDL_ControllerTouchpadEvent))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_ControllerTouchpadEvent>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_ControllerTouchpadEvent))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SDL_ControllerTouchpadEvent>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_ControllerTouchpadEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SDL_ControllerTouchpadEvent>())).timestamp as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_ControllerTouchpadEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SDL_ControllerTouchpadEvent>())).which as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_ControllerTouchpadEvent),
            "::",
            stringify!(which)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SDL_ControllerTouchpadEvent>())).touchpad as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_ControllerTouchpadEvent),
            "::",
            stringify!(touchpad)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SDL_ControllerTouchpadEvent>())).finger as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_ControllerTouchpadEvent),
            "::",
            stringify!(finger)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_ControllerTouchpadEvent>())).x as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_ControllerTouchpadEvent),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_ControllerTouchpadEvent>())).y as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_ControllerTouchpadEvent),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SDL_ControllerTouchpadEvent>())).pressure as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_ControllerTouchpadEvent),
            "::",
            stringify!(pressure)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct SDL_ControllerSensorEvent {
    pub type_: Uint32,
    pub timestamp: Uint32,
    pub which: SDL_JoystickID,
    pub sensor: Sint32,
    pub data: [f32; 3usize],
}
#[test]
fn bindgen_test_layout_SDL_ControllerSensorEvent() {
    assert_eq!(
        ::core::mem::size_of::<SDL_ControllerSensorEvent>(),
        28usize,
        concat!("Size of: ", stringify!(SDL_ControllerSensorEvent))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_ControllerSensorEvent>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_ControllerSensorEvent))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SDL_ControllerSensorEvent>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_ControllerSensorEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SDL_ControllerSensorEvent>())).timestamp as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_ControllerSensorEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SDL_ControllerSensorEvent>())).which as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_ControllerSensorEvent),
            "::",
            stringify!(which)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SDL_ControllerSensorEvent>())).sensor as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_ControllerSensorEvent),
            "::",
            stringify!(sensor)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_ControllerSensorEvent>())).data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_ControllerSensorEvent),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct SDL_AudioDeviceEvent {
    pub type_: Uint32,
    pub timestamp: Uint32,
    pub which: Uint32,
    pub iscapture: Uint8,
    pub padding1: Uint8,
    pub padding2: Uint8,
    pub padding3: Uint8,
}
#[test]
fn bindgen_test_layout_SDL_AudioDeviceEvent() {
    assert_eq!(
        ::core::mem::size_of::<SDL_AudioDeviceEvent>(),
        16usize,
        concat!("Size of: ", stringify!(SDL_AudioDeviceEvent))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_AudioDeviceEvent>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_AudioDeviceEvent))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_AudioDeviceEvent>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AudioDeviceEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_AudioDeviceEvent>())).timestamp as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AudioDeviceEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_AudioDeviceEvent>())).which as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AudioDeviceEvent),
            "::",
            stringify!(which)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_AudioDeviceEvent>())).iscapture as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AudioDeviceEvent),
            "::",
            stringify!(iscapture)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_AudioDeviceEvent>())).padding1 as *const _ as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AudioDeviceEvent),
            "::",
            stringify!(padding1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_AudioDeviceEvent>())).padding2 as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AudioDeviceEvent),
            "::",
            stringify!(padding2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_AudioDeviceEvent>())).padding3 as *const _ as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AudioDeviceEvent),
            "::",
            stringify!(padding3)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct SDL_TouchFingerEvent {
    pub type_: Uint32,
    pub timestamp: Uint32,
    pub touchId: SDL_TouchID,
    pub fingerId: SDL_FingerID,
    pub x: f32,
    pub y: f32,
    pub dx: f32,
    pub dy: f32,
    pub pressure: f32,
    pub windowID: Uint32,
}
#[test]
fn bindgen_test_layout_SDL_TouchFingerEvent() {
    assert_eq!(
        ::core::mem::size_of::<SDL_TouchFingerEvent>(),
        48usize,
        concat!("Size of: ", stringify!(SDL_TouchFingerEvent))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_TouchFingerEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_TouchFingerEvent))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_TouchFingerEvent>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TouchFingerEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_TouchFingerEvent>())).timestamp as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TouchFingerEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_TouchFingerEvent>())).touchId as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TouchFingerEvent),
            "::",
            stringify!(touchId)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_TouchFingerEvent>())).fingerId as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TouchFingerEvent),
            "::",
            stringify!(fingerId)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_TouchFingerEvent>())).x as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TouchFingerEvent),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_TouchFingerEvent>())).y as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TouchFingerEvent),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_TouchFingerEvent>())).dx as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TouchFingerEvent),
            "::",
            stringify!(dx)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_TouchFingerEvent>())).dy as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TouchFingerEvent),
            "::",
            stringify!(dy)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_TouchFingerEvent>())).pressure as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TouchFingerEvent),
            "::",
            stringify!(pressure)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_TouchFingerEvent>())).windowID as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TouchFingerEvent),
            "::",
            stringify!(windowID)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct SDL_MultiGestureEvent {
    pub type_: Uint32,
    pub timestamp: Uint32,
    pub touchId: SDL_TouchID,
    pub dTheta: f32,
    pub dDist: f32,
    pub x: f32,
    pub y: f32,
    pub numFingers: Uint16,
    pub padding: Uint16,
}
#[test]
fn bindgen_test_layout_SDL_MultiGestureEvent() {
    assert_eq!(
        ::core::mem::size_of::<SDL_MultiGestureEvent>(),
        40usize,
        concat!("Size of: ", stringify!(SDL_MultiGestureEvent))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_MultiGestureEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_MultiGestureEvent))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_MultiGestureEvent>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MultiGestureEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SDL_MultiGestureEvent>())).timestamp as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MultiGestureEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_MultiGestureEvent>())).touchId as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MultiGestureEvent),
            "::",
            stringify!(touchId)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_MultiGestureEvent>())).dTheta as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MultiGestureEvent),
            "::",
            stringify!(dTheta)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_MultiGestureEvent>())).dDist as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MultiGestureEvent),
            "::",
            stringify!(dDist)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_MultiGestureEvent>())).x as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MultiGestureEvent),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_MultiGestureEvent>())).y as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MultiGestureEvent),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SDL_MultiGestureEvent>())).numFingers as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MultiGestureEvent),
            "::",
            stringify!(numFingers)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_MultiGestureEvent>())).padding as *const _ as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MultiGestureEvent),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct SDL_DollarGestureEvent {
    pub type_: Uint32,
    pub timestamp: Uint32,
    pub touchId: SDL_TouchID,
    pub gestureId: SDL_GestureID,
    pub numFingers: Uint32,
    pub error: f32,
    pub x: f32,
    pub y: f32,
}
#[test]
fn bindgen_test_layout_SDL_DollarGestureEvent() {
    assert_eq!(
        ::core::mem::size_of::<SDL_DollarGestureEvent>(),
        40usize,
        concat!("Size of: ", stringify!(SDL_DollarGestureEvent))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_DollarGestureEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_DollarGestureEvent))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_DollarGestureEvent>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_DollarGestureEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SDL_DollarGestureEvent>())).timestamp as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_DollarGestureEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_DollarGestureEvent>())).touchId as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_DollarGestureEvent),
            "::",
            stringify!(touchId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SDL_DollarGestureEvent>())).gestureId as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_DollarGestureEvent),
            "::",
            stringify!(gestureId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SDL_DollarGestureEvent>())).numFingers as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_DollarGestureEvent),
            "::",
            stringify!(numFingers)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_DollarGestureEvent>())).error as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_DollarGestureEvent),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_DollarGestureEvent>())).x as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_DollarGestureEvent),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_DollarGestureEvent>())).y as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_DollarGestureEvent),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SDL_DropEvent {
    pub type_: Uint32,
    pub timestamp: Uint32,
    pub file: *mut ctypes::c_char,
    pub windowID: Uint32,
}
#[test]
fn bindgen_test_layout_SDL_DropEvent() {
    assert_eq!(
        ::core::mem::size_of::<SDL_DropEvent>(),
        24usize,
        concat!("Size of: ", stringify!(SDL_DropEvent))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_DropEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_DropEvent))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_DropEvent>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_DropEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_DropEvent>())).timestamp as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_DropEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_DropEvent>())).file as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_DropEvent),
            "::",
            stringify!(file)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_DropEvent>())).windowID as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_DropEvent),
            "::",
            stringify!(windowID)
        )
    );
}
impl Default for SDL_DropEvent {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct SDL_SensorEvent {
    pub type_: Uint32,
    pub timestamp: Uint32,
    pub which: Sint32,
    pub data: [f32; 6usize],
}
#[test]
fn bindgen_test_layout_SDL_SensorEvent() {
    assert_eq!(
        ::core::mem::size_of::<SDL_SensorEvent>(),
        36usize,
        concat!("Size of: ", stringify!(SDL_SensorEvent))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_SensorEvent>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_SensorEvent))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_SensorEvent>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_SensorEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_SensorEvent>())).timestamp as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_SensorEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_SensorEvent>())).which as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_SensorEvent),
            "::",
            stringify!(which)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_SensorEvent>())).data as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_SensorEvent),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct SDL_QuitEvent {
    pub type_: Uint32,
    pub timestamp: Uint32,
}
#[test]
fn bindgen_test_layout_SDL_QuitEvent() {
    assert_eq!(
        ::core::mem::size_of::<SDL_QuitEvent>(),
        8usize,
        concat!("Size of: ", stringify!(SDL_QuitEvent))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_QuitEvent>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_QuitEvent))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_QuitEvent>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_QuitEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_QuitEvent>())).timestamp as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_QuitEvent),
            "::",
            stringify!(timestamp)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct SDL_OSEvent {
    pub type_: Uint32,
    pub timestamp: Uint32,
}
#[test]
fn bindgen_test_layout_SDL_OSEvent() {
    assert_eq!(
        ::core::mem::size_of::<SDL_OSEvent>(),
        8usize,
        concat!("Size of: ", stringify!(SDL_OSEvent))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_OSEvent>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_OSEvent))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_OSEvent>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_OSEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_OSEvent>())).timestamp as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_OSEvent),
            "::",
            stringify!(timestamp)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SDL_UserEvent {
    pub type_: Uint32,
    pub timestamp: Uint32,
    pub windowID: Uint32,
    pub code: Sint32,
    pub data1: *mut ctypes::c_void,
    pub data2: *mut ctypes::c_void,
}
#[test]
fn bindgen_test_layout_SDL_UserEvent() {
    assert_eq!(
        ::core::mem::size_of::<SDL_UserEvent>(),
        32usize,
        concat!("Size of: ", stringify!(SDL_UserEvent))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_UserEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_UserEvent))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_UserEvent>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_UserEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_UserEvent>())).timestamp as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_UserEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_UserEvent>())).windowID as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_UserEvent),
            "::",
            stringify!(windowID)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_UserEvent>())).code as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_UserEvent),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_UserEvent>())).data1 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_UserEvent),
            "::",
            stringify!(data1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_UserEvent>())).data2 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_UserEvent),
            "::",
            stringify!(data2)
        )
    );
}
impl Default for SDL_UserEvent {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SDL_SysWMmsg {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SDL_SysWMEvent {
    pub type_: Uint32,
    pub timestamp: Uint32,
    pub msg: *mut SDL_SysWMmsg,
}
#[test]
fn bindgen_test_layout_SDL_SysWMEvent() {
    assert_eq!(
        ::core::mem::size_of::<SDL_SysWMEvent>(),
        16usize,
        concat!("Size of: ", stringify!(SDL_SysWMEvent))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_SysWMEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_SysWMEvent))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_SysWMEvent>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_SysWMEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_SysWMEvent>())).timestamp as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_SysWMEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_SysWMEvent>())).msg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_SysWMEvent),
            "::",
            stringify!(msg)
        )
    );
}
impl Default for SDL_SysWMEvent {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union SDL_Event {
    pub type_: Uint32,
    pub common: SDL_CommonEvent,
    pub display: SDL_DisplayEvent,
    pub window: SDL_WindowEvent,
    pub key: SDL_KeyboardEvent,
    pub edit: SDL_TextEditingEvent,
    pub text: SDL_TextInputEvent,
    pub motion: SDL_MouseMotionEvent,
    pub button: SDL_MouseButtonEvent,
    pub wheel: SDL_MouseWheelEvent,
    pub jaxis: SDL_JoyAxisEvent,
    pub jball: SDL_JoyBallEvent,
    pub jhat: SDL_JoyHatEvent,
    pub jbutton: SDL_JoyButtonEvent,
    pub jdevice: SDL_JoyDeviceEvent,
    pub caxis: SDL_ControllerAxisEvent,
    pub cbutton: SDL_ControllerButtonEvent,
    pub cdevice: SDL_ControllerDeviceEvent,
    pub ctouchpad: SDL_ControllerTouchpadEvent,
    pub csensor: SDL_ControllerSensorEvent,
    pub adevice: SDL_AudioDeviceEvent,
    pub sensor: SDL_SensorEvent,
    pub quit: SDL_QuitEvent,
    pub user: SDL_UserEvent,
    pub syswm: SDL_SysWMEvent,
    pub tfinger: SDL_TouchFingerEvent,
    pub mgesture: SDL_MultiGestureEvent,
    pub dgesture: SDL_DollarGestureEvent,
    pub drop: SDL_DropEvent,
    pub padding: [Uint8; 56usize],
}
#[test]
fn bindgen_test_layout_SDL_Event() {
    assert_eq!(
        ::core::mem::size_of::<SDL_Event>(),
        56usize,
        concat!("Size of: ", stringify!(SDL_Event))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_Event>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_Event))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Event>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Event>())).common as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(common)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Event>())).display as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(display)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Event>())).window as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(window)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Event>())).key as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Event>())).edit as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(edit)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Event>())).text as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(text)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Event>())).motion as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(motion)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Event>())).button as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(button)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Event>())).wheel as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(wheel)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Event>())).jaxis as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(jaxis)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Event>())).jball as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(jball)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Event>())).jhat as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(jhat)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Event>())).jbutton as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(jbutton)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Event>())).jdevice as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(jdevice)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Event>())).caxis as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(caxis)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Event>())).cbutton as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(cbutton)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Event>())).cdevice as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(cdevice)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Event>())).ctouchpad as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(ctouchpad)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Event>())).csensor as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(csensor)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Event>())).adevice as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(adevice)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Event>())).sensor as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(sensor)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Event>())).quit as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(quit)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Event>())).user as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(user)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Event>())).syswm as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(syswm)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Event>())).tfinger as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(tfinger)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Event>())).mgesture as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(mgesture)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Event>())).dgesture as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(dgesture)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Event>())).drop as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(drop)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Event>())).padding as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(padding)
        )
    );
}
impl Default for SDL_Event {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SDL_compile_time_assert_SDL_Event = [ctypes::c_int; 1usize];
extern "C" {
    pub fn SDL_PumpEvents();
}
pub const SDL_ADDEVENT: SDL_eventaction = 0;
pub const SDL_PEEKEVENT: SDL_eventaction = 1;
pub const SDL_GETEVENT: SDL_eventaction = 2;
pub type SDL_eventaction = ctypes::c_uint;
extern "C" {
    pub fn SDL_PeepEvents(
        events: *mut SDL_Event,
        numevents: ctypes::c_int,
        action: SDL_eventaction,
        minType: Uint32,
        maxType: Uint32,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_HasEvent(type_: Uint32) -> SDL_bool;
}
extern "C" {
    pub fn SDL_HasEvents(minType: Uint32, maxType: Uint32) -> SDL_bool;
}
extern "C" {
    pub fn SDL_FlushEvent(type_: Uint32);
}
extern "C" {
    pub fn SDL_FlushEvents(minType: Uint32, maxType: Uint32);
}
extern "C" {
    pub fn SDL_PollEvent(event: *mut SDL_Event) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_WaitEvent(event: *mut SDL_Event) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_WaitEventTimeout(event: *mut SDL_Event, timeout: ctypes::c_int) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_PushEvent(event: *mut SDL_Event) -> ctypes::c_int;
}
pub type SDL_EventFilter = ::core::option::Option<
    unsafe extern "C" fn(userdata: *mut ctypes::c_void, event: *mut SDL_Event) -> ctypes::c_int,
>;
extern "C" {
    pub fn SDL_SetEventFilter(filter: SDL_EventFilter, userdata: *mut ctypes::c_void);
}
extern "C" {
    pub fn SDL_GetEventFilter(
        filter: *mut SDL_EventFilter,
        userdata: *mut *mut ctypes::c_void,
    ) -> SDL_bool;
}
extern "C" {
    pub fn SDL_AddEventWatch(filter: SDL_EventFilter, userdata: *mut ctypes::c_void);
}
extern "C" {
    pub fn SDL_DelEventWatch(filter: SDL_EventFilter, userdata: *mut ctypes::c_void);
}
extern "C" {
    pub fn SDL_FilterEvents(filter: SDL_EventFilter, userdata: *mut ctypes::c_void);
}
extern "C" {
    pub fn SDL_EventState(type_: Uint32, state: ctypes::c_int) -> Uint8;
}
extern "C" {
    pub fn SDL_RegisterEvents(numevents: ctypes::c_int) -> Uint32;
}
extern "C" {
    pub fn SDL_GetBasePath() -> *mut ctypes::c_char;
}
extern "C" {
    pub fn SDL_GetPrefPath(
        org: *const ctypes::c_char,
        app: *const ctypes::c_char,
    ) -> *mut ctypes::c_char;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _SDL_Haptic {
    _unused: [u8; 0],
}
pub type SDL_Haptic = _SDL_Haptic;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct SDL_HapticDirection {
    pub type_: Uint8,
    pub dir: [Sint32; 3usize],
}
#[test]
fn bindgen_test_layout_SDL_HapticDirection() {
    assert_eq!(
        ::core::mem::size_of::<SDL_HapticDirection>(),
        16usize,
        concat!("Size of: ", stringify!(SDL_HapticDirection))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_HapticDirection>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_HapticDirection))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticDirection>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticDirection),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticDirection>())).dir as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticDirection),
            "::",
            stringify!(dir)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct SDL_HapticConstant {
    pub type_: Uint16,
    pub direction: SDL_HapticDirection,
    pub length: Uint32,
    pub delay: Uint16,
    pub button: Uint16,
    pub interval: Uint16,
    pub level: Sint16,
    pub attack_length: Uint16,
    pub attack_level: Uint16,
    pub fade_length: Uint16,
    pub fade_level: Uint16,
}
#[test]
fn bindgen_test_layout_SDL_HapticConstant() {
    assert_eq!(
        ::core::mem::size_of::<SDL_HapticConstant>(),
        40usize,
        concat!("Size of: ", stringify!(SDL_HapticConstant))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_HapticConstant>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_HapticConstant))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticConstant>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticConstant),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticConstant>())).direction as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticConstant),
            "::",
            stringify!(direction)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticConstant>())).length as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticConstant),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticConstant>())).delay as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticConstant),
            "::",
            stringify!(delay)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticConstant>())).button as *const _ as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticConstant),
            "::",
            stringify!(button)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticConstant>())).interval as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticConstant),
            "::",
            stringify!(interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticConstant>())).level as *const _ as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticConstant),
            "::",
            stringify!(level)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SDL_HapticConstant>())).attack_length as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticConstant),
            "::",
            stringify!(attack_length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SDL_HapticConstant>())).attack_level as *const _ as usize
        },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticConstant),
            "::",
            stringify!(attack_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticConstant>())).fade_length as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticConstant),
            "::",
            stringify!(fade_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticConstant>())).fade_level as *const _ as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticConstant),
            "::",
            stringify!(fade_level)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct SDL_HapticPeriodic {
    pub type_: Uint16,
    pub direction: SDL_HapticDirection,
    pub length: Uint32,
    pub delay: Uint16,
    pub button: Uint16,
    pub interval: Uint16,
    pub period: Uint16,
    pub magnitude: Sint16,
    pub offset: Sint16,
    pub phase: Uint16,
    pub attack_length: Uint16,
    pub attack_level: Uint16,
    pub fade_length: Uint16,
    pub fade_level: Uint16,
}
#[test]
fn bindgen_test_layout_SDL_HapticPeriodic() {
    assert_eq!(
        ::core::mem::size_of::<SDL_HapticPeriodic>(),
        48usize,
        concat!("Size of: ", stringify!(SDL_HapticPeriodic))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_HapticPeriodic>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_HapticPeriodic))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticPeriodic>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticPeriodic),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticPeriodic>())).direction as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticPeriodic),
            "::",
            stringify!(direction)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticPeriodic>())).length as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticPeriodic),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticPeriodic>())).delay as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticPeriodic),
            "::",
            stringify!(delay)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticPeriodic>())).button as *const _ as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticPeriodic),
            "::",
            stringify!(button)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticPeriodic>())).interval as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticPeriodic),
            "::",
            stringify!(interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticPeriodic>())).period as *const _ as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticPeriodic),
            "::",
            stringify!(period)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticPeriodic>())).magnitude as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticPeriodic),
            "::",
            stringify!(magnitude)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticPeriodic>())).offset as *const _ as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticPeriodic),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticPeriodic>())).phase as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticPeriodic),
            "::",
            stringify!(phase)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SDL_HapticPeriodic>())).attack_length as *const _ as usize
        },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticPeriodic),
            "::",
            stringify!(attack_length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SDL_HapticPeriodic>())).attack_level as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticPeriodic),
            "::",
            stringify!(attack_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticPeriodic>())).fade_length as *const _ as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticPeriodic),
            "::",
            stringify!(fade_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticPeriodic>())).fade_level as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticPeriodic),
            "::",
            stringify!(fade_level)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct SDL_HapticCondition {
    pub type_: Uint16,
    pub direction: SDL_HapticDirection,
    pub length: Uint32,
    pub delay: Uint16,
    pub button: Uint16,
    pub interval: Uint16,
    pub right_sat: [Uint16; 3usize],
    pub left_sat: [Uint16; 3usize],
    pub right_coeff: [Sint16; 3usize],
    pub left_coeff: [Sint16; 3usize],
    pub deadband: [Uint16; 3usize],
    pub center: [Sint16; 3usize],
}
#[test]
fn bindgen_test_layout_SDL_HapticCondition() {
    assert_eq!(
        ::core::mem::size_of::<SDL_HapticCondition>(),
        68usize,
        concat!("Size of: ", stringify!(SDL_HapticCondition))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_HapticCondition>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_HapticCondition))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticCondition>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCondition),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticCondition>())).direction as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCondition),
            "::",
            stringify!(direction)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticCondition>())).length as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCondition),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticCondition>())).delay as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCondition),
            "::",
            stringify!(delay)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticCondition>())).button as *const _ as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCondition),
            "::",
            stringify!(button)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticCondition>())).interval as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCondition),
            "::",
            stringify!(interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticCondition>())).right_sat as *const _ as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCondition),
            "::",
            stringify!(right_sat)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticCondition>())).left_sat as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCondition),
            "::",
            stringify!(left_sat)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SDL_HapticCondition>())).right_coeff as *const _ as usize
        },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCondition),
            "::",
            stringify!(right_coeff)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticCondition>())).left_coeff as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCondition),
            "::",
            stringify!(left_coeff)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticCondition>())).deadband as *const _ as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCondition),
            "::",
            stringify!(deadband)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticCondition>())).center as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCondition),
            "::",
            stringify!(center)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct SDL_HapticRamp {
    pub type_: Uint16,
    pub direction: SDL_HapticDirection,
    pub length: Uint32,
    pub delay: Uint16,
    pub button: Uint16,
    pub interval: Uint16,
    pub start: Sint16,
    pub end: Sint16,
    pub attack_length: Uint16,
    pub attack_level: Uint16,
    pub fade_length: Uint16,
    pub fade_level: Uint16,
}
#[test]
fn bindgen_test_layout_SDL_HapticRamp() {
    assert_eq!(
        ::core::mem::size_of::<SDL_HapticRamp>(),
        44usize,
        concat!("Size of: ", stringify!(SDL_HapticRamp))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_HapticRamp>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_HapticRamp))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticRamp>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticRamp),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticRamp>())).direction as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticRamp),
            "::",
            stringify!(direction)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticRamp>())).length as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticRamp),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticRamp>())).delay as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticRamp),
            "::",
            stringify!(delay)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticRamp>())).button as *const _ as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticRamp),
            "::",
            stringify!(button)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticRamp>())).interval as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticRamp),
            "::",
            stringify!(interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticRamp>())).start as *const _ as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticRamp),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticRamp>())).end as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticRamp),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticRamp>())).attack_length as *const _ as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticRamp),
            "::",
            stringify!(attack_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticRamp>())).attack_level as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticRamp),
            "::",
            stringify!(attack_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticRamp>())).fade_length as *const _ as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticRamp),
            "::",
            stringify!(fade_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticRamp>())).fade_level as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticRamp),
            "::",
            stringify!(fade_level)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct SDL_HapticLeftRight {
    pub type_: Uint16,
    pub length: Uint32,
    pub large_magnitude: Uint16,
    pub small_magnitude: Uint16,
}
#[test]
fn bindgen_test_layout_SDL_HapticLeftRight() {
    assert_eq!(
        ::core::mem::size_of::<SDL_HapticLeftRight>(),
        12usize,
        concat!("Size of: ", stringify!(SDL_HapticLeftRight))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_HapticLeftRight>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_HapticLeftRight))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticLeftRight>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticLeftRight),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticLeftRight>())).length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticLeftRight),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SDL_HapticLeftRight>())).large_magnitude as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticLeftRight),
            "::",
            stringify!(large_magnitude)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SDL_HapticLeftRight>())).small_magnitude as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticLeftRight),
            "::",
            stringify!(small_magnitude)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SDL_HapticCustom {
    pub type_: Uint16,
    pub direction: SDL_HapticDirection,
    pub length: Uint32,
    pub delay: Uint16,
    pub button: Uint16,
    pub interval: Uint16,
    pub channels: Uint8,
    pub period: Uint16,
    pub samples: Uint16,
    pub data: *mut Uint16,
    pub attack_length: Uint16,
    pub attack_level: Uint16,
    pub fade_length: Uint16,
    pub fade_level: Uint16,
}
#[test]
fn bindgen_test_layout_SDL_HapticCustom() {
    assert_eq!(
        ::core::mem::size_of::<SDL_HapticCustom>(),
        56usize,
        concat!("Size of: ", stringify!(SDL_HapticCustom))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_HapticCustom>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_HapticCustom))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticCustom>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCustom),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticCustom>())).direction as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCustom),
            "::",
            stringify!(direction)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticCustom>())).length as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCustom),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticCustom>())).delay as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCustom),
            "::",
            stringify!(delay)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticCustom>())).button as *const _ as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCustom),
            "::",
            stringify!(button)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticCustom>())).interval as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCustom),
            "::",
            stringify!(interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticCustom>())).channels as *const _ as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCustom),
            "::",
            stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticCustom>())).period as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCustom),
            "::",
            stringify!(period)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticCustom>())).samples as *const _ as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCustom),
            "::",
            stringify!(samples)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticCustom>())).data as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCustom),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticCustom>())).attack_length as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCustom),
            "::",
            stringify!(attack_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticCustom>())).attack_level as *const _ as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCustom),
            "::",
            stringify!(attack_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticCustom>())).fade_length as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCustom),
            "::",
            stringify!(fade_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticCustom>())).fade_level as *const _ as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCustom),
            "::",
            stringify!(fade_level)
        )
    );
}
impl Default for SDL_HapticCustom {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union SDL_HapticEffect {
    pub type_: Uint16,
    pub constant: SDL_HapticConstant,
    pub periodic: SDL_HapticPeriodic,
    pub condition: SDL_HapticCondition,
    pub ramp: SDL_HapticRamp,
    pub leftright: SDL_HapticLeftRight,
    pub custom: SDL_HapticCustom,
}
#[test]
fn bindgen_test_layout_SDL_HapticEffect() {
    assert_eq!(
        ::core::mem::size_of::<SDL_HapticEffect>(),
        72usize,
        concat!("Size of: ", stringify!(SDL_HapticEffect))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_HapticEffect>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_HapticEffect))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticEffect>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticEffect),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticEffect>())).constant as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticEffect),
            "::",
            stringify!(constant)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticEffect>())).periodic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticEffect),
            "::",
            stringify!(periodic)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticEffect>())).condition as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticEffect),
            "::",
            stringify!(condition)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticEffect>())).ramp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticEffect),
            "::",
            stringify!(ramp)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticEffect>())).leftright as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticEffect),
            "::",
            stringify!(leftright)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_HapticEffect>())).custom as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticEffect),
            "::",
            stringify!(custom)
        )
    );
}
impl Default for SDL_HapticEffect {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn SDL_NumHaptics() -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_HapticName(device_index: ctypes::c_int) -> *const ctypes::c_char;
}
extern "C" {
    pub fn SDL_HapticOpen(device_index: ctypes::c_int) -> *mut SDL_Haptic;
}
extern "C" {
    pub fn SDL_HapticOpened(device_index: ctypes::c_int) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_HapticIndex(haptic: *mut SDL_Haptic) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_MouseIsHaptic() -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_HapticOpenFromMouse() -> *mut SDL_Haptic;
}
extern "C" {
    pub fn SDL_JoystickIsHaptic(joystick: *mut SDL_Joystick) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_HapticOpenFromJoystick(joystick: *mut SDL_Joystick) -> *mut SDL_Haptic;
}
extern "C" {
    pub fn SDL_HapticClose(haptic: *mut SDL_Haptic);
}
extern "C" {
    pub fn SDL_HapticNumEffects(haptic: *mut SDL_Haptic) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_HapticNumEffectsPlaying(haptic: *mut SDL_Haptic) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_HapticQuery(haptic: *mut SDL_Haptic) -> ctypes::c_uint;
}
extern "C" {
    pub fn SDL_HapticNumAxes(haptic: *mut SDL_Haptic) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_HapticEffectSupported(
        haptic: *mut SDL_Haptic,
        effect: *mut SDL_HapticEffect,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_HapticNewEffect(
        haptic: *mut SDL_Haptic,
        effect: *mut SDL_HapticEffect,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_HapticUpdateEffect(
        haptic: *mut SDL_Haptic,
        effect: ctypes::c_int,
        data: *mut SDL_HapticEffect,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_HapticRunEffect(
        haptic: *mut SDL_Haptic,
        effect: ctypes::c_int,
        iterations: Uint32,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_HapticStopEffect(haptic: *mut SDL_Haptic, effect: ctypes::c_int) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_HapticDestroyEffect(haptic: *mut SDL_Haptic, effect: ctypes::c_int);
}
extern "C" {
    pub fn SDL_HapticGetEffectStatus(
        haptic: *mut SDL_Haptic,
        effect: ctypes::c_int,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_HapticSetGain(haptic: *mut SDL_Haptic, gain: ctypes::c_int) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_HapticSetAutocenter(
        haptic: *mut SDL_Haptic,
        autocenter: ctypes::c_int,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_HapticPause(haptic: *mut SDL_Haptic) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_HapticUnpause(haptic: *mut SDL_Haptic) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_HapticStopAll(haptic: *mut SDL_Haptic) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_HapticRumbleSupported(haptic: *mut SDL_Haptic) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_HapticRumbleInit(haptic: *mut SDL_Haptic) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_HapticRumblePlay(
        haptic: *mut SDL_Haptic,
        strength: f32,
        length: Uint32,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_HapticRumbleStop(haptic: *mut SDL_Haptic) -> ctypes::c_int;
}
pub const SDL_HINT_DEFAULT: SDL_HintPriority = 0;
pub const SDL_HINT_NORMAL: SDL_HintPriority = 1;
pub const SDL_HINT_OVERRIDE: SDL_HintPriority = 2;
pub type SDL_HintPriority = ctypes::c_uint;
extern "C" {
    pub fn SDL_SetHintWithPriority(
        name: *const ctypes::c_char,
        value: *const ctypes::c_char,
        priority: SDL_HintPriority,
    ) -> SDL_bool;
}
extern "C" {
    pub fn SDL_SetHint(name: *const ctypes::c_char, value: *const ctypes::c_char) -> SDL_bool;
}
extern "C" {
    pub fn SDL_GetHint(name: *const ctypes::c_char) -> *const ctypes::c_char;
}
extern "C" {
    pub fn SDL_GetHintBoolean(name: *const ctypes::c_char, default_value: SDL_bool) -> SDL_bool;
}
pub type SDL_HintCallback = ::core::option::Option<
    unsafe extern "C" fn(
        userdata: *mut ctypes::c_void,
        name: *const ctypes::c_char,
        oldValue: *const ctypes::c_char,
        newValue: *const ctypes::c_char,
    ),
>;
extern "C" {
    pub fn SDL_AddHintCallback(
        name: *const ctypes::c_char,
        callback: SDL_HintCallback,
        userdata: *mut ctypes::c_void,
    );
}
extern "C" {
    pub fn SDL_DelHintCallback(
        name: *const ctypes::c_char,
        callback: SDL_HintCallback,
        userdata: *mut ctypes::c_void,
    );
}
extern "C" {
    pub fn SDL_ClearHints();
}
extern "C" {
    pub fn SDL_LoadObject(sofile: *const ctypes::c_char) -> *mut ctypes::c_void;
}
extern "C" {
    pub fn SDL_LoadFunction(
        handle: *mut ctypes::c_void,
        name: *const ctypes::c_char,
    ) -> *mut ctypes::c_void;
}
extern "C" {
    pub fn SDL_UnloadObject(handle: *mut ctypes::c_void);
}
pub const SDL_LOG_CATEGORY_APPLICATION: SDL_LogCategory = 0;
pub const SDL_LOG_CATEGORY_ERROR: SDL_LogCategory = 1;
pub const SDL_LOG_CATEGORY_ASSERT: SDL_LogCategory = 2;
pub const SDL_LOG_CATEGORY_SYSTEM: SDL_LogCategory = 3;
pub const SDL_LOG_CATEGORY_AUDIO: SDL_LogCategory = 4;
pub const SDL_LOG_CATEGORY_VIDEO: SDL_LogCategory = 5;
pub const SDL_LOG_CATEGORY_RENDER: SDL_LogCategory = 6;
pub const SDL_LOG_CATEGORY_INPUT: SDL_LogCategory = 7;
pub const SDL_LOG_CATEGORY_TEST: SDL_LogCategory = 8;
pub const SDL_LOG_CATEGORY_RESERVED1: SDL_LogCategory = 9;
pub const SDL_LOG_CATEGORY_RESERVED2: SDL_LogCategory = 10;
pub const SDL_LOG_CATEGORY_RESERVED3: SDL_LogCategory = 11;
pub const SDL_LOG_CATEGORY_RESERVED4: SDL_LogCategory = 12;
pub const SDL_LOG_CATEGORY_RESERVED5: SDL_LogCategory = 13;
pub const SDL_LOG_CATEGORY_RESERVED6: SDL_LogCategory = 14;
pub const SDL_LOG_CATEGORY_RESERVED7: SDL_LogCategory = 15;
pub const SDL_LOG_CATEGORY_RESERVED8: SDL_LogCategory = 16;
pub const SDL_LOG_CATEGORY_RESERVED9: SDL_LogCategory = 17;
pub const SDL_LOG_CATEGORY_RESERVED10: SDL_LogCategory = 18;
pub const SDL_LOG_CATEGORY_CUSTOM: SDL_LogCategory = 19;
pub type SDL_LogCategory = ctypes::c_uint;
pub const SDL_LOG_PRIORITY_VERBOSE: SDL_LogPriority = 1;
pub const SDL_LOG_PRIORITY_DEBUG: SDL_LogPriority = 2;
pub const SDL_LOG_PRIORITY_INFO: SDL_LogPriority = 3;
pub const SDL_LOG_PRIORITY_WARN: SDL_LogPriority = 4;
pub const SDL_LOG_PRIORITY_ERROR: SDL_LogPriority = 5;
pub const SDL_LOG_PRIORITY_CRITICAL: SDL_LogPriority = 6;
pub const SDL_NUM_LOG_PRIORITIES: SDL_LogPriority = 7;
pub type SDL_LogPriority = ctypes::c_uint;
extern "C" {
    pub fn SDL_LogSetAllPriority(priority: SDL_LogPriority);
}
extern "C" {
    pub fn SDL_LogSetPriority(category: ctypes::c_int, priority: SDL_LogPriority);
}
extern "C" {
    pub fn SDL_LogGetPriority(category: ctypes::c_int) -> SDL_LogPriority;
}
extern "C" {
    pub fn SDL_LogResetPriorities();
}
extern "C" {
    pub fn SDL_Log(fmt: *const ctypes::c_char, ...);
}
extern "C" {
    pub fn SDL_LogVerbose(category: ctypes::c_int, fmt: *const ctypes::c_char, ...);
}
extern "C" {
    pub fn SDL_LogDebug(category: ctypes::c_int, fmt: *const ctypes::c_char, ...);
}
extern "C" {
    pub fn SDL_LogInfo(category: ctypes::c_int, fmt: *const ctypes::c_char, ...);
}
extern "C" {
    pub fn SDL_LogWarn(category: ctypes::c_int, fmt: *const ctypes::c_char, ...);
}
extern "C" {
    pub fn SDL_LogError(category: ctypes::c_int, fmt: *const ctypes::c_char, ...);
}
extern "C" {
    pub fn SDL_LogCritical(category: ctypes::c_int, fmt: *const ctypes::c_char, ...);
}
extern "C" {
    pub fn SDL_LogMessage(
        category: ctypes::c_int,
        priority: SDL_LogPriority,
        fmt: *const ctypes::c_char,
        ...
    );
}
extern "C" {
    pub fn SDL_LogMessageV(
        category: ctypes::c_int,
        priority: SDL_LogPriority,
        fmt: *const ctypes::c_char,
        ap: *mut __va_list_tag,
    );
}
pub type SDL_LogOutputFunction = ::core::option::Option<
    unsafe extern "C" fn(
        userdata: *mut ctypes::c_void,
        category: ctypes::c_int,
        priority: SDL_LogPriority,
        message: *const ctypes::c_char,
    ),
>;
extern "C" {
    pub fn SDL_LogGetOutputFunction(
        callback: *mut SDL_LogOutputFunction,
        userdata: *mut *mut ctypes::c_void,
    );
}
extern "C" {
    pub fn SDL_LogSetOutputFunction(callback: SDL_LogOutputFunction, userdata: *mut ctypes::c_void);
}
pub const SDL_MESSAGEBOX_ERROR: SDL_MessageBoxFlags = 16;
pub const SDL_MESSAGEBOX_WARNING: SDL_MessageBoxFlags = 32;
pub const SDL_MESSAGEBOX_INFORMATION: SDL_MessageBoxFlags = 64;
pub const SDL_MESSAGEBOX_BUTTONS_LEFT_TO_RIGHT: SDL_MessageBoxFlags = 128;
pub const SDL_MESSAGEBOX_BUTTONS_RIGHT_TO_LEFT: SDL_MessageBoxFlags = 256;
pub type SDL_MessageBoxFlags = ctypes::c_uint;
pub const SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT: SDL_MessageBoxButtonFlags = 1;
pub const SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT: SDL_MessageBoxButtonFlags = 2;
pub type SDL_MessageBoxButtonFlags = ctypes::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SDL_MessageBoxButtonData {
    pub flags: Uint32,
    pub buttonid: ctypes::c_int,
    pub text: *const ctypes::c_char,
}
#[test]
fn bindgen_test_layout_SDL_MessageBoxButtonData() {
    assert_eq!(
        ::core::mem::size_of::<SDL_MessageBoxButtonData>(),
        16usize,
        concat!("Size of: ", stringify!(SDL_MessageBoxButtonData))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_MessageBoxButtonData>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_MessageBoxButtonData))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_MessageBoxButtonData>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MessageBoxButtonData),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SDL_MessageBoxButtonData>())).buttonid as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MessageBoxButtonData),
            "::",
            stringify!(buttonid)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_MessageBoxButtonData>())).text as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MessageBoxButtonData),
            "::",
            stringify!(text)
        )
    );
}
impl Default for SDL_MessageBoxButtonData {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct SDL_MessageBoxColor {
    pub r: Uint8,
    pub g: Uint8,
    pub b: Uint8,
}
#[test]
fn bindgen_test_layout_SDL_MessageBoxColor() {
    assert_eq!(
        ::core::mem::size_of::<SDL_MessageBoxColor>(),
        3usize,
        concat!("Size of: ", stringify!(SDL_MessageBoxColor))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_MessageBoxColor>(),
        1usize,
        concat!("Alignment of ", stringify!(SDL_MessageBoxColor))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_MessageBoxColor>())).r as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MessageBoxColor),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_MessageBoxColor>())).g as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MessageBoxColor),
            "::",
            stringify!(g)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_MessageBoxColor>())).b as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MessageBoxColor),
            "::",
            stringify!(b)
        )
    );
}
pub const SDL_MESSAGEBOX_COLOR_BACKGROUND: SDL_MessageBoxColorType = 0;
pub const SDL_MESSAGEBOX_COLOR_TEXT: SDL_MessageBoxColorType = 1;
pub const SDL_MESSAGEBOX_COLOR_BUTTON_BORDER: SDL_MessageBoxColorType = 2;
pub const SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND: SDL_MessageBoxColorType = 3;
pub const SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED: SDL_MessageBoxColorType = 4;
pub const SDL_MESSAGEBOX_COLOR_MAX: SDL_MessageBoxColorType = 5;
pub type SDL_MessageBoxColorType = ctypes::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct SDL_MessageBoxColorScheme {
    pub colors: [SDL_MessageBoxColor; 5usize],
}
#[test]
fn bindgen_test_layout_SDL_MessageBoxColorScheme() {
    assert_eq!(
        ::core::mem::size_of::<SDL_MessageBoxColorScheme>(),
        15usize,
        concat!("Size of: ", stringify!(SDL_MessageBoxColorScheme))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_MessageBoxColorScheme>(),
        1usize,
        concat!("Alignment of ", stringify!(SDL_MessageBoxColorScheme))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SDL_MessageBoxColorScheme>())).colors as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MessageBoxColorScheme),
            "::",
            stringify!(colors)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SDL_MessageBoxData {
    pub flags: Uint32,
    pub window: *mut SDL_Window,
    pub title: *const ctypes::c_char,
    pub message: *const ctypes::c_char,
    pub numbuttons: ctypes::c_int,
    pub buttons: *const SDL_MessageBoxButtonData,
    pub colorScheme: *const SDL_MessageBoxColorScheme,
}
#[test]
fn bindgen_test_layout_SDL_MessageBoxData() {
    assert_eq!(
        ::core::mem::size_of::<SDL_MessageBoxData>(),
        56usize,
        concat!("Size of: ", stringify!(SDL_MessageBoxData))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_MessageBoxData>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_MessageBoxData))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_MessageBoxData>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MessageBoxData),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_MessageBoxData>())).window as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MessageBoxData),
            "::",
            stringify!(window)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_MessageBoxData>())).title as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MessageBoxData),
            "::",
            stringify!(title)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_MessageBoxData>())).message as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MessageBoxData),
            "::",
            stringify!(message)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_MessageBoxData>())).numbuttons as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MessageBoxData),
            "::",
            stringify!(numbuttons)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_MessageBoxData>())).buttons as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MessageBoxData),
            "::",
            stringify!(buttons)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_MessageBoxData>())).colorScheme as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MessageBoxData),
            "::",
            stringify!(colorScheme)
        )
    );
}
impl Default for SDL_MessageBoxData {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn SDL_ShowMessageBox(
        messageboxdata: *const SDL_MessageBoxData,
        buttonid: *mut ctypes::c_int,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_ShowSimpleMessageBox(
        flags: Uint32,
        title: *const ctypes::c_char,
        message: *const ctypes::c_char,
        window: *mut SDL_Window,
    ) -> ctypes::c_int;
}
pub type SDL_MetalView = *mut ctypes::c_void;
extern "C" {
    pub fn SDL_Metal_CreateView(window: *mut SDL_Window) -> SDL_MetalView;
}
extern "C" {
    pub fn SDL_Metal_DestroyView(view: SDL_MetalView);
}
extern "C" {
    pub fn SDL_Metal_GetLayer(view: SDL_MetalView) -> *mut ctypes::c_void;
}
extern "C" {
    pub fn SDL_Metal_GetDrawableSize(
        window: *mut SDL_Window,
        w: *mut ctypes::c_int,
        h: *mut ctypes::c_int,
    );
}
pub const SDL_POWERSTATE_UNKNOWN: SDL_PowerState = 0;
pub const SDL_POWERSTATE_ON_BATTERY: SDL_PowerState = 1;
pub const SDL_POWERSTATE_NO_BATTERY: SDL_PowerState = 2;
pub const SDL_POWERSTATE_CHARGING: SDL_PowerState = 3;
pub const SDL_POWERSTATE_CHARGED: SDL_PowerState = 4;
pub type SDL_PowerState = ctypes::c_uint;
extern "C" {
    pub fn SDL_GetPowerInfo(secs: *mut ctypes::c_int, pct: *mut ctypes::c_int) -> SDL_PowerState;
}
pub const SDL_RENDERER_SOFTWARE: SDL_RendererFlags = 1;
pub const SDL_RENDERER_ACCELERATED: SDL_RendererFlags = 2;
pub const SDL_RENDERER_PRESENTVSYNC: SDL_RendererFlags = 4;
pub const SDL_RENDERER_TARGETTEXTURE: SDL_RendererFlags = 8;
pub type SDL_RendererFlags = ctypes::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SDL_RendererInfo {
    pub name: *const ctypes::c_char,
    pub flags: Uint32,
    pub num_texture_formats: Uint32,
    pub texture_formats: [Uint32; 16usize],
    pub max_texture_width: ctypes::c_int,
    pub max_texture_height: ctypes::c_int,
}
#[test]
fn bindgen_test_layout_SDL_RendererInfo() {
    assert_eq!(
        ::core::mem::size_of::<SDL_RendererInfo>(),
        88usize,
        concat!("Size of: ", stringify!(SDL_RendererInfo))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_RendererInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_RendererInfo))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_RendererInfo>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RendererInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_RendererInfo>())).flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RendererInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SDL_RendererInfo>())).num_texture_formats as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RendererInfo),
            "::",
            stringify!(num_texture_formats)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SDL_RendererInfo>())).texture_formats as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RendererInfo),
            "::",
            stringify!(texture_formats)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SDL_RendererInfo>())).max_texture_width as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RendererInfo),
            "::",
            stringify!(max_texture_width)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SDL_RendererInfo>())).max_texture_height as *const _ as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RendererInfo),
            "::",
            stringify!(max_texture_height)
        )
    );
}
impl Default for SDL_RendererInfo {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const SDL_ScaleModeNearest: SDL_ScaleMode = 0;
pub const SDL_ScaleModeLinear: SDL_ScaleMode = 1;
pub const SDL_ScaleModeBest: SDL_ScaleMode = 2;
pub type SDL_ScaleMode = ctypes::c_uint;
pub const SDL_TEXTUREACCESS_STATIC: SDL_TextureAccess = 0;
pub const SDL_TEXTUREACCESS_STREAMING: SDL_TextureAccess = 1;
pub const SDL_TEXTUREACCESS_TARGET: SDL_TextureAccess = 2;
pub type SDL_TextureAccess = ctypes::c_uint;
pub const SDL_TEXTUREMODULATE_NONE: SDL_TextureModulate = 0;
pub const SDL_TEXTUREMODULATE_COLOR: SDL_TextureModulate = 1;
pub const SDL_TEXTUREMODULATE_ALPHA: SDL_TextureModulate = 2;
pub type SDL_TextureModulate = ctypes::c_uint;
pub const SDL_FLIP_NONE: SDL_RendererFlip = 0;
pub const SDL_FLIP_HORIZONTAL: SDL_RendererFlip = 1;
pub const SDL_FLIP_VERTICAL: SDL_RendererFlip = 2;
pub type SDL_RendererFlip = ctypes::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SDL_Renderer {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SDL_Texture {
    _unused: [u8; 0],
}
extern "C" {
    pub fn SDL_GetNumRenderDrivers() -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_GetRenderDriverInfo(
        index: ctypes::c_int,
        info: *mut SDL_RendererInfo,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_CreateWindowAndRenderer(
        width: ctypes::c_int,
        height: ctypes::c_int,
        window_flags: Uint32,
        window: *mut *mut SDL_Window,
        renderer: *mut *mut SDL_Renderer,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_CreateRenderer(
        window: *mut SDL_Window,
        index: ctypes::c_int,
        flags: Uint32,
    ) -> *mut SDL_Renderer;
}
extern "C" {
    pub fn SDL_CreateSoftwareRenderer(surface: *mut SDL_Surface) -> *mut SDL_Renderer;
}
extern "C" {
    pub fn SDL_GetRenderer(window: *mut SDL_Window) -> *mut SDL_Renderer;
}
extern "C" {
    pub fn SDL_GetRendererInfo(
        renderer: *mut SDL_Renderer,
        info: *mut SDL_RendererInfo,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_GetRendererOutputSize(
        renderer: *mut SDL_Renderer,
        w: *mut ctypes::c_int,
        h: *mut ctypes::c_int,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_CreateTexture(
        renderer: *mut SDL_Renderer,
        format: Uint32,
        access: ctypes::c_int,
        w: ctypes::c_int,
        h: ctypes::c_int,
    ) -> *mut SDL_Texture;
}
extern "C" {
    pub fn SDL_CreateTextureFromSurface(
        renderer: *mut SDL_Renderer,
        surface: *mut SDL_Surface,
    ) -> *mut SDL_Texture;
}
extern "C" {
    pub fn SDL_QueryTexture(
        texture: *mut SDL_Texture,
        format: *mut Uint32,
        access: *mut ctypes::c_int,
        w: *mut ctypes::c_int,
        h: *mut ctypes::c_int,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_SetTextureColorMod(
        texture: *mut SDL_Texture,
        r: Uint8,
        g: Uint8,
        b: Uint8,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_GetTextureColorMod(
        texture: *mut SDL_Texture,
        r: *mut Uint8,
        g: *mut Uint8,
        b: *mut Uint8,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_SetTextureAlphaMod(texture: *mut SDL_Texture, alpha: Uint8) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_GetTextureAlphaMod(texture: *mut SDL_Texture, alpha: *mut Uint8) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_SetTextureBlendMode(
        texture: *mut SDL_Texture,
        blendMode: SDL_BlendMode,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_GetTextureBlendMode(
        texture: *mut SDL_Texture,
        blendMode: *mut SDL_BlendMode,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_SetTextureScaleMode(
        texture: *mut SDL_Texture,
        scaleMode: SDL_ScaleMode,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_GetTextureScaleMode(
        texture: *mut SDL_Texture,
        scaleMode: *mut SDL_ScaleMode,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_UpdateTexture(
        texture: *mut SDL_Texture,
        rect: *const SDL_Rect,
        pixels: *const ctypes::c_void,
        pitch: ctypes::c_int,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_UpdateYUVTexture(
        texture: *mut SDL_Texture,
        rect: *const SDL_Rect,
        Yplane: *const Uint8,
        Ypitch: ctypes::c_int,
        Uplane: *const Uint8,
        Upitch: ctypes::c_int,
        Vplane: *const Uint8,
        Vpitch: ctypes::c_int,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_UpdateNVTexture(
        texture: *mut SDL_Texture,
        rect: *const SDL_Rect,
        Yplane: *const Uint8,
        Ypitch: ctypes::c_int,
        UVplane: *const Uint8,
        UVpitch: ctypes::c_int,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_LockTexture(
        texture: *mut SDL_Texture,
        rect: *const SDL_Rect,
        pixels: *mut *mut ctypes::c_void,
        pitch: *mut ctypes::c_int,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_LockTextureToSurface(
        texture: *mut SDL_Texture,
        rect: *const SDL_Rect,
        surface: *mut *mut SDL_Surface,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_UnlockTexture(texture: *mut SDL_Texture);
}
extern "C" {
    pub fn SDL_RenderTargetSupported(renderer: *mut SDL_Renderer) -> SDL_bool;
}
extern "C" {
    pub fn SDL_SetRenderTarget(
        renderer: *mut SDL_Renderer,
        texture: *mut SDL_Texture,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_GetRenderTarget(renderer: *mut SDL_Renderer) -> *mut SDL_Texture;
}
extern "C" {
    pub fn SDL_RenderSetLogicalSize(
        renderer: *mut SDL_Renderer,
        w: ctypes::c_int,
        h: ctypes::c_int,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_RenderGetLogicalSize(
        renderer: *mut SDL_Renderer,
        w: *mut ctypes::c_int,
        h: *mut ctypes::c_int,
    );
}
extern "C" {
    pub fn SDL_RenderSetIntegerScale(
        renderer: *mut SDL_Renderer,
        enable: SDL_bool,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_RenderGetIntegerScale(renderer: *mut SDL_Renderer) -> SDL_bool;
}
extern "C" {
    pub fn SDL_RenderSetViewport(
        renderer: *mut SDL_Renderer,
        rect: *const SDL_Rect,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_RenderGetViewport(renderer: *mut SDL_Renderer, rect: *mut SDL_Rect);
}
extern "C" {
    pub fn SDL_RenderSetClipRect(
        renderer: *mut SDL_Renderer,
        rect: *const SDL_Rect,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_RenderGetClipRect(renderer: *mut SDL_Renderer, rect: *mut SDL_Rect);
}
extern "C" {
    pub fn SDL_RenderIsClipEnabled(renderer: *mut SDL_Renderer) -> SDL_bool;
}
extern "C" {
    pub fn SDL_RenderSetScale(
        renderer: *mut SDL_Renderer,
        scaleX: f32,
        scaleY: f32,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_RenderGetScale(renderer: *mut SDL_Renderer, scaleX: *mut f32, scaleY: *mut f32);
}
extern "C" {
    pub fn SDL_SetRenderDrawColor(
        renderer: *mut SDL_Renderer,
        r: Uint8,
        g: Uint8,
        b: Uint8,
        a: Uint8,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_GetRenderDrawColor(
        renderer: *mut SDL_Renderer,
        r: *mut Uint8,
        g: *mut Uint8,
        b: *mut Uint8,
        a: *mut Uint8,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_SetRenderDrawBlendMode(
        renderer: *mut SDL_Renderer,
        blendMode: SDL_BlendMode,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_GetRenderDrawBlendMode(
        renderer: *mut SDL_Renderer,
        blendMode: *mut SDL_BlendMode,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_RenderClear(renderer: *mut SDL_Renderer) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_RenderDrawPoint(
        renderer: *mut SDL_Renderer,
        x: ctypes::c_int,
        y: ctypes::c_int,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_RenderDrawPoints(
        renderer: *mut SDL_Renderer,
        points: *const SDL_Point,
        count: ctypes::c_int,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_RenderDrawLine(
        renderer: *mut SDL_Renderer,
        x1: ctypes::c_int,
        y1: ctypes::c_int,
        x2: ctypes::c_int,
        y2: ctypes::c_int,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_RenderDrawLines(
        renderer: *mut SDL_Renderer,
        points: *const SDL_Point,
        count: ctypes::c_int,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_RenderDrawRect(renderer: *mut SDL_Renderer, rect: *const SDL_Rect) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_RenderDrawRects(
        renderer: *mut SDL_Renderer,
        rects: *const SDL_Rect,
        count: ctypes::c_int,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_RenderFillRect(renderer: *mut SDL_Renderer, rect: *const SDL_Rect) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_RenderFillRects(
        renderer: *mut SDL_Renderer,
        rects: *const SDL_Rect,
        count: ctypes::c_int,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_RenderCopy(
        renderer: *mut SDL_Renderer,
        texture: *mut SDL_Texture,
        srcrect: *const SDL_Rect,
        dstrect: *const SDL_Rect,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_RenderCopyEx(
        renderer: *mut SDL_Renderer,
        texture: *mut SDL_Texture,
        srcrect: *const SDL_Rect,
        dstrect: *const SDL_Rect,
        angle: f64,
        center: *const SDL_Point,
        flip: SDL_RendererFlip,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_RenderDrawPointF(renderer: *mut SDL_Renderer, x: f32, y: f32) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_RenderDrawPointsF(
        renderer: *mut SDL_Renderer,
        points: *const SDL_FPoint,
        count: ctypes::c_int,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_RenderDrawLineF(
        renderer: *mut SDL_Renderer,
        x1: f32,
        y1: f32,
        x2: f32,
        y2: f32,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_RenderDrawLinesF(
        renderer: *mut SDL_Renderer,
        points: *const SDL_FPoint,
        count: ctypes::c_int,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_RenderDrawRectF(
        renderer: *mut SDL_Renderer,
        rect: *const SDL_FRect,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_RenderDrawRectsF(
        renderer: *mut SDL_Renderer,
        rects: *const SDL_FRect,
        count: ctypes::c_int,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_RenderFillRectF(
        renderer: *mut SDL_Renderer,
        rect: *const SDL_FRect,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_RenderFillRectsF(
        renderer: *mut SDL_Renderer,
        rects: *const SDL_FRect,
        count: ctypes::c_int,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_RenderCopyF(
        renderer: *mut SDL_Renderer,
        texture: *mut SDL_Texture,
        srcrect: *const SDL_Rect,
        dstrect: *const SDL_FRect,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_RenderCopyExF(
        renderer: *mut SDL_Renderer,
        texture: *mut SDL_Texture,
        srcrect: *const SDL_Rect,
        dstrect: *const SDL_FRect,
        angle: f64,
        center: *const SDL_FPoint,
        flip: SDL_RendererFlip,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_RenderReadPixels(
        renderer: *mut SDL_Renderer,
        rect: *const SDL_Rect,
        format: Uint32,
        pixels: *mut ctypes::c_void,
        pitch: ctypes::c_int,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_RenderPresent(renderer: *mut SDL_Renderer);
}
extern "C" {
    pub fn SDL_DestroyTexture(texture: *mut SDL_Texture);
}
extern "C" {
    pub fn SDL_DestroyRenderer(renderer: *mut SDL_Renderer);
}
extern "C" {
    pub fn SDL_RenderFlush(renderer: *mut SDL_Renderer) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_GL_BindTexture(
        texture: *mut SDL_Texture,
        texw: *mut f32,
        texh: *mut f32,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_GL_UnbindTexture(texture: *mut SDL_Texture) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_RenderGetMetalLayer(renderer: *mut SDL_Renderer) -> *mut ctypes::c_void;
}
extern "C" {
    pub fn SDL_RenderGetMetalCommandEncoder(renderer: *mut SDL_Renderer) -> *mut ctypes::c_void;
}
extern "C" {
    pub fn SDL_CreateShapedWindow(
        title: *const ctypes::c_char,
        x: ctypes::c_uint,
        y: ctypes::c_uint,
        w: ctypes::c_uint,
        h: ctypes::c_uint,
        flags: Uint32,
    ) -> *mut SDL_Window;
}
extern "C" {
    pub fn SDL_IsShapedWindow(window: *const SDL_Window) -> SDL_bool;
}
pub const ShapeModeDefault: WindowShapeMode = 0;
pub const ShapeModeBinarizeAlpha: WindowShapeMode = 1;
pub const ShapeModeReverseBinarizeAlpha: WindowShapeMode = 2;
pub const ShapeModeColorKey: WindowShapeMode = 3;
pub type WindowShapeMode = ctypes::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union SDL_WindowShapeParams {
    pub binarizationCutoff: Uint8,
    pub colorKey: SDL_Color,
}
#[test]
fn bindgen_test_layout_SDL_WindowShapeParams() {
    assert_eq!(
        ::core::mem::size_of::<SDL_WindowShapeParams>(),
        4usize,
        concat!("Size of: ", stringify!(SDL_WindowShapeParams))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_WindowShapeParams>(),
        1usize,
        concat!("Alignment of ", stringify!(SDL_WindowShapeParams))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SDL_WindowShapeParams>())).binarizationCutoff as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_WindowShapeParams),
            "::",
            stringify!(binarizationCutoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_WindowShapeParams>())).colorKey as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_WindowShapeParams),
            "::",
            stringify!(colorKey)
        )
    );
}
impl Default for SDL_WindowShapeParams {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SDL_WindowShapeMode {
    pub mode: WindowShapeMode,
    pub parameters: SDL_WindowShapeParams,
}
#[test]
fn bindgen_test_layout_SDL_WindowShapeMode() {
    assert_eq!(
        ::core::mem::size_of::<SDL_WindowShapeMode>(),
        8usize,
        concat!("Size of: ", stringify!(SDL_WindowShapeMode))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_WindowShapeMode>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_WindowShapeMode))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_WindowShapeMode>())).mode as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_WindowShapeMode),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_WindowShapeMode>())).parameters as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_WindowShapeMode),
            "::",
            stringify!(parameters)
        )
    );
}
impl Default for SDL_WindowShapeMode {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn SDL_SetWindowShape(
        window: *mut SDL_Window,
        shape: *mut SDL_Surface,
        shape_mode: *mut SDL_WindowShapeMode,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_GetShapedWindowMode(
        window: *mut SDL_Window,
        shape_mode: *mut SDL_WindowShapeMode,
    ) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_LinuxSetThreadPriority(threadID: Sint64, priority: ctypes::c_int) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_IsTablet() -> SDL_bool;
}
extern "C" {
    pub fn SDL_OnApplicationWillTerminate();
}
extern "C" {
    pub fn SDL_OnApplicationDidReceiveMemoryWarning();
}
extern "C" {
    pub fn SDL_OnApplicationWillResignActive();
}
extern "C" {
    pub fn SDL_OnApplicationDidEnterBackground();
}
extern "C" {
    pub fn SDL_OnApplicationWillEnterForeground();
}
extern "C" {
    pub fn SDL_OnApplicationDidBecomeActive();
}
extern "C" {
    pub fn SDL_GetTicks() -> Uint32;
}
extern "C" {
    pub fn SDL_GetPerformanceCounter() -> Uint64;
}
extern "C" {
    pub fn SDL_GetPerformanceFrequency() -> Uint64;
}
extern "C" {
    pub fn SDL_Delay(ms: Uint32);
}
pub type SDL_TimerCallback = ::core::option::Option<
    unsafe extern "C" fn(interval: Uint32, param: *mut ctypes::c_void) -> Uint32,
>;
pub type SDL_TimerID = ctypes::c_int;
extern "C" {
    pub fn SDL_AddTimer(
        interval: Uint32,
        callback: SDL_TimerCallback,
        param: *mut ctypes::c_void,
    ) -> SDL_TimerID;
}
extern "C" {
    pub fn SDL_RemoveTimer(id: SDL_TimerID) -> SDL_bool;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct SDL_version {
    pub major: Uint8,
    pub minor: Uint8,
    pub patch: Uint8,
}
#[test]
fn bindgen_test_layout_SDL_version() {
    assert_eq!(
        ::core::mem::size_of::<SDL_version>(),
        3usize,
        concat!("Size of: ", stringify!(SDL_version))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_version>(),
        1usize,
        concat!("Alignment of ", stringify!(SDL_version))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_version>())).major as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_version),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_version>())).minor as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_version),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_version>())).patch as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_version),
            "::",
            stringify!(patch)
        )
    );
}
extern "C" {
    pub fn SDL_GetVersion(ver: *mut SDL_version);
}
extern "C" {
    pub fn SDL_GetRevision() -> *const ctypes::c_char;
}
extern "C" {
    pub fn SDL_GetRevisionNumber() -> ctypes::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SDL_Locale {
    pub language: *const ctypes::c_char,
    pub country: *const ctypes::c_char,
}
#[test]
fn bindgen_test_layout_SDL_Locale() {
    assert_eq!(
        ::core::mem::size_of::<SDL_Locale>(),
        16usize,
        concat!("Size of: ", stringify!(SDL_Locale))
    );
    assert_eq!(
        ::core::mem::align_of::<SDL_Locale>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_Locale))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Locale>())).language as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Locale),
            "::",
            stringify!(language)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDL_Locale>())).country as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Locale),
            "::",
            stringify!(country)
        )
    );
}
impl Default for SDL_Locale {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn SDL_GetPreferredLocales() -> *mut SDL_Locale;
}
extern "C" {
    pub fn SDL_OpenURL(url: *const ctypes::c_char) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_Init(flags: Uint32) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_InitSubSystem(flags: Uint32) -> ctypes::c_int;
}
extern "C" {
    pub fn SDL_QuitSubSystem(flags: Uint32);
}
extern "C" {
    pub fn SDL_WasInit(flags: Uint32) -> Uint32;
}
extern "C" {
    pub fn SDL_Quit();
}
pub type GLenum = ctypes::c_uint;
pub type GLboolean = ctypes::c_uchar;
pub type GLbitfield = ctypes::c_uint;
pub type GLvoid = ctypes::c_void;
pub type GLbyte = ctypes::c_schar;
pub type GLshort = ctypes::c_short;
pub type GLint = ctypes::c_int;
pub type GLubyte = ctypes::c_uchar;
pub type GLushort = ctypes::c_ushort;
pub type GLuint = ctypes::c_uint;
pub type GLsizei = ctypes::c_int;
pub type GLfloat = f32;
pub type GLclampf = f32;
pub type GLdouble = f64;
pub type GLclampd = f64;
extern "C" {
    pub fn glClearIndex(c: GLfloat);
}
extern "C" {
    pub fn glClearColor(red: GLclampf, green: GLclampf, blue: GLclampf, alpha: GLclampf);
}
extern "C" {
    pub fn glClear(mask: GLbitfield);
}
extern "C" {
    pub fn glIndexMask(mask: GLuint);
}
extern "C" {
    pub fn glColorMask(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean);
}
extern "C" {
    pub fn glAlphaFunc(func: GLenum, ref_: GLclampf);
}
extern "C" {
    pub fn glBlendFunc(sfactor: GLenum, dfactor: GLenum);
}
extern "C" {
    pub fn glLogicOp(opcode: GLenum);
}
extern "C" {
    pub fn glCullFace(mode: GLenum);
}
extern "C" {
    pub fn glFrontFace(mode: GLenum);
}
extern "C" {
    pub fn glPointSize(size: GLfloat);
}
extern "C" {
    pub fn glLineWidth(width: GLfloat);
}
extern "C" {
    pub fn glLineStipple(factor: GLint, pattern: GLushort);
}
extern "C" {
    pub fn glPolygonMode(face: GLenum, mode: GLenum);
}
extern "C" {
    pub fn glPolygonOffset(factor: GLfloat, units: GLfloat);
}
extern "C" {
    pub fn glPolygonStipple(mask: *const GLubyte);
}
extern "C" {
    pub fn glGetPolygonStipple(mask: *mut GLubyte);
}
extern "C" {
    pub fn glEdgeFlag(flag: GLboolean);
}
extern "C" {
    pub fn glEdgeFlagv(flag: *const GLboolean);
}
extern "C" {
    pub fn glScissor(x: GLint, y: GLint, width: GLsizei, height: GLsizei);
}
extern "C" {
    pub fn glClipPlane(plane: GLenum, equation: *const GLdouble);
}
extern "C" {
    pub fn glGetClipPlane(plane: GLenum, equation: *mut GLdouble);
}
extern "C" {
    pub fn glDrawBuffer(mode: GLenum);
}
extern "C" {
    pub fn glReadBuffer(mode: GLenum);
}
extern "C" {
    pub fn glEnable(cap: GLenum);
}
extern "C" {
    pub fn glDisable(cap: GLenum);
}
extern "C" {
    pub fn glIsEnabled(cap: GLenum) -> GLboolean;
}
extern "C" {
    pub fn glEnableClientState(cap: GLenum);
}
extern "C" {
    pub fn glDisableClientState(cap: GLenum);
}
extern "C" {
    pub fn glGetBooleanv(pname: GLenum, params: *mut GLboolean);
}
extern "C" {
    pub fn glGetDoublev(pname: GLenum, params: *mut GLdouble);
}
extern "C" {
    pub fn glGetFloatv(pname: GLenum, params: *mut GLfloat);
}
extern "C" {
    pub fn glGetIntegerv(pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glPushAttrib(mask: GLbitfield);
}
extern "C" {
    pub fn glPopAttrib();
}
extern "C" {
    pub fn glPushClientAttrib(mask: GLbitfield);
}
extern "C" {
    pub fn glPopClientAttrib();
}
extern "C" {
    pub fn glRenderMode(mode: GLenum) -> GLint;
}
extern "C" {
    pub fn glGetError() -> GLenum;
}
extern "C" {
    pub fn glGetString(name: GLenum) -> *const GLubyte;
}
extern "C" {
    pub fn glFinish();
}
extern "C" {
    pub fn glFlush();
}
extern "C" {
    pub fn glHint(target: GLenum, mode: GLenum);
}
extern "C" {
    pub fn glClearDepth(depth: GLclampd);
}
extern "C" {
    pub fn glDepthFunc(func: GLenum);
}
extern "C" {
    pub fn glDepthMask(flag: GLboolean);
}
extern "C" {
    pub fn glDepthRange(near_val: GLclampd, far_val: GLclampd);
}
extern "C" {
    pub fn glClearAccum(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat);
}
extern "C" {
    pub fn glAccum(op: GLenum, value: GLfloat);
}
extern "C" {
    pub fn glMatrixMode(mode: GLenum);
}
extern "C" {
    pub fn glOrtho(
        left: GLdouble,
        right: GLdouble,
        bottom: GLdouble,
        top: GLdouble,
        near_val: GLdouble,
        far_val: GLdouble,
    );
}
extern "C" {
    pub fn glFrustum(
        left: GLdouble,
        right: GLdouble,
        bottom: GLdouble,
        top: GLdouble,
        near_val: GLdouble,
        far_val: GLdouble,
    );
}
extern "C" {
    pub fn glViewport(x: GLint, y: GLint, width: GLsizei, height: GLsizei);
}
extern "C" {
    pub fn glPushMatrix();
}
extern "C" {
    pub fn glPopMatrix();
}
extern "C" {
    pub fn glLoadIdentity();
}
extern "C" {
    pub fn glLoadMatrixd(m: *const GLdouble);
}
extern "C" {
    pub fn glLoadMatrixf(m: *const GLfloat);
}
extern "C" {
    pub fn glMultMatrixd(m: *const GLdouble);
}
extern "C" {
    pub fn glMultMatrixf(m: *const GLfloat);
}
extern "C" {
    pub fn glRotated(angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble);
}
extern "C" {
    pub fn glRotatef(angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat);
}
extern "C" {
    pub fn glScaled(x: GLdouble, y: GLdouble, z: GLdouble);
}
extern "C" {
    pub fn glScalef(x: GLfloat, y: GLfloat, z: GLfloat);
}
extern "C" {
    pub fn glTranslated(x: GLdouble, y: GLdouble, z: GLdouble);
}
extern "C" {
    pub fn glTranslatef(x: GLfloat, y: GLfloat, z: GLfloat);
}
extern "C" {
    pub fn glIsList(list: GLuint) -> GLboolean;
}
extern "C" {
    pub fn glDeleteLists(list: GLuint, range: GLsizei);
}
extern "C" {
    pub fn glGenLists(range: GLsizei) -> GLuint;
}
extern "C" {
    pub fn glNewList(list: GLuint, mode: GLenum);
}
extern "C" {
    pub fn glEndList();
}
extern "C" {
    pub fn glCallList(list: GLuint);
}
extern "C" {
    pub fn glCallLists(n: GLsizei, type_: GLenum, lists: *const GLvoid);
}
extern "C" {
    pub fn glListBase(base: GLuint);
}
extern "C" {
    pub fn glBegin(mode: GLenum);
}
extern "C" {
    pub fn glEnd();
}
extern "C" {
    pub fn glVertex2d(x: GLdouble, y: GLdouble);
}
extern "C" {
    pub fn glVertex2f(x: GLfloat, y: GLfloat);
}
extern "C" {
    pub fn glVertex2i(x: GLint, y: GLint);
}
extern "C" {
    pub fn glVertex2s(x: GLshort, y: GLshort);
}
extern "C" {
    pub fn glVertex3d(x: GLdouble, y: GLdouble, z: GLdouble);
}
extern "C" {
    pub fn glVertex3f(x: GLfloat, y: GLfloat, z: GLfloat);
}
extern "C" {
    pub fn glVertex3i(x: GLint, y: GLint, z: GLint);
}
extern "C" {
    pub fn glVertex3s(x: GLshort, y: GLshort, z: GLshort);
}
extern "C" {
    pub fn glVertex4d(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble);
}
extern "C" {
    pub fn glVertex4f(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat);
}
extern "C" {
    pub fn glVertex4i(x: GLint, y: GLint, z: GLint, w: GLint);
}
extern "C" {
    pub fn glVertex4s(x: GLshort, y: GLshort, z: GLshort, w: GLshort);
}
extern "C" {
    pub fn glVertex2dv(v: *const GLdouble);
}
extern "C" {
    pub fn glVertex2fv(v: *const GLfloat);
}
extern "C" {
    pub fn glVertex2iv(v: *const GLint);
}
extern "C" {
    pub fn glVertex2sv(v: *const GLshort);
}
extern "C" {
    pub fn glVertex3dv(v: *const GLdouble);
}
extern "C" {
    pub fn glVertex3fv(v: *const GLfloat);
}
extern "C" {
    pub fn glVertex3iv(v: *const GLint);
}
extern "C" {
    pub fn glVertex3sv(v: *const GLshort);
}
extern "C" {
    pub fn glVertex4dv(v: *const GLdouble);
}
extern "C" {
    pub fn glVertex4fv(v: *const GLfloat);
}
extern "C" {
    pub fn glVertex4iv(v: *const GLint);
}
extern "C" {
    pub fn glVertex4sv(v: *const GLshort);
}
extern "C" {
    pub fn glNormal3b(nx: GLbyte, ny: GLbyte, nz: GLbyte);
}
extern "C" {
    pub fn glNormal3d(nx: GLdouble, ny: GLdouble, nz: GLdouble);
}
extern "C" {
    pub fn glNormal3f(nx: GLfloat, ny: GLfloat, nz: GLfloat);
}
extern "C" {
    pub fn glNormal3i(nx: GLint, ny: GLint, nz: GLint);
}
extern "C" {
    pub fn glNormal3s(nx: GLshort, ny: GLshort, nz: GLshort);
}
extern "C" {
    pub fn glNormal3bv(v: *const GLbyte);
}
extern "C" {
    pub fn glNormal3dv(v: *const GLdouble);
}
extern "C" {
    pub fn glNormal3fv(v: *const GLfloat);
}
extern "C" {
    pub fn glNormal3iv(v: *const GLint);
}
extern "C" {
    pub fn glNormal3sv(v: *const GLshort);
}
extern "C" {
    pub fn glIndexd(c: GLdouble);
}
extern "C" {
    pub fn glIndexf(c: GLfloat);
}
extern "C" {
    pub fn glIndexi(c: GLint);
}
extern "C" {
    pub fn glIndexs(c: GLshort);
}
extern "C" {
    pub fn glIndexub(c: GLubyte);
}
extern "C" {
    pub fn glIndexdv(c: *const GLdouble);
}
extern "C" {
    pub fn glIndexfv(c: *const GLfloat);
}
extern "C" {
    pub fn glIndexiv(c: *const GLint);
}
extern "C" {
    pub fn glIndexsv(c: *const GLshort);
}
extern "C" {
    pub fn glIndexubv(c: *const GLubyte);
}
extern "C" {
    pub fn glColor3b(red: GLbyte, green: GLbyte, blue: GLbyte);
}
extern "C" {
    pub fn glColor3d(red: GLdouble, green: GLdouble, blue: GLdouble);
}
extern "C" {
    pub fn glColor3f(red: GLfloat, green: GLfloat, blue: GLfloat);
}
extern "C" {
    pub fn glColor3i(red: GLint, green: GLint, blue: GLint);
}
extern "C" {
    pub fn glColor3s(red: GLshort, green: GLshort, blue: GLshort);
}
extern "C" {
    pub fn glColor3ub(red: GLubyte, green: GLubyte, blue: GLubyte);
}
extern "C" {
    pub fn glColor3ui(red: GLuint, green: GLuint, blue: GLuint);
}
extern "C" {
    pub fn glColor3us(red: GLushort, green: GLushort, blue: GLushort);
}
extern "C" {
    pub fn glColor4b(red: GLbyte, green: GLbyte, blue: GLbyte, alpha: GLbyte);
}
extern "C" {
    pub fn glColor4d(red: GLdouble, green: GLdouble, blue: GLdouble, alpha: GLdouble);
}
extern "C" {
    pub fn glColor4f(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat);
}
extern "C" {
    pub fn glColor4i(red: GLint, green: GLint, blue: GLint, alpha: GLint);
}
extern "C" {
    pub fn glColor4s(red: GLshort, green: GLshort, blue: GLshort, alpha: GLshort);
}
extern "C" {
    pub fn glColor4ub(red: GLubyte, green: GLubyte, blue: GLubyte, alpha: GLubyte);
}
extern "C" {
    pub fn glColor4ui(red: GLuint, green: GLuint, blue: GLuint, alpha: GLuint);
}
extern "C" {
    pub fn glColor4us(red: GLushort, green: GLushort, blue: GLushort, alpha: GLushort);
}
extern "C" {
    pub fn glColor3bv(v: *const GLbyte);
}
extern "C" {
    pub fn glColor3dv(v: *const GLdouble);
}
extern "C" {
    pub fn glColor3fv(v: *const GLfloat);
}
extern "C" {
    pub fn glColor3iv(v: *const GLint);
}
extern "C" {
    pub fn glColor3sv(v: *const GLshort);
}
extern "C" {
    pub fn glColor3ubv(v: *const GLubyte);
}
extern "C" {
    pub fn glColor3uiv(v: *const GLuint);
}
extern "C" {
    pub fn glColor3usv(v: *const GLushort);
}
extern "C" {
    pub fn glColor4bv(v: *const GLbyte);
}
extern "C" {
    pub fn glColor4dv(v: *const GLdouble);
}
extern "C" {
    pub fn glColor4fv(v: *const GLfloat);
}
extern "C" {
    pub fn glColor4iv(v: *const GLint);
}
extern "C" {
    pub fn glColor4sv(v: *const GLshort);
}
extern "C" {
    pub fn glColor4ubv(v: *const GLubyte);
}
extern "C" {
    pub fn glColor4uiv(v: *const GLuint);
}
extern "C" {
    pub fn glColor4usv(v: *const GLushort);
}
extern "C" {
    pub fn glTexCoord1d(s: GLdouble);
}
extern "C" {
    pub fn glTexCoord1f(s: GLfloat);
}
extern "C" {
    pub fn glTexCoord1i(s: GLint);
}
extern "C" {
    pub fn glTexCoord1s(s: GLshort);
}
extern "C" {
    pub fn glTexCoord2d(s: GLdouble, t: GLdouble);
}
extern "C" {
    pub fn glTexCoord2f(s: GLfloat, t: GLfloat);
}
extern "C" {
    pub fn glTexCoord2i(s: GLint, t: GLint);
}
extern "C" {
    pub fn glTexCoord2s(s: GLshort, t: GLshort);
}
extern "C" {
    pub fn glTexCoord3d(s: GLdouble, t: GLdouble, r: GLdouble);
}
extern "C" {
    pub fn glTexCoord3f(s: GLfloat, t: GLfloat, r: GLfloat);
}
extern "C" {
    pub fn glTexCoord3i(s: GLint, t: GLint, r: GLint);
}
extern "C" {
    pub fn glTexCoord3s(s: GLshort, t: GLshort, r: GLshort);
}
extern "C" {
    pub fn glTexCoord4d(s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble);
}
extern "C" {
    pub fn glTexCoord4f(s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat);
}
extern "C" {
    pub fn glTexCoord4i(s: GLint, t: GLint, r: GLint, q: GLint);
}
extern "C" {
    pub fn glTexCoord4s(s: GLshort, t: GLshort, r: GLshort, q: GLshort);
}
extern "C" {
    pub fn glTexCoord1dv(v: *const GLdouble);
}
extern "C" {
    pub fn glTexCoord1fv(v: *const GLfloat);
}
extern "C" {
    pub fn glTexCoord1iv(v: *const GLint);
}
extern "C" {
    pub fn glTexCoord1sv(v: *const GLshort);
}
extern "C" {
    pub fn glTexCoord2dv(v: *const GLdouble);
}
extern "C" {
    pub fn glTexCoord2fv(v: *const GLfloat);
}
extern "C" {
    pub fn glTexCoord2iv(v: *const GLint);
}
extern "C" {
    pub fn glTexCoord2sv(v: *const GLshort);
}
extern "C" {
    pub fn glTexCoord3dv(v: *const GLdouble);
}
extern "C" {
    pub fn glTexCoord3fv(v: *const GLfloat);
}
extern "C" {
    pub fn glTexCoord3iv(v: *const GLint);
}
extern "C" {
    pub fn glTexCoord3sv(v: *const GLshort);
}
extern "C" {
    pub fn glTexCoord4dv(v: *const GLdouble);
}
extern "C" {
    pub fn glTexCoord4fv(v: *const GLfloat);
}
extern "C" {
    pub fn glTexCoord4iv(v: *const GLint);
}
extern "C" {
    pub fn glTexCoord4sv(v: *const GLshort);
}
extern "C" {
    pub fn glRasterPos2d(x: GLdouble, y: GLdouble);
}
extern "C" {
    pub fn glRasterPos2f(x: GLfloat, y: GLfloat);
}
extern "C" {
    pub fn glRasterPos2i(x: GLint, y: GLint);
}
extern "C" {
    pub fn glRasterPos2s(x: GLshort, y: GLshort);
}
extern "C" {
    pub fn glRasterPos3d(x: GLdouble, y: GLdouble, z: GLdouble);
}
extern "C" {
    pub fn glRasterPos3f(x: GLfloat, y: GLfloat, z: GLfloat);
}
extern "C" {
    pub fn glRasterPos3i(x: GLint, y: GLint, z: GLint);
}
extern "C" {
    pub fn glRasterPos3s(x: GLshort, y: GLshort, z: GLshort);
}
extern "C" {
    pub fn glRasterPos4d(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble);
}
extern "C" {
    pub fn glRasterPos4f(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat);
}
extern "C" {
    pub fn glRasterPos4i(x: GLint, y: GLint, z: GLint, w: GLint);
}
extern "C" {
    pub fn glRasterPos4s(x: GLshort, y: GLshort, z: GLshort, w: GLshort);
}
extern "C" {
    pub fn glRasterPos2dv(v: *const GLdouble);
}
extern "C" {
    pub fn glRasterPos2fv(v: *const GLfloat);
}
extern "C" {
    pub fn glRasterPos2iv(v: *const GLint);
}
extern "C" {
    pub fn glRasterPos2sv(v: *const GLshort);
}
extern "C" {
    pub fn glRasterPos3dv(v: *const GLdouble);
}
extern "C" {
    pub fn glRasterPos3fv(v: *const GLfloat);
}
extern "C" {
    pub fn glRasterPos3iv(v: *const GLint);
}
extern "C" {
    pub fn glRasterPos3sv(v: *const GLshort);
}
extern "C" {
    pub fn glRasterPos4dv(v: *const GLdouble);
}
extern "C" {
    pub fn glRasterPos4fv(v: *const GLfloat);
}
extern "C" {
    pub fn glRasterPos4iv(v: *const GLint);
}
extern "C" {
    pub fn glRasterPos4sv(v: *const GLshort);
}
extern "C" {
    pub fn glRectd(x1: GLdouble, y1: GLdouble, x2: GLdouble, y2: GLdouble);
}
extern "C" {
    pub fn glRectf(x1: GLfloat, y1: GLfloat, x2: GLfloat, y2: GLfloat);
}
extern "C" {
    pub fn glRecti(x1: GLint, y1: GLint, x2: GLint, y2: GLint);
}
extern "C" {
    pub fn glRects(x1: GLshort, y1: GLshort, x2: GLshort, y2: GLshort);
}
extern "C" {
    pub fn glRectdv(v1: *const GLdouble, v2: *const GLdouble);
}
extern "C" {
    pub fn glRectfv(v1: *const GLfloat, v2: *const GLfloat);
}
extern "C" {
    pub fn glRectiv(v1: *const GLint, v2: *const GLint);
}
extern "C" {
    pub fn glRectsv(v1: *const GLshort, v2: *const GLshort);
}
extern "C" {
    pub fn glVertexPointer(size: GLint, type_: GLenum, stride: GLsizei, ptr: *const GLvoid);
}
extern "C" {
    pub fn glNormalPointer(type_: GLenum, stride: GLsizei, ptr: *const GLvoid);
}
extern "C" {
    pub fn glColorPointer(size: GLint, type_: GLenum, stride: GLsizei, ptr: *const GLvoid);
}
extern "C" {
    pub fn glIndexPointer(type_: GLenum, stride: GLsizei, ptr: *const GLvoid);
}
extern "C" {
    pub fn glTexCoordPointer(size: GLint, type_: GLenum, stride: GLsizei, ptr: *const GLvoid);
}
extern "C" {
    pub fn glEdgeFlagPointer(stride: GLsizei, ptr: *const GLvoid);
}
extern "C" {
    pub fn glGetPointerv(pname: GLenum, params: *mut *mut GLvoid);
}
extern "C" {
    pub fn glArrayElement(i: GLint);
}
extern "C" {
    pub fn glDrawArrays(mode: GLenum, first: GLint, count: GLsizei);
}
extern "C" {
    pub fn glDrawElements(mode: GLenum, count: GLsizei, type_: GLenum, indices: *const GLvoid);
}
extern "C" {
    pub fn glInterleavedArrays(format: GLenum, stride: GLsizei, pointer: *const GLvoid);
}
extern "C" {
    pub fn glShadeModel(mode: GLenum);
}
extern "C" {
    pub fn glLightf(light: GLenum, pname: GLenum, param: GLfloat);
}
extern "C" {
    pub fn glLighti(light: GLenum, pname: GLenum, param: GLint);
}
extern "C" {
    pub fn glLightfv(light: GLenum, pname: GLenum, params: *const GLfloat);
}
extern "C" {
    pub fn glLightiv(light: GLenum, pname: GLenum, params: *const GLint);
}
extern "C" {
    pub fn glGetLightfv(light: GLenum, pname: GLenum, params: *mut GLfloat);
}
extern "C" {
    pub fn glGetLightiv(light: GLenum, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glLightModelf(pname: GLenum, param: GLfloat);
}
extern "C" {
    pub fn glLightModeli(pname: GLenum, param: GLint);
}
extern "C" {
    pub fn glLightModelfv(pname: GLenum, params: *const GLfloat);
}
extern "C" {
    pub fn glLightModeliv(pname: GLenum, params: *const GLint);
}
extern "C" {
    pub fn glMaterialf(face: GLenum, pname: GLenum, param: GLfloat);
}
extern "C" {
    pub fn glMateriali(face: GLenum, pname: GLenum, param: GLint);
}
extern "C" {
    pub fn glMaterialfv(face: GLenum, pname: GLenum, params: *const GLfloat);
}
extern "C" {
    pub fn glMaterialiv(face: GLenum, pname: GLenum, params: *const GLint);
}
extern "C" {
    pub fn glGetMaterialfv(face: GLenum, pname: GLenum, params: *mut GLfloat);
}
extern "C" {
    pub fn glGetMaterialiv(face: GLenum, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glColorMaterial(face: GLenum, mode: GLenum);
}
extern "C" {
    pub fn glPixelZoom(xfactor: GLfloat, yfactor: GLfloat);
}
extern "C" {
    pub fn glPixelStoref(pname: GLenum, param: GLfloat);
}
extern "C" {
    pub fn glPixelStorei(pname: GLenum, param: GLint);
}
extern "C" {
    pub fn glPixelTransferf(pname: GLenum, param: GLfloat);
}
extern "C" {
    pub fn glPixelTransferi(pname: GLenum, param: GLint);
}
extern "C" {
    pub fn glPixelMapfv(map: GLenum, mapsize: GLsizei, values: *const GLfloat);
}
extern "C" {
    pub fn glPixelMapuiv(map: GLenum, mapsize: GLsizei, values: *const GLuint);
}
extern "C" {
    pub fn glPixelMapusv(map: GLenum, mapsize: GLsizei, values: *const GLushort);
}
extern "C" {
    pub fn glGetPixelMapfv(map: GLenum, values: *mut GLfloat);
}
extern "C" {
    pub fn glGetPixelMapuiv(map: GLenum, values: *mut GLuint);
}
extern "C" {
    pub fn glGetPixelMapusv(map: GLenum, values: *mut GLushort);
}
extern "C" {
    pub fn glBitmap(
        width: GLsizei,
        height: GLsizei,
        xorig: GLfloat,
        yorig: GLfloat,
        xmove: GLfloat,
        ymove: GLfloat,
        bitmap: *const GLubyte,
    );
}
extern "C" {
    pub fn glReadPixels(
        x: GLint,
        y: GLint,
        width: GLsizei,
        height: GLsizei,
        format: GLenum,
        type_: GLenum,
        pixels: *mut GLvoid,
    );
}
extern "C" {
    pub fn glDrawPixels(
        width: GLsizei,
        height: GLsizei,
        format: GLenum,
        type_: GLenum,
        pixels: *const GLvoid,
    );
}
extern "C" {
    pub fn glCopyPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, type_: GLenum);
}
extern "C" {
    pub fn glStencilFunc(func: GLenum, ref_: GLint, mask: GLuint);
}
extern "C" {
    pub fn glStencilMask(mask: GLuint);
}
extern "C" {
    pub fn glStencilOp(fail: GLenum, zfail: GLenum, zpass: GLenum);
}
extern "C" {
    pub fn glClearStencil(s: GLint);
}
extern "C" {
    pub fn glTexGend(coord: GLenum, pname: GLenum, param: GLdouble);
}
extern "C" {
    pub fn glTexGenf(coord: GLenum, pname: GLenum, param: GLfloat);
}
extern "C" {
    pub fn glTexGeni(coord: GLenum, pname: GLenum, param: GLint);
}
extern "C" {
    pub fn glTexGendv(coord: GLenum, pname: GLenum, params: *const GLdouble);
}
extern "C" {
    pub fn glTexGenfv(coord: GLenum, pname: GLenum, params: *const GLfloat);
}
extern "C" {
    pub fn glTexGeniv(coord: GLenum, pname: GLenum, params: *const GLint);
}
extern "C" {
    pub fn glGetTexGendv(coord: GLenum, pname: GLenum, params: *mut GLdouble);
}
extern "C" {
    pub fn glGetTexGenfv(coord: GLenum, pname: GLenum, params: *mut GLfloat);
}
extern "C" {
    pub fn glGetTexGeniv(coord: GLenum, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glTexEnvf(target: GLenum, pname: GLenum, param: GLfloat);
}
extern "C" {
    pub fn glTexEnvi(target: GLenum, pname: GLenum, param: GLint);
}
extern "C" {
    pub fn glTexEnvfv(target: GLenum, pname: GLenum, params: *const GLfloat);
}
extern "C" {
    pub fn glTexEnviv(target: GLenum, pname: GLenum, params: *const GLint);
}
extern "C" {
    pub fn glGetTexEnvfv(target: GLenum, pname: GLenum, params: *mut GLfloat);
}
extern "C" {
    pub fn glGetTexEnviv(target: GLenum, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glTexParameterf(target: GLenum, pname: GLenum, param: GLfloat);
}
extern "C" {
    pub fn glTexParameteri(target: GLenum, pname: GLenum, param: GLint);
}
extern "C" {
    pub fn glTexParameterfv(target: GLenum, pname: GLenum, params: *const GLfloat);
}
extern "C" {
    pub fn glTexParameteriv(target: GLenum, pname: GLenum, params: *const GLint);
}
extern "C" {
    pub fn glGetTexParameterfv(target: GLenum, pname: GLenum, params: *mut GLfloat);
}
extern "C" {
    pub fn glGetTexParameteriv(target: GLenum, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetTexLevelParameterfv(
        target: GLenum,
        level: GLint,
        pname: GLenum,
        params: *mut GLfloat,
    );
}
extern "C" {
    pub fn glGetTexLevelParameteriv(
        target: GLenum,
        level: GLint,
        pname: GLenum,
        params: *mut GLint,
    );
}
extern "C" {
    pub fn glTexImage1D(
        target: GLenum,
        level: GLint,
        internalFormat: GLint,
        width: GLsizei,
        border: GLint,
        format: GLenum,
        type_: GLenum,
        pixels: *const GLvoid,
    );
}
extern "C" {
    pub fn glTexImage2D(
        target: GLenum,
        level: GLint,
        internalFormat: GLint,
        width: GLsizei,
        height: GLsizei,
        border: GLint,
        format: GLenum,
        type_: GLenum,
        pixels: *const GLvoid,
    );
}
extern "C" {
    pub fn glGetTexImage(
        target: GLenum,
        level: GLint,
        format: GLenum,
        type_: GLenum,
        pixels: *mut GLvoid,
    );
}
extern "C" {
    pub fn glGenTextures(n: GLsizei, textures: *mut GLuint);
}
extern "C" {
    pub fn glDeleteTextures(n: GLsizei, textures: *const GLuint);
}
extern "C" {
    pub fn glBindTexture(target: GLenum, texture: GLuint);
}
extern "C" {
    pub fn glPrioritizeTextures(n: GLsizei, textures: *const GLuint, priorities: *const GLclampf);
}
extern "C" {
    pub fn glAreTexturesResident(
        n: GLsizei,
        textures: *const GLuint,
        residences: *mut GLboolean,
    ) -> GLboolean;
}
extern "C" {
    pub fn glIsTexture(texture: GLuint) -> GLboolean;
}
extern "C" {
    pub fn glTexSubImage1D(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        width: GLsizei,
        format: GLenum,
        type_: GLenum,
        pixels: *const GLvoid,
    );
}
extern "C" {
    pub fn glTexSubImage2D(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        format: GLenum,
        type_: GLenum,
        pixels: *const GLvoid,
    );
}
extern "C" {
    pub fn glCopyTexImage1D(
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        x: GLint,
        y: GLint,
        width: GLsizei,
        border: GLint,
    );
}
extern "C" {
    pub fn glCopyTexImage2D(
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        x: GLint,
        y: GLint,
        width: GLsizei,
        height: GLsizei,
        border: GLint,
    );
}
extern "C" {
    pub fn glCopyTexSubImage1D(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        x: GLint,
        y: GLint,
        width: GLsizei,
    );
}
extern "C" {
    pub fn glCopyTexSubImage2D(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        x: GLint,
        y: GLint,
        width: GLsizei,
        height: GLsizei,
    );
}
extern "C" {
    pub fn glMap1d(
        target: GLenum,
        u1: GLdouble,
        u2: GLdouble,
        stride: GLint,
        order: GLint,
        points: *const GLdouble,
    );
}
extern "C" {
    pub fn glMap1f(
        target: GLenum,
        u1: GLfloat,
        u2: GLfloat,
        stride: GLint,
        order: GLint,
        points: *const GLfloat,
    );
}
extern "C" {
    pub fn glMap2d(
        target: GLenum,
        u1: GLdouble,
        u2: GLdouble,
        ustride: GLint,
        uorder: GLint,
        v1: GLdouble,
        v2: GLdouble,
        vstride: GLint,
        vorder: GLint,
        points: *const GLdouble,
    );
}
extern "C" {
    pub fn glMap2f(
        target: GLenum,
        u1: GLfloat,
        u2: GLfloat,
        ustride: GLint,
        uorder: GLint,
        v1: GLfloat,
        v2: GLfloat,
        vstride: GLint,
        vorder: GLint,
        points: *const GLfloat,
    );
}
extern "C" {
    pub fn glGetMapdv(target: GLenum, query: GLenum, v: *mut GLdouble);
}
extern "C" {
    pub fn glGetMapfv(target: GLenum, query: GLenum, v: *mut GLfloat);
}
extern "C" {
    pub fn glGetMapiv(target: GLenum, query: GLenum, v: *mut GLint);
}
extern "C" {
    pub fn glEvalCoord1d(u: GLdouble);
}
extern "C" {
    pub fn glEvalCoord1f(u: GLfloat);
}
extern "C" {
    pub fn glEvalCoord1dv(u: *const GLdouble);
}
extern "C" {
    pub fn glEvalCoord1fv(u: *const GLfloat);
}
extern "C" {
    pub fn glEvalCoord2d(u: GLdouble, v: GLdouble);
}
extern "C" {
    pub fn glEvalCoord2f(u: GLfloat, v: GLfloat);
}
extern "C" {
    pub fn glEvalCoord2dv(u: *const GLdouble);
}
extern "C" {
    pub fn glEvalCoord2fv(u: *const GLfloat);
}
extern "C" {
    pub fn glMapGrid1d(un: GLint, u1: GLdouble, u2: GLdouble);
}
extern "C" {
    pub fn glMapGrid1f(un: GLint, u1: GLfloat, u2: GLfloat);
}
extern "C" {
    pub fn glMapGrid2d(
        un: GLint,
        u1: GLdouble,
        u2: GLdouble,
        vn: GLint,
        v1: GLdouble,
        v2: GLdouble,
    );
}
extern "C" {
    pub fn glMapGrid2f(un: GLint, u1: GLfloat, u2: GLfloat, vn: GLint, v1: GLfloat, v2: GLfloat);
}
extern "C" {
    pub fn glEvalPoint1(i: GLint);
}
extern "C" {
    pub fn glEvalPoint2(i: GLint, j: GLint);
}
extern "C" {
    pub fn glEvalMesh1(mode: GLenum, i1: GLint, i2: GLint);
}
extern "C" {
    pub fn glEvalMesh2(mode: GLenum, i1: GLint, i2: GLint, j1: GLint, j2: GLint);
}
extern "C" {
    pub fn glFogf(pname: GLenum, param: GLfloat);
}
extern "C" {
    pub fn glFogi(pname: GLenum, param: GLint);
}
extern "C" {
    pub fn glFogfv(pname: GLenum, params: *const GLfloat);
}
extern "C" {
    pub fn glFogiv(pname: GLenum, params: *const GLint);
}
extern "C" {
    pub fn glFeedbackBuffer(size: GLsizei, type_: GLenum, buffer: *mut GLfloat);
}
extern "C" {
    pub fn glPassThrough(token: GLfloat);
}
extern "C" {
    pub fn glSelectBuffer(size: GLsizei, buffer: *mut GLuint);
}
extern "C" {
    pub fn glInitNames();
}
extern "C" {
    pub fn glLoadName(name: GLuint);
}
extern "C" {
    pub fn glPushName(name: GLuint);
}
extern "C" {
    pub fn glPopName();
}
extern "C" {
    pub fn glDrawRangeElements(
        mode: GLenum,
        start: GLuint,
        end: GLuint,
        count: GLsizei,
        type_: GLenum,
        indices: *const GLvoid,
    );
}
extern "C" {
    pub fn glTexImage3D(
        target: GLenum,
        level: GLint,
        internalFormat: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        border: GLint,
        format: GLenum,
        type_: GLenum,
        pixels: *const GLvoid,
    );
}
extern "C" {
    pub fn glTexSubImage3D(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        zoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        format: GLenum,
        type_: GLenum,
        pixels: *const GLvoid,
    );
}
extern "C" {
    pub fn glCopyTexSubImage3D(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        zoffset: GLint,
        x: GLint,
        y: GLint,
        width: GLsizei,
        height: GLsizei,
    );
}
pub type PFNGLDRAWRANGEELEMENTSPROC = ::core::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        start: GLuint,
        end: GLuint,
        count: GLsizei,
        type_: GLenum,
        indices: *const GLvoid,
    ),
>;
pub type PFNGLTEXIMAGE3DPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        internalformat: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        border: GLint,
        format: GLenum,
        type_: GLenum,
        pixels: *const GLvoid,
    ),
>;
pub type PFNGLTEXSUBIMAGE3DPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        zoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        format: GLenum,
        type_: GLenum,
        pixels: *const GLvoid,
    ),
>;
pub type PFNGLCOPYTEXSUBIMAGE3DPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        zoffset: GLint,
        x: GLint,
        y: GLint,
        width: GLsizei,
        height: GLsizei,
    ),
>;
extern "C" {
    pub fn glColorTable(
        target: GLenum,
        internalformat: GLenum,
        width: GLsizei,
        format: GLenum,
        type_: GLenum,
        table: *const GLvoid,
    );
}
extern "C" {
    pub fn glColorSubTable(
        target: GLenum,
        start: GLsizei,
        count: GLsizei,
        format: GLenum,
        type_: GLenum,
        data: *const GLvoid,
    );
}
extern "C" {
    pub fn glColorTableParameteriv(target: GLenum, pname: GLenum, params: *const GLint);
}
extern "C" {
    pub fn glColorTableParameterfv(target: GLenum, pname: GLenum, params: *const GLfloat);
}
extern "C" {
    pub fn glCopyColorSubTable(target: GLenum, start: GLsizei, x: GLint, y: GLint, width: GLsizei);
}
extern "C" {
    pub fn glCopyColorTable(
        target: GLenum,
        internalformat: GLenum,
        x: GLint,
        y: GLint,
        width: GLsizei,
    );
}
extern "C" {
    pub fn glGetColorTable(target: GLenum, format: GLenum, type_: GLenum, table: *mut GLvoid);
}
extern "C" {
    pub fn glGetColorTableParameterfv(target: GLenum, pname: GLenum, params: *mut GLfloat);
}
extern "C" {
    pub fn glGetColorTableParameteriv(target: GLenum, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glBlendEquation(mode: GLenum);
}
extern "C" {
    pub fn glBlendColor(red: GLclampf, green: GLclampf, blue: GLclampf, alpha: GLclampf);
}
extern "C" {
    pub fn glHistogram(target: GLenum, width: GLsizei, internalformat: GLenum, sink: GLboolean);
}
extern "C" {
    pub fn glResetHistogram(target: GLenum);
}
extern "C" {
    pub fn glGetHistogram(
        target: GLenum,
        reset: GLboolean,
        format: GLenum,
        type_: GLenum,
        values: *mut GLvoid,
    );
}
extern "C" {
    pub fn glGetHistogramParameterfv(target: GLenum, pname: GLenum, params: *mut GLfloat);
}
extern "C" {
    pub fn glGetHistogramParameteriv(target: GLenum, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glMinmax(target: GLenum, internalformat: GLenum, sink: GLboolean);
}
extern "C" {
    pub fn glResetMinmax(target: GLenum);
}
extern "C" {
    pub fn glGetMinmax(
        target: GLenum,
        reset: GLboolean,
        format: GLenum,
        types: GLenum,
        values: *mut GLvoid,
    );
}
extern "C" {
    pub fn glGetMinmaxParameterfv(target: GLenum, pname: GLenum, params: *mut GLfloat);
}
extern "C" {
    pub fn glGetMinmaxParameteriv(target: GLenum, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glConvolutionFilter1D(
        target: GLenum,
        internalformat: GLenum,
        width: GLsizei,
        format: GLenum,
        type_: GLenum,
        image: *const GLvoid,
    );
}
extern "C" {
    pub fn glConvolutionFilter2D(
        target: GLenum,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        format: GLenum,
        type_: GLenum,
        image: *const GLvoid,
    );
}
extern "C" {
    pub fn glConvolutionParameterf(target: GLenum, pname: GLenum, params: GLfloat);
}
extern "C" {
    pub fn glConvolutionParameterfv(target: GLenum, pname: GLenum, params: *const GLfloat);
}
extern "C" {
    pub fn glConvolutionParameteri(target: GLenum, pname: GLenum, params: GLint);
}
extern "C" {
    pub fn glConvolutionParameteriv(target: GLenum, pname: GLenum, params: *const GLint);
}
extern "C" {
    pub fn glCopyConvolutionFilter1D(
        target: GLenum,
        internalformat: GLenum,
        x: GLint,
        y: GLint,
        width: GLsizei,
    );
}
extern "C" {
    pub fn glCopyConvolutionFilter2D(
        target: GLenum,
        internalformat: GLenum,
        x: GLint,
        y: GLint,
        width: GLsizei,
        height: GLsizei,
    );
}
extern "C" {
    pub fn glGetConvolutionFilter(
        target: GLenum,
        format: GLenum,
        type_: GLenum,
        image: *mut GLvoid,
    );
}
extern "C" {
    pub fn glGetConvolutionParameterfv(target: GLenum, pname: GLenum, params: *mut GLfloat);
}
extern "C" {
    pub fn glGetConvolutionParameteriv(target: GLenum, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glSeparableFilter2D(
        target: GLenum,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        format: GLenum,
        type_: GLenum,
        row: *const GLvoid,
        column: *const GLvoid,
    );
}
extern "C" {
    pub fn glGetSeparableFilter(
        target: GLenum,
        format: GLenum,
        type_: GLenum,
        row: *mut GLvoid,
        column: *mut GLvoid,
        span: *mut GLvoid,
    );
}
extern "C" {
    pub fn glActiveTexture(texture: GLenum);
}
extern "C" {
    pub fn glClientActiveTexture(texture: GLenum);
}
extern "C" {
    pub fn glCompressedTexImage1D(
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        width: GLsizei,
        border: GLint,
        imageSize: GLsizei,
        data: *const GLvoid,
    );
}
extern "C" {
    pub fn glCompressedTexImage2D(
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        border: GLint,
        imageSize: GLsizei,
        data: *const GLvoid,
    );
}
extern "C" {
    pub fn glCompressedTexImage3D(
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        border: GLint,
        imageSize: GLsizei,
        data: *const GLvoid,
    );
}
extern "C" {
    pub fn glCompressedTexSubImage1D(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        width: GLsizei,
        format: GLenum,
        imageSize: GLsizei,
        data: *const GLvoid,
    );
}
extern "C" {
    pub fn glCompressedTexSubImage2D(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        format: GLenum,
        imageSize: GLsizei,
        data: *const GLvoid,
    );
}
extern "C" {
    pub fn glCompressedTexSubImage3D(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        zoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        format: GLenum,
        imageSize: GLsizei,
        data: *const GLvoid,
    );
}
extern "C" {
    pub fn glGetCompressedTexImage(target: GLenum, lod: GLint, img: *mut GLvoid);
}
extern "C" {
    pub fn glMultiTexCoord1d(target: GLenum, s: GLdouble);
}
extern "C" {
    pub fn glMultiTexCoord1dv(target: GLenum, v: *const GLdouble);
}
extern "C" {
    pub fn glMultiTexCoord1f(target: GLenum, s: GLfloat);
}
extern "C" {
    pub fn glMultiTexCoord1fv(target: GLenum, v: *const GLfloat);
}
extern "C" {
    pub fn glMultiTexCoord1i(target: GLenum, s: GLint);
}
extern "C" {
    pub fn glMultiTexCoord1iv(target: GLenum, v: *const GLint);
}
extern "C" {
    pub fn glMultiTexCoord1s(target: GLenum, s: GLshort);
}
extern "C" {
    pub fn glMultiTexCoord1sv(target: GLenum, v: *const GLshort);
}
extern "C" {
    pub fn glMultiTexCoord2d(target: GLenum, s: GLdouble, t: GLdouble);
}
extern "C" {
    pub fn glMultiTexCoord2dv(target: GLenum, v: *const GLdouble);
}
extern "C" {
    pub fn glMultiTexCoord2f(target: GLenum, s: GLfloat, t: GLfloat);
}
extern "C" {
    pub fn glMultiTexCoord2fv(target: GLenum, v: *const GLfloat);
}
extern "C" {
    pub fn glMultiTexCoord2i(target: GLenum, s: GLint, t: GLint);
}
extern "C" {
    pub fn glMultiTexCoord2iv(target: GLenum, v: *const GLint);
}
extern "C" {
    pub fn glMultiTexCoord2s(target: GLenum, s: GLshort, t: GLshort);
}
extern "C" {
    pub fn glMultiTexCoord2sv(target: GLenum, v: *const GLshort);
}
extern "C" {
    pub fn glMultiTexCoord3d(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble);
}
extern "C" {
    pub fn glMultiTexCoord3dv(target: GLenum, v: *const GLdouble);
}
extern "C" {
    pub fn glMultiTexCoord3f(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat);
}
extern "C" {
    pub fn glMultiTexCoord3fv(target: GLenum, v: *const GLfloat);
}
extern "C" {
    pub fn glMultiTexCoord3i(target: GLenum, s: GLint, t: GLint, r: GLint);
}
extern "C" {
    pub fn glMultiTexCoord3iv(target: GLenum, v: *const GLint);
}
extern "C" {
    pub fn glMultiTexCoord3s(target: GLenum, s: GLshort, t: GLshort, r: GLshort);
}
extern "C" {
    pub fn glMultiTexCoord3sv(target: GLenum, v: *const GLshort);
}
extern "C" {
    pub fn glMultiTexCoord4d(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble);
}
extern "C" {
    pub fn glMultiTexCoord4dv(target: GLenum, v: *const GLdouble);
}
extern "C" {
    pub fn glMultiTexCoord4f(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat);
}
extern "C" {
    pub fn glMultiTexCoord4fv(target: GLenum, v: *const GLfloat);
}
extern "C" {
    pub fn glMultiTexCoord4i(target: GLenum, s: GLint, t: GLint, r: GLint, q: GLint);
}
extern "C" {
    pub fn glMultiTexCoord4iv(target: GLenum, v: *const GLint);
}
extern "C" {
    pub fn glMultiTexCoord4s(target: GLenum, s: GLshort, t: GLshort, r: GLshort, q: GLshort);
}
extern "C" {
    pub fn glMultiTexCoord4sv(target: GLenum, v: *const GLshort);
}
extern "C" {
    pub fn glLoadTransposeMatrixd(m: *const GLdouble);
}
extern "C" {
    pub fn glLoadTransposeMatrixf(m: *const GLfloat);
}
extern "C" {
    pub fn glMultTransposeMatrixd(m: *const GLdouble);
}
extern "C" {
    pub fn glMultTransposeMatrixf(m: *const GLfloat);
}
extern "C" {
    pub fn glSampleCoverage(value: GLclampf, invert: GLboolean);
}
pub type PFNGLACTIVETEXTUREPROC = ::core::option::Option<unsafe extern "C" fn(texture: GLenum)>;
pub type PFNGLSAMPLECOVERAGEPROC =
    ::core::option::Option<unsafe extern "C" fn(value: GLclampf, invert: GLboolean)>;
pub type PFNGLCOMPRESSEDTEXIMAGE3DPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        border: GLint,
        imageSize: GLsizei,
        data: *const GLvoid,
    ),
>;
pub type PFNGLCOMPRESSEDTEXIMAGE2DPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        border: GLint,
        imageSize: GLsizei,
        data: *const GLvoid,
    ),
>;
pub type PFNGLCOMPRESSEDTEXIMAGE1DPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        width: GLsizei,
        border: GLint,
        imageSize: GLsizei,
        data: *const GLvoid,
    ),
>;
pub type PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        zoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        format: GLenum,
        imageSize: GLsizei,
        data: *const GLvoid,
    ),
>;
pub type PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        format: GLenum,
        imageSize: GLsizei,
        data: *const GLvoid,
    ),
>;
pub type PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        width: GLsizei,
        format: GLenum,
        imageSize: GLsizei,
        data: *const GLvoid,
    ),
>;
pub type PFNGLGETCOMPRESSEDTEXIMAGEPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, level: GLint, img: *mut GLvoid)>;
extern "C" {
    pub fn glActiveTextureARB(texture: GLenum);
}
extern "C" {
    pub fn glClientActiveTextureARB(texture: GLenum);
}
extern "C" {
    pub fn glMultiTexCoord1dARB(target: GLenum, s: GLdouble);
}
extern "C" {
    pub fn glMultiTexCoord1dvARB(target: GLenum, v: *const GLdouble);
}
extern "C" {
    pub fn glMultiTexCoord1fARB(target: GLenum, s: GLfloat);
}
extern "C" {
    pub fn glMultiTexCoord1fvARB(target: GLenum, v: *const GLfloat);
}
extern "C" {
    pub fn glMultiTexCoord1iARB(target: GLenum, s: GLint);
}
extern "C" {
    pub fn glMultiTexCoord1ivARB(target: GLenum, v: *const GLint);
}
extern "C" {
    pub fn glMultiTexCoord1sARB(target: GLenum, s: GLshort);
}
extern "C" {
    pub fn glMultiTexCoord1svARB(target: GLenum, v: *const GLshort);
}
extern "C" {
    pub fn glMultiTexCoord2dARB(target: GLenum, s: GLdouble, t: GLdouble);
}
extern "C" {
    pub fn glMultiTexCoord2dvARB(target: GLenum, v: *const GLdouble);
}
extern "C" {
    pub fn glMultiTexCoord2fARB(target: GLenum, s: GLfloat, t: GLfloat);
}
extern "C" {
    pub fn glMultiTexCoord2fvARB(target: GLenum, v: *const GLfloat);
}
extern "C" {
    pub fn glMultiTexCoord2iARB(target: GLenum, s: GLint, t: GLint);
}
extern "C" {
    pub fn glMultiTexCoord2ivARB(target: GLenum, v: *const GLint);
}
extern "C" {
    pub fn glMultiTexCoord2sARB(target: GLenum, s: GLshort, t: GLshort);
}
extern "C" {
    pub fn glMultiTexCoord2svARB(target: GLenum, v: *const GLshort);
}
extern "C" {
    pub fn glMultiTexCoord3dARB(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble);
}
extern "C" {
    pub fn glMultiTexCoord3dvARB(target: GLenum, v: *const GLdouble);
}
extern "C" {
    pub fn glMultiTexCoord3fARB(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat);
}
extern "C" {
    pub fn glMultiTexCoord3fvARB(target: GLenum, v: *const GLfloat);
}
extern "C" {
    pub fn glMultiTexCoord3iARB(target: GLenum, s: GLint, t: GLint, r: GLint);
}
extern "C" {
    pub fn glMultiTexCoord3ivARB(target: GLenum, v: *const GLint);
}
extern "C" {
    pub fn glMultiTexCoord3sARB(target: GLenum, s: GLshort, t: GLshort, r: GLshort);
}
extern "C" {
    pub fn glMultiTexCoord3svARB(target: GLenum, v: *const GLshort);
}
extern "C" {
    pub fn glMultiTexCoord4dARB(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble);
}
extern "C" {
    pub fn glMultiTexCoord4dvARB(target: GLenum, v: *const GLdouble);
}
extern "C" {
    pub fn glMultiTexCoord4fARB(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat);
}
extern "C" {
    pub fn glMultiTexCoord4fvARB(target: GLenum, v: *const GLfloat);
}
extern "C" {
    pub fn glMultiTexCoord4iARB(target: GLenum, s: GLint, t: GLint, r: GLint, q: GLint);
}
extern "C" {
    pub fn glMultiTexCoord4ivARB(target: GLenum, v: *const GLint);
}
extern "C" {
    pub fn glMultiTexCoord4sARB(target: GLenum, s: GLshort, t: GLshort, r: GLshort, q: GLshort);
}
extern "C" {
    pub fn glMultiTexCoord4svARB(target: GLenum, v: *const GLshort);
}
pub type PFNGLACTIVETEXTUREARBPROC = ::core::option::Option<unsafe extern "C" fn(texture: GLenum)>;
pub type PFNGLCLIENTACTIVETEXTUREARBPROC =
    ::core::option::Option<unsafe extern "C" fn(texture: GLenum)>;
pub type PFNGLMULTITEXCOORD1DARBPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, s: GLdouble)>;
pub type PFNGLMULTITEXCOORD1DVARBPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, v: *const GLdouble)>;
pub type PFNGLMULTITEXCOORD1FARBPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, s: GLfloat)>;
pub type PFNGLMULTITEXCOORD1FVARBPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, v: *const GLfloat)>;
pub type PFNGLMULTITEXCOORD1IARBPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, s: GLint)>;
pub type PFNGLMULTITEXCOORD1IVARBPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, v: *const GLint)>;
pub type PFNGLMULTITEXCOORD1SARBPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, s: GLshort)>;
pub type PFNGLMULTITEXCOORD1SVARBPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, v: *const GLshort)>;
pub type PFNGLMULTITEXCOORD2DARBPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, s: GLdouble, t: GLdouble)>;
pub type PFNGLMULTITEXCOORD2DVARBPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, v: *const GLdouble)>;
pub type PFNGLMULTITEXCOORD2FARBPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, s: GLfloat, t: GLfloat)>;
pub type PFNGLMULTITEXCOORD2FVARBPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, v: *const GLfloat)>;
pub type PFNGLMULTITEXCOORD2IARBPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, s: GLint, t: GLint)>;
pub type PFNGLMULTITEXCOORD2IVARBPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, v: *const GLint)>;
pub type PFNGLMULTITEXCOORD2SARBPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, s: GLshort, t: GLshort)>;
pub type PFNGLMULTITEXCOORD2SVARBPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, v: *const GLshort)>;
pub type PFNGLMULTITEXCOORD3DARBPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble),
>;
pub type PFNGLMULTITEXCOORD3DVARBPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, v: *const GLdouble)>;
pub type PFNGLMULTITEXCOORD3FARBPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat),
>;
pub type PFNGLMULTITEXCOORD3FVARBPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, v: *const GLfloat)>;
pub type PFNGLMULTITEXCOORD3IARBPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, s: GLint, t: GLint, r: GLint)>;
pub type PFNGLMULTITEXCOORD3IVARBPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, v: *const GLint)>;
pub type PFNGLMULTITEXCOORD3SARBPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, s: GLshort, t: GLshort, r: GLshort),
>;
pub type PFNGLMULTITEXCOORD3SVARBPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, v: *const GLshort)>;
pub type PFNGLMULTITEXCOORD4DARBPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble),
>;
pub type PFNGLMULTITEXCOORD4DVARBPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, v: *const GLdouble)>;
pub type PFNGLMULTITEXCOORD4FARBPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat),
>;
pub type PFNGLMULTITEXCOORD4FVARBPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, v: *const GLfloat)>;
pub type PFNGLMULTITEXCOORD4IARBPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, s: GLint, t: GLint, r: GLint, q: GLint),
>;
pub type PFNGLMULTITEXCOORD4IVARBPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, v: *const GLint)>;
pub type PFNGLMULTITEXCOORD4SARBPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, s: GLshort, t: GLshort, r: GLshort, q: GLshort),
>;
pub type PFNGLMULTITEXCOORD4SVARBPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, v: *const GLshort)>;
pub type PFNGLBLENDFUNCSEPARATEPROC = ::core::option::Option<
    unsafe extern "C" fn(
        sfactorRGB: GLenum,
        dfactorRGB: GLenum,
        sfactorAlpha: GLenum,
        dfactorAlpha: GLenum,
    ),
>;
pub type PFNGLMULTIDRAWARRAYSPROC = ::core::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        first: *const GLint,
        count: *const GLsizei,
        drawcount: GLsizei,
    ),
>;
pub type PFNGLMULTIDRAWELEMENTSPROC = ::core::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        count: *const GLsizei,
        type_: GLenum,
        indices: *const *const ctypes::c_void,
        drawcount: GLsizei,
    ),
>;
pub type PFNGLPOINTPARAMETERFPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, param: GLfloat)>;
pub type PFNGLPOINTPARAMETERFVPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, params: *const GLfloat)>;
pub type PFNGLPOINTPARAMETERIPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, param: GLint)>;
pub type PFNGLPOINTPARAMETERIVPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, params: *const GLint)>;
pub type PFNGLFOGCOORDFPROC = ::core::option::Option<unsafe extern "C" fn(coord: GLfloat)>;
pub type PFNGLFOGCOORDFVPROC = ::core::option::Option<unsafe extern "C" fn(coord: *const GLfloat)>;
pub type PFNGLFOGCOORDDPROC = ::core::option::Option<unsafe extern "C" fn(coord: GLdouble)>;
pub type PFNGLFOGCOORDDVPROC = ::core::option::Option<unsafe extern "C" fn(coord: *const GLdouble)>;
pub type PFNGLFOGCOORDPOINTERPROC = ::core::option::Option<
    unsafe extern "C" fn(type_: GLenum, stride: GLsizei, pointer: *const ctypes::c_void),
>;
pub type PFNGLSECONDARYCOLOR3BPROC =
    ::core::option::Option<unsafe extern "C" fn(red: GLbyte, green: GLbyte, blue: GLbyte)>;
pub type PFNGLSECONDARYCOLOR3BVPROC =
    ::core::option::Option<unsafe extern "C" fn(v: *const GLbyte)>;
pub type PFNGLSECONDARYCOLOR3DPROC =
    ::core::option::Option<unsafe extern "C" fn(red: GLdouble, green: GLdouble, blue: GLdouble)>;
pub type PFNGLSECONDARYCOLOR3DVPROC =
    ::core::option::Option<unsafe extern "C" fn(v: *const GLdouble)>;
pub type PFNGLSECONDARYCOLOR3FPROC =
    ::core::option::Option<unsafe extern "C" fn(red: GLfloat, green: GLfloat, blue: GLfloat)>;
pub type PFNGLSECONDARYCOLOR3FVPROC =
    ::core::option::Option<unsafe extern "C" fn(v: *const GLfloat)>;
pub type PFNGLSECONDARYCOLOR3IPROC =
    ::core::option::Option<unsafe extern "C" fn(red: GLint, green: GLint, blue: GLint)>;
pub type PFNGLSECONDARYCOLOR3IVPROC = ::core::option::Option<unsafe extern "C" fn(v: *const GLint)>;
pub type PFNGLSECONDARYCOLOR3SPROC =
    ::core::option::Option<unsafe extern "C" fn(red: GLshort, green: GLshort, blue: GLshort)>;
pub type PFNGLSECONDARYCOLOR3SVPROC =
    ::core::option::Option<unsafe extern "C" fn(v: *const GLshort)>;
pub type PFNGLSECONDARYCOLOR3UBPROC =
    ::core::option::Option<unsafe extern "C" fn(red: GLubyte, green: GLubyte, blue: GLubyte)>;
pub type PFNGLSECONDARYCOLOR3UBVPROC =
    ::core::option::Option<unsafe extern "C" fn(v: *const GLubyte)>;
pub type PFNGLSECONDARYCOLOR3UIPROC =
    ::core::option::Option<unsafe extern "C" fn(red: GLuint, green: GLuint, blue: GLuint)>;
pub type PFNGLSECONDARYCOLOR3UIVPROC =
    ::core::option::Option<unsafe extern "C" fn(v: *const GLuint)>;
pub type PFNGLSECONDARYCOLOR3USPROC =
    ::core::option::Option<unsafe extern "C" fn(red: GLushort, green: GLushort, blue: GLushort)>;
pub type PFNGLSECONDARYCOLOR3USVPROC =
    ::core::option::Option<unsafe extern "C" fn(v: *const GLushort)>;
pub type PFNGLSECONDARYCOLORPOINTERPROC = ::core::option::Option<
    unsafe extern "C" fn(
        size: GLint,
        type_: GLenum,
        stride: GLsizei,
        pointer: *const ctypes::c_void,
    ),
>;
pub type PFNGLWINDOWPOS2DPROC =
    ::core::option::Option<unsafe extern "C" fn(x: GLdouble, y: GLdouble)>;
pub type PFNGLWINDOWPOS2DVPROC = ::core::option::Option<unsafe extern "C" fn(v: *const GLdouble)>;
pub type PFNGLWINDOWPOS2FPROC =
    ::core::option::Option<unsafe extern "C" fn(x: GLfloat, y: GLfloat)>;
pub type PFNGLWINDOWPOS2FVPROC = ::core::option::Option<unsafe extern "C" fn(v: *const GLfloat)>;
pub type PFNGLWINDOWPOS2IPROC = ::core::option::Option<unsafe extern "C" fn(x: GLint, y: GLint)>;
pub type PFNGLWINDOWPOS2IVPROC = ::core::option::Option<unsafe extern "C" fn(v: *const GLint)>;
pub type PFNGLWINDOWPOS2SPROC =
    ::core::option::Option<unsafe extern "C" fn(x: GLshort, y: GLshort)>;
pub type PFNGLWINDOWPOS2SVPROC = ::core::option::Option<unsafe extern "C" fn(v: *const GLshort)>;
pub type PFNGLWINDOWPOS3DPROC =
    ::core::option::Option<unsafe extern "C" fn(x: GLdouble, y: GLdouble, z: GLdouble)>;
pub type PFNGLWINDOWPOS3DVPROC = ::core::option::Option<unsafe extern "C" fn(v: *const GLdouble)>;
pub type PFNGLWINDOWPOS3FPROC =
    ::core::option::Option<unsafe extern "C" fn(x: GLfloat, y: GLfloat, z: GLfloat)>;
pub type PFNGLWINDOWPOS3FVPROC = ::core::option::Option<unsafe extern "C" fn(v: *const GLfloat)>;
pub type PFNGLWINDOWPOS3IPROC =
    ::core::option::Option<unsafe extern "C" fn(x: GLint, y: GLint, z: GLint)>;
pub type PFNGLWINDOWPOS3IVPROC = ::core::option::Option<unsafe extern "C" fn(v: *const GLint)>;
pub type PFNGLWINDOWPOS3SPROC =
    ::core::option::Option<unsafe extern "C" fn(x: GLshort, y: GLshort, z: GLshort)>;
pub type PFNGLWINDOWPOS3SVPROC = ::core::option::Option<unsafe extern "C" fn(v: *const GLshort)>;
pub type PFNGLBLENDCOLORPROC = ::core::option::Option<
    unsafe extern "C" fn(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat),
>;
pub type PFNGLBLENDEQUATIONPROC = ::core::option::Option<unsafe extern "C" fn(mode: GLenum)>;
extern "C" {
    pub fn glBlendFuncSeparate(
        sfactorRGB: GLenum,
        dfactorRGB: GLenum,
        sfactorAlpha: GLenum,
        dfactorAlpha: GLenum,
    );
}
extern "C" {
    pub fn glMultiDrawArrays(
        mode: GLenum,
        first: *const GLint,
        count: *const GLsizei,
        drawcount: GLsizei,
    );
}
extern "C" {
    pub fn glMultiDrawElements(
        mode: GLenum,
        count: *const GLsizei,
        type_: GLenum,
        indices: *const *const ctypes::c_void,
        drawcount: GLsizei,
    );
}
extern "C" {
    pub fn glPointParameterf(pname: GLenum, param: GLfloat);
}
extern "C" {
    pub fn glPointParameterfv(pname: GLenum, params: *const GLfloat);
}
extern "C" {
    pub fn glPointParameteri(pname: GLenum, param: GLint);
}
extern "C" {
    pub fn glPointParameteriv(pname: GLenum, params: *const GLint);
}
extern "C" {
    pub fn glFogCoordf(coord: GLfloat);
}
extern "C" {
    pub fn glFogCoordfv(coord: *const GLfloat);
}
extern "C" {
    pub fn glFogCoordd(coord: GLdouble);
}
extern "C" {
    pub fn glFogCoorddv(coord: *const GLdouble);
}
extern "C" {
    pub fn glFogCoordPointer(type_: GLenum, stride: GLsizei, pointer: *const ctypes::c_void);
}
extern "C" {
    pub fn glSecondaryColor3b(red: GLbyte, green: GLbyte, blue: GLbyte);
}
extern "C" {
    pub fn glSecondaryColor3bv(v: *const GLbyte);
}
extern "C" {
    pub fn glSecondaryColor3d(red: GLdouble, green: GLdouble, blue: GLdouble);
}
extern "C" {
    pub fn glSecondaryColor3dv(v: *const GLdouble);
}
extern "C" {
    pub fn glSecondaryColor3f(red: GLfloat, green: GLfloat, blue: GLfloat);
}
extern "C" {
    pub fn glSecondaryColor3fv(v: *const GLfloat);
}
extern "C" {
    pub fn glSecondaryColor3i(red: GLint, green: GLint, blue: GLint);
}
extern "C" {
    pub fn glSecondaryColor3iv(v: *const GLint);
}
extern "C" {
    pub fn glSecondaryColor3s(red: GLshort, green: GLshort, blue: GLshort);
}
extern "C" {
    pub fn glSecondaryColor3sv(v: *const GLshort);
}
extern "C" {
    pub fn glSecondaryColor3ub(red: GLubyte, green: GLubyte, blue: GLubyte);
}
extern "C" {
    pub fn glSecondaryColor3ubv(v: *const GLubyte);
}
extern "C" {
    pub fn glSecondaryColor3ui(red: GLuint, green: GLuint, blue: GLuint);
}
extern "C" {
    pub fn glSecondaryColor3uiv(v: *const GLuint);
}
extern "C" {
    pub fn glSecondaryColor3us(red: GLushort, green: GLushort, blue: GLushort);
}
extern "C" {
    pub fn glSecondaryColor3usv(v: *const GLushort);
}
extern "C" {
    pub fn glSecondaryColorPointer(
        size: GLint,
        type_: GLenum,
        stride: GLsizei,
        pointer: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glWindowPos2d(x: GLdouble, y: GLdouble);
}
extern "C" {
    pub fn glWindowPos2dv(v: *const GLdouble);
}
extern "C" {
    pub fn glWindowPos2f(x: GLfloat, y: GLfloat);
}
extern "C" {
    pub fn glWindowPos2fv(v: *const GLfloat);
}
extern "C" {
    pub fn glWindowPos2i(x: GLint, y: GLint);
}
extern "C" {
    pub fn glWindowPos2iv(v: *const GLint);
}
extern "C" {
    pub fn glWindowPos2s(x: GLshort, y: GLshort);
}
extern "C" {
    pub fn glWindowPos2sv(v: *const GLshort);
}
extern "C" {
    pub fn glWindowPos3d(x: GLdouble, y: GLdouble, z: GLdouble);
}
extern "C" {
    pub fn glWindowPos3dv(v: *const GLdouble);
}
extern "C" {
    pub fn glWindowPos3f(x: GLfloat, y: GLfloat, z: GLfloat);
}
extern "C" {
    pub fn glWindowPos3fv(v: *const GLfloat);
}
extern "C" {
    pub fn glWindowPos3i(x: GLint, y: GLint, z: GLint);
}
extern "C" {
    pub fn glWindowPos3iv(v: *const GLint);
}
extern "C" {
    pub fn glWindowPos3s(x: GLshort, y: GLshort, z: GLshort);
}
extern "C" {
    pub fn glWindowPos3sv(v: *const GLshort);
}
pub type GLsizeiptr = isize;
pub type GLintptr = isize;
pub type PFNGLGENQUERIESPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, ids: *mut GLuint)>;
pub type PFNGLDELETEQUERIESPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, ids: *const GLuint)>;
pub type PFNGLISQUERYPROC = ::core::option::Option<unsafe extern "C" fn(id: GLuint) -> GLboolean>;
pub type PFNGLBEGINQUERYPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, id: GLuint)>;
pub type PFNGLENDQUERYPROC = ::core::option::Option<unsafe extern "C" fn(target: GLenum)>;
pub type PFNGLGETQUERYIVPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLint)>;
pub type PFNGLGETQUERYOBJECTIVPROC =
    ::core::option::Option<unsafe extern "C" fn(id: GLuint, pname: GLenum, params: *mut GLint)>;
pub type PFNGLGETQUERYOBJECTUIVPROC =
    ::core::option::Option<unsafe extern "C" fn(id: GLuint, pname: GLenum, params: *mut GLuint)>;
pub type PFNGLBINDBUFFERPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, buffer: GLuint)>;
pub type PFNGLDELETEBUFFERSPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, buffers: *const GLuint)>;
pub type PFNGLGENBUFFERSPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, buffers: *mut GLuint)>;
pub type PFNGLISBUFFERPROC =
    ::core::option::Option<unsafe extern "C" fn(buffer: GLuint) -> GLboolean>;
pub type PFNGLBUFFERDATAPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        size: GLsizeiptr,
        data: *const ctypes::c_void,
        usage: GLenum,
    ),
>;
pub type PFNGLBUFFERSUBDATAPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        offset: GLintptr,
        size: GLsizeiptr,
        data: *const ctypes::c_void,
    ),
>;
pub type PFNGLGETBUFFERSUBDATAPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        offset: GLintptr,
        size: GLsizeiptr,
        data: *mut ctypes::c_void,
    ),
>;
pub type PFNGLMAPBUFFERPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, access: GLenum) -> *mut ctypes::c_void,
>;
pub type PFNGLUNMAPBUFFERPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum) -> GLboolean>;
pub type PFNGLGETBUFFERPARAMETERIVPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLint)>;
pub type PFNGLGETBUFFERPOINTERVPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut *mut ctypes::c_void),
>;
extern "C" {
    pub fn glGenQueries(n: GLsizei, ids: *mut GLuint);
}
extern "C" {
    pub fn glDeleteQueries(n: GLsizei, ids: *const GLuint);
}
extern "C" {
    pub fn glIsQuery(id: GLuint) -> GLboolean;
}
extern "C" {
    pub fn glBeginQuery(target: GLenum, id: GLuint);
}
extern "C" {
    pub fn glEndQuery(target: GLenum);
}
extern "C" {
    pub fn glGetQueryiv(target: GLenum, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetQueryObjectiv(id: GLuint, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetQueryObjectuiv(id: GLuint, pname: GLenum, params: *mut GLuint);
}
extern "C" {
    pub fn glBindBuffer(target: GLenum, buffer: GLuint);
}
extern "C" {
    pub fn glDeleteBuffers(n: GLsizei, buffers: *const GLuint);
}
extern "C" {
    pub fn glGenBuffers(n: GLsizei, buffers: *mut GLuint);
}
extern "C" {
    pub fn glIsBuffer(buffer: GLuint) -> GLboolean;
}
extern "C" {
    pub fn glBufferData(
        target: GLenum,
        size: GLsizeiptr,
        data: *const ctypes::c_void,
        usage: GLenum,
    );
}
extern "C" {
    pub fn glBufferSubData(
        target: GLenum,
        offset: GLintptr,
        size: GLsizeiptr,
        data: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glGetBufferSubData(
        target: GLenum,
        offset: GLintptr,
        size: GLsizeiptr,
        data: *mut ctypes::c_void,
    );
}
extern "C" {
    pub fn glMapBuffer(target: GLenum, access: GLenum) -> *mut ctypes::c_void;
}
extern "C" {
    pub fn glUnmapBuffer(target: GLenum) -> GLboolean;
}
extern "C" {
    pub fn glGetBufferParameteriv(target: GLenum, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetBufferPointerv(target: GLenum, pname: GLenum, params: *mut *mut ctypes::c_void);
}
pub type GLchar = ctypes::c_char;
pub type PFNGLBLENDEQUATIONSEPARATEPROC =
    ::core::option::Option<unsafe extern "C" fn(modeRGB: GLenum, modeAlpha: GLenum)>;
pub type PFNGLDRAWBUFFERSPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, bufs: *const GLenum)>;
pub type PFNGLSTENCILOPSEPARATEPROC = ::core::option::Option<
    unsafe extern "C" fn(face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum),
>;
pub type PFNGLSTENCILFUNCSEPARATEPROC = ::core::option::Option<
    unsafe extern "C" fn(face: GLenum, func: GLenum, ref_: GLint, mask: GLuint),
>;
pub type PFNGLSTENCILMASKSEPARATEPROC =
    ::core::option::Option<unsafe extern "C" fn(face: GLenum, mask: GLuint)>;
pub type PFNGLATTACHSHADERPROC =
    ::core::option::Option<unsafe extern "C" fn(program: GLuint, shader: GLuint)>;
pub type PFNGLBINDATTRIBLOCATIONPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, index: GLuint, name: *const GLchar),
>;
pub type PFNGLCOMPILESHADERPROC = ::core::option::Option<unsafe extern "C" fn(shader: GLuint)>;
pub type PFNGLCREATEPROGRAMPROC = ::core::option::Option<unsafe extern "C" fn() -> GLuint>;
pub type PFNGLCREATESHADERPROC =
    ::core::option::Option<unsafe extern "C" fn(type_: GLenum) -> GLuint>;
pub type PFNGLDELETEPROGRAMPROC = ::core::option::Option<unsafe extern "C" fn(program: GLuint)>;
pub type PFNGLDELETESHADERPROC = ::core::option::Option<unsafe extern "C" fn(shader: GLuint)>;
pub type PFNGLDETACHSHADERPROC =
    ::core::option::Option<unsafe extern "C" fn(program: GLuint, shader: GLuint)>;
pub type PFNGLDISABLEVERTEXATTRIBARRAYPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint)>;
pub type PFNGLENABLEVERTEXATTRIBARRAYPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint)>;
pub type PFNGLGETACTIVEATTRIBPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        index: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        size: *mut GLint,
        type_: *mut GLenum,
        name: *mut GLchar,
    ),
>;
pub type PFNGLGETACTIVEUNIFORMPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        index: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        size: *mut GLint,
        type_: *mut GLenum,
        name: *mut GLchar,
    ),
>;
pub type PFNGLGETATTACHEDSHADERSPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        maxCount: GLsizei,
        count: *mut GLsizei,
        shaders: *mut GLuint,
    ),
>;
pub type PFNGLGETATTRIBLOCATIONPROC =
    ::core::option::Option<unsafe extern "C" fn(program: GLuint, name: *const GLchar) -> GLint>;
pub type PFNGLGETPROGRAMIVPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, pname: GLenum, params: *mut GLint),
>;
pub type PFNGLGETPROGRAMINFOLOGPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        infoLog: *mut GLchar,
    ),
>;
pub type PFNGLGETSHADERIVPROC =
    ::core::option::Option<unsafe extern "C" fn(shader: GLuint, pname: GLenum, params: *mut GLint)>;
pub type PFNGLGETSHADERINFOLOGPROC = ::core::option::Option<
    unsafe extern "C" fn(
        shader: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        infoLog: *mut GLchar,
    ),
>;
pub type PFNGLGETSHADERSOURCEPROC = ::core::option::Option<
    unsafe extern "C" fn(
        shader: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        source: *mut GLchar,
    ),
>;
pub type PFNGLGETUNIFORMLOCATIONPROC =
    ::core::option::Option<unsafe extern "C" fn(program: GLuint, name: *const GLchar) -> GLint>;
pub type PFNGLGETUNIFORMFVPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, params: *mut GLfloat),
>;
pub type PFNGLGETUNIFORMIVPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, params: *mut GLint),
>;
pub type PFNGLGETVERTEXATTRIBDVPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, pname: GLenum, params: *mut GLdouble),
>;
pub type PFNGLGETVERTEXATTRIBFVPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, pname: GLenum, params: *mut GLfloat),
>;
pub type PFNGLGETVERTEXATTRIBIVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, pname: GLenum, params: *mut GLint)>;
pub type PFNGLGETVERTEXATTRIBPOINTERVPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, pname: GLenum, pointer: *mut *mut ctypes::c_void),
>;
pub type PFNGLISPROGRAMPROC =
    ::core::option::Option<unsafe extern "C" fn(program: GLuint) -> GLboolean>;
pub type PFNGLISSHADERPROC =
    ::core::option::Option<unsafe extern "C" fn(shader: GLuint) -> GLboolean>;
pub type PFNGLLINKPROGRAMPROC = ::core::option::Option<unsafe extern "C" fn(program: GLuint)>;
pub type PFNGLSHADERSOURCEPROC = ::core::option::Option<
    unsafe extern "C" fn(
        shader: GLuint,
        count: GLsizei,
        string: *const *const GLchar,
        length: *const GLint,
    ),
>;
pub type PFNGLUSEPROGRAMPROC = ::core::option::Option<unsafe extern "C" fn(program: GLuint)>;
pub type PFNGLUNIFORM1FPROC =
    ::core::option::Option<unsafe extern "C" fn(location: GLint, v0: GLfloat)>;
pub type PFNGLUNIFORM2FPROC =
    ::core::option::Option<unsafe extern "C" fn(location: GLint, v0: GLfloat, v1: GLfloat)>;
pub type PFNGLUNIFORM3FPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat),
>;
pub type PFNGLUNIFORM4FPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat),
>;
pub type PFNGLUNIFORM1IPROC =
    ::core::option::Option<unsafe extern "C" fn(location: GLint, v0: GLint)>;
pub type PFNGLUNIFORM2IPROC =
    ::core::option::Option<unsafe extern "C" fn(location: GLint, v0: GLint, v1: GLint)>;
pub type PFNGLUNIFORM3IPROC =
    ::core::option::Option<unsafe extern "C" fn(location: GLint, v0: GLint, v1: GLint, v2: GLint)>;
pub type PFNGLUNIFORM4IPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint),
>;
pub type PFNGLUNIFORM1FVPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLfloat),
>;
pub type PFNGLUNIFORM2FVPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLfloat),
>;
pub type PFNGLUNIFORM3FVPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLfloat),
>;
pub type PFNGLUNIFORM4FVPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLfloat),
>;
pub type PFNGLUNIFORM1IVPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLint),
>;
pub type PFNGLUNIFORM2IVPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLint),
>;
pub type PFNGLUNIFORM3IVPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLint),
>;
pub type PFNGLUNIFORM4IVPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLint),
>;
pub type PFNGLUNIFORMMATRIX2FVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLUNIFORMMATRIX3FVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLUNIFORMMATRIX4FVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLVALIDATEPROGRAMPROC = ::core::option::Option<unsafe extern "C" fn(program: GLuint)>;
pub type PFNGLVERTEXATTRIB1DPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, x: GLdouble)>;
pub type PFNGLVERTEXATTRIB1DVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLdouble)>;
pub type PFNGLVERTEXATTRIB1FPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, x: GLfloat)>;
pub type PFNGLVERTEXATTRIB1FVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLfloat)>;
pub type PFNGLVERTEXATTRIB1SPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, x: GLshort)>;
pub type PFNGLVERTEXATTRIB1SVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLshort)>;
pub type PFNGLVERTEXATTRIB2DPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble)>;
pub type PFNGLVERTEXATTRIB2DVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLdouble)>;
pub type PFNGLVERTEXATTRIB2FPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, x: GLfloat, y: GLfloat)>;
pub type PFNGLVERTEXATTRIB2FVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLfloat)>;
pub type PFNGLVERTEXATTRIB2SPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, x: GLshort, y: GLshort)>;
pub type PFNGLVERTEXATTRIB2SVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLshort)>;
pub type PFNGLVERTEXATTRIB3DPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble),
>;
pub type PFNGLVERTEXATTRIB3DVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLdouble)>;
pub type PFNGLVERTEXATTRIB3FPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat)>;
pub type PFNGLVERTEXATTRIB3FVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLfloat)>;
pub type PFNGLVERTEXATTRIB3SPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, x: GLshort, y: GLshort, z: GLshort)>;
pub type PFNGLVERTEXATTRIB3SVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLshort)>;
pub type PFNGLVERTEXATTRIB4NBVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLbyte)>;
pub type PFNGLVERTEXATTRIB4NIVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLint)>;
pub type PFNGLVERTEXATTRIB4NSVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLshort)>;
pub type PFNGLVERTEXATTRIB4NUBPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte),
>;
pub type PFNGLVERTEXATTRIB4NUBVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLubyte)>;
pub type PFNGLVERTEXATTRIB4NUIVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLuint)>;
pub type PFNGLVERTEXATTRIB4NUSVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLushort)>;
pub type PFNGLVERTEXATTRIB4BVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLbyte)>;
pub type PFNGLVERTEXATTRIB4DPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble),
>;
pub type PFNGLVERTEXATTRIB4DVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLdouble)>;
pub type PFNGLVERTEXATTRIB4FPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat),
>;
pub type PFNGLVERTEXATTRIB4FVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLfloat)>;
pub type PFNGLVERTEXATTRIB4IVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLint)>;
pub type PFNGLVERTEXATTRIB4SPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort),
>;
pub type PFNGLVERTEXATTRIB4SVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLshort)>;
pub type PFNGLVERTEXATTRIB4UBVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLubyte)>;
pub type PFNGLVERTEXATTRIB4UIVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLuint)>;
pub type PFNGLVERTEXATTRIB4USVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLushort)>;
pub type PFNGLVERTEXATTRIBPOINTERPROC = ::core::option::Option<
    unsafe extern "C" fn(
        index: GLuint,
        size: GLint,
        type_: GLenum,
        normalized: GLboolean,
        stride: GLsizei,
        pointer: *const ctypes::c_void,
    ),
>;
extern "C" {
    pub fn glBlendEquationSeparate(modeRGB: GLenum, modeAlpha: GLenum);
}
extern "C" {
    pub fn glDrawBuffers(n: GLsizei, bufs: *const GLenum);
}
extern "C" {
    pub fn glStencilOpSeparate(face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum);
}
extern "C" {
    pub fn glStencilFuncSeparate(face: GLenum, func: GLenum, ref_: GLint, mask: GLuint);
}
extern "C" {
    pub fn glStencilMaskSeparate(face: GLenum, mask: GLuint);
}
extern "C" {
    pub fn glAttachShader(program: GLuint, shader: GLuint);
}
extern "C" {
    pub fn glBindAttribLocation(program: GLuint, index: GLuint, name: *const GLchar);
}
extern "C" {
    pub fn glCompileShader(shader: GLuint);
}
extern "C" {
    pub fn glCreateProgram() -> GLuint;
}
extern "C" {
    pub fn glCreateShader(type_: GLenum) -> GLuint;
}
extern "C" {
    pub fn glDeleteProgram(program: GLuint);
}
extern "C" {
    pub fn glDeleteShader(shader: GLuint);
}
extern "C" {
    pub fn glDetachShader(program: GLuint, shader: GLuint);
}
extern "C" {
    pub fn glDisableVertexAttribArray(index: GLuint);
}
extern "C" {
    pub fn glEnableVertexAttribArray(index: GLuint);
}
extern "C" {
    pub fn glGetActiveAttrib(
        program: GLuint,
        index: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        size: *mut GLint,
        type_: *mut GLenum,
        name: *mut GLchar,
    );
}
extern "C" {
    pub fn glGetActiveUniform(
        program: GLuint,
        index: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        size: *mut GLint,
        type_: *mut GLenum,
        name: *mut GLchar,
    );
}
extern "C" {
    pub fn glGetAttachedShaders(
        program: GLuint,
        maxCount: GLsizei,
        count: *mut GLsizei,
        shaders: *mut GLuint,
    );
}
extern "C" {
    pub fn glGetAttribLocation(program: GLuint, name: *const GLchar) -> GLint;
}
extern "C" {
    pub fn glGetProgramiv(program: GLuint, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetProgramInfoLog(
        program: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        infoLog: *mut GLchar,
    );
}
extern "C" {
    pub fn glGetShaderiv(shader: GLuint, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetShaderInfoLog(
        shader: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        infoLog: *mut GLchar,
    );
}
extern "C" {
    pub fn glGetShaderSource(
        shader: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        source: *mut GLchar,
    );
}
extern "C" {
    pub fn glGetUniformLocation(program: GLuint, name: *const GLchar) -> GLint;
}
extern "C" {
    pub fn glGetUniformfv(program: GLuint, location: GLint, params: *mut GLfloat);
}
extern "C" {
    pub fn glGetUniformiv(program: GLuint, location: GLint, params: *mut GLint);
}
extern "C" {
    pub fn glGetVertexAttribdv(index: GLuint, pname: GLenum, params: *mut GLdouble);
}
extern "C" {
    pub fn glGetVertexAttribfv(index: GLuint, pname: GLenum, params: *mut GLfloat);
}
extern "C" {
    pub fn glGetVertexAttribiv(index: GLuint, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetVertexAttribPointerv(
        index: GLuint,
        pname: GLenum,
        pointer: *mut *mut ctypes::c_void,
    );
}
extern "C" {
    pub fn glIsProgram(program: GLuint) -> GLboolean;
}
extern "C" {
    pub fn glIsShader(shader: GLuint) -> GLboolean;
}
extern "C" {
    pub fn glLinkProgram(program: GLuint);
}
extern "C" {
    pub fn glShaderSource(
        shader: GLuint,
        count: GLsizei,
        string: *const *const GLchar,
        length: *const GLint,
    );
}
extern "C" {
    pub fn glUseProgram(program: GLuint);
}
extern "C" {
    pub fn glUniform1f(location: GLint, v0: GLfloat);
}
extern "C" {
    pub fn glUniform2f(location: GLint, v0: GLfloat, v1: GLfloat);
}
extern "C" {
    pub fn glUniform3f(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat);
}
extern "C" {
    pub fn glUniform4f(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat);
}
extern "C" {
    pub fn glUniform1i(location: GLint, v0: GLint);
}
extern "C" {
    pub fn glUniform2i(location: GLint, v0: GLint, v1: GLint);
}
extern "C" {
    pub fn glUniform3i(location: GLint, v0: GLint, v1: GLint, v2: GLint);
}
extern "C" {
    pub fn glUniform4i(location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint);
}
extern "C" {
    pub fn glUniform1fv(location: GLint, count: GLsizei, value: *const GLfloat);
}
extern "C" {
    pub fn glUniform2fv(location: GLint, count: GLsizei, value: *const GLfloat);
}
extern "C" {
    pub fn glUniform3fv(location: GLint, count: GLsizei, value: *const GLfloat);
}
extern "C" {
    pub fn glUniform4fv(location: GLint, count: GLsizei, value: *const GLfloat);
}
extern "C" {
    pub fn glUniform1iv(location: GLint, count: GLsizei, value: *const GLint);
}
extern "C" {
    pub fn glUniform2iv(location: GLint, count: GLsizei, value: *const GLint);
}
extern "C" {
    pub fn glUniform3iv(location: GLint, count: GLsizei, value: *const GLint);
}
extern "C" {
    pub fn glUniform4iv(location: GLint, count: GLsizei, value: *const GLint);
}
extern "C" {
    pub fn glUniformMatrix2fv(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glUniformMatrix3fv(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glUniformMatrix4fv(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glValidateProgram(program: GLuint);
}
extern "C" {
    pub fn glVertexAttrib1d(index: GLuint, x: GLdouble);
}
extern "C" {
    pub fn glVertexAttrib1dv(index: GLuint, v: *const GLdouble);
}
extern "C" {
    pub fn glVertexAttrib1f(index: GLuint, x: GLfloat);
}
extern "C" {
    pub fn glVertexAttrib1fv(index: GLuint, v: *const GLfloat);
}
extern "C" {
    pub fn glVertexAttrib1s(index: GLuint, x: GLshort);
}
extern "C" {
    pub fn glVertexAttrib1sv(index: GLuint, v: *const GLshort);
}
extern "C" {
    pub fn glVertexAttrib2d(index: GLuint, x: GLdouble, y: GLdouble);
}
extern "C" {
    pub fn glVertexAttrib2dv(index: GLuint, v: *const GLdouble);
}
extern "C" {
    pub fn glVertexAttrib2f(index: GLuint, x: GLfloat, y: GLfloat);
}
extern "C" {
    pub fn glVertexAttrib2fv(index: GLuint, v: *const GLfloat);
}
extern "C" {
    pub fn glVertexAttrib2s(index: GLuint, x: GLshort, y: GLshort);
}
extern "C" {
    pub fn glVertexAttrib2sv(index: GLuint, v: *const GLshort);
}
extern "C" {
    pub fn glVertexAttrib3d(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble);
}
extern "C" {
    pub fn glVertexAttrib3dv(index: GLuint, v: *const GLdouble);
}
extern "C" {
    pub fn glVertexAttrib3f(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat);
}
extern "C" {
    pub fn glVertexAttrib3fv(index: GLuint, v: *const GLfloat);
}
extern "C" {
    pub fn glVertexAttrib3s(index: GLuint, x: GLshort, y: GLshort, z: GLshort);
}
extern "C" {
    pub fn glVertexAttrib3sv(index: GLuint, v: *const GLshort);
}
extern "C" {
    pub fn glVertexAttrib4Nbv(index: GLuint, v: *const GLbyte);
}
extern "C" {
    pub fn glVertexAttrib4Niv(index: GLuint, v: *const GLint);
}
extern "C" {
    pub fn glVertexAttrib4Nsv(index: GLuint, v: *const GLshort);
}
extern "C" {
    pub fn glVertexAttrib4Nub(index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte);
}
extern "C" {
    pub fn glVertexAttrib4Nubv(index: GLuint, v: *const GLubyte);
}
extern "C" {
    pub fn glVertexAttrib4Nuiv(index: GLuint, v: *const GLuint);
}
extern "C" {
    pub fn glVertexAttrib4Nusv(index: GLuint, v: *const GLushort);
}
extern "C" {
    pub fn glVertexAttrib4bv(index: GLuint, v: *const GLbyte);
}
extern "C" {
    pub fn glVertexAttrib4d(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble);
}
extern "C" {
    pub fn glVertexAttrib4dv(index: GLuint, v: *const GLdouble);
}
extern "C" {
    pub fn glVertexAttrib4f(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat);
}
extern "C" {
    pub fn glVertexAttrib4fv(index: GLuint, v: *const GLfloat);
}
extern "C" {
    pub fn glVertexAttrib4iv(index: GLuint, v: *const GLint);
}
extern "C" {
    pub fn glVertexAttrib4s(index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort);
}
extern "C" {
    pub fn glVertexAttrib4sv(index: GLuint, v: *const GLshort);
}
extern "C" {
    pub fn glVertexAttrib4ubv(index: GLuint, v: *const GLubyte);
}
extern "C" {
    pub fn glVertexAttrib4uiv(index: GLuint, v: *const GLuint);
}
extern "C" {
    pub fn glVertexAttrib4usv(index: GLuint, v: *const GLushort);
}
extern "C" {
    pub fn glVertexAttribPointer(
        index: GLuint,
        size: GLint,
        type_: GLenum,
        normalized: GLboolean,
        stride: GLsizei,
        pointer: *const ctypes::c_void,
    );
}
pub type PFNGLUNIFORMMATRIX2X3FVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLUNIFORMMATRIX3X2FVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLUNIFORMMATRIX2X4FVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLUNIFORMMATRIX4X2FVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLUNIFORMMATRIX3X4FVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLUNIFORMMATRIX4X3FVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
extern "C" {
    pub fn glUniformMatrix2x3fv(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glUniformMatrix3x2fv(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glUniformMatrix2x4fv(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glUniformMatrix4x2fv(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glUniformMatrix3x4fv(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glUniformMatrix4x3fv(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    );
}
pub type GLhalf = ctypes::c_ushort;
pub type PFNGLCOLORMASKIPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean),
>;
pub type PFNGLGETBOOLEANI_VPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, index: GLuint, data: *mut GLboolean),
>;
pub type PFNGLGETINTEGERI_VPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, index: GLuint, data: *mut GLint)>;
pub type PFNGLENABLEIPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, index: GLuint)>;
pub type PFNGLDISABLEIPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, index: GLuint)>;
pub type PFNGLISENABLEDIPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, index: GLuint) -> GLboolean>;
pub type PFNGLBEGINTRANSFORMFEEDBACKPROC =
    ::core::option::Option<unsafe extern "C" fn(primitiveMode: GLenum)>;
pub type PFNGLENDTRANSFORMFEEDBACKPROC = ::core::option::Option<unsafe extern "C" fn()>;
pub type PFNGLBINDBUFFERRANGEPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        index: GLuint,
        buffer: GLuint,
        offset: GLintptr,
        size: GLsizeiptr,
    ),
>;
pub type PFNGLBINDBUFFERBASEPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, index: GLuint, buffer: GLuint)>;
pub type PFNGLTRANSFORMFEEDBACKVARYINGSPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        count: GLsizei,
        varyings: *const *const GLchar,
        bufferMode: GLenum,
    ),
>;
pub type PFNGLGETTRANSFORMFEEDBACKVARYINGPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        index: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        size: *mut GLsizei,
        type_: *mut GLenum,
        name: *mut GLchar,
    ),
>;
pub type PFNGLCLAMPCOLORPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, clamp: GLenum)>;
pub type PFNGLBEGINCONDITIONALRENDERPROC =
    ::core::option::Option<unsafe extern "C" fn(id: GLuint, mode: GLenum)>;
pub type PFNGLENDCONDITIONALRENDERPROC = ::core::option::Option<unsafe extern "C" fn()>;
pub type PFNGLVERTEXATTRIBIPOINTERPROC = ::core::option::Option<
    unsafe extern "C" fn(
        index: GLuint,
        size: GLint,
        type_: GLenum,
        stride: GLsizei,
        pointer: *const ctypes::c_void,
    ),
>;
pub type PFNGLGETVERTEXATTRIBIIVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, pname: GLenum, params: *mut GLint)>;
pub type PFNGLGETVERTEXATTRIBIUIVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, pname: GLenum, params: *mut GLuint)>;
pub type PFNGLVERTEXATTRIBI1IPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, x: GLint)>;
pub type PFNGLVERTEXATTRIBI2IPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, x: GLint, y: GLint)>;
pub type PFNGLVERTEXATTRIBI3IPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, x: GLint, y: GLint, z: GLint)>;
pub type PFNGLVERTEXATTRIBI4IPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint),
>;
pub type PFNGLVERTEXATTRIBI1UIPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, x: GLuint)>;
pub type PFNGLVERTEXATTRIBI2UIPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, x: GLuint, y: GLuint)>;
pub type PFNGLVERTEXATTRIBI3UIPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, x: GLuint, y: GLuint, z: GLuint)>;
pub type PFNGLVERTEXATTRIBI4UIPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint),
>;
pub type PFNGLVERTEXATTRIBI1IVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLint)>;
pub type PFNGLVERTEXATTRIBI2IVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLint)>;
pub type PFNGLVERTEXATTRIBI3IVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLint)>;
pub type PFNGLVERTEXATTRIBI4IVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLint)>;
pub type PFNGLVERTEXATTRIBI1UIVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLuint)>;
pub type PFNGLVERTEXATTRIBI2UIVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLuint)>;
pub type PFNGLVERTEXATTRIBI3UIVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLuint)>;
pub type PFNGLVERTEXATTRIBI4UIVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLuint)>;
pub type PFNGLVERTEXATTRIBI4BVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLbyte)>;
pub type PFNGLVERTEXATTRIBI4SVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLshort)>;
pub type PFNGLVERTEXATTRIBI4UBVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLubyte)>;
pub type PFNGLVERTEXATTRIBI4USVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLushort)>;
pub type PFNGLGETUNIFORMUIVPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, params: *mut GLuint),
>;
pub type PFNGLBINDFRAGDATALOCATIONPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, color: GLuint, name: *const GLchar),
>;
pub type PFNGLGETFRAGDATALOCATIONPROC =
    ::core::option::Option<unsafe extern "C" fn(program: GLuint, name: *const GLchar) -> GLint>;
pub type PFNGLUNIFORM1UIPROC =
    ::core::option::Option<unsafe extern "C" fn(location: GLint, v0: GLuint)>;
pub type PFNGLUNIFORM2UIPROC =
    ::core::option::Option<unsafe extern "C" fn(location: GLint, v0: GLuint, v1: GLuint)>;
pub type PFNGLUNIFORM3UIPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint),
>;
pub type PFNGLUNIFORM4UIPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint),
>;
pub type PFNGLUNIFORM1UIVPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLuint),
>;
pub type PFNGLUNIFORM2UIVPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLuint),
>;
pub type PFNGLUNIFORM3UIVPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLuint),
>;
pub type PFNGLUNIFORM4UIVPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLuint),
>;
pub type PFNGLTEXPARAMETERIIVPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *const GLint),
>;
pub type PFNGLTEXPARAMETERIUIVPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *const GLuint),
>;
pub type PFNGLGETTEXPARAMETERIIVPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLint)>;
pub type PFNGLGETTEXPARAMETERIUIVPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLuint),
>;
pub type PFNGLCLEARBUFFERIVPROC = ::core::option::Option<
    unsafe extern "C" fn(buffer: GLenum, drawbuffer: GLint, value: *const GLint),
>;
pub type PFNGLCLEARBUFFERUIVPROC = ::core::option::Option<
    unsafe extern "C" fn(buffer: GLenum, drawbuffer: GLint, value: *const GLuint),
>;
pub type PFNGLCLEARBUFFERFVPROC = ::core::option::Option<
    unsafe extern "C" fn(buffer: GLenum, drawbuffer: GLint, value: *const GLfloat),
>;
pub type PFNGLCLEARBUFFERFIPROC = ::core::option::Option<
    unsafe extern "C" fn(buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint),
>;
pub type PFNGLGETSTRINGIPROC =
    ::core::option::Option<unsafe extern "C" fn(name: GLenum, index: GLuint) -> *const GLubyte>;
pub type PFNGLISRENDERBUFFERPROC =
    ::core::option::Option<unsafe extern "C" fn(renderbuffer: GLuint) -> GLboolean>;
pub type PFNGLBINDRENDERBUFFERPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, renderbuffer: GLuint)>;
pub type PFNGLDELETERENDERBUFFERSPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, renderbuffers: *const GLuint)>;
pub type PFNGLGENRENDERBUFFERSPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, renderbuffers: *mut GLuint)>;
pub type PFNGLRENDERBUFFERSTORAGEPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei),
>;
pub type PFNGLGETRENDERBUFFERPARAMETERIVPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLint)>;
pub type PFNGLISFRAMEBUFFERPROC =
    ::core::option::Option<unsafe extern "C" fn(framebuffer: GLuint) -> GLboolean>;
pub type PFNGLBINDFRAMEBUFFERPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, framebuffer: GLuint)>;
pub type PFNGLDELETEFRAMEBUFFERSPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, framebuffers: *const GLuint)>;
pub type PFNGLGENFRAMEBUFFERSPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, framebuffers: *mut GLuint)>;
pub type PFNGLCHECKFRAMEBUFFERSTATUSPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum) -> GLenum>;
pub type PFNGLFRAMEBUFFERTEXTURE1DPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        attachment: GLenum,
        textarget: GLenum,
        texture: GLuint,
        level: GLint,
    ),
>;
pub type PFNGLFRAMEBUFFERTEXTURE2DPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        attachment: GLenum,
        textarget: GLenum,
        texture: GLuint,
        level: GLint,
    ),
>;
pub type PFNGLFRAMEBUFFERTEXTURE3DPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        attachment: GLenum,
        textarget: GLenum,
        texture: GLuint,
        level: GLint,
        zoffset: GLint,
    ),
>;
pub type PFNGLFRAMEBUFFERRENDERBUFFERPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        attachment: GLenum,
        renderbuffertarget: GLenum,
        renderbuffer: GLuint,
    ),
>;
pub type PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, attachment: GLenum, pname: GLenum, params: *mut GLint),
>;
pub type PFNGLGENERATEMIPMAPPROC = ::core::option::Option<unsafe extern "C" fn(target: GLenum)>;
pub type PFNGLBLITFRAMEBUFFERPROC = ::core::option::Option<
    unsafe extern "C" fn(
        srcX0: GLint,
        srcY0: GLint,
        srcX1: GLint,
        srcY1: GLint,
        dstX0: GLint,
        dstY0: GLint,
        dstX1: GLint,
        dstY1: GLint,
        mask: GLbitfield,
        filter: GLenum,
    ),
>;
pub type PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        samples: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
    ),
>;
pub type PFNGLFRAMEBUFFERTEXTURELAYERPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        attachment: GLenum,
        texture: GLuint,
        level: GLint,
        layer: GLint,
    ),
>;
pub type PFNGLMAPBUFFERRANGEPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        offset: GLintptr,
        length: GLsizeiptr,
        access: GLbitfield,
    ) -> *mut ctypes::c_void,
>;
pub type PFNGLFLUSHMAPPEDBUFFERRANGEPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, offset: GLintptr, length: GLsizeiptr),
>;
pub type PFNGLBINDVERTEXARRAYPROC = ::core::option::Option<unsafe extern "C" fn(array: GLuint)>;
pub type PFNGLDELETEVERTEXARRAYSPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, arrays: *const GLuint)>;
pub type PFNGLGENVERTEXARRAYSPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, arrays: *mut GLuint)>;
pub type PFNGLISVERTEXARRAYPROC =
    ::core::option::Option<unsafe extern "C" fn(array: GLuint) -> GLboolean>;
extern "C" {
    pub fn glColorMaski(index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean);
}
extern "C" {
    pub fn glGetBooleani_v(target: GLenum, index: GLuint, data: *mut GLboolean);
}
extern "C" {
    pub fn glGetIntegeri_v(target: GLenum, index: GLuint, data: *mut GLint);
}
extern "C" {
    pub fn glEnablei(target: GLenum, index: GLuint);
}
extern "C" {
    pub fn glDisablei(target: GLenum, index: GLuint);
}
extern "C" {
    pub fn glIsEnabledi(target: GLenum, index: GLuint) -> GLboolean;
}
extern "C" {
    pub fn glBeginTransformFeedback(primitiveMode: GLenum);
}
extern "C" {
    pub fn glEndTransformFeedback();
}
extern "C" {
    pub fn glBindBufferRange(
        target: GLenum,
        index: GLuint,
        buffer: GLuint,
        offset: GLintptr,
        size: GLsizeiptr,
    );
}
extern "C" {
    pub fn glBindBufferBase(target: GLenum, index: GLuint, buffer: GLuint);
}
extern "C" {
    pub fn glTransformFeedbackVaryings(
        program: GLuint,
        count: GLsizei,
        varyings: *const *const GLchar,
        bufferMode: GLenum,
    );
}
extern "C" {
    pub fn glGetTransformFeedbackVarying(
        program: GLuint,
        index: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        size: *mut GLsizei,
        type_: *mut GLenum,
        name: *mut GLchar,
    );
}
extern "C" {
    pub fn glClampColor(target: GLenum, clamp: GLenum);
}
extern "C" {
    pub fn glBeginConditionalRender(id: GLuint, mode: GLenum);
}
extern "C" {
    pub fn glEndConditionalRender();
}
extern "C" {
    pub fn glVertexAttribIPointer(
        index: GLuint,
        size: GLint,
        type_: GLenum,
        stride: GLsizei,
        pointer: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glGetVertexAttribIiv(index: GLuint, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetVertexAttribIuiv(index: GLuint, pname: GLenum, params: *mut GLuint);
}
extern "C" {
    pub fn glVertexAttribI1i(index: GLuint, x: GLint);
}
extern "C" {
    pub fn glVertexAttribI2i(index: GLuint, x: GLint, y: GLint);
}
extern "C" {
    pub fn glVertexAttribI3i(index: GLuint, x: GLint, y: GLint, z: GLint);
}
extern "C" {
    pub fn glVertexAttribI4i(index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint);
}
extern "C" {
    pub fn glVertexAttribI1ui(index: GLuint, x: GLuint);
}
extern "C" {
    pub fn glVertexAttribI2ui(index: GLuint, x: GLuint, y: GLuint);
}
extern "C" {
    pub fn glVertexAttribI3ui(index: GLuint, x: GLuint, y: GLuint, z: GLuint);
}
extern "C" {
    pub fn glVertexAttribI4ui(index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint);
}
extern "C" {
    pub fn glVertexAttribI1iv(index: GLuint, v: *const GLint);
}
extern "C" {
    pub fn glVertexAttribI2iv(index: GLuint, v: *const GLint);
}
extern "C" {
    pub fn glVertexAttribI3iv(index: GLuint, v: *const GLint);
}
extern "C" {
    pub fn glVertexAttribI4iv(index: GLuint, v: *const GLint);
}
extern "C" {
    pub fn glVertexAttribI1uiv(index: GLuint, v: *const GLuint);
}
extern "C" {
    pub fn glVertexAttribI2uiv(index: GLuint, v: *const GLuint);
}
extern "C" {
    pub fn glVertexAttribI3uiv(index: GLuint, v: *const GLuint);
}
extern "C" {
    pub fn glVertexAttribI4uiv(index: GLuint, v: *const GLuint);
}
extern "C" {
    pub fn glVertexAttribI4bv(index: GLuint, v: *const GLbyte);
}
extern "C" {
    pub fn glVertexAttribI4sv(index: GLuint, v: *const GLshort);
}
extern "C" {
    pub fn glVertexAttribI4ubv(index: GLuint, v: *const GLubyte);
}
extern "C" {
    pub fn glVertexAttribI4usv(index: GLuint, v: *const GLushort);
}
extern "C" {
    pub fn glGetUniformuiv(program: GLuint, location: GLint, params: *mut GLuint);
}
extern "C" {
    pub fn glBindFragDataLocation(program: GLuint, color: GLuint, name: *const GLchar);
}
extern "C" {
    pub fn glGetFragDataLocation(program: GLuint, name: *const GLchar) -> GLint;
}
extern "C" {
    pub fn glUniform1ui(location: GLint, v0: GLuint);
}
extern "C" {
    pub fn glUniform2ui(location: GLint, v0: GLuint, v1: GLuint);
}
extern "C" {
    pub fn glUniform3ui(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint);
}
extern "C" {
    pub fn glUniform4ui(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint);
}
extern "C" {
    pub fn glUniform1uiv(location: GLint, count: GLsizei, value: *const GLuint);
}
extern "C" {
    pub fn glUniform2uiv(location: GLint, count: GLsizei, value: *const GLuint);
}
extern "C" {
    pub fn glUniform3uiv(location: GLint, count: GLsizei, value: *const GLuint);
}
extern "C" {
    pub fn glUniform4uiv(location: GLint, count: GLsizei, value: *const GLuint);
}
extern "C" {
    pub fn glTexParameterIiv(target: GLenum, pname: GLenum, params: *const GLint);
}
extern "C" {
    pub fn glTexParameterIuiv(target: GLenum, pname: GLenum, params: *const GLuint);
}
extern "C" {
    pub fn glGetTexParameterIiv(target: GLenum, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetTexParameterIuiv(target: GLenum, pname: GLenum, params: *mut GLuint);
}
extern "C" {
    pub fn glClearBufferiv(buffer: GLenum, drawbuffer: GLint, value: *const GLint);
}
extern "C" {
    pub fn glClearBufferuiv(buffer: GLenum, drawbuffer: GLint, value: *const GLuint);
}
extern "C" {
    pub fn glClearBufferfv(buffer: GLenum, drawbuffer: GLint, value: *const GLfloat);
}
extern "C" {
    pub fn glClearBufferfi(buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint);
}
extern "C" {
    pub fn glGetStringi(name: GLenum, index: GLuint) -> *const GLubyte;
}
extern "C" {
    pub fn glIsRenderbuffer(renderbuffer: GLuint) -> GLboolean;
}
extern "C" {
    pub fn glBindRenderbuffer(target: GLenum, renderbuffer: GLuint);
}
extern "C" {
    pub fn glDeleteRenderbuffers(n: GLsizei, renderbuffers: *const GLuint);
}
extern "C" {
    pub fn glGenRenderbuffers(n: GLsizei, renderbuffers: *mut GLuint);
}
extern "C" {
    pub fn glRenderbufferStorage(
        target: GLenum,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
    );
}
extern "C" {
    pub fn glGetRenderbufferParameteriv(target: GLenum, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glIsFramebuffer(framebuffer: GLuint) -> GLboolean;
}
extern "C" {
    pub fn glBindFramebuffer(target: GLenum, framebuffer: GLuint);
}
extern "C" {
    pub fn glDeleteFramebuffers(n: GLsizei, framebuffers: *const GLuint);
}
extern "C" {
    pub fn glGenFramebuffers(n: GLsizei, framebuffers: *mut GLuint);
}
extern "C" {
    pub fn glCheckFramebufferStatus(target: GLenum) -> GLenum;
}
extern "C" {
    pub fn glFramebufferTexture1D(
        target: GLenum,
        attachment: GLenum,
        textarget: GLenum,
        texture: GLuint,
        level: GLint,
    );
}
extern "C" {
    pub fn glFramebufferTexture2D(
        target: GLenum,
        attachment: GLenum,
        textarget: GLenum,
        texture: GLuint,
        level: GLint,
    );
}
extern "C" {
    pub fn glFramebufferTexture3D(
        target: GLenum,
        attachment: GLenum,
        textarget: GLenum,
        texture: GLuint,
        level: GLint,
        zoffset: GLint,
    );
}
extern "C" {
    pub fn glFramebufferRenderbuffer(
        target: GLenum,
        attachment: GLenum,
        renderbuffertarget: GLenum,
        renderbuffer: GLuint,
    );
}
extern "C" {
    pub fn glGetFramebufferAttachmentParameteriv(
        target: GLenum,
        attachment: GLenum,
        pname: GLenum,
        params: *mut GLint,
    );
}
extern "C" {
    pub fn glGenerateMipmap(target: GLenum);
}
extern "C" {
    pub fn glBlitFramebuffer(
        srcX0: GLint,
        srcY0: GLint,
        srcX1: GLint,
        srcY1: GLint,
        dstX0: GLint,
        dstY0: GLint,
        dstX1: GLint,
        dstY1: GLint,
        mask: GLbitfield,
        filter: GLenum,
    );
}
extern "C" {
    pub fn glRenderbufferStorageMultisample(
        target: GLenum,
        samples: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
    );
}
extern "C" {
    pub fn glFramebufferTextureLayer(
        target: GLenum,
        attachment: GLenum,
        texture: GLuint,
        level: GLint,
        layer: GLint,
    );
}
extern "C" {
    pub fn glMapBufferRange(
        target: GLenum,
        offset: GLintptr,
        length: GLsizeiptr,
        access: GLbitfield,
    ) -> *mut ctypes::c_void;
}
extern "C" {
    pub fn glFlushMappedBufferRange(target: GLenum, offset: GLintptr, length: GLsizeiptr);
}
extern "C" {
    pub fn glBindVertexArray(array: GLuint);
}
extern "C" {
    pub fn glDeleteVertexArrays(n: GLsizei, arrays: *const GLuint);
}
extern "C" {
    pub fn glGenVertexArrays(n: GLsizei, arrays: *mut GLuint);
}
extern "C" {
    pub fn glIsVertexArray(array: GLuint) -> GLboolean;
}
pub type PFNGLDRAWARRAYSINSTANCEDPROC = ::core::option::Option<
    unsafe extern "C" fn(mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei),
>;
pub type PFNGLDRAWELEMENTSINSTANCEDPROC = ::core::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        count: GLsizei,
        type_: GLenum,
        indices: *const ctypes::c_void,
        instancecount: GLsizei,
    ),
>;
pub type PFNGLTEXBUFFERPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, internalformat: GLenum, buffer: GLuint),
>;
pub type PFNGLPRIMITIVERESTARTINDEXPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint)>;
pub type PFNGLCOPYBUFFERSUBDATAPROC = ::core::option::Option<
    unsafe extern "C" fn(
        readTarget: GLenum,
        writeTarget: GLenum,
        readOffset: GLintptr,
        writeOffset: GLintptr,
        size: GLsizeiptr,
    ),
>;
pub type PFNGLGETUNIFORMINDICESPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        uniformCount: GLsizei,
        uniformNames: *const *const GLchar,
        uniformIndices: *mut GLuint,
    ),
>;
pub type PFNGLGETACTIVEUNIFORMSIVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        uniformCount: GLsizei,
        uniformIndices: *const GLuint,
        pname: GLenum,
        params: *mut GLint,
    ),
>;
pub type PFNGLGETACTIVEUNIFORMNAMEPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        uniformIndex: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        uniformName: *mut GLchar,
    ),
>;
pub type PFNGLGETUNIFORMBLOCKINDEXPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, uniformBlockName: *const GLchar) -> GLuint,
>;
pub type PFNGLGETACTIVEUNIFORMBLOCKIVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        uniformBlockIndex: GLuint,
        pname: GLenum,
        params: *mut GLint,
    ),
>;
pub type PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        uniformBlockIndex: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        uniformBlockName: *mut GLchar,
    ),
>;
pub type PFNGLUNIFORMBLOCKBINDINGPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, uniformBlockIndex: GLuint, uniformBlockBinding: GLuint),
>;
extern "C" {
    pub fn glDrawArraysInstanced(
        mode: GLenum,
        first: GLint,
        count: GLsizei,
        instancecount: GLsizei,
    );
}
extern "C" {
    pub fn glDrawElementsInstanced(
        mode: GLenum,
        count: GLsizei,
        type_: GLenum,
        indices: *const ctypes::c_void,
        instancecount: GLsizei,
    );
}
extern "C" {
    pub fn glTexBuffer(target: GLenum, internalformat: GLenum, buffer: GLuint);
}
extern "C" {
    pub fn glPrimitiveRestartIndex(index: GLuint);
}
extern "C" {
    pub fn glCopyBufferSubData(
        readTarget: GLenum,
        writeTarget: GLenum,
        readOffset: GLintptr,
        writeOffset: GLintptr,
        size: GLsizeiptr,
    );
}
extern "C" {
    pub fn glGetUniformIndices(
        program: GLuint,
        uniformCount: GLsizei,
        uniformNames: *const *const GLchar,
        uniformIndices: *mut GLuint,
    );
}
extern "C" {
    pub fn glGetActiveUniformsiv(
        program: GLuint,
        uniformCount: GLsizei,
        uniformIndices: *const GLuint,
        pname: GLenum,
        params: *mut GLint,
    );
}
extern "C" {
    pub fn glGetActiveUniformName(
        program: GLuint,
        uniformIndex: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        uniformName: *mut GLchar,
    );
}
extern "C" {
    pub fn glGetUniformBlockIndex(program: GLuint, uniformBlockName: *const GLchar) -> GLuint;
}
extern "C" {
    pub fn glGetActiveUniformBlockiv(
        program: GLuint,
        uniformBlockIndex: GLuint,
        pname: GLenum,
        params: *mut GLint,
    );
}
extern "C" {
    pub fn glGetActiveUniformBlockName(
        program: GLuint,
        uniformBlockIndex: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        uniformBlockName: *mut GLchar,
    );
}
extern "C" {
    pub fn glUniformBlockBinding(
        program: GLuint,
        uniformBlockIndex: GLuint,
        uniformBlockBinding: GLuint,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __GLsync {
    _unused: [u8; 0],
}
pub type GLsync = *mut __GLsync;
pub type GLuint64 = u64;
pub type GLint64 = i64;
pub type PFNGLDRAWELEMENTSBASEVERTEXPROC = ::core::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        count: GLsizei,
        type_: GLenum,
        indices: *const ctypes::c_void,
        basevertex: GLint,
    ),
>;
pub type PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC = ::core::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        start: GLuint,
        end: GLuint,
        count: GLsizei,
        type_: GLenum,
        indices: *const ctypes::c_void,
        basevertex: GLint,
    ),
>;
pub type PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC = ::core::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        count: GLsizei,
        type_: GLenum,
        indices: *const ctypes::c_void,
        instancecount: GLsizei,
        basevertex: GLint,
    ),
>;
pub type PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC = ::core::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        count: *const GLsizei,
        type_: GLenum,
        indices: *const *const ctypes::c_void,
        drawcount: GLsizei,
        basevertex: *const GLint,
    ),
>;
pub type PFNGLPROVOKINGVERTEXPROC = ::core::option::Option<unsafe extern "C" fn(mode: GLenum)>;
pub type PFNGLFENCESYNCPROC =
    ::core::option::Option<unsafe extern "C" fn(condition: GLenum, flags: GLbitfield) -> GLsync>;
pub type PFNGLISSYNCPROC = ::core::option::Option<unsafe extern "C" fn(sync: GLsync) -> GLboolean>;
pub type PFNGLDELETESYNCPROC = ::core::option::Option<unsafe extern "C" fn(sync: GLsync)>;
pub type PFNGLCLIENTWAITSYNCPROC = ::core::option::Option<
    unsafe extern "C" fn(sync: GLsync, flags: GLbitfield, timeout: GLuint64) -> GLenum,
>;
pub type PFNGLWAITSYNCPROC = ::core::option::Option<
    unsafe extern "C" fn(sync: GLsync, flags: GLbitfield, timeout: GLuint64),
>;
pub type PFNGLGETINTEGER64VPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, data: *mut GLint64)>;
pub type PFNGLGETSYNCIVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        sync: GLsync,
        pname: GLenum,
        bufSize: GLsizei,
        length: *mut GLsizei,
        values: *mut GLint,
    ),
>;
pub type PFNGLGETINTEGER64I_VPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, index: GLuint, data: *mut GLint64)>;
pub type PFNGLGETBUFFERPARAMETERI64VPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLint64),
>;
pub type PFNGLFRAMEBUFFERTEXTUREPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint),
>;
pub type PFNGLTEXIMAGE2DMULTISAMPLEPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        samples: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        fixedsamplelocations: GLboolean,
    ),
>;
pub type PFNGLTEXIMAGE3DMULTISAMPLEPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        samples: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        fixedsamplelocations: GLboolean,
    ),
>;
pub type PFNGLGETMULTISAMPLEFVPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, index: GLuint, val: *mut GLfloat)>;
pub type PFNGLSAMPLEMASKIPROC =
    ::core::option::Option<unsafe extern "C" fn(maskNumber: GLuint, mask: GLbitfield)>;
extern "C" {
    pub fn glDrawElementsBaseVertex(
        mode: GLenum,
        count: GLsizei,
        type_: GLenum,
        indices: *const ctypes::c_void,
        basevertex: GLint,
    );
}
extern "C" {
    pub fn glDrawRangeElementsBaseVertex(
        mode: GLenum,
        start: GLuint,
        end: GLuint,
        count: GLsizei,
        type_: GLenum,
        indices: *const ctypes::c_void,
        basevertex: GLint,
    );
}
extern "C" {
    pub fn glDrawElementsInstancedBaseVertex(
        mode: GLenum,
        count: GLsizei,
        type_: GLenum,
        indices: *const ctypes::c_void,
        instancecount: GLsizei,
        basevertex: GLint,
    );
}
extern "C" {
    pub fn glMultiDrawElementsBaseVertex(
        mode: GLenum,
        count: *const GLsizei,
        type_: GLenum,
        indices: *const *const ctypes::c_void,
        drawcount: GLsizei,
        basevertex: *const GLint,
    );
}
extern "C" {
    pub fn glProvokingVertex(mode: GLenum);
}
extern "C" {
    pub fn glFenceSync(condition: GLenum, flags: GLbitfield) -> GLsync;
}
extern "C" {
    pub fn glIsSync(sync: GLsync) -> GLboolean;
}
extern "C" {
    pub fn glDeleteSync(sync: GLsync);
}
extern "C" {
    pub fn glClientWaitSync(sync: GLsync, flags: GLbitfield, timeout: GLuint64) -> GLenum;
}
extern "C" {
    pub fn glWaitSync(sync: GLsync, flags: GLbitfield, timeout: GLuint64);
}
extern "C" {
    pub fn glGetInteger64v(pname: GLenum, data: *mut GLint64);
}
extern "C" {
    pub fn glGetSynciv(
        sync: GLsync,
        pname: GLenum,
        bufSize: GLsizei,
        length: *mut GLsizei,
        values: *mut GLint,
    );
}
extern "C" {
    pub fn glGetInteger64i_v(target: GLenum, index: GLuint, data: *mut GLint64);
}
extern "C" {
    pub fn glGetBufferParameteri64v(target: GLenum, pname: GLenum, params: *mut GLint64);
}
extern "C" {
    pub fn glFramebufferTexture(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint);
}
extern "C" {
    pub fn glTexImage2DMultisample(
        target: GLenum,
        samples: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        fixedsamplelocations: GLboolean,
    );
}
extern "C" {
    pub fn glTexImage3DMultisample(
        target: GLenum,
        samples: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        fixedsamplelocations: GLboolean,
    );
}
extern "C" {
    pub fn glGetMultisamplefv(pname: GLenum, index: GLuint, val: *mut GLfloat);
}
extern "C" {
    pub fn glSampleMaski(maskNumber: GLuint, mask: GLbitfield);
}
pub type PFNGLBINDFRAGDATALOCATIONINDEXEDPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, colorNumber: GLuint, index: GLuint, name: *const GLchar),
>;
pub type PFNGLGETFRAGDATAINDEXPROC =
    ::core::option::Option<unsafe extern "C" fn(program: GLuint, name: *const GLchar) -> GLint>;
pub type PFNGLGENSAMPLERSPROC =
    ::core::option::Option<unsafe extern "C" fn(count: GLsizei, samplers: *mut GLuint)>;
pub type PFNGLDELETESAMPLERSPROC =
    ::core::option::Option<unsafe extern "C" fn(count: GLsizei, samplers: *const GLuint)>;
pub type PFNGLISSAMPLERPROC =
    ::core::option::Option<unsafe extern "C" fn(sampler: GLuint) -> GLboolean>;
pub type PFNGLBINDSAMPLERPROC =
    ::core::option::Option<unsafe extern "C" fn(unit: GLuint, sampler: GLuint)>;
pub type PFNGLSAMPLERPARAMETERIPROC =
    ::core::option::Option<unsafe extern "C" fn(sampler: GLuint, pname: GLenum, param: GLint)>;
pub type PFNGLSAMPLERPARAMETERIVPROC = ::core::option::Option<
    unsafe extern "C" fn(sampler: GLuint, pname: GLenum, param: *const GLint),
>;
pub type PFNGLSAMPLERPARAMETERFPROC =
    ::core::option::Option<unsafe extern "C" fn(sampler: GLuint, pname: GLenum, param: GLfloat)>;
pub type PFNGLSAMPLERPARAMETERFVPROC = ::core::option::Option<
    unsafe extern "C" fn(sampler: GLuint, pname: GLenum, param: *const GLfloat),
>;
pub type PFNGLSAMPLERPARAMETERIIVPROC = ::core::option::Option<
    unsafe extern "C" fn(sampler: GLuint, pname: GLenum, param: *const GLint),
>;
pub type PFNGLSAMPLERPARAMETERIUIVPROC = ::core::option::Option<
    unsafe extern "C" fn(sampler: GLuint, pname: GLenum, param: *const GLuint),
>;
pub type PFNGLGETSAMPLERPARAMETERIVPROC = ::core::option::Option<
    unsafe extern "C" fn(sampler: GLuint, pname: GLenum, params: *mut GLint),
>;
pub type PFNGLGETSAMPLERPARAMETERIIVPROC = ::core::option::Option<
    unsafe extern "C" fn(sampler: GLuint, pname: GLenum, params: *mut GLint),
>;
pub type PFNGLGETSAMPLERPARAMETERFVPROC = ::core::option::Option<
    unsafe extern "C" fn(sampler: GLuint, pname: GLenum, params: *mut GLfloat),
>;
pub type PFNGLGETSAMPLERPARAMETERIUIVPROC = ::core::option::Option<
    unsafe extern "C" fn(sampler: GLuint, pname: GLenum, params: *mut GLuint),
>;
pub type PFNGLQUERYCOUNTERPROC =
    ::core::option::Option<unsafe extern "C" fn(id: GLuint, target: GLenum)>;
pub type PFNGLGETQUERYOBJECTI64VPROC =
    ::core::option::Option<unsafe extern "C" fn(id: GLuint, pname: GLenum, params: *mut GLint64)>;
pub type PFNGLGETQUERYOBJECTUI64VPROC =
    ::core::option::Option<unsafe extern "C" fn(id: GLuint, pname: GLenum, params: *mut GLuint64)>;
pub type PFNGLVERTEXATTRIBDIVISORPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, divisor: GLuint)>;
pub type PFNGLVERTEXATTRIBP1UIPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint),
>;
pub type PFNGLVERTEXATTRIBP1UIVPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, type_: GLenum, normalized: GLboolean, value: *const GLuint),
>;
pub type PFNGLVERTEXATTRIBP2UIPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint),
>;
pub type PFNGLVERTEXATTRIBP2UIVPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, type_: GLenum, normalized: GLboolean, value: *const GLuint),
>;
pub type PFNGLVERTEXATTRIBP3UIPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint),
>;
pub type PFNGLVERTEXATTRIBP3UIVPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, type_: GLenum, normalized: GLboolean, value: *const GLuint),
>;
pub type PFNGLVERTEXATTRIBP4UIPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint),
>;
pub type PFNGLVERTEXATTRIBP4UIVPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, type_: GLenum, normalized: GLboolean, value: *const GLuint),
>;
pub type PFNGLVERTEXP2UIPROC =
    ::core::option::Option<unsafe extern "C" fn(type_: GLenum, value: GLuint)>;
pub type PFNGLVERTEXP2UIVPROC =
    ::core::option::Option<unsafe extern "C" fn(type_: GLenum, value: *const GLuint)>;
pub type PFNGLVERTEXP3UIPROC =
    ::core::option::Option<unsafe extern "C" fn(type_: GLenum, value: GLuint)>;
pub type PFNGLVERTEXP3UIVPROC =
    ::core::option::Option<unsafe extern "C" fn(type_: GLenum, value: *const GLuint)>;
pub type PFNGLVERTEXP4UIPROC =
    ::core::option::Option<unsafe extern "C" fn(type_: GLenum, value: GLuint)>;
pub type PFNGLVERTEXP4UIVPROC =
    ::core::option::Option<unsafe extern "C" fn(type_: GLenum, value: *const GLuint)>;
pub type PFNGLTEXCOORDP1UIPROC =
    ::core::option::Option<unsafe extern "C" fn(type_: GLenum, coords: GLuint)>;
pub type PFNGLTEXCOORDP1UIVPROC =
    ::core::option::Option<unsafe extern "C" fn(type_: GLenum, coords: *const GLuint)>;
pub type PFNGLTEXCOORDP2UIPROC =
    ::core::option::Option<unsafe extern "C" fn(type_: GLenum, coords: GLuint)>;
pub type PFNGLTEXCOORDP2UIVPROC =
    ::core::option::Option<unsafe extern "C" fn(type_: GLenum, coords: *const GLuint)>;
pub type PFNGLTEXCOORDP3UIPROC =
    ::core::option::Option<unsafe extern "C" fn(type_: GLenum, coords: GLuint)>;
pub type PFNGLTEXCOORDP3UIVPROC =
    ::core::option::Option<unsafe extern "C" fn(type_: GLenum, coords: *const GLuint)>;
pub type PFNGLTEXCOORDP4UIPROC =
    ::core::option::Option<unsafe extern "C" fn(type_: GLenum, coords: GLuint)>;
pub type PFNGLTEXCOORDP4UIVPROC =
    ::core::option::Option<unsafe extern "C" fn(type_: GLenum, coords: *const GLuint)>;
pub type PFNGLMULTITEXCOORDP1UIPROC =
    ::core::option::Option<unsafe extern "C" fn(texture: GLenum, type_: GLenum, coords: GLuint)>;
pub type PFNGLMULTITEXCOORDP1UIVPROC = ::core::option::Option<
    unsafe extern "C" fn(texture: GLenum, type_: GLenum, coords: *const GLuint),
>;
pub type PFNGLMULTITEXCOORDP2UIPROC =
    ::core::option::Option<unsafe extern "C" fn(texture: GLenum, type_: GLenum, coords: GLuint)>;
pub type PFNGLMULTITEXCOORDP2UIVPROC = ::core::option::Option<
    unsafe extern "C" fn(texture: GLenum, type_: GLenum, coords: *const GLuint),
>;
pub type PFNGLMULTITEXCOORDP3UIPROC =
    ::core::option::Option<unsafe extern "C" fn(texture: GLenum, type_: GLenum, coords: GLuint)>;
pub type PFNGLMULTITEXCOORDP3UIVPROC = ::core::option::Option<
    unsafe extern "C" fn(texture: GLenum, type_: GLenum, coords: *const GLuint),
>;
pub type PFNGLMULTITEXCOORDP4UIPROC =
    ::core::option::Option<unsafe extern "C" fn(texture: GLenum, type_: GLenum, coords: GLuint)>;
pub type PFNGLMULTITEXCOORDP4UIVPROC = ::core::option::Option<
    unsafe extern "C" fn(texture: GLenum, type_: GLenum, coords: *const GLuint),
>;
pub type PFNGLNORMALP3UIPROC =
    ::core::option::Option<unsafe extern "C" fn(type_: GLenum, coords: GLuint)>;
pub type PFNGLNORMALP3UIVPROC =
    ::core::option::Option<unsafe extern "C" fn(type_: GLenum, coords: *const GLuint)>;
pub type PFNGLCOLORP3UIPROC =
    ::core::option::Option<unsafe extern "C" fn(type_: GLenum, color: GLuint)>;
pub type PFNGLCOLORP3UIVPROC =
    ::core::option::Option<unsafe extern "C" fn(type_: GLenum, color: *const GLuint)>;
pub type PFNGLCOLORP4UIPROC =
    ::core::option::Option<unsafe extern "C" fn(type_: GLenum, color: GLuint)>;
pub type PFNGLCOLORP4UIVPROC =
    ::core::option::Option<unsafe extern "C" fn(type_: GLenum, color: *const GLuint)>;
pub type PFNGLSECONDARYCOLORP3UIPROC =
    ::core::option::Option<unsafe extern "C" fn(type_: GLenum, color: GLuint)>;
pub type PFNGLSECONDARYCOLORP3UIVPROC =
    ::core::option::Option<unsafe extern "C" fn(type_: GLenum, color: *const GLuint)>;
extern "C" {
    pub fn glBindFragDataLocationIndexed(
        program: GLuint,
        colorNumber: GLuint,
        index: GLuint,
        name: *const GLchar,
    );
}
extern "C" {
    pub fn glGetFragDataIndex(program: GLuint, name: *const GLchar) -> GLint;
}
extern "C" {
    pub fn glGenSamplers(count: GLsizei, samplers: *mut GLuint);
}
extern "C" {
    pub fn glDeleteSamplers(count: GLsizei, samplers: *const GLuint);
}
extern "C" {
    pub fn glIsSampler(sampler: GLuint) -> GLboolean;
}
extern "C" {
    pub fn glBindSampler(unit: GLuint, sampler: GLuint);
}
extern "C" {
    pub fn glSamplerParameteri(sampler: GLuint, pname: GLenum, param: GLint);
}
extern "C" {
    pub fn glSamplerParameteriv(sampler: GLuint, pname: GLenum, param: *const GLint);
}
extern "C" {
    pub fn glSamplerParameterf(sampler: GLuint, pname: GLenum, param: GLfloat);
}
extern "C" {
    pub fn glSamplerParameterfv(sampler: GLuint, pname: GLenum, param: *const GLfloat);
}
extern "C" {
    pub fn glSamplerParameterIiv(sampler: GLuint, pname: GLenum, param: *const GLint);
}
extern "C" {
    pub fn glSamplerParameterIuiv(sampler: GLuint, pname: GLenum, param: *const GLuint);
}
extern "C" {
    pub fn glGetSamplerParameteriv(sampler: GLuint, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetSamplerParameterIiv(sampler: GLuint, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetSamplerParameterfv(sampler: GLuint, pname: GLenum, params: *mut GLfloat);
}
extern "C" {
    pub fn glGetSamplerParameterIuiv(sampler: GLuint, pname: GLenum, params: *mut GLuint);
}
extern "C" {
    pub fn glQueryCounter(id: GLuint, target: GLenum);
}
extern "C" {
    pub fn glGetQueryObjecti64v(id: GLuint, pname: GLenum, params: *mut GLint64);
}
extern "C" {
    pub fn glGetQueryObjectui64v(id: GLuint, pname: GLenum, params: *mut GLuint64);
}
extern "C" {
    pub fn glVertexAttribDivisor(index: GLuint, divisor: GLuint);
}
extern "C" {
    pub fn glVertexAttribP1ui(index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint);
}
extern "C" {
    pub fn glVertexAttribP1uiv(
        index: GLuint,
        type_: GLenum,
        normalized: GLboolean,
        value: *const GLuint,
    );
}
extern "C" {
    pub fn glVertexAttribP2ui(index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint);
}
extern "C" {
    pub fn glVertexAttribP2uiv(
        index: GLuint,
        type_: GLenum,
        normalized: GLboolean,
        value: *const GLuint,
    );
}
extern "C" {
    pub fn glVertexAttribP3ui(index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint);
}
extern "C" {
    pub fn glVertexAttribP3uiv(
        index: GLuint,
        type_: GLenum,
        normalized: GLboolean,
        value: *const GLuint,
    );
}
extern "C" {
    pub fn glVertexAttribP4ui(index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint);
}
extern "C" {
    pub fn glVertexAttribP4uiv(
        index: GLuint,
        type_: GLenum,
        normalized: GLboolean,
        value: *const GLuint,
    );
}
extern "C" {
    pub fn glVertexP2ui(type_: GLenum, value: GLuint);
}
extern "C" {
    pub fn glVertexP2uiv(type_: GLenum, value: *const GLuint);
}
extern "C" {
    pub fn glVertexP3ui(type_: GLenum, value: GLuint);
}
extern "C" {
    pub fn glVertexP3uiv(type_: GLenum, value: *const GLuint);
}
extern "C" {
    pub fn glVertexP4ui(type_: GLenum, value: GLuint);
}
extern "C" {
    pub fn glVertexP4uiv(type_: GLenum, value: *const GLuint);
}
extern "C" {
    pub fn glTexCoordP1ui(type_: GLenum, coords: GLuint);
}
extern "C" {
    pub fn glTexCoordP1uiv(type_: GLenum, coords: *const GLuint);
}
extern "C" {
    pub fn glTexCoordP2ui(type_: GLenum, coords: GLuint);
}
extern "C" {
    pub fn glTexCoordP2uiv(type_: GLenum, coords: *const GLuint);
}
extern "C" {
    pub fn glTexCoordP3ui(type_: GLenum, coords: GLuint);
}
extern "C" {
    pub fn glTexCoordP3uiv(type_: GLenum, coords: *const GLuint);
}
extern "C" {
    pub fn glTexCoordP4ui(type_: GLenum, coords: GLuint);
}
extern "C" {
    pub fn glTexCoordP4uiv(type_: GLenum, coords: *const GLuint);
}
extern "C" {
    pub fn glMultiTexCoordP1ui(texture: GLenum, type_: GLenum, coords: GLuint);
}
extern "C" {
    pub fn glMultiTexCoordP1uiv(texture: GLenum, type_: GLenum, coords: *const GLuint);
}
extern "C" {
    pub fn glMultiTexCoordP2ui(texture: GLenum, type_: GLenum, coords: GLuint);
}
extern "C" {
    pub fn glMultiTexCoordP2uiv(texture: GLenum, type_: GLenum, coords: *const GLuint);
}
extern "C" {
    pub fn glMultiTexCoordP3ui(texture: GLenum, type_: GLenum, coords: GLuint);
}
extern "C" {
    pub fn glMultiTexCoordP3uiv(texture: GLenum, type_: GLenum, coords: *const GLuint);
}
extern "C" {
    pub fn glMultiTexCoordP4ui(texture: GLenum, type_: GLenum, coords: GLuint);
}
extern "C" {
    pub fn glMultiTexCoordP4uiv(texture: GLenum, type_: GLenum, coords: *const GLuint);
}
extern "C" {
    pub fn glNormalP3ui(type_: GLenum, coords: GLuint);
}
extern "C" {
    pub fn glNormalP3uiv(type_: GLenum, coords: *const GLuint);
}
extern "C" {
    pub fn glColorP3ui(type_: GLenum, color: GLuint);
}
extern "C" {
    pub fn glColorP3uiv(type_: GLenum, color: *const GLuint);
}
extern "C" {
    pub fn glColorP4ui(type_: GLenum, color: GLuint);
}
extern "C" {
    pub fn glColorP4uiv(type_: GLenum, color: *const GLuint);
}
extern "C" {
    pub fn glSecondaryColorP3ui(type_: GLenum, color: GLuint);
}
extern "C" {
    pub fn glSecondaryColorP3uiv(type_: GLenum, color: *const GLuint);
}
pub type PFNGLMINSAMPLESHADINGPROC = ::core::option::Option<unsafe extern "C" fn(value: GLfloat)>;
pub type PFNGLBLENDEQUATIONIPROC =
    ::core::option::Option<unsafe extern "C" fn(buf: GLuint, mode: GLenum)>;
pub type PFNGLBLENDEQUATIONSEPARATEIPROC =
    ::core::option::Option<unsafe extern "C" fn(buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum)>;
pub type PFNGLBLENDFUNCIPROC =
    ::core::option::Option<unsafe extern "C" fn(buf: GLuint, src: GLenum, dst: GLenum)>;
pub type PFNGLBLENDFUNCSEPARATEIPROC = ::core::option::Option<
    unsafe extern "C" fn(
        buf: GLuint,
        srcRGB: GLenum,
        dstRGB: GLenum,
        srcAlpha: GLenum,
        dstAlpha: GLenum,
    ),
>;
pub type PFNGLDRAWARRAYSINDIRECTPROC =
    ::core::option::Option<unsafe extern "C" fn(mode: GLenum, indirect: *const ctypes::c_void)>;
pub type PFNGLDRAWELEMENTSINDIRECTPROC = ::core::option::Option<
    unsafe extern "C" fn(mode: GLenum, type_: GLenum, indirect: *const ctypes::c_void),
>;
pub type PFNGLUNIFORM1DPROC =
    ::core::option::Option<unsafe extern "C" fn(location: GLint, x: GLdouble)>;
pub type PFNGLUNIFORM2DPROC =
    ::core::option::Option<unsafe extern "C" fn(location: GLint, x: GLdouble, y: GLdouble)>;
pub type PFNGLUNIFORM3DPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, x: GLdouble, y: GLdouble, z: GLdouble),
>;
pub type PFNGLUNIFORM4DPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble),
>;
pub type PFNGLUNIFORM1DVPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLdouble),
>;
pub type PFNGLUNIFORM2DVPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLdouble),
>;
pub type PFNGLUNIFORM3DVPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLdouble),
>;
pub type PFNGLUNIFORM4DVPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLdouble),
>;
pub type PFNGLUNIFORMMATRIX2DVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
pub type PFNGLUNIFORMMATRIX3DVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
pub type PFNGLUNIFORMMATRIX4DVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
pub type PFNGLUNIFORMMATRIX2X3DVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
pub type PFNGLUNIFORMMATRIX2X4DVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
pub type PFNGLUNIFORMMATRIX3X2DVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
pub type PFNGLUNIFORMMATRIX3X4DVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
pub type PFNGLUNIFORMMATRIX4X2DVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
pub type PFNGLUNIFORMMATRIX4X3DVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
pub type PFNGLGETUNIFORMDVPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, params: *mut GLdouble),
>;
pub type PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, shadertype: GLenum, name: *const GLchar) -> GLint,
>;
pub type PFNGLGETSUBROUTINEINDEXPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, shadertype: GLenum, name: *const GLchar) -> GLuint,
>;
pub type PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        shadertype: GLenum,
        index: GLuint,
        pname: GLenum,
        values: *mut GLint,
    ),
>;
pub type PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        shadertype: GLenum,
        index: GLuint,
        bufsize: GLsizei,
        length: *mut GLsizei,
        name: *mut GLchar,
    ),
>;
pub type PFNGLGETACTIVESUBROUTINENAMEPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        shadertype: GLenum,
        index: GLuint,
        bufsize: GLsizei,
        length: *mut GLsizei,
        name: *mut GLchar,
    ),
>;
pub type PFNGLUNIFORMSUBROUTINESUIVPROC = ::core::option::Option<
    unsafe extern "C" fn(shadertype: GLenum, count: GLsizei, indices: *const GLuint),
>;
pub type PFNGLGETUNIFORMSUBROUTINEUIVPROC = ::core::option::Option<
    unsafe extern "C" fn(shadertype: GLenum, location: GLint, params: *mut GLuint),
>;
pub type PFNGLGETPROGRAMSTAGEIVPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, shadertype: GLenum, pname: GLenum, values: *mut GLint),
>;
pub type PFNGLPATCHPARAMETERIPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, value: GLint)>;
pub type PFNGLPATCHPARAMETERFVPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, values: *const GLfloat)>;
pub type PFNGLBINDTRANSFORMFEEDBACKPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, id: GLuint)>;
pub type PFNGLDELETETRANSFORMFEEDBACKSPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, ids: *const GLuint)>;
pub type PFNGLGENTRANSFORMFEEDBACKSPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, ids: *mut GLuint)>;
pub type PFNGLISTRANSFORMFEEDBACKPROC =
    ::core::option::Option<unsafe extern "C" fn(id: GLuint) -> GLboolean>;
pub type PFNGLPAUSETRANSFORMFEEDBACKPROC = ::core::option::Option<unsafe extern "C" fn()>;
pub type PFNGLRESUMETRANSFORMFEEDBACKPROC = ::core::option::Option<unsafe extern "C" fn()>;
pub type PFNGLDRAWTRANSFORMFEEDBACKPROC =
    ::core::option::Option<unsafe extern "C" fn(mode: GLenum, id: GLuint)>;
pub type PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC =
    ::core::option::Option<unsafe extern "C" fn(mode: GLenum, id: GLuint, stream: GLuint)>;
pub type PFNGLBEGINQUERYINDEXEDPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, index: GLuint, id: GLuint)>;
pub type PFNGLENDQUERYINDEXEDPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, index: GLuint)>;
pub type PFNGLGETQUERYINDEXEDIVPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, index: GLuint, pname: GLenum, params: *mut GLint),
>;
extern "C" {
    pub fn glMinSampleShading(value: GLfloat);
}
extern "C" {
    pub fn glBlendEquationi(buf: GLuint, mode: GLenum);
}
extern "C" {
    pub fn glBlendEquationSeparatei(buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum);
}
extern "C" {
    pub fn glBlendFunci(buf: GLuint, src: GLenum, dst: GLenum);
}
extern "C" {
    pub fn glBlendFuncSeparatei(
        buf: GLuint,
        srcRGB: GLenum,
        dstRGB: GLenum,
        srcAlpha: GLenum,
        dstAlpha: GLenum,
    );
}
extern "C" {
    pub fn glDrawArraysIndirect(mode: GLenum, indirect: *const ctypes::c_void);
}
extern "C" {
    pub fn glDrawElementsIndirect(mode: GLenum, type_: GLenum, indirect: *const ctypes::c_void);
}
extern "C" {
    pub fn glUniform1d(location: GLint, x: GLdouble);
}
extern "C" {
    pub fn glUniform2d(location: GLint, x: GLdouble, y: GLdouble);
}
extern "C" {
    pub fn glUniform3d(location: GLint, x: GLdouble, y: GLdouble, z: GLdouble);
}
extern "C" {
    pub fn glUniform4d(location: GLint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble);
}
extern "C" {
    pub fn glUniform1dv(location: GLint, count: GLsizei, value: *const GLdouble);
}
extern "C" {
    pub fn glUniform2dv(location: GLint, count: GLsizei, value: *const GLdouble);
}
extern "C" {
    pub fn glUniform3dv(location: GLint, count: GLsizei, value: *const GLdouble);
}
extern "C" {
    pub fn glUniform4dv(location: GLint, count: GLsizei, value: *const GLdouble);
}
extern "C" {
    pub fn glUniformMatrix2dv(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    );
}
extern "C" {
    pub fn glUniformMatrix3dv(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    );
}
extern "C" {
    pub fn glUniformMatrix4dv(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    );
}
extern "C" {
    pub fn glUniformMatrix2x3dv(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    );
}
extern "C" {
    pub fn glUniformMatrix2x4dv(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    );
}
extern "C" {
    pub fn glUniformMatrix3x2dv(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    );
}
extern "C" {
    pub fn glUniformMatrix3x4dv(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    );
}
extern "C" {
    pub fn glUniformMatrix4x2dv(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    );
}
extern "C" {
    pub fn glUniformMatrix4x3dv(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    );
}
extern "C" {
    pub fn glGetUniformdv(program: GLuint, location: GLint, params: *mut GLdouble);
}
extern "C" {
    pub fn glGetSubroutineUniformLocation(
        program: GLuint,
        shadertype: GLenum,
        name: *const GLchar,
    ) -> GLint;
}
extern "C" {
    pub fn glGetSubroutineIndex(program: GLuint, shadertype: GLenum, name: *const GLchar)
        -> GLuint;
}
extern "C" {
    pub fn glGetActiveSubroutineUniformiv(
        program: GLuint,
        shadertype: GLenum,
        index: GLuint,
        pname: GLenum,
        values: *mut GLint,
    );
}
extern "C" {
    pub fn glGetActiveSubroutineUniformName(
        program: GLuint,
        shadertype: GLenum,
        index: GLuint,
        bufsize: GLsizei,
        length: *mut GLsizei,
        name: *mut GLchar,
    );
}
extern "C" {
    pub fn glGetActiveSubroutineName(
        program: GLuint,
        shadertype: GLenum,
        index: GLuint,
        bufsize: GLsizei,
        length: *mut GLsizei,
        name: *mut GLchar,
    );
}
extern "C" {
    pub fn glUniformSubroutinesuiv(shadertype: GLenum, count: GLsizei, indices: *const GLuint);
}
extern "C" {
    pub fn glGetUniformSubroutineuiv(shadertype: GLenum, location: GLint, params: *mut GLuint);
}
extern "C" {
    pub fn glGetProgramStageiv(
        program: GLuint,
        shadertype: GLenum,
        pname: GLenum,
        values: *mut GLint,
    );
}
extern "C" {
    pub fn glPatchParameteri(pname: GLenum, value: GLint);
}
extern "C" {
    pub fn glPatchParameterfv(pname: GLenum, values: *const GLfloat);
}
extern "C" {
    pub fn glBindTransformFeedback(target: GLenum, id: GLuint);
}
extern "C" {
    pub fn glDeleteTransformFeedbacks(n: GLsizei, ids: *const GLuint);
}
extern "C" {
    pub fn glGenTransformFeedbacks(n: GLsizei, ids: *mut GLuint);
}
extern "C" {
    pub fn glIsTransformFeedback(id: GLuint) -> GLboolean;
}
extern "C" {
    pub fn glPauseTransformFeedback();
}
extern "C" {
    pub fn glResumeTransformFeedback();
}
extern "C" {
    pub fn glDrawTransformFeedback(mode: GLenum, id: GLuint);
}
extern "C" {
    pub fn glDrawTransformFeedbackStream(mode: GLenum, id: GLuint, stream: GLuint);
}
extern "C" {
    pub fn glBeginQueryIndexed(target: GLenum, index: GLuint, id: GLuint);
}
extern "C" {
    pub fn glEndQueryIndexed(target: GLenum, index: GLuint);
}
extern "C" {
    pub fn glGetQueryIndexediv(target: GLenum, index: GLuint, pname: GLenum, params: *mut GLint);
}
pub type PFNGLRELEASESHADERCOMPILERPROC = ::core::option::Option<unsafe extern "C" fn()>;
pub type PFNGLSHADERBINARYPROC = ::core::option::Option<
    unsafe extern "C" fn(
        count: GLsizei,
        shaders: *const GLuint,
        binaryformat: GLenum,
        binary: *const ctypes::c_void,
        length: GLsizei,
    ),
>;
pub type PFNGLGETSHADERPRECISIONFORMATPROC = ::core::option::Option<
    unsafe extern "C" fn(
        shadertype: GLenum,
        precisiontype: GLenum,
        range: *mut GLint,
        precision: *mut GLint,
    ),
>;
pub type PFNGLDEPTHRANGEFPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLfloat, f: GLfloat)>;
pub type PFNGLCLEARDEPTHFPROC = ::core::option::Option<unsafe extern "C" fn(d: GLfloat)>;
pub type PFNGLGETPROGRAMBINARYPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        binaryFormat: *mut GLenum,
        binary: *mut ctypes::c_void,
    ),
>;
pub type PFNGLPROGRAMBINARYPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        binaryFormat: GLenum,
        binary: *const ctypes::c_void,
        length: GLsizei,
    ),
>;
pub type PFNGLPROGRAMPARAMETERIPROC =
    ::core::option::Option<unsafe extern "C" fn(program: GLuint, pname: GLenum, value: GLint)>;
pub type PFNGLUSEPROGRAMSTAGESPROC = ::core::option::Option<
    unsafe extern "C" fn(pipeline: GLuint, stages: GLbitfield, program: GLuint),
>;
pub type PFNGLACTIVESHADERPROGRAMPROC =
    ::core::option::Option<unsafe extern "C" fn(pipeline: GLuint, program: GLuint)>;
pub type PFNGLCREATESHADERPROGRAMVPROC = ::core::option::Option<
    unsafe extern "C" fn(type_: GLenum, count: GLsizei, strings: *const *const GLchar) -> GLuint,
>;
pub type PFNGLBINDPROGRAMPIPELINEPROC =
    ::core::option::Option<unsafe extern "C" fn(pipeline: GLuint)>;
pub type PFNGLDELETEPROGRAMPIPELINESPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, pipelines: *const GLuint)>;
pub type PFNGLGENPROGRAMPIPELINESPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, pipelines: *mut GLuint)>;
pub type PFNGLISPROGRAMPIPELINEPROC =
    ::core::option::Option<unsafe extern "C" fn(pipeline: GLuint) -> GLboolean>;
pub type PFNGLGETPROGRAMPIPELINEIVPROC = ::core::option::Option<
    unsafe extern "C" fn(pipeline: GLuint, pname: GLenum, params: *mut GLint),
>;
pub type PFNGLPROGRAMUNIFORM1IPROC =
    ::core::option::Option<unsafe extern "C" fn(program: GLuint, location: GLint, v0: GLint)>;
pub type PFNGLPROGRAMUNIFORM1IVPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLint),
>;
pub type PFNGLPROGRAMUNIFORM1FPROC =
    ::core::option::Option<unsafe extern "C" fn(program: GLuint, location: GLint, v0: GLfloat)>;
pub type PFNGLPROGRAMUNIFORM1FVPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLfloat),
>;
pub type PFNGLPROGRAMUNIFORM1DPROC =
    ::core::option::Option<unsafe extern "C" fn(program: GLuint, location: GLint, v0: GLdouble)>;
pub type PFNGLPROGRAMUNIFORM1DVPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLdouble),
>;
pub type PFNGLPROGRAMUNIFORM1UIPROC =
    ::core::option::Option<unsafe extern "C" fn(program: GLuint, location: GLint, v0: GLuint)>;
pub type PFNGLPROGRAMUNIFORM1UIVPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLuint),
>;
pub type PFNGLPROGRAMUNIFORM2IPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, v0: GLint, v1: GLint),
>;
pub type PFNGLPROGRAMUNIFORM2IVPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLint),
>;
pub type PFNGLPROGRAMUNIFORM2FPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat),
>;
pub type PFNGLPROGRAMUNIFORM2FVPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLfloat),
>;
pub type PFNGLPROGRAMUNIFORM2DPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble),
>;
pub type PFNGLPROGRAMUNIFORM2DVPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLdouble),
>;
pub type PFNGLPROGRAMUNIFORM2UIPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, v0: GLuint, v1: GLuint),
>;
pub type PFNGLPROGRAMUNIFORM2UIVPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLuint),
>;
pub type PFNGLPROGRAMUNIFORM3IPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint),
>;
pub type PFNGLPROGRAMUNIFORM3IVPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLint),
>;
pub type PFNGLPROGRAMUNIFORM3FPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat),
>;
pub type PFNGLPROGRAMUNIFORM3FVPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLfloat),
>;
pub type PFNGLPROGRAMUNIFORM3DPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        v0: GLdouble,
        v1: GLdouble,
        v2: GLdouble,
    ),
>;
pub type PFNGLPROGRAMUNIFORM3DVPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLdouble),
>;
pub type PFNGLPROGRAMUNIFORM3UIPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint),
>;
pub type PFNGLPROGRAMUNIFORM3UIVPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLuint),
>;
pub type PFNGLPROGRAMUNIFORM4IPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        v0: GLint,
        v1: GLint,
        v2: GLint,
        v3: GLint,
    ),
>;
pub type PFNGLPROGRAMUNIFORM4IVPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLint),
>;
pub type PFNGLPROGRAMUNIFORM4FPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        v0: GLfloat,
        v1: GLfloat,
        v2: GLfloat,
        v3: GLfloat,
    ),
>;
pub type PFNGLPROGRAMUNIFORM4FVPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLfloat),
>;
pub type PFNGLPROGRAMUNIFORM4DPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        v0: GLdouble,
        v1: GLdouble,
        v2: GLdouble,
        v3: GLdouble,
    ),
>;
pub type PFNGLPROGRAMUNIFORM4DVPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLdouble),
>;
pub type PFNGLPROGRAMUNIFORM4UIPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        v0: GLuint,
        v1: GLuint,
        v2: GLuint,
        v3: GLuint,
    ),
>;
pub type PFNGLPROGRAMUNIFORM4UIVPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLuint),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX2FVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX3FVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX4FVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX2DVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX3DVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX4DVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
pub type PFNGLVALIDATEPROGRAMPIPELINEPROC =
    ::core::option::Option<unsafe extern "C" fn(pipeline: GLuint)>;
pub type PFNGLGETPROGRAMPIPELINEINFOLOGPROC = ::core::option::Option<
    unsafe extern "C" fn(
        pipeline: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        infoLog: *mut GLchar,
    ),
>;
pub type PFNGLVERTEXATTRIBL1DPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, x: GLdouble)>;
pub type PFNGLVERTEXATTRIBL2DPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble)>;
pub type PFNGLVERTEXATTRIBL3DPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble),
>;
pub type PFNGLVERTEXATTRIBL4DPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble),
>;
pub type PFNGLVERTEXATTRIBL1DVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLdouble)>;
pub type PFNGLVERTEXATTRIBL2DVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLdouble)>;
pub type PFNGLVERTEXATTRIBL3DVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLdouble)>;
pub type PFNGLVERTEXATTRIBL4DVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLdouble)>;
pub type PFNGLVERTEXATTRIBLPOINTERPROC = ::core::option::Option<
    unsafe extern "C" fn(
        index: GLuint,
        size: GLint,
        type_: GLenum,
        stride: GLsizei,
        pointer: *const ctypes::c_void,
    ),
>;
pub type PFNGLGETVERTEXATTRIBLDVPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, pname: GLenum, params: *mut GLdouble),
>;
pub type PFNGLVIEWPORTARRAYVPROC =
    ::core::option::Option<unsafe extern "C" fn(first: GLuint, count: GLsizei, v: *const GLfloat)>;
pub type PFNGLVIEWPORTINDEXEDFPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, x: GLfloat, y: GLfloat, w: GLfloat, h: GLfloat),
>;
pub type PFNGLVIEWPORTINDEXEDFVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLfloat)>;
pub type PFNGLSCISSORARRAYVPROC =
    ::core::option::Option<unsafe extern "C" fn(first: GLuint, count: GLsizei, v: *const GLint)>;
pub type PFNGLSCISSORINDEXEDPROC = ::core::option::Option<
    unsafe extern "C" fn(
        index: GLuint,
        left: GLint,
        bottom: GLint,
        width: GLsizei,
        height: GLsizei,
    ),
>;
pub type PFNGLSCISSORINDEXEDVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLint)>;
pub type PFNGLDEPTHRANGEARRAYVPROC =
    ::core::option::Option<unsafe extern "C" fn(first: GLuint, count: GLsizei, v: *const GLdouble)>;
pub type PFNGLDEPTHRANGEINDEXEDPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, n: GLdouble, f: GLdouble)>;
pub type PFNGLGETFLOATI_VPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, index: GLuint, data: *mut GLfloat)>;
pub type PFNGLGETDOUBLEI_VPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, index: GLuint, data: *mut GLdouble),
>;
extern "C" {
    pub fn glReleaseShaderCompiler();
}
extern "C" {
    pub fn glShaderBinary(
        count: GLsizei,
        shaders: *const GLuint,
        binaryformat: GLenum,
        binary: *const ctypes::c_void,
        length: GLsizei,
    );
}
extern "C" {
    pub fn glGetShaderPrecisionFormat(
        shadertype: GLenum,
        precisiontype: GLenum,
        range: *mut GLint,
        precision: *mut GLint,
    );
}
extern "C" {
    pub fn glDepthRangef(n: GLfloat, f: GLfloat);
}
extern "C" {
    pub fn glClearDepthf(d: GLfloat);
}
extern "C" {
    pub fn glGetProgramBinary(
        program: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        binaryFormat: *mut GLenum,
        binary: *mut ctypes::c_void,
    );
}
extern "C" {
    pub fn glProgramBinary(
        program: GLuint,
        binaryFormat: GLenum,
        binary: *const ctypes::c_void,
        length: GLsizei,
    );
}
extern "C" {
    pub fn glProgramParameteri(program: GLuint, pname: GLenum, value: GLint);
}
extern "C" {
    pub fn glUseProgramStages(pipeline: GLuint, stages: GLbitfield, program: GLuint);
}
extern "C" {
    pub fn glActiveShaderProgram(pipeline: GLuint, program: GLuint);
}
extern "C" {
    pub fn glCreateShaderProgramv(
        type_: GLenum,
        count: GLsizei,
        strings: *const *const GLchar,
    ) -> GLuint;
}
extern "C" {
    pub fn glBindProgramPipeline(pipeline: GLuint);
}
extern "C" {
    pub fn glDeleteProgramPipelines(n: GLsizei, pipelines: *const GLuint);
}
extern "C" {
    pub fn glGenProgramPipelines(n: GLsizei, pipelines: *mut GLuint);
}
extern "C" {
    pub fn glIsProgramPipeline(pipeline: GLuint) -> GLboolean;
}
extern "C" {
    pub fn glGetProgramPipelineiv(pipeline: GLuint, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glProgramUniform1i(program: GLuint, location: GLint, v0: GLint);
}
extern "C" {
    pub fn glProgramUniform1iv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLint,
    );
}
extern "C" {
    pub fn glProgramUniform1f(program: GLuint, location: GLint, v0: GLfloat);
}
extern "C" {
    pub fn glProgramUniform1fv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glProgramUniform1d(program: GLuint, location: GLint, v0: GLdouble);
}
extern "C" {
    pub fn glProgramUniform1dv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLdouble,
    );
}
extern "C" {
    pub fn glProgramUniform1ui(program: GLuint, location: GLint, v0: GLuint);
}
extern "C" {
    pub fn glProgramUniform1uiv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLuint,
    );
}
extern "C" {
    pub fn glProgramUniform2i(program: GLuint, location: GLint, v0: GLint, v1: GLint);
}
extern "C" {
    pub fn glProgramUniform2iv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLint,
    );
}
extern "C" {
    pub fn glProgramUniform2f(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat);
}
extern "C" {
    pub fn glProgramUniform2fv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glProgramUniform2d(program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble);
}
extern "C" {
    pub fn glProgramUniform2dv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLdouble,
    );
}
extern "C" {
    pub fn glProgramUniform2ui(program: GLuint, location: GLint, v0: GLuint, v1: GLuint);
}
extern "C" {
    pub fn glProgramUniform2uiv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLuint,
    );
}
extern "C" {
    pub fn glProgramUniform3i(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint);
}
extern "C" {
    pub fn glProgramUniform3iv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLint,
    );
}
extern "C" {
    pub fn glProgramUniform3f(
        program: GLuint,
        location: GLint,
        v0: GLfloat,
        v1: GLfloat,
        v2: GLfloat,
    );
}
extern "C" {
    pub fn glProgramUniform3fv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glProgramUniform3d(
        program: GLuint,
        location: GLint,
        v0: GLdouble,
        v1: GLdouble,
        v2: GLdouble,
    );
}
extern "C" {
    pub fn glProgramUniform3dv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLdouble,
    );
}
extern "C" {
    pub fn glProgramUniform3ui(
        program: GLuint,
        location: GLint,
        v0: GLuint,
        v1: GLuint,
        v2: GLuint,
    );
}
extern "C" {
    pub fn glProgramUniform3uiv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLuint,
    );
}
extern "C" {
    pub fn glProgramUniform4i(
        program: GLuint,
        location: GLint,
        v0: GLint,
        v1: GLint,
        v2: GLint,
        v3: GLint,
    );
}
extern "C" {
    pub fn glProgramUniform4iv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLint,
    );
}
extern "C" {
    pub fn glProgramUniform4f(
        program: GLuint,
        location: GLint,
        v0: GLfloat,
        v1: GLfloat,
        v2: GLfloat,
        v3: GLfloat,
    );
}
extern "C" {
    pub fn glProgramUniform4fv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glProgramUniform4d(
        program: GLuint,
        location: GLint,
        v0: GLdouble,
        v1: GLdouble,
        v2: GLdouble,
        v3: GLdouble,
    );
}
extern "C" {
    pub fn glProgramUniform4dv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLdouble,
    );
}
extern "C" {
    pub fn glProgramUniform4ui(
        program: GLuint,
        location: GLint,
        v0: GLuint,
        v1: GLuint,
        v2: GLuint,
        v3: GLuint,
    );
}
extern "C" {
    pub fn glProgramUniform4uiv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLuint,
    );
}
extern "C" {
    pub fn glProgramUniformMatrix2fv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glProgramUniformMatrix3fv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glProgramUniformMatrix4fv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glProgramUniformMatrix2dv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    );
}
extern "C" {
    pub fn glProgramUniformMatrix3dv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    );
}
extern "C" {
    pub fn glProgramUniformMatrix4dv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    );
}
extern "C" {
    pub fn glProgramUniformMatrix2x3fv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glProgramUniformMatrix3x2fv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glProgramUniformMatrix2x4fv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glProgramUniformMatrix4x2fv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glProgramUniformMatrix3x4fv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glProgramUniformMatrix4x3fv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glProgramUniformMatrix2x3dv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    );
}
extern "C" {
    pub fn glProgramUniformMatrix3x2dv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    );
}
extern "C" {
    pub fn glProgramUniformMatrix2x4dv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    );
}
extern "C" {
    pub fn glProgramUniformMatrix4x2dv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    );
}
extern "C" {
    pub fn glProgramUniformMatrix3x4dv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    );
}
extern "C" {
    pub fn glProgramUniformMatrix4x3dv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    );
}
extern "C" {
    pub fn glValidateProgramPipeline(pipeline: GLuint);
}
extern "C" {
    pub fn glGetProgramPipelineInfoLog(
        pipeline: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        infoLog: *mut GLchar,
    );
}
extern "C" {
    pub fn glVertexAttribL1d(index: GLuint, x: GLdouble);
}
extern "C" {
    pub fn glVertexAttribL2d(index: GLuint, x: GLdouble, y: GLdouble);
}
extern "C" {
    pub fn glVertexAttribL3d(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble);
}
extern "C" {
    pub fn glVertexAttribL4d(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble);
}
extern "C" {
    pub fn glVertexAttribL1dv(index: GLuint, v: *const GLdouble);
}
extern "C" {
    pub fn glVertexAttribL2dv(index: GLuint, v: *const GLdouble);
}
extern "C" {
    pub fn glVertexAttribL3dv(index: GLuint, v: *const GLdouble);
}
extern "C" {
    pub fn glVertexAttribL4dv(index: GLuint, v: *const GLdouble);
}
extern "C" {
    pub fn glVertexAttribLPointer(
        index: GLuint,
        size: GLint,
        type_: GLenum,
        stride: GLsizei,
        pointer: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glGetVertexAttribLdv(index: GLuint, pname: GLenum, params: *mut GLdouble);
}
extern "C" {
    pub fn glViewportArrayv(first: GLuint, count: GLsizei, v: *const GLfloat);
}
extern "C" {
    pub fn glViewportIndexedf(index: GLuint, x: GLfloat, y: GLfloat, w: GLfloat, h: GLfloat);
}
extern "C" {
    pub fn glViewportIndexedfv(index: GLuint, v: *const GLfloat);
}
extern "C" {
    pub fn glScissorArrayv(first: GLuint, count: GLsizei, v: *const GLint);
}
extern "C" {
    pub fn glScissorIndexed(
        index: GLuint,
        left: GLint,
        bottom: GLint,
        width: GLsizei,
        height: GLsizei,
    );
}
extern "C" {
    pub fn glScissorIndexedv(index: GLuint, v: *const GLint);
}
extern "C" {
    pub fn glDepthRangeArrayv(first: GLuint, count: GLsizei, v: *const GLdouble);
}
extern "C" {
    pub fn glDepthRangeIndexed(index: GLuint, n: GLdouble, f: GLdouble);
}
extern "C" {
    pub fn glGetFloati_v(target: GLenum, index: GLuint, data: *mut GLfloat);
}
extern "C" {
    pub fn glGetDoublei_v(target: GLenum, index: GLuint, data: *mut GLdouble);
}
pub type PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC = ::core::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        first: GLint,
        count: GLsizei,
        instancecount: GLsizei,
        baseinstance: GLuint,
    ),
>;
pub type PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC = ::core::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        count: GLsizei,
        type_: GLenum,
        indices: *const ctypes::c_void,
        instancecount: GLsizei,
        baseinstance: GLuint,
    ),
>;
pub type PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC = ::core::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        count: GLsizei,
        type_: GLenum,
        indices: *const ctypes::c_void,
        instancecount: GLsizei,
        basevertex: GLint,
        baseinstance: GLuint,
    ),
>;
pub type PFNGLGETINTERNALFORMATIVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        internalformat: GLenum,
        pname: GLenum,
        bufSize: GLsizei,
        params: *mut GLint,
    ),
>;
pub type PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, bufferIndex: GLuint, pname: GLenum, params: *mut GLint),
>;
pub type PFNGLBINDIMAGETEXTUREPROC = ::core::option::Option<
    unsafe extern "C" fn(
        unit: GLuint,
        texture: GLuint,
        level: GLint,
        layered: GLboolean,
        layer: GLint,
        access: GLenum,
        format: GLenum,
    ),
>;
pub type PFNGLMEMORYBARRIERPROC =
    ::core::option::Option<unsafe extern "C" fn(barriers: GLbitfield)>;
pub type PFNGLTEXSTORAGE1DPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei),
>;
pub type PFNGLTEXSTORAGE2DPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        levels: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
    ),
>;
pub type PFNGLTEXSTORAGE3DPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        levels: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
    ),
>;
pub type PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC =
    ::core::option::Option<unsafe extern "C" fn(mode: GLenum, id: GLuint, instancecount: GLsizei)>;
pub type PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC = ::core::option::Option<
    unsafe extern "C" fn(mode: GLenum, id: GLuint, stream: GLuint, instancecount: GLsizei),
>;
extern "C" {
    pub fn glDrawArraysInstancedBaseInstance(
        mode: GLenum,
        first: GLint,
        count: GLsizei,
        instancecount: GLsizei,
        baseinstance: GLuint,
    );
}
extern "C" {
    pub fn glDrawElementsInstancedBaseInstance(
        mode: GLenum,
        count: GLsizei,
        type_: GLenum,
        indices: *const ctypes::c_void,
        instancecount: GLsizei,
        baseinstance: GLuint,
    );
}
extern "C" {
    pub fn glDrawElementsInstancedBaseVertexBaseInstance(
        mode: GLenum,
        count: GLsizei,
        type_: GLenum,
        indices: *const ctypes::c_void,
        instancecount: GLsizei,
        basevertex: GLint,
        baseinstance: GLuint,
    );
}
extern "C" {
    pub fn glGetInternalformativ(
        target: GLenum,
        internalformat: GLenum,
        pname: GLenum,
        bufSize: GLsizei,
        params: *mut GLint,
    );
}
extern "C" {
    pub fn glGetActiveAtomicCounterBufferiv(
        program: GLuint,
        bufferIndex: GLuint,
        pname: GLenum,
        params: *mut GLint,
    );
}
extern "C" {
    pub fn glBindImageTexture(
        unit: GLuint,
        texture: GLuint,
        level: GLint,
        layered: GLboolean,
        layer: GLint,
        access: GLenum,
        format: GLenum,
    );
}
extern "C" {
    pub fn glMemoryBarrier(barriers: GLbitfield);
}
extern "C" {
    pub fn glTexStorage1D(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei);
}
extern "C" {
    pub fn glTexStorage2D(
        target: GLenum,
        levels: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
    );
}
extern "C" {
    pub fn glTexStorage3D(
        target: GLenum,
        levels: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
    );
}
extern "C" {
    pub fn glDrawTransformFeedbackInstanced(mode: GLenum, id: GLuint, instancecount: GLsizei);
}
extern "C" {
    pub fn glDrawTransformFeedbackStreamInstanced(
        mode: GLenum,
        id: GLuint,
        stream: GLuint,
        instancecount: GLsizei,
    );
}
pub type GLDEBUGPROC = ::core::option::Option<
    unsafe extern "C" fn(
        source: GLenum,
        type_: GLenum,
        id: GLuint,
        severity: GLenum,
        length: GLsizei,
        message: *const GLchar,
        userParam: *const ctypes::c_void,
    ),
>;
pub type PFNGLCLEARBUFFERDATAPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        internalformat: GLenum,
        format: GLenum,
        type_: GLenum,
        data: *const ctypes::c_void,
    ),
>;
pub type PFNGLCLEARBUFFERSUBDATAPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        internalformat: GLenum,
        offset: GLintptr,
        size: GLsizeiptr,
        format: GLenum,
        type_: GLenum,
        data: *const ctypes::c_void,
    ),
>;
pub type PFNGLDISPATCHCOMPUTEPROC = ::core::option::Option<
    unsafe extern "C" fn(num_groups_x: GLuint, num_groups_y: GLuint, num_groups_z: GLuint),
>;
pub type PFNGLDISPATCHCOMPUTEINDIRECTPROC =
    ::core::option::Option<unsafe extern "C" fn(indirect: GLintptr)>;
pub type PFNGLCOPYIMAGESUBDATAPROC = ::core::option::Option<
    unsafe extern "C" fn(
        srcName: GLuint,
        srcTarget: GLenum,
        srcLevel: GLint,
        srcX: GLint,
        srcY: GLint,
        srcZ: GLint,
        dstName: GLuint,
        dstTarget: GLenum,
        dstLevel: GLint,
        dstX: GLint,
        dstY: GLint,
        dstZ: GLint,
        srcWidth: GLsizei,
        srcHeight: GLsizei,
        srcDepth: GLsizei,
    ),
>;
pub type PFNGLFRAMEBUFFERPARAMETERIPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, param: GLint)>;
pub type PFNGLGETFRAMEBUFFERPARAMETERIVPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLint)>;
pub type PFNGLGETINTERNALFORMATI64VPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        internalformat: GLenum,
        pname: GLenum,
        bufSize: GLsizei,
        params: *mut GLint64,
    ),
>;
pub type PFNGLINVALIDATETEXSUBIMAGEPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        zoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
    ),
>;
pub type PFNGLINVALIDATETEXIMAGEPROC =
    ::core::option::Option<unsafe extern "C" fn(texture: GLuint, level: GLint)>;
pub type PFNGLINVALIDATEBUFFERSUBDATAPROC = ::core::option::Option<
    unsafe extern "C" fn(buffer: GLuint, offset: GLintptr, length: GLsizeiptr),
>;
pub type PFNGLINVALIDATEBUFFERDATAPROC =
    ::core::option::Option<unsafe extern "C" fn(buffer: GLuint)>;
pub type PFNGLINVALIDATEFRAMEBUFFERPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, numAttachments: GLsizei, attachments: *const GLenum),
>;
pub type PFNGLINVALIDATESUBFRAMEBUFFERPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        numAttachments: GLsizei,
        attachments: *const GLenum,
        x: GLint,
        y: GLint,
        width: GLsizei,
        height: GLsizei,
    ),
>;
pub type PFNGLMULTIDRAWARRAYSINDIRECTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        indirect: *const ctypes::c_void,
        drawcount: GLsizei,
        stride: GLsizei,
    ),
>;
pub type PFNGLMULTIDRAWELEMENTSINDIRECTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        type_: GLenum,
        indirect: *const ctypes::c_void,
        drawcount: GLsizei,
        stride: GLsizei,
    ),
>;
pub type PFNGLGETPROGRAMINTERFACEIVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        programInterface: GLenum,
        pname: GLenum,
        params: *mut GLint,
    ),
>;
pub type PFNGLGETPROGRAMRESOURCEINDEXPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, programInterface: GLenum, name: *const GLchar) -> GLuint,
>;
pub type PFNGLGETPROGRAMRESOURCENAMEPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        programInterface: GLenum,
        index: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        name: *mut GLchar,
    ),
>;
pub type PFNGLGETPROGRAMRESOURCEIVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        programInterface: GLenum,
        index: GLuint,
        propCount: GLsizei,
        props: *const GLenum,
        bufSize: GLsizei,
        length: *mut GLsizei,
        params: *mut GLint,
    ),
>;
pub type PFNGLGETPROGRAMRESOURCELOCATIONPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, programInterface: GLenum, name: *const GLchar) -> GLint,
>;
pub type PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, programInterface: GLenum, name: *const GLchar) -> GLint,
>;
pub type PFNGLSHADERSTORAGEBLOCKBINDINGPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, storageBlockIndex: GLuint, storageBlockBinding: GLuint),
>;
pub type PFNGLTEXBUFFERRANGEPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        internalformat: GLenum,
        buffer: GLuint,
        offset: GLintptr,
        size: GLsizeiptr,
    ),
>;
pub type PFNGLTEXSTORAGE2DMULTISAMPLEPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        samples: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        fixedsamplelocations: GLboolean,
    ),
>;
pub type PFNGLTEXSTORAGE3DMULTISAMPLEPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        samples: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        fixedsamplelocations: GLboolean,
    ),
>;
pub type PFNGLTEXTUREVIEWPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        target: GLenum,
        origtexture: GLuint,
        internalformat: GLenum,
        minlevel: GLuint,
        numlevels: GLuint,
        minlayer: GLuint,
        numlayers: GLuint,
    ),
>;
pub type PFNGLBINDVERTEXBUFFERPROC = ::core::option::Option<
    unsafe extern "C" fn(bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei),
>;
pub type PFNGLVERTEXATTRIBFORMATPROC = ::core::option::Option<
    unsafe extern "C" fn(
        attribindex: GLuint,
        size: GLint,
        type_: GLenum,
        normalized: GLboolean,
        relativeoffset: GLuint,
    ),
>;
pub type PFNGLVERTEXATTRIBIFORMATPROC = ::core::option::Option<
    unsafe extern "C" fn(attribindex: GLuint, size: GLint, type_: GLenum, relativeoffset: GLuint),
>;
pub type PFNGLVERTEXATTRIBLFORMATPROC = ::core::option::Option<
    unsafe extern "C" fn(attribindex: GLuint, size: GLint, type_: GLenum, relativeoffset: GLuint),
>;
pub type PFNGLVERTEXATTRIBBINDINGPROC =
    ::core::option::Option<unsafe extern "C" fn(attribindex: GLuint, bindingindex: GLuint)>;
pub type PFNGLVERTEXBINDINGDIVISORPROC =
    ::core::option::Option<unsafe extern "C" fn(bindingindex: GLuint, divisor: GLuint)>;
pub type PFNGLDEBUGMESSAGECONTROLPROC = ::core::option::Option<
    unsafe extern "C" fn(
        source: GLenum,
        type_: GLenum,
        severity: GLenum,
        count: GLsizei,
        ids: *const GLuint,
        enabled: GLboolean,
    ),
>;
pub type PFNGLDEBUGMESSAGEINSERTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        source: GLenum,
        type_: GLenum,
        id: GLuint,
        severity: GLenum,
        length: GLsizei,
        buf: *const GLchar,
    ),
>;
pub type PFNGLDEBUGMESSAGECALLBACKPROC = ::core::option::Option<
    unsafe extern "C" fn(callback: GLDEBUGPROC, userParam: *const ctypes::c_void),
>;
pub type PFNGLGETDEBUGMESSAGELOGPROC = ::core::option::Option<
    unsafe extern "C" fn(
        count: GLuint,
        bufSize: GLsizei,
        sources: *mut GLenum,
        types: *mut GLenum,
        ids: *mut GLuint,
        severities: *mut GLenum,
        lengths: *mut GLsizei,
        messageLog: *mut GLchar,
    ) -> GLuint,
>;
pub type PFNGLPUSHDEBUGGROUPPROC = ::core::option::Option<
    unsafe extern "C" fn(source: GLenum, id: GLuint, length: GLsizei, message: *const GLchar),
>;
pub type PFNGLPOPDEBUGGROUPPROC = ::core::option::Option<unsafe extern "C" fn()>;
pub type PFNGLOBJECTLABELPROC = ::core::option::Option<
    unsafe extern "C" fn(identifier: GLenum, name: GLuint, length: GLsizei, label: *const GLchar),
>;
pub type PFNGLGETOBJECTLABELPROC = ::core::option::Option<
    unsafe extern "C" fn(
        identifier: GLenum,
        name: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        label: *mut GLchar,
    ),
>;
pub type PFNGLOBJECTPTRLABELPROC = ::core::option::Option<
    unsafe extern "C" fn(ptr: *const ctypes::c_void, length: GLsizei, label: *const GLchar),
>;
pub type PFNGLGETOBJECTPTRLABELPROC = ::core::option::Option<
    unsafe extern "C" fn(
        ptr: *const ctypes::c_void,
        bufSize: GLsizei,
        length: *mut GLsizei,
        label: *mut GLchar,
    ),
>;
extern "C" {
    pub fn glClearBufferData(
        target: GLenum,
        internalformat: GLenum,
        format: GLenum,
        type_: GLenum,
        data: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glClearBufferSubData(
        target: GLenum,
        internalformat: GLenum,
        offset: GLintptr,
        size: GLsizeiptr,
        format: GLenum,
        type_: GLenum,
        data: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glDispatchCompute(num_groups_x: GLuint, num_groups_y: GLuint, num_groups_z: GLuint);
}
extern "C" {
    pub fn glDispatchComputeIndirect(indirect: GLintptr);
}
extern "C" {
    pub fn glCopyImageSubData(
        srcName: GLuint,
        srcTarget: GLenum,
        srcLevel: GLint,
        srcX: GLint,
        srcY: GLint,
        srcZ: GLint,
        dstName: GLuint,
        dstTarget: GLenum,
        dstLevel: GLint,
        dstX: GLint,
        dstY: GLint,
        dstZ: GLint,
        srcWidth: GLsizei,
        srcHeight: GLsizei,
        srcDepth: GLsizei,
    );
}
extern "C" {
    pub fn glFramebufferParameteri(target: GLenum, pname: GLenum, param: GLint);
}
extern "C" {
    pub fn glGetFramebufferParameteriv(target: GLenum, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetInternalformati64v(
        target: GLenum,
        internalformat: GLenum,
        pname: GLenum,
        bufSize: GLsizei,
        params: *mut GLint64,
    );
}
extern "C" {
    pub fn glInvalidateTexSubImage(
        texture: GLuint,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        zoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
    );
}
extern "C" {
    pub fn glInvalidateTexImage(texture: GLuint, level: GLint);
}
extern "C" {
    pub fn glInvalidateBufferSubData(buffer: GLuint, offset: GLintptr, length: GLsizeiptr);
}
extern "C" {
    pub fn glInvalidateBufferData(buffer: GLuint);
}
extern "C" {
    pub fn glInvalidateFramebuffer(
        target: GLenum,
        numAttachments: GLsizei,
        attachments: *const GLenum,
    );
}
extern "C" {
    pub fn glInvalidateSubFramebuffer(
        target: GLenum,
        numAttachments: GLsizei,
        attachments: *const GLenum,
        x: GLint,
        y: GLint,
        width: GLsizei,
        height: GLsizei,
    );
}
extern "C" {
    pub fn glMultiDrawArraysIndirect(
        mode: GLenum,
        indirect: *const ctypes::c_void,
        drawcount: GLsizei,
        stride: GLsizei,
    );
}
extern "C" {
    pub fn glMultiDrawElementsIndirect(
        mode: GLenum,
        type_: GLenum,
        indirect: *const ctypes::c_void,
        drawcount: GLsizei,
        stride: GLsizei,
    );
}
extern "C" {
    pub fn glGetProgramInterfaceiv(
        program: GLuint,
        programInterface: GLenum,
        pname: GLenum,
        params: *mut GLint,
    );
}
extern "C" {
    pub fn glGetProgramResourceIndex(
        program: GLuint,
        programInterface: GLenum,
        name: *const GLchar,
    ) -> GLuint;
}
extern "C" {
    pub fn glGetProgramResourceName(
        program: GLuint,
        programInterface: GLenum,
        index: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        name: *mut GLchar,
    );
}
extern "C" {
    pub fn glGetProgramResourceiv(
        program: GLuint,
        programInterface: GLenum,
        index: GLuint,
        propCount: GLsizei,
        props: *const GLenum,
        bufSize: GLsizei,
        length: *mut GLsizei,
        params: *mut GLint,
    );
}
extern "C" {
    pub fn glGetProgramResourceLocation(
        program: GLuint,
        programInterface: GLenum,
        name: *const GLchar,
    ) -> GLint;
}
extern "C" {
    pub fn glGetProgramResourceLocationIndex(
        program: GLuint,
        programInterface: GLenum,
        name: *const GLchar,
    ) -> GLint;
}
extern "C" {
    pub fn glShaderStorageBlockBinding(
        program: GLuint,
        storageBlockIndex: GLuint,
        storageBlockBinding: GLuint,
    );
}
extern "C" {
    pub fn glTexBufferRange(
        target: GLenum,
        internalformat: GLenum,
        buffer: GLuint,
        offset: GLintptr,
        size: GLsizeiptr,
    );
}
extern "C" {
    pub fn glTexStorage2DMultisample(
        target: GLenum,
        samples: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        fixedsamplelocations: GLboolean,
    );
}
extern "C" {
    pub fn glTexStorage3DMultisample(
        target: GLenum,
        samples: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        fixedsamplelocations: GLboolean,
    );
}
extern "C" {
    pub fn glTextureView(
        texture: GLuint,
        target: GLenum,
        origtexture: GLuint,
        internalformat: GLenum,
        minlevel: GLuint,
        numlevels: GLuint,
        minlayer: GLuint,
        numlayers: GLuint,
    );
}
extern "C" {
    pub fn glBindVertexBuffer(
        bindingindex: GLuint,
        buffer: GLuint,
        offset: GLintptr,
        stride: GLsizei,
    );
}
extern "C" {
    pub fn glVertexAttribFormat(
        attribindex: GLuint,
        size: GLint,
        type_: GLenum,
        normalized: GLboolean,
        relativeoffset: GLuint,
    );
}
extern "C" {
    pub fn glVertexAttribIFormat(
        attribindex: GLuint,
        size: GLint,
        type_: GLenum,
        relativeoffset: GLuint,
    );
}
extern "C" {
    pub fn glVertexAttribLFormat(
        attribindex: GLuint,
        size: GLint,
        type_: GLenum,
        relativeoffset: GLuint,
    );
}
extern "C" {
    pub fn glVertexAttribBinding(attribindex: GLuint, bindingindex: GLuint);
}
extern "C" {
    pub fn glVertexBindingDivisor(bindingindex: GLuint, divisor: GLuint);
}
extern "C" {
    pub fn glDebugMessageControl(
        source: GLenum,
        type_: GLenum,
        severity: GLenum,
        count: GLsizei,
        ids: *const GLuint,
        enabled: GLboolean,
    );
}
extern "C" {
    pub fn glDebugMessageInsert(
        source: GLenum,
        type_: GLenum,
        id: GLuint,
        severity: GLenum,
        length: GLsizei,
        buf: *const GLchar,
    );
}
extern "C" {
    pub fn glDebugMessageCallback(callback: GLDEBUGPROC, userParam: *const ctypes::c_void);
}
extern "C" {
    pub fn glGetDebugMessageLog(
        count: GLuint,
        bufSize: GLsizei,
        sources: *mut GLenum,
        types: *mut GLenum,
        ids: *mut GLuint,
        severities: *mut GLenum,
        lengths: *mut GLsizei,
        messageLog: *mut GLchar,
    ) -> GLuint;
}
extern "C" {
    pub fn glPushDebugGroup(source: GLenum, id: GLuint, length: GLsizei, message: *const GLchar);
}
extern "C" {
    pub fn glPopDebugGroup();
}
extern "C" {
    pub fn glObjectLabel(identifier: GLenum, name: GLuint, length: GLsizei, label: *const GLchar);
}
extern "C" {
    pub fn glGetObjectLabel(
        identifier: GLenum,
        name: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        label: *mut GLchar,
    );
}
extern "C" {
    pub fn glObjectPtrLabel(ptr: *const ctypes::c_void, length: GLsizei, label: *const GLchar);
}
extern "C" {
    pub fn glGetObjectPtrLabel(
        ptr: *const ctypes::c_void,
        bufSize: GLsizei,
        length: *mut GLsizei,
        label: *mut GLchar,
    );
}
pub type PFNGLBUFFERSTORAGEPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        size: GLsizeiptr,
        data: *const ctypes::c_void,
        flags: GLbitfield,
    ),
>;
pub type PFNGLCLEARTEXIMAGEPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        level: GLint,
        format: GLenum,
        type_: GLenum,
        data: *const ctypes::c_void,
    ),
>;
pub type PFNGLCLEARTEXSUBIMAGEPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        zoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        format: GLenum,
        type_: GLenum,
        data: *const ctypes::c_void,
    ),
>;
pub type PFNGLBINDBUFFERSBASEPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, first: GLuint, count: GLsizei, buffers: *const GLuint),
>;
pub type PFNGLBINDBUFFERSRANGEPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        first: GLuint,
        count: GLsizei,
        buffers: *const GLuint,
        offsets: *const GLintptr,
        sizes: *const GLsizeiptr,
    ),
>;
pub type PFNGLBINDTEXTURESPROC = ::core::option::Option<
    unsafe extern "C" fn(first: GLuint, count: GLsizei, textures: *const GLuint),
>;
pub type PFNGLBINDSAMPLERSPROC = ::core::option::Option<
    unsafe extern "C" fn(first: GLuint, count: GLsizei, samplers: *const GLuint),
>;
pub type PFNGLBINDIMAGETEXTURESPROC = ::core::option::Option<
    unsafe extern "C" fn(first: GLuint, count: GLsizei, textures: *const GLuint),
>;
pub type PFNGLBINDVERTEXBUFFERSPROC = ::core::option::Option<
    unsafe extern "C" fn(
        first: GLuint,
        count: GLsizei,
        buffers: *const GLuint,
        offsets: *const GLintptr,
        strides: *const GLsizei,
    ),
>;
extern "C" {
    pub fn glBufferStorage(
        target: GLenum,
        size: GLsizeiptr,
        data: *const ctypes::c_void,
        flags: GLbitfield,
    );
}
extern "C" {
    pub fn glClearTexImage(
        texture: GLuint,
        level: GLint,
        format: GLenum,
        type_: GLenum,
        data: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glClearTexSubImage(
        texture: GLuint,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        zoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        format: GLenum,
        type_: GLenum,
        data: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glBindBuffersBase(target: GLenum, first: GLuint, count: GLsizei, buffers: *const GLuint);
}
extern "C" {
    pub fn glBindBuffersRange(
        target: GLenum,
        first: GLuint,
        count: GLsizei,
        buffers: *const GLuint,
        offsets: *const GLintptr,
        sizes: *const GLsizeiptr,
    );
}
extern "C" {
    pub fn glBindTextures(first: GLuint, count: GLsizei, textures: *const GLuint);
}
extern "C" {
    pub fn glBindSamplers(first: GLuint, count: GLsizei, samplers: *const GLuint);
}
extern "C" {
    pub fn glBindImageTextures(first: GLuint, count: GLsizei, textures: *const GLuint);
}
extern "C" {
    pub fn glBindVertexBuffers(
        first: GLuint,
        count: GLsizei,
        buffers: *const GLuint,
        offsets: *const GLintptr,
        strides: *const GLsizei,
    );
}
pub type GLuint64EXT = u64;
pub type PFNGLGETTEXTUREHANDLEARBPROC =
    ::core::option::Option<unsafe extern "C" fn(texture: GLuint) -> GLuint64>;
pub type PFNGLGETTEXTURESAMPLERHANDLEARBPROC =
    ::core::option::Option<unsafe extern "C" fn(texture: GLuint, sampler: GLuint) -> GLuint64>;
pub type PFNGLMAKETEXTUREHANDLERESIDENTARBPROC =
    ::core::option::Option<unsafe extern "C" fn(handle: GLuint64)>;
pub type PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC =
    ::core::option::Option<unsafe extern "C" fn(handle: GLuint64)>;
pub type PFNGLGETIMAGEHANDLEARBPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        level: GLint,
        layered: GLboolean,
        layer: GLint,
        format: GLenum,
    ) -> GLuint64,
>;
pub type PFNGLMAKEIMAGEHANDLERESIDENTARBPROC =
    ::core::option::Option<unsafe extern "C" fn(handle: GLuint64, access: GLenum)>;
pub type PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC =
    ::core::option::Option<unsafe extern "C" fn(handle: GLuint64)>;
pub type PFNGLUNIFORMHANDLEUI64ARBPROC =
    ::core::option::Option<unsafe extern "C" fn(location: GLint, value: GLuint64)>;
pub type PFNGLUNIFORMHANDLEUI64VARBPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLuint64),
>;
pub type PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC =
    ::core::option::Option<unsafe extern "C" fn(program: GLuint, location: GLint, value: GLuint64)>;
pub type PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, values: *const GLuint64),
>;
pub type PFNGLISTEXTUREHANDLERESIDENTARBPROC =
    ::core::option::Option<unsafe extern "C" fn(handle: GLuint64) -> GLboolean>;
pub type PFNGLISIMAGEHANDLERESIDENTARBPROC =
    ::core::option::Option<unsafe extern "C" fn(handle: GLuint64) -> GLboolean>;
pub type PFNGLVERTEXATTRIBL1UI64ARBPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, x: GLuint64EXT)>;
pub type PFNGLVERTEXATTRIBL1UI64VARBPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLuint64EXT)>;
pub type PFNGLGETVERTEXATTRIBLUI64VARBPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, pname: GLenum, params: *mut GLuint64EXT),
>;
extern "C" {
    pub fn glGetTextureHandleARB(texture: GLuint) -> GLuint64;
}
extern "C" {
    pub fn glGetTextureSamplerHandleARB(texture: GLuint, sampler: GLuint) -> GLuint64;
}
extern "C" {
    pub fn glMakeTextureHandleResidentARB(handle: GLuint64);
}
extern "C" {
    pub fn glMakeTextureHandleNonResidentARB(handle: GLuint64);
}
extern "C" {
    pub fn glGetImageHandleARB(
        texture: GLuint,
        level: GLint,
        layered: GLboolean,
        layer: GLint,
        format: GLenum,
    ) -> GLuint64;
}
extern "C" {
    pub fn glMakeImageHandleResidentARB(handle: GLuint64, access: GLenum);
}
extern "C" {
    pub fn glMakeImageHandleNonResidentARB(handle: GLuint64);
}
extern "C" {
    pub fn glUniformHandleui64ARB(location: GLint, value: GLuint64);
}
extern "C" {
    pub fn glUniformHandleui64vARB(location: GLint, count: GLsizei, value: *const GLuint64);
}
extern "C" {
    pub fn glProgramUniformHandleui64ARB(program: GLuint, location: GLint, value: GLuint64);
}
extern "C" {
    pub fn glProgramUniformHandleui64vARB(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        values: *const GLuint64,
    );
}
extern "C" {
    pub fn glIsTextureHandleResidentARB(handle: GLuint64) -> GLboolean;
}
extern "C" {
    pub fn glIsImageHandleResidentARB(handle: GLuint64) -> GLboolean;
}
extern "C" {
    pub fn glVertexAttribL1ui64ARB(index: GLuint, x: GLuint64EXT);
}
extern "C" {
    pub fn glVertexAttribL1ui64vARB(index: GLuint, v: *const GLuint64EXT);
}
extern "C" {
    pub fn glGetVertexAttribLui64vARB(index: GLuint, pname: GLenum, params: *mut GLuint64EXT);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cl_context {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cl_event {
    _unused: [u8; 0],
}
pub type PFNGLCREATESYNCFROMCLEVENTARBPROC = ::core::option::Option<
    unsafe extern "C" fn(
        context: *mut _cl_context,
        event: *mut _cl_event,
        flags: GLbitfield,
    ) -> GLsync,
>;
extern "C" {
    pub fn glCreateSyncFromCLeventARB(
        context: *mut _cl_context,
        event: *mut _cl_event,
        flags: GLbitfield,
    ) -> GLsync;
}
pub type PFNGLCLAMPCOLORARBPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, clamp: GLenum)>;
extern "C" {
    pub fn glClampColorARB(target: GLenum, clamp: GLenum);
}
pub type PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC = ::core::option::Option<
    unsafe extern "C" fn(
        num_groups_x: GLuint,
        num_groups_y: GLuint,
        num_groups_z: GLuint,
        group_size_x: GLuint,
        group_size_y: GLuint,
        group_size_z: GLuint,
    ),
>;
extern "C" {
    pub fn glDispatchComputeGroupSizeARB(
        num_groups_x: GLuint,
        num_groups_y: GLuint,
        num_groups_z: GLuint,
        group_size_x: GLuint,
        group_size_y: GLuint,
        group_size_z: GLuint,
    );
}
pub type GLDEBUGPROCARB = ::core::option::Option<
    unsafe extern "C" fn(
        source: GLenum,
        type_: GLenum,
        id: GLuint,
        severity: GLenum,
        length: GLsizei,
        message: *const GLchar,
        userParam: *const ctypes::c_void,
    ),
>;
pub type PFNGLDEBUGMESSAGECONTROLARBPROC = ::core::option::Option<
    unsafe extern "C" fn(
        source: GLenum,
        type_: GLenum,
        severity: GLenum,
        count: GLsizei,
        ids: *const GLuint,
        enabled: GLboolean,
    ),
>;
pub type PFNGLDEBUGMESSAGEINSERTARBPROC = ::core::option::Option<
    unsafe extern "C" fn(
        source: GLenum,
        type_: GLenum,
        id: GLuint,
        severity: GLenum,
        length: GLsizei,
        buf: *const GLchar,
    ),
>;
pub type PFNGLDEBUGMESSAGECALLBACKARBPROC = ::core::option::Option<
    unsafe extern "C" fn(callback: GLDEBUGPROCARB, userParam: *const ctypes::c_void),
>;
pub type PFNGLGETDEBUGMESSAGELOGARBPROC = ::core::option::Option<
    unsafe extern "C" fn(
        count: GLuint,
        bufSize: GLsizei,
        sources: *mut GLenum,
        types: *mut GLenum,
        ids: *mut GLuint,
        severities: *mut GLenum,
        lengths: *mut GLsizei,
        messageLog: *mut GLchar,
    ) -> GLuint,
>;
extern "C" {
    pub fn glDebugMessageControlARB(
        source: GLenum,
        type_: GLenum,
        severity: GLenum,
        count: GLsizei,
        ids: *const GLuint,
        enabled: GLboolean,
    );
}
extern "C" {
    pub fn glDebugMessageInsertARB(
        source: GLenum,
        type_: GLenum,
        id: GLuint,
        severity: GLenum,
        length: GLsizei,
        buf: *const GLchar,
    );
}
extern "C" {
    pub fn glDebugMessageCallbackARB(callback: GLDEBUGPROCARB, userParam: *const ctypes::c_void);
}
extern "C" {
    pub fn glGetDebugMessageLogARB(
        count: GLuint,
        bufSize: GLsizei,
        sources: *mut GLenum,
        types: *mut GLenum,
        ids: *mut GLuint,
        severities: *mut GLenum,
        lengths: *mut GLsizei,
        messageLog: *mut GLchar,
    ) -> GLuint;
}
pub type PFNGLDRAWBUFFERSARBPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, bufs: *const GLenum)>;
extern "C" {
    pub fn glDrawBuffersARB(n: GLsizei, bufs: *const GLenum);
}
pub type PFNGLBLENDEQUATIONIARBPROC =
    ::core::option::Option<unsafe extern "C" fn(buf: GLuint, mode: GLenum)>;
pub type PFNGLBLENDEQUATIONSEPARATEIARBPROC =
    ::core::option::Option<unsafe extern "C" fn(buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum)>;
pub type PFNGLBLENDFUNCIARBPROC =
    ::core::option::Option<unsafe extern "C" fn(buf: GLuint, src: GLenum, dst: GLenum)>;
pub type PFNGLBLENDFUNCSEPARATEIARBPROC = ::core::option::Option<
    unsafe extern "C" fn(
        buf: GLuint,
        srcRGB: GLenum,
        dstRGB: GLenum,
        srcAlpha: GLenum,
        dstAlpha: GLenum,
    ),
>;
extern "C" {
    pub fn glBlendEquationiARB(buf: GLuint, mode: GLenum);
}
extern "C" {
    pub fn glBlendEquationSeparateiARB(buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum);
}
extern "C" {
    pub fn glBlendFunciARB(buf: GLuint, src: GLenum, dst: GLenum);
}
extern "C" {
    pub fn glBlendFuncSeparateiARB(
        buf: GLuint,
        srcRGB: GLenum,
        dstRGB: GLenum,
        srcAlpha: GLenum,
        dstAlpha: GLenum,
    );
}
pub type PFNGLDRAWARRAYSINSTANCEDARBPROC = ::core::option::Option<
    unsafe extern "C" fn(mode: GLenum, first: GLint, count: GLsizei, primcount: GLsizei),
>;
pub type PFNGLDRAWELEMENTSINSTANCEDARBPROC = ::core::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        count: GLsizei,
        type_: GLenum,
        indices: *const ctypes::c_void,
        primcount: GLsizei,
    ),
>;
extern "C" {
    pub fn glDrawArraysInstancedARB(mode: GLenum, first: GLint, count: GLsizei, primcount: GLsizei);
}
extern "C" {
    pub fn glDrawElementsInstancedARB(
        mode: GLenum,
        count: GLsizei,
        type_: GLenum,
        indices: *const ctypes::c_void,
        primcount: GLsizei,
    );
}
pub type PFNGLPROGRAMSTRINGARBPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        format: GLenum,
        len: GLsizei,
        string: *const ctypes::c_void,
    ),
>;
pub type PFNGLBINDPROGRAMARBPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, program: GLuint)>;
pub type PFNGLDELETEPROGRAMSARBPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, programs: *const GLuint)>;
pub type PFNGLGENPROGRAMSARBPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, programs: *mut GLuint)>;
pub type PFNGLPROGRAMENVPARAMETER4DARBPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        index: GLuint,
        x: GLdouble,
        y: GLdouble,
        z: GLdouble,
        w: GLdouble,
    ),
>;
pub type PFNGLPROGRAMENVPARAMETER4DVARBPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, index: GLuint, params: *const GLdouble),
>;
pub type PFNGLPROGRAMENVPARAMETER4FARBPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        index: GLuint,
        x: GLfloat,
        y: GLfloat,
        z: GLfloat,
        w: GLfloat,
    ),
>;
pub type PFNGLPROGRAMENVPARAMETER4FVARBPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, index: GLuint, params: *const GLfloat),
>;
pub type PFNGLPROGRAMLOCALPARAMETER4DARBPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        index: GLuint,
        x: GLdouble,
        y: GLdouble,
        z: GLdouble,
        w: GLdouble,
    ),
>;
pub type PFNGLPROGRAMLOCALPARAMETER4DVARBPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, index: GLuint, params: *const GLdouble),
>;
pub type PFNGLPROGRAMLOCALPARAMETER4FARBPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        index: GLuint,
        x: GLfloat,
        y: GLfloat,
        z: GLfloat,
        w: GLfloat,
    ),
>;
pub type PFNGLPROGRAMLOCALPARAMETER4FVARBPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, index: GLuint, params: *const GLfloat),
>;
pub type PFNGLGETPROGRAMENVPARAMETERDVARBPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, index: GLuint, params: *mut GLdouble),
>;
pub type PFNGLGETPROGRAMENVPARAMETERFVARBPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, index: GLuint, params: *mut GLfloat),
>;
pub type PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, index: GLuint, params: *mut GLdouble),
>;
pub type PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, index: GLuint, params: *mut GLfloat),
>;
pub type PFNGLGETPROGRAMIVARBPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLint)>;
pub type PFNGLGETPROGRAMSTRINGARBPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, pname: GLenum, string: *mut ctypes::c_void),
>;
pub type PFNGLISPROGRAMARBPROC =
    ::core::option::Option<unsafe extern "C" fn(program: GLuint) -> GLboolean>;
extern "C" {
    pub fn glProgramStringARB(
        target: GLenum,
        format: GLenum,
        len: GLsizei,
        string: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glBindProgramARB(target: GLenum, program: GLuint);
}
extern "C" {
    pub fn glDeleteProgramsARB(n: GLsizei, programs: *const GLuint);
}
extern "C" {
    pub fn glGenProgramsARB(n: GLsizei, programs: *mut GLuint);
}
extern "C" {
    pub fn glProgramEnvParameter4dARB(
        target: GLenum,
        index: GLuint,
        x: GLdouble,
        y: GLdouble,
        z: GLdouble,
        w: GLdouble,
    );
}
extern "C" {
    pub fn glProgramEnvParameter4dvARB(target: GLenum, index: GLuint, params: *const GLdouble);
}
extern "C" {
    pub fn glProgramEnvParameter4fARB(
        target: GLenum,
        index: GLuint,
        x: GLfloat,
        y: GLfloat,
        z: GLfloat,
        w: GLfloat,
    );
}
extern "C" {
    pub fn glProgramEnvParameter4fvARB(target: GLenum, index: GLuint, params: *const GLfloat);
}
extern "C" {
    pub fn glProgramLocalParameter4dARB(
        target: GLenum,
        index: GLuint,
        x: GLdouble,
        y: GLdouble,
        z: GLdouble,
        w: GLdouble,
    );
}
extern "C" {
    pub fn glProgramLocalParameter4dvARB(target: GLenum, index: GLuint, params: *const GLdouble);
}
extern "C" {
    pub fn glProgramLocalParameter4fARB(
        target: GLenum,
        index: GLuint,
        x: GLfloat,
        y: GLfloat,
        z: GLfloat,
        w: GLfloat,
    );
}
extern "C" {
    pub fn glProgramLocalParameter4fvARB(target: GLenum, index: GLuint, params: *const GLfloat);
}
extern "C" {
    pub fn glGetProgramEnvParameterdvARB(target: GLenum, index: GLuint, params: *mut GLdouble);
}
extern "C" {
    pub fn glGetProgramEnvParameterfvARB(target: GLenum, index: GLuint, params: *mut GLfloat);
}
extern "C" {
    pub fn glGetProgramLocalParameterdvARB(target: GLenum, index: GLuint, params: *mut GLdouble);
}
extern "C" {
    pub fn glGetProgramLocalParameterfvARB(target: GLenum, index: GLuint, params: *mut GLfloat);
}
extern "C" {
    pub fn glGetProgramivARB(target: GLenum, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetProgramStringARB(target: GLenum, pname: GLenum, string: *mut ctypes::c_void);
}
extern "C" {
    pub fn glIsProgramARB(program: GLuint) -> GLboolean;
}
pub type PFNGLPROGRAMPARAMETERIARBPROC =
    ::core::option::Option<unsafe extern "C" fn(program: GLuint, pname: GLenum, value: GLint)>;
pub type PFNGLFRAMEBUFFERTEXTUREARBPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint),
>;
pub type PFNGLFRAMEBUFFERTEXTURELAYERARBPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        attachment: GLenum,
        texture: GLuint,
        level: GLint,
        layer: GLint,
    ),
>;
pub type PFNGLFRAMEBUFFERTEXTUREFACEARBPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        attachment: GLenum,
        texture: GLuint,
        level: GLint,
        face: GLenum,
    ),
>;
extern "C" {
    pub fn glProgramParameteriARB(program: GLuint, pname: GLenum, value: GLint);
}
extern "C" {
    pub fn glFramebufferTextureARB(
        target: GLenum,
        attachment: GLenum,
        texture: GLuint,
        level: GLint,
    );
}
extern "C" {
    pub fn glFramebufferTextureLayerARB(
        target: GLenum,
        attachment: GLenum,
        texture: GLuint,
        level: GLint,
        layer: GLint,
    );
}
extern "C" {
    pub fn glFramebufferTextureFaceARB(
        target: GLenum,
        attachment: GLenum,
        texture: GLuint,
        level: GLint,
        face: GLenum,
    );
}
pub type GLhalfARB = ctypes::c_ushort;
pub type PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC = ::core::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        indirect: GLintptr,
        drawcount: GLintptr,
        maxdrawcount: GLsizei,
        stride: GLsizei,
    ),
>;
pub type PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC = ::core::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        type_: GLenum,
        indirect: GLintptr,
        drawcount: GLintptr,
        maxdrawcount: GLsizei,
        stride: GLsizei,
    ),
>;
extern "C" {
    pub fn glMultiDrawArraysIndirectCountARB(
        mode: GLenum,
        indirect: GLintptr,
        drawcount: GLintptr,
        maxdrawcount: GLsizei,
        stride: GLsizei,
    );
}
extern "C" {
    pub fn glMultiDrawElementsIndirectCountARB(
        mode: GLenum,
        type_: GLenum,
        indirect: GLintptr,
        drawcount: GLintptr,
        maxdrawcount: GLsizei,
        stride: GLsizei,
    );
}
pub type PFNGLVERTEXATTRIBDIVISORARBPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, divisor: GLuint)>;
extern "C" {
    pub fn glVertexAttribDivisorARB(index: GLuint, divisor: GLuint);
}
pub type PFNGLCURRENTPALETTEMATRIXARBPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLint)>;
pub type PFNGLMATRIXINDEXUBVARBPROC =
    ::core::option::Option<unsafe extern "C" fn(size: GLint, indices: *const GLubyte)>;
pub type PFNGLMATRIXINDEXUSVARBPROC =
    ::core::option::Option<unsafe extern "C" fn(size: GLint, indices: *const GLushort)>;
pub type PFNGLMATRIXINDEXUIVARBPROC =
    ::core::option::Option<unsafe extern "C" fn(size: GLint, indices: *const GLuint)>;
pub type PFNGLMATRIXINDEXPOINTERARBPROC = ::core::option::Option<
    unsafe extern "C" fn(
        size: GLint,
        type_: GLenum,
        stride: GLsizei,
        pointer: *const ctypes::c_void,
    ),
>;
extern "C" {
    pub fn glCurrentPaletteMatrixARB(index: GLint);
}
extern "C" {
    pub fn glMatrixIndexubvARB(size: GLint, indices: *const GLubyte);
}
extern "C" {
    pub fn glMatrixIndexusvARB(size: GLint, indices: *const GLushort);
}
extern "C" {
    pub fn glMatrixIndexuivARB(size: GLint, indices: *const GLuint);
}
extern "C" {
    pub fn glMatrixIndexPointerARB(
        size: GLint,
        type_: GLenum,
        stride: GLsizei,
        pointer: *const ctypes::c_void,
    );
}
pub type PFNGLSAMPLECOVERAGEARBPROC =
    ::core::option::Option<unsafe extern "C" fn(value: GLfloat, invert: GLboolean)>;
extern "C" {
    pub fn glSampleCoverageARB(value: GLfloat, invert: GLboolean);
}
pub type PFNGLGENQUERIESARBPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, ids: *mut GLuint)>;
pub type PFNGLDELETEQUERIESARBPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, ids: *const GLuint)>;
pub type PFNGLISQUERYARBPROC =
    ::core::option::Option<unsafe extern "C" fn(id: GLuint) -> GLboolean>;
pub type PFNGLBEGINQUERYARBPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, id: GLuint)>;
pub type PFNGLENDQUERYARBPROC = ::core::option::Option<unsafe extern "C" fn(target: GLenum)>;
pub type PFNGLGETQUERYIVARBPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLint)>;
pub type PFNGLGETQUERYOBJECTIVARBPROC =
    ::core::option::Option<unsafe extern "C" fn(id: GLuint, pname: GLenum, params: *mut GLint)>;
pub type PFNGLGETQUERYOBJECTUIVARBPROC =
    ::core::option::Option<unsafe extern "C" fn(id: GLuint, pname: GLenum, params: *mut GLuint)>;
extern "C" {
    pub fn glGenQueriesARB(n: GLsizei, ids: *mut GLuint);
}
extern "C" {
    pub fn glDeleteQueriesARB(n: GLsizei, ids: *const GLuint);
}
extern "C" {
    pub fn glIsQueryARB(id: GLuint) -> GLboolean;
}
extern "C" {
    pub fn glBeginQueryARB(target: GLenum, id: GLuint);
}
extern "C" {
    pub fn glEndQueryARB(target: GLenum);
}
extern "C" {
    pub fn glGetQueryivARB(target: GLenum, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetQueryObjectivARB(id: GLuint, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetQueryObjectuivARB(id: GLuint, pname: GLenum, params: *mut GLuint);
}
pub type PFNGLPOINTPARAMETERFARBPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, param: GLfloat)>;
pub type PFNGLPOINTPARAMETERFVARBPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, params: *const GLfloat)>;
extern "C" {
    pub fn glPointParameterfARB(pname: GLenum, param: GLfloat);
}
extern "C" {
    pub fn glPointParameterfvARB(pname: GLenum, params: *const GLfloat);
}
pub type PFNGLGETGRAPHICSRESETSTATUSARBPROC =
    ::core::option::Option<unsafe extern "C" fn() -> GLenum>;
pub type PFNGLGETNTEXIMAGEARBPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        format: GLenum,
        type_: GLenum,
        bufSize: GLsizei,
        img: *mut ctypes::c_void,
    ),
>;
pub type PFNGLREADNPIXELSARBPROC = ::core::option::Option<
    unsafe extern "C" fn(
        x: GLint,
        y: GLint,
        width: GLsizei,
        height: GLsizei,
        format: GLenum,
        type_: GLenum,
        bufSize: GLsizei,
        data: *mut ctypes::c_void,
    ),
>;
pub type PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, lod: GLint, bufSize: GLsizei, img: *mut ctypes::c_void),
>;
pub type PFNGLGETNUNIFORMFVARBPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, bufSize: GLsizei, params: *mut GLfloat),
>;
pub type PFNGLGETNUNIFORMIVARBPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, bufSize: GLsizei, params: *mut GLint),
>;
pub type PFNGLGETNUNIFORMUIVARBPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, bufSize: GLsizei, params: *mut GLuint),
>;
pub type PFNGLGETNUNIFORMDVARBPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, bufSize: GLsizei, params: *mut GLdouble),
>;
pub type PFNGLGETNMAPDVARBPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, query: GLenum, bufSize: GLsizei, v: *mut GLdouble),
>;
pub type PFNGLGETNMAPFVARBPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, query: GLenum, bufSize: GLsizei, v: *mut GLfloat),
>;
pub type PFNGLGETNMAPIVARBPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, query: GLenum, bufSize: GLsizei, v: *mut GLint),
>;
pub type PFNGLGETNPIXELMAPFVARBPROC = ::core::option::Option<
    unsafe extern "C" fn(map: GLenum, bufSize: GLsizei, values: *mut GLfloat),
>;
pub type PFNGLGETNPIXELMAPUIVARBPROC = ::core::option::Option<
    unsafe extern "C" fn(map: GLenum, bufSize: GLsizei, values: *mut GLuint),
>;
pub type PFNGLGETNPIXELMAPUSVARBPROC = ::core::option::Option<
    unsafe extern "C" fn(map: GLenum, bufSize: GLsizei, values: *mut GLushort),
>;
pub type PFNGLGETNPOLYGONSTIPPLEARBPROC =
    ::core::option::Option<unsafe extern "C" fn(bufSize: GLsizei, pattern: *mut GLubyte)>;
pub type PFNGLGETNCOLORTABLEARBPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        format: GLenum,
        type_: GLenum,
        bufSize: GLsizei,
        table: *mut ctypes::c_void,
    ),
>;
pub type PFNGLGETNCONVOLUTIONFILTERARBPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        format: GLenum,
        type_: GLenum,
        bufSize: GLsizei,
        image: *mut ctypes::c_void,
    ),
>;
pub type PFNGLGETNSEPARABLEFILTERARBPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        format: GLenum,
        type_: GLenum,
        rowBufSize: GLsizei,
        row: *mut ctypes::c_void,
        columnBufSize: GLsizei,
        column: *mut ctypes::c_void,
        span: *mut ctypes::c_void,
    ),
>;
pub type PFNGLGETNHISTOGRAMARBPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        reset: GLboolean,
        format: GLenum,
        type_: GLenum,
        bufSize: GLsizei,
        values: *mut ctypes::c_void,
    ),
>;
pub type PFNGLGETNMINMAXARBPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        reset: GLboolean,
        format: GLenum,
        type_: GLenum,
        bufSize: GLsizei,
        values: *mut ctypes::c_void,
    ),
>;
extern "C" {
    pub fn glGetGraphicsResetStatusARB() -> GLenum;
}
extern "C" {
    pub fn glGetnTexImageARB(
        target: GLenum,
        level: GLint,
        format: GLenum,
        type_: GLenum,
        bufSize: GLsizei,
        img: *mut ctypes::c_void,
    );
}
extern "C" {
    pub fn glReadnPixelsARB(
        x: GLint,
        y: GLint,
        width: GLsizei,
        height: GLsizei,
        format: GLenum,
        type_: GLenum,
        bufSize: GLsizei,
        data: *mut ctypes::c_void,
    );
}
extern "C" {
    pub fn glGetnCompressedTexImageARB(
        target: GLenum,
        lod: GLint,
        bufSize: GLsizei,
        img: *mut ctypes::c_void,
    );
}
extern "C" {
    pub fn glGetnUniformfvARB(
        program: GLuint,
        location: GLint,
        bufSize: GLsizei,
        params: *mut GLfloat,
    );
}
extern "C" {
    pub fn glGetnUniformivARB(
        program: GLuint,
        location: GLint,
        bufSize: GLsizei,
        params: *mut GLint,
    );
}
extern "C" {
    pub fn glGetnUniformuivARB(
        program: GLuint,
        location: GLint,
        bufSize: GLsizei,
        params: *mut GLuint,
    );
}
extern "C" {
    pub fn glGetnUniformdvARB(
        program: GLuint,
        location: GLint,
        bufSize: GLsizei,
        params: *mut GLdouble,
    );
}
extern "C" {
    pub fn glGetnMapdvARB(target: GLenum, query: GLenum, bufSize: GLsizei, v: *mut GLdouble);
}
extern "C" {
    pub fn glGetnMapfvARB(target: GLenum, query: GLenum, bufSize: GLsizei, v: *mut GLfloat);
}
extern "C" {
    pub fn glGetnMapivARB(target: GLenum, query: GLenum, bufSize: GLsizei, v: *mut GLint);
}
extern "C" {
    pub fn glGetnPixelMapfvARB(map: GLenum, bufSize: GLsizei, values: *mut GLfloat);
}
extern "C" {
    pub fn glGetnPixelMapuivARB(map: GLenum, bufSize: GLsizei, values: *mut GLuint);
}
extern "C" {
    pub fn glGetnPixelMapusvARB(map: GLenum, bufSize: GLsizei, values: *mut GLushort);
}
extern "C" {
    pub fn glGetnPolygonStippleARB(bufSize: GLsizei, pattern: *mut GLubyte);
}
extern "C" {
    pub fn glGetnColorTableARB(
        target: GLenum,
        format: GLenum,
        type_: GLenum,
        bufSize: GLsizei,
        table: *mut ctypes::c_void,
    );
}
extern "C" {
    pub fn glGetnConvolutionFilterARB(
        target: GLenum,
        format: GLenum,
        type_: GLenum,
        bufSize: GLsizei,
        image: *mut ctypes::c_void,
    );
}
extern "C" {
    pub fn glGetnSeparableFilterARB(
        target: GLenum,
        format: GLenum,
        type_: GLenum,
        rowBufSize: GLsizei,
        row: *mut ctypes::c_void,
        columnBufSize: GLsizei,
        column: *mut ctypes::c_void,
        span: *mut ctypes::c_void,
    );
}
extern "C" {
    pub fn glGetnHistogramARB(
        target: GLenum,
        reset: GLboolean,
        format: GLenum,
        type_: GLenum,
        bufSize: GLsizei,
        values: *mut ctypes::c_void,
    );
}
extern "C" {
    pub fn glGetnMinmaxARB(
        target: GLenum,
        reset: GLboolean,
        format: GLenum,
        type_: GLenum,
        bufSize: GLsizei,
        values: *mut ctypes::c_void,
    );
}
pub type PFNGLMINSAMPLESHADINGARBPROC =
    ::core::option::Option<unsafe extern "C" fn(value: GLfloat)>;
extern "C" {
    pub fn glMinSampleShadingARB(value: GLfloat);
}
pub type GLhandleARB = ctypes::c_uint;
pub type GLcharARB = ctypes::c_char;
pub type PFNGLDELETEOBJECTARBPROC = ::core::option::Option<unsafe extern "C" fn(obj: GLhandleARB)>;
pub type PFNGLGETHANDLEARBPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum) -> GLhandleARB>;
pub type PFNGLDETACHOBJECTARBPROC = ::core::option::Option<
    unsafe extern "C" fn(containerObj: GLhandleARB, attachedObj: GLhandleARB),
>;
pub type PFNGLCREATESHADEROBJECTARBPROC =
    ::core::option::Option<unsafe extern "C" fn(shaderType: GLenum) -> GLhandleARB>;
pub type PFNGLSHADERSOURCEARBPROC = ::core::option::Option<
    unsafe extern "C" fn(
        shaderObj: GLhandleARB,
        count: GLsizei,
        string: *mut *const GLcharARB,
        length: *const GLint,
    ),
>;
pub type PFNGLCOMPILESHADERARBPROC =
    ::core::option::Option<unsafe extern "C" fn(shaderObj: GLhandleARB)>;
pub type PFNGLCREATEPROGRAMOBJECTARBPROC =
    ::core::option::Option<unsafe extern "C" fn() -> GLhandleARB>;
pub type PFNGLATTACHOBJECTARBPROC =
    ::core::option::Option<unsafe extern "C" fn(containerObj: GLhandleARB, obj: GLhandleARB)>;
pub type PFNGLLINKPROGRAMARBPROC =
    ::core::option::Option<unsafe extern "C" fn(programObj: GLhandleARB)>;
pub type PFNGLUSEPROGRAMOBJECTARBPROC =
    ::core::option::Option<unsafe extern "C" fn(programObj: GLhandleARB)>;
pub type PFNGLVALIDATEPROGRAMARBPROC =
    ::core::option::Option<unsafe extern "C" fn(programObj: GLhandleARB)>;
pub type PFNGLUNIFORM1FARBPROC =
    ::core::option::Option<unsafe extern "C" fn(location: GLint, v0: GLfloat)>;
pub type PFNGLUNIFORM2FARBPROC =
    ::core::option::Option<unsafe extern "C" fn(location: GLint, v0: GLfloat, v1: GLfloat)>;
pub type PFNGLUNIFORM3FARBPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat),
>;
pub type PFNGLUNIFORM4FARBPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat),
>;
pub type PFNGLUNIFORM1IARBPROC =
    ::core::option::Option<unsafe extern "C" fn(location: GLint, v0: GLint)>;
pub type PFNGLUNIFORM2IARBPROC =
    ::core::option::Option<unsafe extern "C" fn(location: GLint, v0: GLint, v1: GLint)>;
pub type PFNGLUNIFORM3IARBPROC =
    ::core::option::Option<unsafe extern "C" fn(location: GLint, v0: GLint, v1: GLint, v2: GLint)>;
pub type PFNGLUNIFORM4IARBPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint),
>;
pub type PFNGLUNIFORM1FVARBPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLfloat),
>;
pub type PFNGLUNIFORM2FVARBPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLfloat),
>;
pub type PFNGLUNIFORM3FVARBPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLfloat),
>;
pub type PFNGLUNIFORM4FVARBPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLfloat),
>;
pub type PFNGLUNIFORM1IVARBPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLint),
>;
pub type PFNGLUNIFORM2IVARBPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLint),
>;
pub type PFNGLUNIFORM3IVARBPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLint),
>;
pub type PFNGLUNIFORM4IVARBPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLint),
>;
pub type PFNGLUNIFORMMATRIX2FVARBPROC = ::core::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLUNIFORMMATRIX3FVARBPROC = ::core::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLUNIFORMMATRIX4FVARBPROC = ::core::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLGETOBJECTPARAMETERFVARBPROC = ::core::option::Option<
    unsafe extern "C" fn(obj: GLhandleARB, pname: GLenum, params: *mut GLfloat),
>;
pub type PFNGLGETOBJECTPARAMETERIVARBPROC = ::core::option::Option<
    unsafe extern "C" fn(obj: GLhandleARB, pname: GLenum, params: *mut GLint),
>;
pub type PFNGLGETINFOLOGARBPROC = ::core::option::Option<
    unsafe extern "C" fn(
        obj: GLhandleARB,
        maxLength: GLsizei,
        length: *mut GLsizei,
        infoLog: *mut GLcharARB,
    ),
>;
pub type PFNGLGETATTACHEDOBJECTSARBPROC = ::core::option::Option<
    unsafe extern "C" fn(
        containerObj: GLhandleARB,
        maxCount: GLsizei,
        count: *mut GLsizei,
        obj: *mut GLhandleARB,
    ),
>;
pub type PFNGLGETUNIFORMLOCATIONARBPROC = ::core::option::Option<
    unsafe extern "C" fn(programObj: GLhandleARB, name: *const GLcharARB) -> GLint,
>;
pub type PFNGLGETACTIVEUNIFORMARBPROC = ::core::option::Option<
    unsafe extern "C" fn(
        programObj: GLhandleARB,
        index: GLuint,
        maxLength: GLsizei,
        length: *mut GLsizei,
        size: *mut GLint,
        type_: *mut GLenum,
        name: *mut GLcharARB,
    ),
>;
pub type PFNGLGETUNIFORMFVARBPROC = ::core::option::Option<
    unsafe extern "C" fn(programObj: GLhandleARB, location: GLint, params: *mut GLfloat),
>;
pub type PFNGLGETUNIFORMIVARBPROC = ::core::option::Option<
    unsafe extern "C" fn(programObj: GLhandleARB, location: GLint, params: *mut GLint),
>;
pub type PFNGLGETSHADERSOURCEARBPROC = ::core::option::Option<
    unsafe extern "C" fn(
        obj: GLhandleARB,
        maxLength: GLsizei,
        length: *mut GLsizei,
        source: *mut GLcharARB,
    ),
>;
extern "C" {
    pub fn glDeleteObjectARB(obj: GLhandleARB);
}
extern "C" {
    pub fn glGetHandleARB(pname: GLenum) -> GLhandleARB;
}
extern "C" {
    pub fn glDetachObjectARB(containerObj: GLhandleARB, attachedObj: GLhandleARB);
}
extern "C" {
    pub fn glCreateShaderObjectARB(shaderType: GLenum) -> GLhandleARB;
}
extern "C" {
    pub fn glShaderSourceARB(
        shaderObj: GLhandleARB,
        count: GLsizei,
        string: *mut *const GLcharARB,
        length: *const GLint,
    );
}
extern "C" {
    pub fn glCompileShaderARB(shaderObj: GLhandleARB);
}
extern "C" {
    pub fn glCreateProgramObjectARB() -> GLhandleARB;
}
extern "C" {
    pub fn glAttachObjectARB(containerObj: GLhandleARB, obj: GLhandleARB);
}
extern "C" {
    pub fn glLinkProgramARB(programObj: GLhandleARB);
}
extern "C" {
    pub fn glUseProgramObjectARB(programObj: GLhandleARB);
}
extern "C" {
    pub fn glValidateProgramARB(programObj: GLhandleARB);
}
extern "C" {
    pub fn glUniform1fARB(location: GLint, v0: GLfloat);
}
extern "C" {
    pub fn glUniform2fARB(location: GLint, v0: GLfloat, v1: GLfloat);
}
extern "C" {
    pub fn glUniform3fARB(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat);
}
extern "C" {
    pub fn glUniform4fARB(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat);
}
extern "C" {
    pub fn glUniform1iARB(location: GLint, v0: GLint);
}
extern "C" {
    pub fn glUniform2iARB(location: GLint, v0: GLint, v1: GLint);
}
extern "C" {
    pub fn glUniform3iARB(location: GLint, v0: GLint, v1: GLint, v2: GLint);
}
extern "C" {
    pub fn glUniform4iARB(location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint);
}
extern "C" {
    pub fn glUniform1fvARB(location: GLint, count: GLsizei, value: *const GLfloat);
}
extern "C" {
    pub fn glUniform2fvARB(location: GLint, count: GLsizei, value: *const GLfloat);
}
extern "C" {
    pub fn glUniform3fvARB(location: GLint, count: GLsizei, value: *const GLfloat);
}
extern "C" {
    pub fn glUniform4fvARB(location: GLint, count: GLsizei, value: *const GLfloat);
}
extern "C" {
    pub fn glUniform1ivARB(location: GLint, count: GLsizei, value: *const GLint);
}
extern "C" {
    pub fn glUniform2ivARB(location: GLint, count: GLsizei, value: *const GLint);
}
extern "C" {
    pub fn glUniform3ivARB(location: GLint, count: GLsizei, value: *const GLint);
}
extern "C" {
    pub fn glUniform4ivARB(location: GLint, count: GLsizei, value: *const GLint);
}
extern "C" {
    pub fn glUniformMatrix2fvARB(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glUniformMatrix3fvARB(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glUniformMatrix4fvARB(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glGetObjectParameterfvARB(obj: GLhandleARB, pname: GLenum, params: *mut GLfloat);
}
extern "C" {
    pub fn glGetObjectParameterivARB(obj: GLhandleARB, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetInfoLogARB(
        obj: GLhandleARB,
        maxLength: GLsizei,
        length: *mut GLsizei,
        infoLog: *mut GLcharARB,
    );
}
extern "C" {
    pub fn glGetAttachedObjectsARB(
        containerObj: GLhandleARB,
        maxCount: GLsizei,
        count: *mut GLsizei,
        obj: *mut GLhandleARB,
    );
}
extern "C" {
    pub fn glGetUniformLocationARB(programObj: GLhandleARB, name: *const GLcharARB) -> GLint;
}
extern "C" {
    pub fn glGetActiveUniformARB(
        programObj: GLhandleARB,
        index: GLuint,
        maxLength: GLsizei,
        length: *mut GLsizei,
        size: *mut GLint,
        type_: *mut GLenum,
        name: *mut GLcharARB,
    );
}
extern "C" {
    pub fn glGetUniformfvARB(programObj: GLhandleARB, location: GLint, params: *mut GLfloat);
}
extern "C" {
    pub fn glGetUniformivARB(programObj: GLhandleARB, location: GLint, params: *mut GLint);
}
extern "C" {
    pub fn glGetShaderSourceARB(
        obj: GLhandleARB,
        maxLength: GLsizei,
        length: *mut GLsizei,
        source: *mut GLcharARB,
    );
}
pub type PFNGLNAMEDSTRINGARBPROC = ::core::option::Option<
    unsafe extern "C" fn(
        type_: GLenum,
        namelen: GLint,
        name: *const GLchar,
        stringlen: GLint,
        string: *const GLchar,
    ),
>;
pub type PFNGLDELETENAMEDSTRINGARBPROC =
    ::core::option::Option<unsafe extern "C" fn(namelen: GLint, name: *const GLchar)>;
pub type PFNGLCOMPILESHADERINCLUDEARBPROC = ::core::option::Option<
    unsafe extern "C" fn(
        shader: GLuint,
        count: GLsizei,
        path: *const *const GLchar,
        length: *const GLint,
    ),
>;
pub type PFNGLISNAMEDSTRINGARBPROC =
    ::core::option::Option<unsafe extern "C" fn(namelen: GLint, name: *const GLchar) -> GLboolean>;
pub type PFNGLGETNAMEDSTRINGARBPROC = ::core::option::Option<
    unsafe extern "C" fn(
        namelen: GLint,
        name: *const GLchar,
        bufSize: GLsizei,
        stringlen: *mut GLint,
        string: *mut GLchar,
    ),
>;
pub type PFNGLGETNAMEDSTRINGIVARBPROC = ::core::option::Option<
    unsafe extern "C" fn(namelen: GLint, name: *const GLchar, pname: GLenum, params: *mut GLint),
>;
extern "C" {
    pub fn glNamedStringARB(
        type_: GLenum,
        namelen: GLint,
        name: *const GLchar,
        stringlen: GLint,
        string: *const GLchar,
    );
}
extern "C" {
    pub fn glDeleteNamedStringARB(namelen: GLint, name: *const GLchar);
}
extern "C" {
    pub fn glCompileShaderIncludeARB(
        shader: GLuint,
        count: GLsizei,
        path: *const *const GLchar,
        length: *const GLint,
    );
}
extern "C" {
    pub fn glIsNamedStringARB(namelen: GLint, name: *const GLchar) -> GLboolean;
}
extern "C" {
    pub fn glGetNamedStringARB(
        namelen: GLint,
        name: *const GLchar,
        bufSize: GLsizei,
        stringlen: *mut GLint,
        string: *mut GLchar,
    );
}
extern "C" {
    pub fn glGetNamedStringivARB(
        namelen: GLint,
        name: *const GLchar,
        pname: GLenum,
        params: *mut GLint,
    );
}
pub type PFNGLTEXPAGECOMMITMENTARBPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        zoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        resident: GLboolean,
    ),
>;
extern "C" {
    pub fn glTexPageCommitmentARB(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        zoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        resident: GLboolean,
    );
}
pub type PFNGLTEXBUFFERARBPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, internalformat: GLenum, buffer: GLuint),
>;
extern "C" {
    pub fn glTexBufferARB(target: GLenum, internalformat: GLenum, buffer: GLuint);
}
pub type PFNGLCOMPRESSEDTEXIMAGE3DARBPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        border: GLint,
        imageSize: GLsizei,
        data: *const ctypes::c_void,
    ),
>;
pub type PFNGLCOMPRESSEDTEXIMAGE2DARBPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        border: GLint,
        imageSize: GLsizei,
        data: *const ctypes::c_void,
    ),
>;
pub type PFNGLCOMPRESSEDTEXIMAGE1DARBPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        width: GLsizei,
        border: GLint,
        imageSize: GLsizei,
        data: *const ctypes::c_void,
    ),
>;
pub type PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        zoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        format: GLenum,
        imageSize: GLsizei,
        data: *const ctypes::c_void,
    ),
>;
pub type PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        format: GLenum,
        imageSize: GLsizei,
        data: *const ctypes::c_void,
    ),
>;
pub type PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        width: GLsizei,
        format: GLenum,
        imageSize: GLsizei,
        data: *const ctypes::c_void,
    ),
>;
pub type PFNGLGETCOMPRESSEDTEXIMAGEARBPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, level: GLint, img: *mut ctypes::c_void),
>;
extern "C" {
    pub fn glCompressedTexImage3DARB(
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        border: GLint,
        imageSize: GLsizei,
        data: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glCompressedTexImage2DARB(
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        border: GLint,
        imageSize: GLsizei,
        data: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glCompressedTexImage1DARB(
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        width: GLsizei,
        border: GLint,
        imageSize: GLsizei,
        data: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glCompressedTexSubImage3DARB(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        zoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        format: GLenum,
        imageSize: GLsizei,
        data: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glCompressedTexSubImage2DARB(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        format: GLenum,
        imageSize: GLsizei,
        data: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glCompressedTexSubImage1DARB(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        width: GLsizei,
        format: GLenum,
        imageSize: GLsizei,
        data: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glGetCompressedTexImageARB(target: GLenum, level: GLint, img: *mut ctypes::c_void);
}
pub type PFNGLLOADTRANSPOSEMATRIXFARBPROC =
    ::core::option::Option<unsafe extern "C" fn(m: *const GLfloat)>;
pub type PFNGLLOADTRANSPOSEMATRIXDARBPROC =
    ::core::option::Option<unsafe extern "C" fn(m: *const GLdouble)>;
pub type PFNGLMULTTRANSPOSEMATRIXFARBPROC =
    ::core::option::Option<unsafe extern "C" fn(m: *const GLfloat)>;
pub type PFNGLMULTTRANSPOSEMATRIXDARBPROC =
    ::core::option::Option<unsafe extern "C" fn(m: *const GLdouble)>;
extern "C" {
    pub fn glLoadTransposeMatrixfARB(m: *const GLfloat);
}
extern "C" {
    pub fn glLoadTransposeMatrixdARB(m: *const GLdouble);
}
extern "C" {
    pub fn glMultTransposeMatrixfARB(m: *const GLfloat);
}
extern "C" {
    pub fn glMultTransposeMatrixdARB(m: *const GLdouble);
}
pub type PFNGLWEIGHTBVARBPROC =
    ::core::option::Option<unsafe extern "C" fn(size: GLint, weights: *const GLbyte)>;
pub type PFNGLWEIGHTSVARBPROC =
    ::core::option::Option<unsafe extern "C" fn(size: GLint, weights: *const GLshort)>;
pub type PFNGLWEIGHTIVARBPROC =
    ::core::option::Option<unsafe extern "C" fn(size: GLint, weights: *const GLint)>;
pub type PFNGLWEIGHTFVARBPROC =
    ::core::option::Option<unsafe extern "C" fn(size: GLint, weights: *const GLfloat)>;
pub type PFNGLWEIGHTDVARBPROC =
    ::core::option::Option<unsafe extern "C" fn(size: GLint, weights: *const GLdouble)>;
pub type PFNGLWEIGHTUBVARBPROC =
    ::core::option::Option<unsafe extern "C" fn(size: GLint, weights: *const GLubyte)>;
pub type PFNGLWEIGHTUSVARBPROC =
    ::core::option::Option<unsafe extern "C" fn(size: GLint, weights: *const GLushort)>;
pub type PFNGLWEIGHTUIVARBPROC =
    ::core::option::Option<unsafe extern "C" fn(size: GLint, weights: *const GLuint)>;
pub type PFNGLWEIGHTPOINTERARBPROC = ::core::option::Option<
    unsafe extern "C" fn(
        size: GLint,
        type_: GLenum,
        stride: GLsizei,
        pointer: *const ctypes::c_void,
    ),
>;
pub type PFNGLVERTEXBLENDARBPROC = ::core::option::Option<unsafe extern "C" fn(count: GLint)>;
extern "C" {
    pub fn glWeightbvARB(size: GLint, weights: *const GLbyte);
}
extern "C" {
    pub fn glWeightsvARB(size: GLint, weights: *const GLshort);
}
extern "C" {
    pub fn glWeightivARB(size: GLint, weights: *const GLint);
}
extern "C" {
    pub fn glWeightfvARB(size: GLint, weights: *const GLfloat);
}
extern "C" {
    pub fn glWeightdvARB(size: GLint, weights: *const GLdouble);
}
extern "C" {
    pub fn glWeightubvARB(size: GLint, weights: *const GLubyte);
}
extern "C" {
    pub fn glWeightusvARB(size: GLint, weights: *const GLushort);
}
extern "C" {
    pub fn glWeightuivARB(size: GLint, weights: *const GLuint);
}
extern "C" {
    pub fn glWeightPointerARB(
        size: GLint,
        type_: GLenum,
        stride: GLsizei,
        pointer: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glVertexBlendARB(count: GLint);
}
pub type GLsizeiptrARB = isize;
pub type GLintptrARB = isize;
pub type PFNGLBINDBUFFERARBPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, buffer: GLuint)>;
pub type PFNGLDELETEBUFFERSARBPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, buffers: *const GLuint)>;
pub type PFNGLGENBUFFERSARBPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, buffers: *mut GLuint)>;
pub type PFNGLISBUFFERARBPROC =
    ::core::option::Option<unsafe extern "C" fn(buffer: GLuint) -> GLboolean>;
pub type PFNGLBUFFERDATAARBPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        size: GLsizeiptrARB,
        data: *const ctypes::c_void,
        usage: GLenum,
    ),
>;
pub type PFNGLBUFFERSUBDATAARBPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        offset: GLintptrARB,
        size: GLsizeiptrARB,
        data: *const ctypes::c_void,
    ),
>;
pub type PFNGLGETBUFFERSUBDATAARBPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        offset: GLintptrARB,
        size: GLsizeiptrARB,
        data: *mut ctypes::c_void,
    ),
>;
pub type PFNGLMAPBUFFERARBPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, access: GLenum) -> *mut ctypes::c_void,
>;
pub type PFNGLUNMAPBUFFERARBPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum) -> GLboolean>;
pub type PFNGLGETBUFFERPARAMETERIVARBPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLint)>;
pub type PFNGLGETBUFFERPOINTERVARBPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut *mut ctypes::c_void),
>;
extern "C" {
    pub fn glBindBufferARB(target: GLenum, buffer: GLuint);
}
extern "C" {
    pub fn glDeleteBuffersARB(n: GLsizei, buffers: *const GLuint);
}
extern "C" {
    pub fn glGenBuffersARB(n: GLsizei, buffers: *mut GLuint);
}
extern "C" {
    pub fn glIsBufferARB(buffer: GLuint) -> GLboolean;
}
extern "C" {
    pub fn glBufferDataARB(
        target: GLenum,
        size: GLsizeiptrARB,
        data: *const ctypes::c_void,
        usage: GLenum,
    );
}
extern "C" {
    pub fn glBufferSubDataARB(
        target: GLenum,
        offset: GLintptrARB,
        size: GLsizeiptrARB,
        data: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glGetBufferSubDataARB(
        target: GLenum,
        offset: GLintptrARB,
        size: GLsizeiptrARB,
        data: *mut ctypes::c_void,
    );
}
extern "C" {
    pub fn glMapBufferARB(target: GLenum, access: GLenum) -> *mut ctypes::c_void;
}
extern "C" {
    pub fn glUnmapBufferARB(target: GLenum) -> GLboolean;
}
extern "C" {
    pub fn glGetBufferParameterivARB(target: GLenum, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetBufferPointervARB(target: GLenum, pname: GLenum, params: *mut *mut ctypes::c_void);
}
pub type PFNGLVERTEXATTRIB1DARBPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, x: GLdouble)>;
pub type PFNGLVERTEXATTRIB1DVARBPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLdouble)>;
pub type PFNGLVERTEXATTRIB1FARBPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, x: GLfloat)>;
pub type PFNGLVERTEXATTRIB1FVARBPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLfloat)>;
pub type PFNGLVERTEXATTRIB1SARBPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, x: GLshort)>;
pub type PFNGLVERTEXATTRIB1SVARBPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLshort)>;
pub type PFNGLVERTEXATTRIB2DARBPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble)>;
pub type PFNGLVERTEXATTRIB2DVARBPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLdouble)>;
pub type PFNGLVERTEXATTRIB2FARBPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, x: GLfloat, y: GLfloat)>;
pub type PFNGLVERTEXATTRIB2FVARBPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLfloat)>;
pub type PFNGLVERTEXATTRIB2SARBPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, x: GLshort, y: GLshort)>;
pub type PFNGLVERTEXATTRIB2SVARBPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLshort)>;
pub type PFNGLVERTEXATTRIB3DARBPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble),
>;
pub type PFNGLVERTEXATTRIB3DVARBPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLdouble)>;
pub type PFNGLVERTEXATTRIB3FARBPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat)>;
pub type PFNGLVERTEXATTRIB3FVARBPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLfloat)>;
pub type PFNGLVERTEXATTRIB3SARBPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, x: GLshort, y: GLshort, z: GLshort)>;
pub type PFNGLVERTEXATTRIB3SVARBPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLshort)>;
pub type PFNGLVERTEXATTRIB4NBVARBPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLbyte)>;
pub type PFNGLVERTEXATTRIB4NIVARBPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLint)>;
pub type PFNGLVERTEXATTRIB4NSVARBPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLshort)>;
pub type PFNGLVERTEXATTRIB4NUBARBPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte),
>;
pub type PFNGLVERTEXATTRIB4NUBVARBPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLubyte)>;
pub type PFNGLVERTEXATTRIB4NUIVARBPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLuint)>;
pub type PFNGLVERTEXATTRIB4NUSVARBPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLushort)>;
pub type PFNGLVERTEXATTRIB4BVARBPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLbyte)>;
pub type PFNGLVERTEXATTRIB4DARBPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble),
>;
pub type PFNGLVERTEXATTRIB4DVARBPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLdouble)>;
pub type PFNGLVERTEXATTRIB4FARBPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat),
>;
pub type PFNGLVERTEXATTRIB4FVARBPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLfloat)>;
pub type PFNGLVERTEXATTRIB4IVARBPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLint)>;
pub type PFNGLVERTEXATTRIB4SARBPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort),
>;
pub type PFNGLVERTEXATTRIB4SVARBPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLshort)>;
pub type PFNGLVERTEXATTRIB4UBVARBPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLubyte)>;
pub type PFNGLVERTEXATTRIB4UIVARBPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLuint)>;
pub type PFNGLVERTEXATTRIB4USVARBPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLushort)>;
pub type PFNGLVERTEXATTRIBPOINTERARBPROC = ::core::option::Option<
    unsafe extern "C" fn(
        index: GLuint,
        size: GLint,
        type_: GLenum,
        normalized: GLboolean,
        stride: GLsizei,
        pointer: *const ctypes::c_void,
    ),
>;
pub type PFNGLENABLEVERTEXATTRIBARRAYARBPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint)>;
pub type PFNGLDISABLEVERTEXATTRIBARRAYARBPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint)>;
pub type PFNGLGETVERTEXATTRIBDVARBPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, pname: GLenum, params: *mut GLdouble),
>;
pub type PFNGLGETVERTEXATTRIBFVARBPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, pname: GLenum, params: *mut GLfloat),
>;
pub type PFNGLGETVERTEXATTRIBIVARBPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, pname: GLenum, params: *mut GLint)>;
pub type PFNGLGETVERTEXATTRIBPOINTERVARBPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, pname: GLenum, pointer: *mut *mut ctypes::c_void),
>;
extern "C" {
    pub fn glVertexAttrib1dARB(index: GLuint, x: GLdouble);
}
extern "C" {
    pub fn glVertexAttrib1dvARB(index: GLuint, v: *const GLdouble);
}
extern "C" {
    pub fn glVertexAttrib1fARB(index: GLuint, x: GLfloat);
}
extern "C" {
    pub fn glVertexAttrib1fvARB(index: GLuint, v: *const GLfloat);
}
extern "C" {
    pub fn glVertexAttrib1sARB(index: GLuint, x: GLshort);
}
extern "C" {
    pub fn glVertexAttrib1svARB(index: GLuint, v: *const GLshort);
}
extern "C" {
    pub fn glVertexAttrib2dARB(index: GLuint, x: GLdouble, y: GLdouble);
}
extern "C" {
    pub fn glVertexAttrib2dvARB(index: GLuint, v: *const GLdouble);
}
extern "C" {
    pub fn glVertexAttrib2fARB(index: GLuint, x: GLfloat, y: GLfloat);
}
extern "C" {
    pub fn glVertexAttrib2fvARB(index: GLuint, v: *const GLfloat);
}
extern "C" {
    pub fn glVertexAttrib2sARB(index: GLuint, x: GLshort, y: GLshort);
}
extern "C" {
    pub fn glVertexAttrib2svARB(index: GLuint, v: *const GLshort);
}
extern "C" {
    pub fn glVertexAttrib3dARB(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble);
}
extern "C" {
    pub fn glVertexAttrib3dvARB(index: GLuint, v: *const GLdouble);
}
extern "C" {
    pub fn glVertexAttrib3fARB(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat);
}
extern "C" {
    pub fn glVertexAttrib3fvARB(index: GLuint, v: *const GLfloat);
}
extern "C" {
    pub fn glVertexAttrib3sARB(index: GLuint, x: GLshort, y: GLshort, z: GLshort);
}
extern "C" {
    pub fn glVertexAttrib3svARB(index: GLuint, v: *const GLshort);
}
extern "C" {
    pub fn glVertexAttrib4NbvARB(index: GLuint, v: *const GLbyte);
}
extern "C" {
    pub fn glVertexAttrib4NivARB(index: GLuint, v: *const GLint);
}
extern "C" {
    pub fn glVertexAttrib4NsvARB(index: GLuint, v: *const GLshort);
}
extern "C" {
    pub fn glVertexAttrib4NubARB(index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte);
}
extern "C" {
    pub fn glVertexAttrib4NubvARB(index: GLuint, v: *const GLubyte);
}
extern "C" {
    pub fn glVertexAttrib4NuivARB(index: GLuint, v: *const GLuint);
}
extern "C" {
    pub fn glVertexAttrib4NusvARB(index: GLuint, v: *const GLushort);
}
extern "C" {
    pub fn glVertexAttrib4bvARB(index: GLuint, v: *const GLbyte);
}
extern "C" {
    pub fn glVertexAttrib4dARB(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble);
}
extern "C" {
    pub fn glVertexAttrib4dvARB(index: GLuint, v: *const GLdouble);
}
extern "C" {
    pub fn glVertexAttrib4fARB(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat);
}
extern "C" {
    pub fn glVertexAttrib4fvARB(index: GLuint, v: *const GLfloat);
}
extern "C" {
    pub fn glVertexAttrib4ivARB(index: GLuint, v: *const GLint);
}
extern "C" {
    pub fn glVertexAttrib4sARB(index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort);
}
extern "C" {
    pub fn glVertexAttrib4svARB(index: GLuint, v: *const GLshort);
}
extern "C" {
    pub fn glVertexAttrib4ubvARB(index: GLuint, v: *const GLubyte);
}
extern "C" {
    pub fn glVertexAttrib4uivARB(index: GLuint, v: *const GLuint);
}
extern "C" {
    pub fn glVertexAttrib4usvARB(index: GLuint, v: *const GLushort);
}
extern "C" {
    pub fn glVertexAttribPointerARB(
        index: GLuint,
        size: GLint,
        type_: GLenum,
        normalized: GLboolean,
        stride: GLsizei,
        pointer: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glEnableVertexAttribArrayARB(index: GLuint);
}
extern "C" {
    pub fn glDisableVertexAttribArrayARB(index: GLuint);
}
extern "C" {
    pub fn glGetVertexAttribdvARB(index: GLuint, pname: GLenum, params: *mut GLdouble);
}
extern "C" {
    pub fn glGetVertexAttribfvARB(index: GLuint, pname: GLenum, params: *mut GLfloat);
}
extern "C" {
    pub fn glGetVertexAttribivARB(index: GLuint, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetVertexAttribPointervARB(
        index: GLuint,
        pname: GLenum,
        pointer: *mut *mut ctypes::c_void,
    );
}
pub type PFNGLBINDATTRIBLOCATIONARBPROC = ::core::option::Option<
    unsafe extern "C" fn(programObj: GLhandleARB, index: GLuint, name: *const GLcharARB),
>;
pub type PFNGLGETACTIVEATTRIBARBPROC = ::core::option::Option<
    unsafe extern "C" fn(
        programObj: GLhandleARB,
        index: GLuint,
        maxLength: GLsizei,
        length: *mut GLsizei,
        size: *mut GLint,
        type_: *mut GLenum,
        name: *mut GLcharARB,
    ),
>;
pub type PFNGLGETATTRIBLOCATIONARBPROC = ::core::option::Option<
    unsafe extern "C" fn(programObj: GLhandleARB, name: *const GLcharARB) -> GLint,
>;
extern "C" {
    pub fn glBindAttribLocationARB(programObj: GLhandleARB, index: GLuint, name: *const GLcharARB);
}
extern "C" {
    pub fn glGetActiveAttribARB(
        programObj: GLhandleARB,
        index: GLuint,
        maxLength: GLsizei,
        length: *mut GLsizei,
        size: *mut GLint,
        type_: *mut GLenum,
        name: *mut GLcharARB,
    );
}
extern "C" {
    pub fn glGetAttribLocationARB(programObj: GLhandleARB, name: *const GLcharARB) -> GLint;
}
pub type PFNGLWINDOWPOS2DARBPROC =
    ::core::option::Option<unsafe extern "C" fn(x: GLdouble, y: GLdouble)>;
pub type PFNGLWINDOWPOS2DVARBPROC =
    ::core::option::Option<unsafe extern "C" fn(v: *const GLdouble)>;
pub type PFNGLWINDOWPOS2FARBPROC =
    ::core::option::Option<unsafe extern "C" fn(x: GLfloat, y: GLfloat)>;
pub type PFNGLWINDOWPOS2FVARBPROC = ::core::option::Option<unsafe extern "C" fn(v: *const GLfloat)>;
pub type PFNGLWINDOWPOS2IARBPROC = ::core::option::Option<unsafe extern "C" fn(x: GLint, y: GLint)>;
pub type PFNGLWINDOWPOS2IVARBPROC = ::core::option::Option<unsafe extern "C" fn(v: *const GLint)>;
pub type PFNGLWINDOWPOS2SARBPROC =
    ::core::option::Option<unsafe extern "C" fn(x: GLshort, y: GLshort)>;
pub type PFNGLWINDOWPOS2SVARBPROC = ::core::option::Option<unsafe extern "C" fn(v: *const GLshort)>;
pub type PFNGLWINDOWPOS3DARBPROC =
    ::core::option::Option<unsafe extern "C" fn(x: GLdouble, y: GLdouble, z: GLdouble)>;
pub type PFNGLWINDOWPOS3DVARBPROC =
    ::core::option::Option<unsafe extern "C" fn(v: *const GLdouble)>;
pub type PFNGLWINDOWPOS3FARBPROC =
    ::core::option::Option<unsafe extern "C" fn(x: GLfloat, y: GLfloat, z: GLfloat)>;
pub type PFNGLWINDOWPOS3FVARBPROC = ::core::option::Option<unsafe extern "C" fn(v: *const GLfloat)>;
pub type PFNGLWINDOWPOS3IARBPROC =
    ::core::option::Option<unsafe extern "C" fn(x: GLint, y: GLint, z: GLint)>;
pub type PFNGLWINDOWPOS3IVARBPROC = ::core::option::Option<unsafe extern "C" fn(v: *const GLint)>;
pub type PFNGLWINDOWPOS3SARBPROC =
    ::core::option::Option<unsafe extern "C" fn(x: GLshort, y: GLshort, z: GLshort)>;
pub type PFNGLWINDOWPOS3SVARBPROC = ::core::option::Option<unsafe extern "C" fn(v: *const GLshort)>;
extern "C" {
    pub fn glWindowPos2dARB(x: GLdouble, y: GLdouble);
}
extern "C" {
    pub fn glWindowPos2dvARB(v: *const GLdouble);
}
extern "C" {
    pub fn glWindowPos2fARB(x: GLfloat, y: GLfloat);
}
extern "C" {
    pub fn glWindowPos2fvARB(v: *const GLfloat);
}
extern "C" {
    pub fn glWindowPos2iARB(x: GLint, y: GLint);
}
extern "C" {
    pub fn glWindowPos2ivARB(v: *const GLint);
}
extern "C" {
    pub fn glWindowPos2sARB(x: GLshort, y: GLshort);
}
extern "C" {
    pub fn glWindowPos2svARB(v: *const GLshort);
}
extern "C" {
    pub fn glWindowPos3dARB(x: GLdouble, y: GLdouble, z: GLdouble);
}
extern "C" {
    pub fn glWindowPos3dvARB(v: *const GLdouble);
}
extern "C" {
    pub fn glWindowPos3fARB(x: GLfloat, y: GLfloat, z: GLfloat);
}
extern "C" {
    pub fn glWindowPos3fvARB(v: *const GLfloat);
}
extern "C" {
    pub fn glWindowPos3iARB(x: GLint, y: GLint, z: GLint);
}
extern "C" {
    pub fn glWindowPos3ivARB(v: *const GLint);
}
extern "C" {
    pub fn glWindowPos3sARB(x: GLshort, y: GLshort, z: GLshort);
}
extern "C" {
    pub fn glWindowPos3svARB(v: *const GLshort);
}
pub type PFNGLMULTITEXCOORD1BOESPROC =
    ::core::option::Option<unsafe extern "C" fn(texture: GLenum, s: GLbyte)>;
pub type PFNGLMULTITEXCOORD1BVOESPROC =
    ::core::option::Option<unsafe extern "C" fn(texture: GLenum, coords: *const GLbyte)>;
pub type PFNGLMULTITEXCOORD2BOESPROC =
    ::core::option::Option<unsafe extern "C" fn(texture: GLenum, s: GLbyte, t: GLbyte)>;
pub type PFNGLMULTITEXCOORD2BVOESPROC =
    ::core::option::Option<unsafe extern "C" fn(texture: GLenum, coords: *const GLbyte)>;
pub type PFNGLMULTITEXCOORD3BOESPROC =
    ::core::option::Option<unsafe extern "C" fn(texture: GLenum, s: GLbyte, t: GLbyte, r: GLbyte)>;
pub type PFNGLMULTITEXCOORD3BVOESPROC =
    ::core::option::Option<unsafe extern "C" fn(texture: GLenum, coords: *const GLbyte)>;
pub type PFNGLMULTITEXCOORD4BOESPROC = ::core::option::Option<
    unsafe extern "C" fn(texture: GLenum, s: GLbyte, t: GLbyte, r: GLbyte, q: GLbyte),
>;
pub type PFNGLMULTITEXCOORD4BVOESPROC =
    ::core::option::Option<unsafe extern "C" fn(texture: GLenum, coords: *const GLbyte)>;
pub type PFNGLTEXCOORD1BOESPROC = ::core::option::Option<unsafe extern "C" fn(s: GLbyte)>;
pub type PFNGLTEXCOORD1BVOESPROC =
    ::core::option::Option<unsafe extern "C" fn(coords: *const GLbyte)>;
pub type PFNGLTEXCOORD2BOESPROC =
    ::core::option::Option<unsafe extern "C" fn(s: GLbyte, t: GLbyte)>;
pub type PFNGLTEXCOORD2BVOESPROC =
    ::core::option::Option<unsafe extern "C" fn(coords: *const GLbyte)>;
pub type PFNGLTEXCOORD3BOESPROC =
    ::core::option::Option<unsafe extern "C" fn(s: GLbyte, t: GLbyte, r: GLbyte)>;
pub type PFNGLTEXCOORD3BVOESPROC =
    ::core::option::Option<unsafe extern "C" fn(coords: *const GLbyte)>;
pub type PFNGLTEXCOORD4BOESPROC =
    ::core::option::Option<unsafe extern "C" fn(s: GLbyte, t: GLbyte, r: GLbyte, q: GLbyte)>;
pub type PFNGLTEXCOORD4BVOESPROC =
    ::core::option::Option<unsafe extern "C" fn(coords: *const GLbyte)>;
pub type PFNGLVERTEX2BOESPROC = ::core::option::Option<unsafe extern "C" fn(x: GLbyte)>;
pub type PFNGLVERTEX2BVOESPROC =
    ::core::option::Option<unsafe extern "C" fn(coords: *const GLbyte)>;
pub type PFNGLVERTEX3BOESPROC = ::core::option::Option<unsafe extern "C" fn(x: GLbyte, y: GLbyte)>;
pub type PFNGLVERTEX3BVOESPROC =
    ::core::option::Option<unsafe extern "C" fn(coords: *const GLbyte)>;
pub type PFNGLVERTEX4BOESPROC =
    ::core::option::Option<unsafe extern "C" fn(x: GLbyte, y: GLbyte, z: GLbyte)>;
pub type PFNGLVERTEX4BVOESPROC =
    ::core::option::Option<unsafe extern "C" fn(coords: *const GLbyte)>;
extern "C" {
    pub fn glMultiTexCoord1bOES(texture: GLenum, s: GLbyte);
}
extern "C" {
    pub fn glMultiTexCoord1bvOES(texture: GLenum, coords: *const GLbyte);
}
extern "C" {
    pub fn glMultiTexCoord2bOES(texture: GLenum, s: GLbyte, t: GLbyte);
}
extern "C" {
    pub fn glMultiTexCoord2bvOES(texture: GLenum, coords: *const GLbyte);
}
extern "C" {
    pub fn glMultiTexCoord3bOES(texture: GLenum, s: GLbyte, t: GLbyte, r: GLbyte);
}
extern "C" {
    pub fn glMultiTexCoord3bvOES(texture: GLenum, coords: *const GLbyte);
}
extern "C" {
    pub fn glMultiTexCoord4bOES(texture: GLenum, s: GLbyte, t: GLbyte, r: GLbyte, q: GLbyte);
}
extern "C" {
    pub fn glMultiTexCoord4bvOES(texture: GLenum, coords: *const GLbyte);
}
extern "C" {
    pub fn glTexCoord1bOES(s: GLbyte);
}
extern "C" {
    pub fn glTexCoord1bvOES(coords: *const GLbyte);
}
extern "C" {
    pub fn glTexCoord2bOES(s: GLbyte, t: GLbyte);
}
extern "C" {
    pub fn glTexCoord2bvOES(coords: *const GLbyte);
}
extern "C" {
    pub fn glTexCoord3bOES(s: GLbyte, t: GLbyte, r: GLbyte);
}
extern "C" {
    pub fn glTexCoord3bvOES(coords: *const GLbyte);
}
extern "C" {
    pub fn glTexCoord4bOES(s: GLbyte, t: GLbyte, r: GLbyte, q: GLbyte);
}
extern "C" {
    pub fn glTexCoord4bvOES(coords: *const GLbyte);
}
extern "C" {
    pub fn glVertex2bOES(x: GLbyte);
}
extern "C" {
    pub fn glVertex2bvOES(coords: *const GLbyte);
}
extern "C" {
    pub fn glVertex3bOES(x: GLbyte, y: GLbyte);
}
extern "C" {
    pub fn glVertex3bvOES(coords: *const GLbyte);
}
extern "C" {
    pub fn glVertex4bOES(x: GLbyte, y: GLbyte, z: GLbyte);
}
extern "C" {
    pub fn glVertex4bvOES(coords: *const GLbyte);
}
pub type GLfixed = GLint;
pub type PFNGLALPHAFUNCXOESPROC =
    ::core::option::Option<unsafe extern "C" fn(func: GLenum, ref_: GLfixed)>;
pub type PFNGLCLEARCOLORXOESPROC = ::core::option::Option<
    unsafe extern "C" fn(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed),
>;
pub type PFNGLCLEARDEPTHXOESPROC = ::core::option::Option<unsafe extern "C" fn(depth: GLfixed)>;
pub type PFNGLCLIPPLANEXOESPROC =
    ::core::option::Option<unsafe extern "C" fn(plane: GLenum, equation: *const GLfixed)>;
pub type PFNGLCOLOR4XOESPROC = ::core::option::Option<
    unsafe extern "C" fn(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed),
>;
pub type PFNGLDEPTHRANGEXOESPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLfixed, f: GLfixed)>;
pub type PFNGLFOGXOESPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, param: GLfixed)>;
pub type PFNGLFOGXVOESPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, param: *const GLfixed)>;
pub type PFNGLFRUSTUMXOESPROC = ::core::option::Option<
    unsafe extern "C" fn(l: GLfixed, r: GLfixed, b: GLfixed, t: GLfixed, n: GLfixed, f: GLfixed),
>;
pub type PFNGLGETCLIPPLANEXOESPROC =
    ::core::option::Option<unsafe extern "C" fn(plane: GLenum, equation: *mut GLfixed)>;
pub type PFNGLGETFIXEDVOESPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, params: *mut GLfixed)>;
pub type PFNGLGETTEXENVXVOESPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLfixed),
>;
pub type PFNGLGETTEXPARAMETERXVOESPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLfixed),
>;
pub type PFNGLLIGHTMODELXOESPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, param: GLfixed)>;
pub type PFNGLLIGHTMODELXVOESPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, param: *const GLfixed)>;
pub type PFNGLLIGHTXOESPROC =
    ::core::option::Option<unsafe extern "C" fn(light: GLenum, pname: GLenum, param: GLfixed)>;
pub type PFNGLLIGHTXVOESPROC = ::core::option::Option<
    unsafe extern "C" fn(light: GLenum, pname: GLenum, params: *const GLfixed),
>;
pub type PFNGLLINEWIDTHXOESPROC = ::core::option::Option<unsafe extern "C" fn(width: GLfixed)>;
pub type PFNGLLOADMATRIXXOESPROC = ::core::option::Option<unsafe extern "C" fn(m: *const GLfixed)>;
pub type PFNGLMATERIALXOESPROC =
    ::core::option::Option<unsafe extern "C" fn(face: GLenum, pname: GLenum, param: GLfixed)>;
pub type PFNGLMATERIALXVOESPROC = ::core::option::Option<
    unsafe extern "C" fn(face: GLenum, pname: GLenum, param: *const GLfixed),
>;
pub type PFNGLMULTMATRIXXOESPROC = ::core::option::Option<unsafe extern "C" fn(m: *const GLfixed)>;
pub type PFNGLMULTITEXCOORD4XOESPROC = ::core::option::Option<
    unsafe extern "C" fn(texture: GLenum, s: GLfixed, t: GLfixed, r: GLfixed, q: GLfixed),
>;
pub type PFNGLNORMAL3XOESPROC =
    ::core::option::Option<unsafe extern "C" fn(nx: GLfixed, ny: GLfixed, nz: GLfixed)>;
pub type PFNGLORTHOXOESPROC = ::core::option::Option<
    unsafe extern "C" fn(l: GLfixed, r: GLfixed, b: GLfixed, t: GLfixed, n: GLfixed, f: GLfixed),
>;
pub type PFNGLPOINTPARAMETERXVOESPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, params: *const GLfixed)>;
pub type PFNGLPOINTSIZEXOESPROC = ::core::option::Option<unsafe extern "C" fn(size: GLfixed)>;
pub type PFNGLPOLYGONOFFSETXOESPROC =
    ::core::option::Option<unsafe extern "C" fn(factor: GLfixed, units: GLfixed)>;
pub type PFNGLROTATEXOESPROC = ::core::option::Option<
    unsafe extern "C" fn(angle: GLfixed, x: GLfixed, y: GLfixed, z: GLfixed),
>;
pub type PFNGLSAMPLECOVERAGEOESPROC =
    ::core::option::Option<unsafe extern "C" fn(value: GLfixed, invert: GLboolean)>;
pub type PFNGLSCALEXOESPROC =
    ::core::option::Option<unsafe extern "C" fn(x: GLfixed, y: GLfixed, z: GLfixed)>;
pub type PFNGLTEXENVXOESPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, param: GLfixed)>;
pub type PFNGLTEXENVXVOESPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *const GLfixed),
>;
pub type PFNGLTEXPARAMETERXOESPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, param: GLfixed)>;
pub type PFNGLTEXPARAMETERXVOESPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *const GLfixed),
>;
pub type PFNGLTRANSLATEXOESPROC =
    ::core::option::Option<unsafe extern "C" fn(x: GLfixed, y: GLfixed, z: GLfixed)>;
pub type PFNGLACCUMXOESPROC =
    ::core::option::Option<unsafe extern "C" fn(op: GLenum, value: GLfixed)>;
pub type PFNGLBITMAPXOESPROC = ::core::option::Option<
    unsafe extern "C" fn(
        width: GLsizei,
        height: GLsizei,
        xorig: GLfixed,
        yorig: GLfixed,
        xmove: GLfixed,
        ymove: GLfixed,
        bitmap: *const GLubyte,
    ),
>;
pub type PFNGLBLENDCOLORXOESPROC = ::core::option::Option<
    unsafe extern "C" fn(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed),
>;
pub type PFNGLCLEARACCUMXOESPROC = ::core::option::Option<
    unsafe extern "C" fn(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed),
>;
pub type PFNGLCOLOR3XOESPROC =
    ::core::option::Option<unsafe extern "C" fn(red: GLfixed, green: GLfixed, blue: GLfixed)>;
pub type PFNGLCOLOR3XVOESPROC =
    ::core::option::Option<unsafe extern "C" fn(components: *const GLfixed)>;
pub type PFNGLCOLOR4XVOESPROC =
    ::core::option::Option<unsafe extern "C" fn(components: *const GLfixed)>;
pub type PFNGLCONVOLUTIONPARAMETERXOESPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, param: GLfixed)>;
pub type PFNGLCONVOLUTIONPARAMETERXVOESPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *const GLfixed),
>;
pub type PFNGLEVALCOORD1XOESPROC = ::core::option::Option<unsafe extern "C" fn(u: GLfixed)>;
pub type PFNGLEVALCOORD1XVOESPROC =
    ::core::option::Option<unsafe extern "C" fn(coords: *const GLfixed)>;
pub type PFNGLEVALCOORD2XOESPROC =
    ::core::option::Option<unsafe extern "C" fn(u: GLfixed, v: GLfixed)>;
pub type PFNGLEVALCOORD2XVOESPROC =
    ::core::option::Option<unsafe extern "C" fn(coords: *const GLfixed)>;
pub type PFNGLFEEDBACKBUFFERXOESPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, type_: GLenum, buffer: *const GLfixed)>;
pub type PFNGLGETCONVOLUTIONPARAMETERXVOESPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLfixed),
>;
pub type PFNGLGETHISTOGRAMPARAMETERXVOESPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLfixed),
>;
pub type PFNGLGETLIGHTXOESPROC = ::core::option::Option<
    unsafe extern "C" fn(light: GLenum, pname: GLenum, params: *mut GLfixed),
>;
pub type PFNGLGETMAPXVOESPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, query: GLenum, v: *mut GLfixed)>;
pub type PFNGLGETMATERIALXOESPROC =
    ::core::option::Option<unsafe extern "C" fn(face: GLenum, pname: GLenum, param: GLfixed)>;
pub type PFNGLGETPIXELMAPXVPROC =
    ::core::option::Option<unsafe extern "C" fn(map: GLenum, size: GLint, values: *mut GLfixed)>;
pub type PFNGLGETTEXGENXVOESPROC = ::core::option::Option<
    unsafe extern "C" fn(coord: GLenum, pname: GLenum, params: *mut GLfixed),
>;
pub type PFNGLGETTEXLEVELPARAMETERXVOESPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, level: GLint, pname: GLenum, params: *mut GLfixed),
>;
pub type PFNGLINDEXXOESPROC = ::core::option::Option<unsafe extern "C" fn(component: GLfixed)>;
pub type PFNGLINDEXXVOESPROC =
    ::core::option::Option<unsafe extern "C" fn(component: *const GLfixed)>;
pub type PFNGLLOADTRANSPOSEMATRIXXOESPROC =
    ::core::option::Option<unsafe extern "C" fn(m: *const GLfixed)>;
pub type PFNGLMAP1XOESPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        u1: GLfixed,
        u2: GLfixed,
        stride: GLint,
        order: GLint,
        points: GLfixed,
    ),
>;
pub type PFNGLMAP2XOESPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        u1: GLfixed,
        u2: GLfixed,
        ustride: GLint,
        uorder: GLint,
        v1: GLfixed,
        v2: GLfixed,
        vstride: GLint,
        vorder: GLint,
        points: GLfixed,
    ),
>;
pub type PFNGLMAPGRID1XOESPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLint, u1: GLfixed, u2: GLfixed)>;
pub type PFNGLMAPGRID2XOESPROC = ::core::option::Option<
    unsafe extern "C" fn(n: GLint, u1: GLfixed, u2: GLfixed, v1: GLfixed, v2: GLfixed),
>;
pub type PFNGLMULTTRANSPOSEMATRIXXOESPROC =
    ::core::option::Option<unsafe extern "C" fn(m: *const GLfixed)>;
pub type PFNGLMULTITEXCOORD1XOESPROC =
    ::core::option::Option<unsafe extern "C" fn(texture: GLenum, s: GLfixed)>;
pub type PFNGLMULTITEXCOORD1XVOESPROC =
    ::core::option::Option<unsafe extern "C" fn(texture: GLenum, coords: *const GLfixed)>;
pub type PFNGLMULTITEXCOORD2XOESPROC =
    ::core::option::Option<unsafe extern "C" fn(texture: GLenum, s: GLfixed, t: GLfixed)>;
pub type PFNGLMULTITEXCOORD2XVOESPROC =
    ::core::option::Option<unsafe extern "C" fn(texture: GLenum, coords: *const GLfixed)>;
pub type PFNGLMULTITEXCOORD3XOESPROC = ::core::option::Option<
    unsafe extern "C" fn(texture: GLenum, s: GLfixed, t: GLfixed, r: GLfixed),
>;
pub type PFNGLMULTITEXCOORD3XVOESPROC =
    ::core::option::Option<unsafe extern "C" fn(texture: GLenum, coords: *const GLfixed)>;
pub type PFNGLMULTITEXCOORD4XVOESPROC =
    ::core::option::Option<unsafe extern "C" fn(texture: GLenum, coords: *const GLfixed)>;
pub type PFNGLNORMAL3XVOESPROC =
    ::core::option::Option<unsafe extern "C" fn(coords: *const GLfixed)>;
pub type PFNGLPASSTHROUGHXOESPROC = ::core::option::Option<unsafe extern "C" fn(token: GLfixed)>;
pub type PFNGLPIXELMAPXPROC =
    ::core::option::Option<unsafe extern "C" fn(map: GLenum, size: GLint, values: *const GLfixed)>;
pub type PFNGLPIXELSTOREXPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, param: GLfixed)>;
pub type PFNGLPIXELTRANSFERXOESPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, param: GLfixed)>;
pub type PFNGLPIXELZOOMXOESPROC =
    ::core::option::Option<unsafe extern "C" fn(xfactor: GLfixed, yfactor: GLfixed)>;
pub type PFNGLPRIORITIZETEXTURESXOESPROC = ::core::option::Option<
    unsafe extern "C" fn(n: GLsizei, textures: *const GLuint, priorities: *const GLfixed),
>;
pub type PFNGLRASTERPOS2XOESPROC =
    ::core::option::Option<unsafe extern "C" fn(x: GLfixed, y: GLfixed)>;
pub type PFNGLRASTERPOS2XVOESPROC =
    ::core::option::Option<unsafe extern "C" fn(coords: *const GLfixed)>;
pub type PFNGLRASTERPOS3XOESPROC =
    ::core::option::Option<unsafe extern "C" fn(x: GLfixed, y: GLfixed, z: GLfixed)>;
pub type PFNGLRASTERPOS3XVOESPROC =
    ::core::option::Option<unsafe extern "C" fn(coords: *const GLfixed)>;
pub type PFNGLRASTERPOS4XOESPROC =
    ::core::option::Option<unsafe extern "C" fn(x: GLfixed, y: GLfixed, z: GLfixed, w: GLfixed)>;
pub type PFNGLRASTERPOS4XVOESPROC =
    ::core::option::Option<unsafe extern "C" fn(coords: *const GLfixed)>;
pub type PFNGLRECTXOESPROC = ::core::option::Option<
    unsafe extern "C" fn(x1: GLfixed, y1: GLfixed, x2: GLfixed, y2: GLfixed),
>;
pub type PFNGLRECTXVOESPROC =
    ::core::option::Option<unsafe extern "C" fn(v1: *const GLfixed, v2: *const GLfixed)>;
pub type PFNGLTEXCOORD1XOESPROC = ::core::option::Option<unsafe extern "C" fn(s: GLfixed)>;
pub type PFNGLTEXCOORD1XVOESPROC =
    ::core::option::Option<unsafe extern "C" fn(coords: *const GLfixed)>;
pub type PFNGLTEXCOORD2XOESPROC =
    ::core::option::Option<unsafe extern "C" fn(s: GLfixed, t: GLfixed)>;
pub type PFNGLTEXCOORD2XVOESPROC =
    ::core::option::Option<unsafe extern "C" fn(coords: *const GLfixed)>;
pub type PFNGLTEXCOORD3XOESPROC =
    ::core::option::Option<unsafe extern "C" fn(s: GLfixed, t: GLfixed, r: GLfixed)>;
pub type PFNGLTEXCOORD3XVOESPROC =
    ::core::option::Option<unsafe extern "C" fn(coords: *const GLfixed)>;
pub type PFNGLTEXCOORD4XOESPROC =
    ::core::option::Option<unsafe extern "C" fn(s: GLfixed, t: GLfixed, r: GLfixed, q: GLfixed)>;
pub type PFNGLTEXCOORD4XVOESPROC =
    ::core::option::Option<unsafe extern "C" fn(coords: *const GLfixed)>;
pub type PFNGLTEXGENXOESPROC =
    ::core::option::Option<unsafe extern "C" fn(coord: GLenum, pname: GLenum, param: GLfixed)>;
pub type PFNGLTEXGENXVOESPROC = ::core::option::Option<
    unsafe extern "C" fn(coord: GLenum, pname: GLenum, params: *const GLfixed),
>;
pub type PFNGLVERTEX2XOESPROC = ::core::option::Option<unsafe extern "C" fn(x: GLfixed)>;
pub type PFNGLVERTEX2XVOESPROC =
    ::core::option::Option<unsafe extern "C" fn(coords: *const GLfixed)>;
pub type PFNGLVERTEX3XOESPROC =
    ::core::option::Option<unsafe extern "C" fn(x: GLfixed, y: GLfixed)>;
pub type PFNGLVERTEX3XVOESPROC =
    ::core::option::Option<unsafe extern "C" fn(coords: *const GLfixed)>;
pub type PFNGLVERTEX4XOESPROC =
    ::core::option::Option<unsafe extern "C" fn(x: GLfixed, y: GLfixed, z: GLfixed)>;
pub type PFNGLVERTEX4XVOESPROC =
    ::core::option::Option<unsafe extern "C" fn(coords: *const GLfixed)>;
extern "C" {
    pub fn glAlphaFuncxOES(func: GLenum, ref_: GLfixed);
}
extern "C" {
    pub fn glClearColorxOES(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed);
}
extern "C" {
    pub fn glClearDepthxOES(depth: GLfixed);
}
extern "C" {
    pub fn glClipPlanexOES(plane: GLenum, equation: *const GLfixed);
}
extern "C" {
    pub fn glColor4xOES(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed);
}
extern "C" {
    pub fn glDepthRangexOES(n: GLfixed, f: GLfixed);
}
extern "C" {
    pub fn glFogxOES(pname: GLenum, param: GLfixed);
}
extern "C" {
    pub fn glFogxvOES(pname: GLenum, param: *const GLfixed);
}
extern "C" {
    pub fn glFrustumxOES(l: GLfixed, r: GLfixed, b: GLfixed, t: GLfixed, n: GLfixed, f: GLfixed);
}
extern "C" {
    pub fn glGetClipPlanexOES(plane: GLenum, equation: *mut GLfixed);
}
extern "C" {
    pub fn glGetFixedvOES(pname: GLenum, params: *mut GLfixed);
}
extern "C" {
    pub fn glGetTexEnvxvOES(target: GLenum, pname: GLenum, params: *mut GLfixed);
}
extern "C" {
    pub fn glGetTexParameterxvOES(target: GLenum, pname: GLenum, params: *mut GLfixed);
}
extern "C" {
    pub fn glLightModelxOES(pname: GLenum, param: GLfixed);
}
extern "C" {
    pub fn glLightModelxvOES(pname: GLenum, param: *const GLfixed);
}
extern "C" {
    pub fn glLightxOES(light: GLenum, pname: GLenum, param: GLfixed);
}
extern "C" {
    pub fn glLightxvOES(light: GLenum, pname: GLenum, params: *const GLfixed);
}
extern "C" {
    pub fn glLineWidthxOES(width: GLfixed);
}
extern "C" {
    pub fn glLoadMatrixxOES(m: *const GLfixed);
}
extern "C" {
    pub fn glMaterialxOES(face: GLenum, pname: GLenum, param: GLfixed);
}
extern "C" {
    pub fn glMaterialxvOES(face: GLenum, pname: GLenum, param: *const GLfixed);
}
extern "C" {
    pub fn glMultMatrixxOES(m: *const GLfixed);
}
extern "C" {
    pub fn glMultiTexCoord4xOES(texture: GLenum, s: GLfixed, t: GLfixed, r: GLfixed, q: GLfixed);
}
extern "C" {
    pub fn glNormal3xOES(nx: GLfixed, ny: GLfixed, nz: GLfixed);
}
extern "C" {
    pub fn glOrthoxOES(l: GLfixed, r: GLfixed, b: GLfixed, t: GLfixed, n: GLfixed, f: GLfixed);
}
extern "C" {
    pub fn glPointParameterxvOES(pname: GLenum, params: *const GLfixed);
}
extern "C" {
    pub fn glPointSizexOES(size: GLfixed);
}
extern "C" {
    pub fn glPolygonOffsetxOES(factor: GLfixed, units: GLfixed);
}
extern "C" {
    pub fn glRotatexOES(angle: GLfixed, x: GLfixed, y: GLfixed, z: GLfixed);
}
extern "C" {
    pub fn glSampleCoverageOES(value: GLfixed, invert: GLboolean);
}
extern "C" {
    pub fn glScalexOES(x: GLfixed, y: GLfixed, z: GLfixed);
}
extern "C" {
    pub fn glTexEnvxOES(target: GLenum, pname: GLenum, param: GLfixed);
}
extern "C" {
    pub fn glTexEnvxvOES(target: GLenum, pname: GLenum, params: *const GLfixed);
}
extern "C" {
    pub fn glTexParameterxOES(target: GLenum, pname: GLenum, param: GLfixed);
}
extern "C" {
    pub fn glTexParameterxvOES(target: GLenum, pname: GLenum, params: *const GLfixed);
}
extern "C" {
    pub fn glTranslatexOES(x: GLfixed, y: GLfixed, z: GLfixed);
}
extern "C" {
    pub fn glAccumxOES(op: GLenum, value: GLfixed);
}
extern "C" {
    pub fn glBitmapxOES(
        width: GLsizei,
        height: GLsizei,
        xorig: GLfixed,
        yorig: GLfixed,
        xmove: GLfixed,
        ymove: GLfixed,
        bitmap: *const GLubyte,
    );
}
extern "C" {
    pub fn glBlendColorxOES(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed);
}
extern "C" {
    pub fn glClearAccumxOES(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed);
}
extern "C" {
    pub fn glColor3xOES(red: GLfixed, green: GLfixed, blue: GLfixed);
}
extern "C" {
    pub fn glColor3xvOES(components: *const GLfixed);
}
extern "C" {
    pub fn glColor4xvOES(components: *const GLfixed);
}
extern "C" {
    pub fn glConvolutionParameterxOES(target: GLenum, pname: GLenum, param: GLfixed);
}
extern "C" {
    pub fn glConvolutionParameterxvOES(target: GLenum, pname: GLenum, params: *const GLfixed);
}
extern "C" {
    pub fn glEvalCoord1xOES(u: GLfixed);
}
extern "C" {
    pub fn glEvalCoord1xvOES(coords: *const GLfixed);
}
extern "C" {
    pub fn glEvalCoord2xOES(u: GLfixed, v: GLfixed);
}
extern "C" {
    pub fn glEvalCoord2xvOES(coords: *const GLfixed);
}
extern "C" {
    pub fn glFeedbackBufferxOES(n: GLsizei, type_: GLenum, buffer: *const GLfixed);
}
extern "C" {
    pub fn glGetConvolutionParameterxvOES(target: GLenum, pname: GLenum, params: *mut GLfixed);
}
extern "C" {
    pub fn glGetHistogramParameterxvOES(target: GLenum, pname: GLenum, params: *mut GLfixed);
}
extern "C" {
    pub fn glGetLightxOES(light: GLenum, pname: GLenum, params: *mut GLfixed);
}
extern "C" {
    pub fn glGetMapxvOES(target: GLenum, query: GLenum, v: *mut GLfixed);
}
extern "C" {
    pub fn glGetMaterialxOES(face: GLenum, pname: GLenum, param: GLfixed);
}
extern "C" {
    pub fn glGetPixelMapxv(map: GLenum, size: GLint, values: *mut GLfixed);
}
extern "C" {
    pub fn glGetTexGenxvOES(coord: GLenum, pname: GLenum, params: *mut GLfixed);
}
extern "C" {
    pub fn glGetTexLevelParameterxvOES(
        target: GLenum,
        level: GLint,
        pname: GLenum,
        params: *mut GLfixed,
    );
}
extern "C" {
    pub fn glIndexxOES(component: GLfixed);
}
extern "C" {
    pub fn glIndexxvOES(component: *const GLfixed);
}
extern "C" {
    pub fn glLoadTransposeMatrixxOES(m: *const GLfixed);
}
extern "C" {
    pub fn glMap1xOES(
        target: GLenum,
        u1: GLfixed,
        u2: GLfixed,
        stride: GLint,
        order: GLint,
        points: GLfixed,
    );
}
extern "C" {
    pub fn glMap2xOES(
        target: GLenum,
        u1: GLfixed,
        u2: GLfixed,
        ustride: GLint,
        uorder: GLint,
        v1: GLfixed,
        v2: GLfixed,
        vstride: GLint,
        vorder: GLint,
        points: GLfixed,
    );
}
extern "C" {
    pub fn glMapGrid1xOES(n: GLint, u1: GLfixed, u2: GLfixed);
}
extern "C" {
    pub fn glMapGrid2xOES(n: GLint, u1: GLfixed, u2: GLfixed, v1: GLfixed, v2: GLfixed);
}
extern "C" {
    pub fn glMultTransposeMatrixxOES(m: *const GLfixed);
}
extern "C" {
    pub fn glMultiTexCoord1xOES(texture: GLenum, s: GLfixed);
}
extern "C" {
    pub fn glMultiTexCoord1xvOES(texture: GLenum, coords: *const GLfixed);
}
extern "C" {
    pub fn glMultiTexCoord2xOES(texture: GLenum, s: GLfixed, t: GLfixed);
}
extern "C" {
    pub fn glMultiTexCoord2xvOES(texture: GLenum, coords: *const GLfixed);
}
extern "C" {
    pub fn glMultiTexCoord3xOES(texture: GLenum, s: GLfixed, t: GLfixed, r: GLfixed);
}
extern "C" {
    pub fn glMultiTexCoord3xvOES(texture: GLenum, coords: *const GLfixed);
}
extern "C" {
    pub fn glMultiTexCoord4xvOES(texture: GLenum, coords: *const GLfixed);
}
extern "C" {
    pub fn glNormal3xvOES(coords: *const GLfixed);
}
extern "C" {
    pub fn glPassThroughxOES(token: GLfixed);
}
extern "C" {
    pub fn glPixelMapx(map: GLenum, size: GLint, values: *const GLfixed);
}
extern "C" {
    pub fn glPixelStorex(pname: GLenum, param: GLfixed);
}
extern "C" {
    pub fn glPixelTransferxOES(pname: GLenum, param: GLfixed);
}
extern "C" {
    pub fn glPixelZoomxOES(xfactor: GLfixed, yfactor: GLfixed);
}
extern "C" {
    pub fn glPrioritizeTexturesxOES(
        n: GLsizei,
        textures: *const GLuint,
        priorities: *const GLfixed,
    );
}
extern "C" {
    pub fn glRasterPos2xOES(x: GLfixed, y: GLfixed);
}
extern "C" {
    pub fn glRasterPos2xvOES(coords: *const GLfixed);
}
extern "C" {
    pub fn glRasterPos3xOES(x: GLfixed, y: GLfixed, z: GLfixed);
}
extern "C" {
    pub fn glRasterPos3xvOES(coords: *const GLfixed);
}
extern "C" {
    pub fn glRasterPos4xOES(x: GLfixed, y: GLfixed, z: GLfixed, w: GLfixed);
}
extern "C" {
    pub fn glRasterPos4xvOES(coords: *const GLfixed);
}
extern "C" {
    pub fn glRectxOES(x1: GLfixed, y1: GLfixed, x2: GLfixed, y2: GLfixed);
}
extern "C" {
    pub fn glRectxvOES(v1: *const GLfixed, v2: *const GLfixed);
}
extern "C" {
    pub fn glTexCoord1xOES(s: GLfixed);
}
extern "C" {
    pub fn glTexCoord1xvOES(coords: *const GLfixed);
}
extern "C" {
    pub fn glTexCoord2xOES(s: GLfixed, t: GLfixed);
}
extern "C" {
    pub fn glTexCoord2xvOES(coords: *const GLfixed);
}
extern "C" {
    pub fn glTexCoord3xOES(s: GLfixed, t: GLfixed, r: GLfixed);
}
extern "C" {
    pub fn glTexCoord3xvOES(coords: *const GLfixed);
}
extern "C" {
    pub fn glTexCoord4xOES(s: GLfixed, t: GLfixed, r: GLfixed, q: GLfixed);
}
extern "C" {
    pub fn glTexCoord4xvOES(coords: *const GLfixed);
}
extern "C" {
    pub fn glTexGenxOES(coord: GLenum, pname: GLenum, param: GLfixed);
}
extern "C" {
    pub fn glTexGenxvOES(coord: GLenum, pname: GLenum, params: *const GLfixed);
}
extern "C" {
    pub fn glVertex2xOES(x: GLfixed);
}
extern "C" {
    pub fn glVertex2xvOES(coords: *const GLfixed);
}
extern "C" {
    pub fn glVertex3xOES(x: GLfixed, y: GLfixed);
}
extern "C" {
    pub fn glVertex3xvOES(coords: *const GLfixed);
}
extern "C" {
    pub fn glVertex4xOES(x: GLfixed, y: GLfixed, z: GLfixed);
}
extern "C" {
    pub fn glVertex4xvOES(coords: *const GLfixed);
}
pub type PFNGLQUERYMATRIXXOESPROC = ::core::option::Option<
    unsafe extern "C" fn(mantissa: *mut GLfixed, exponent: *mut GLint) -> GLbitfield,
>;
extern "C" {
    pub fn glQueryMatrixxOES(mantissa: *mut GLfixed, exponent: *mut GLint) -> GLbitfield;
}
pub type PFNGLCLEARDEPTHFOESPROC = ::core::option::Option<unsafe extern "C" fn(depth: GLclampf)>;
pub type PFNGLCLIPPLANEFOESPROC =
    ::core::option::Option<unsafe extern "C" fn(plane: GLenum, equation: *const GLfloat)>;
pub type PFNGLDEPTHRANGEFOESPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLclampf, f: GLclampf)>;
pub type PFNGLFRUSTUMFOESPROC = ::core::option::Option<
    unsafe extern "C" fn(l: GLfloat, r: GLfloat, b: GLfloat, t: GLfloat, n: GLfloat, f: GLfloat),
>;
pub type PFNGLGETCLIPPLANEFOESPROC =
    ::core::option::Option<unsafe extern "C" fn(plane: GLenum, equation: *mut GLfloat)>;
pub type PFNGLORTHOFOESPROC = ::core::option::Option<
    unsafe extern "C" fn(l: GLfloat, r: GLfloat, b: GLfloat, t: GLfloat, n: GLfloat, f: GLfloat),
>;
extern "C" {
    pub fn glClearDepthfOES(depth: GLclampf);
}
extern "C" {
    pub fn glClipPlanefOES(plane: GLenum, equation: *const GLfloat);
}
extern "C" {
    pub fn glDepthRangefOES(n: GLclampf, f: GLclampf);
}
extern "C" {
    pub fn glFrustumfOES(l: GLfloat, r: GLfloat, b: GLfloat, t: GLfloat, n: GLfloat, f: GLfloat);
}
extern "C" {
    pub fn glGetClipPlanefOES(plane: GLenum, equation: *mut GLfloat);
}
extern "C" {
    pub fn glOrthofOES(l: GLfloat, r: GLfloat, b: GLfloat, t: GLfloat, n: GLfloat, f: GLfloat);
}
pub type PFNGLTBUFFERMASK3DFXPROC = ::core::option::Option<unsafe extern "C" fn(mask: GLuint)>;
extern "C" {
    pub fn glTbufferMask3DFX(mask: GLuint);
}
pub type GLDEBUGPROCAMD = ::core::option::Option<
    unsafe extern "C" fn(
        id: GLuint,
        category: GLenum,
        severity: GLenum,
        length: GLsizei,
        message: *const GLchar,
        userParam: *mut ctypes::c_void,
    ),
>;
pub type PFNGLDEBUGMESSAGEENABLEAMDPROC = ::core::option::Option<
    unsafe extern "C" fn(
        category: GLenum,
        severity: GLenum,
        count: GLsizei,
        ids: *const GLuint,
        enabled: GLboolean,
    ),
>;
pub type PFNGLDEBUGMESSAGEINSERTAMDPROC = ::core::option::Option<
    unsafe extern "C" fn(
        category: GLenum,
        severity: GLenum,
        id: GLuint,
        length: GLsizei,
        buf: *const GLchar,
    ),
>;
pub type PFNGLDEBUGMESSAGECALLBACKAMDPROC = ::core::option::Option<
    unsafe extern "C" fn(callback: GLDEBUGPROCAMD, userParam: *mut ctypes::c_void),
>;
pub type PFNGLGETDEBUGMESSAGELOGAMDPROC = ::core::option::Option<
    unsafe extern "C" fn(
        count: GLuint,
        bufsize: GLsizei,
        categories: *mut GLenum,
        severities: *mut GLuint,
        ids: *mut GLuint,
        lengths: *mut GLsizei,
        message: *mut GLchar,
    ) -> GLuint,
>;
extern "C" {
    pub fn glDebugMessageEnableAMD(
        category: GLenum,
        severity: GLenum,
        count: GLsizei,
        ids: *const GLuint,
        enabled: GLboolean,
    );
}
extern "C" {
    pub fn glDebugMessageInsertAMD(
        category: GLenum,
        severity: GLenum,
        id: GLuint,
        length: GLsizei,
        buf: *const GLchar,
    );
}
extern "C" {
    pub fn glDebugMessageCallbackAMD(callback: GLDEBUGPROCAMD, userParam: *mut ctypes::c_void);
}
extern "C" {
    pub fn glGetDebugMessageLogAMD(
        count: GLuint,
        bufsize: GLsizei,
        categories: *mut GLenum,
        severities: *mut GLuint,
        ids: *mut GLuint,
        lengths: *mut GLsizei,
        message: *mut GLchar,
    ) -> GLuint;
}
pub type PFNGLBLENDFUNCINDEXEDAMDPROC =
    ::core::option::Option<unsafe extern "C" fn(buf: GLuint, src: GLenum, dst: GLenum)>;
pub type PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC = ::core::option::Option<
    unsafe extern "C" fn(
        buf: GLuint,
        srcRGB: GLenum,
        dstRGB: GLenum,
        srcAlpha: GLenum,
        dstAlpha: GLenum,
    ),
>;
pub type PFNGLBLENDEQUATIONINDEXEDAMDPROC =
    ::core::option::Option<unsafe extern "C" fn(buf: GLuint, mode: GLenum)>;
pub type PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC =
    ::core::option::Option<unsafe extern "C" fn(buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum)>;
extern "C" {
    pub fn glBlendFuncIndexedAMD(buf: GLuint, src: GLenum, dst: GLenum);
}
extern "C" {
    pub fn glBlendFuncSeparateIndexedAMD(
        buf: GLuint,
        srcRGB: GLenum,
        dstRGB: GLenum,
        srcAlpha: GLenum,
        dstAlpha: GLenum,
    );
}
extern "C" {
    pub fn glBlendEquationIndexedAMD(buf: GLuint, mode: GLenum);
}
extern "C" {
    pub fn glBlendEquationSeparateIndexedAMD(buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum);
}
pub type GLint64EXT = i64;
pub type PFNGLUNIFORM1I64NVPROC =
    ::core::option::Option<unsafe extern "C" fn(location: GLint, x: GLint64EXT)>;
pub type PFNGLUNIFORM2I64NVPROC =
    ::core::option::Option<unsafe extern "C" fn(location: GLint, x: GLint64EXT, y: GLint64EXT)>;
pub type PFNGLUNIFORM3I64NVPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT),
>;
pub type PFNGLUNIFORM4I64NVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        x: GLint64EXT,
        y: GLint64EXT,
        z: GLint64EXT,
        w: GLint64EXT,
    ),
>;
pub type PFNGLUNIFORM1I64VNVPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLint64EXT),
>;
pub type PFNGLUNIFORM2I64VNVPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLint64EXT),
>;
pub type PFNGLUNIFORM3I64VNVPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLint64EXT),
>;
pub type PFNGLUNIFORM4I64VNVPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLint64EXT),
>;
pub type PFNGLUNIFORM1UI64NVPROC =
    ::core::option::Option<unsafe extern "C" fn(location: GLint, x: GLuint64EXT)>;
pub type PFNGLUNIFORM2UI64NVPROC =
    ::core::option::Option<unsafe extern "C" fn(location: GLint, x: GLuint64EXT, y: GLuint64EXT)>;
pub type PFNGLUNIFORM3UI64NVPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT),
>;
pub type PFNGLUNIFORM4UI64NVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        x: GLuint64EXT,
        y: GLuint64EXT,
        z: GLuint64EXT,
        w: GLuint64EXT,
    ),
>;
pub type PFNGLUNIFORM1UI64VNVPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLuint64EXT),
>;
pub type PFNGLUNIFORM2UI64VNVPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLuint64EXT),
>;
pub type PFNGLUNIFORM3UI64VNVPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLuint64EXT),
>;
pub type PFNGLUNIFORM4UI64VNVPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLuint64EXT),
>;
pub type PFNGLGETUNIFORMI64VNVPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, params: *mut GLint64EXT),
>;
pub type PFNGLGETUNIFORMUI64VNVPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, params: *mut GLuint64EXT),
>;
pub type PFNGLPROGRAMUNIFORM1I64NVPROC =
    ::core::option::Option<unsafe extern "C" fn(program: GLuint, location: GLint, x: GLint64EXT)>;
pub type PFNGLPROGRAMUNIFORM2I64NVPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT),
>;
pub type PFNGLPROGRAMUNIFORM3I64NVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        x: GLint64EXT,
        y: GLint64EXT,
        z: GLint64EXT,
    ),
>;
pub type PFNGLPROGRAMUNIFORM4I64NVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        x: GLint64EXT,
        y: GLint64EXT,
        z: GLint64EXT,
        w: GLint64EXT,
    ),
>;
pub type PFNGLPROGRAMUNIFORM1I64VNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLint64EXT,
    ),
>;
pub type PFNGLPROGRAMUNIFORM2I64VNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLint64EXT,
    ),
>;
pub type PFNGLPROGRAMUNIFORM3I64VNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLint64EXT,
    ),
>;
pub type PFNGLPROGRAMUNIFORM4I64VNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLint64EXT,
    ),
>;
pub type PFNGLPROGRAMUNIFORM1UI64NVPROC =
    ::core::option::Option<unsafe extern "C" fn(program: GLuint, location: GLint, x: GLuint64EXT)>;
pub type PFNGLPROGRAMUNIFORM2UI64NVPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT),
>;
pub type PFNGLPROGRAMUNIFORM3UI64NVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        x: GLuint64EXT,
        y: GLuint64EXT,
        z: GLuint64EXT,
    ),
>;
pub type PFNGLPROGRAMUNIFORM4UI64NVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        x: GLuint64EXT,
        y: GLuint64EXT,
        z: GLuint64EXT,
        w: GLuint64EXT,
    ),
>;
pub type PFNGLPROGRAMUNIFORM1UI64VNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLuint64EXT,
    ),
>;
pub type PFNGLPROGRAMUNIFORM2UI64VNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLuint64EXT,
    ),
>;
pub type PFNGLPROGRAMUNIFORM3UI64VNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLuint64EXT,
    ),
>;
pub type PFNGLPROGRAMUNIFORM4UI64VNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLuint64EXT,
    ),
>;
extern "C" {
    pub fn glUniform1i64NV(location: GLint, x: GLint64EXT);
}
extern "C" {
    pub fn glUniform2i64NV(location: GLint, x: GLint64EXT, y: GLint64EXT);
}
extern "C" {
    pub fn glUniform3i64NV(location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT);
}
extern "C" {
    pub fn glUniform4i64NV(
        location: GLint,
        x: GLint64EXT,
        y: GLint64EXT,
        z: GLint64EXT,
        w: GLint64EXT,
    );
}
extern "C" {
    pub fn glUniform1i64vNV(location: GLint, count: GLsizei, value: *const GLint64EXT);
}
extern "C" {
    pub fn glUniform2i64vNV(location: GLint, count: GLsizei, value: *const GLint64EXT);
}
extern "C" {
    pub fn glUniform3i64vNV(location: GLint, count: GLsizei, value: *const GLint64EXT);
}
extern "C" {
    pub fn glUniform4i64vNV(location: GLint, count: GLsizei, value: *const GLint64EXT);
}
extern "C" {
    pub fn glUniform1ui64NV(location: GLint, x: GLuint64EXT);
}
extern "C" {
    pub fn glUniform2ui64NV(location: GLint, x: GLuint64EXT, y: GLuint64EXT);
}
extern "C" {
    pub fn glUniform3ui64NV(location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT);
}
extern "C" {
    pub fn glUniform4ui64NV(
        location: GLint,
        x: GLuint64EXT,
        y: GLuint64EXT,
        z: GLuint64EXT,
        w: GLuint64EXT,
    );
}
extern "C" {
    pub fn glUniform1ui64vNV(location: GLint, count: GLsizei, value: *const GLuint64EXT);
}
extern "C" {
    pub fn glUniform2ui64vNV(location: GLint, count: GLsizei, value: *const GLuint64EXT);
}
extern "C" {
    pub fn glUniform3ui64vNV(location: GLint, count: GLsizei, value: *const GLuint64EXT);
}
extern "C" {
    pub fn glUniform4ui64vNV(location: GLint, count: GLsizei, value: *const GLuint64EXT);
}
extern "C" {
    pub fn glGetUniformi64vNV(program: GLuint, location: GLint, params: *mut GLint64EXT);
}
extern "C" {
    pub fn glGetUniformui64vNV(program: GLuint, location: GLint, params: *mut GLuint64EXT);
}
extern "C" {
    pub fn glProgramUniform1i64NV(program: GLuint, location: GLint, x: GLint64EXT);
}
extern "C" {
    pub fn glProgramUniform2i64NV(program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT);
}
extern "C" {
    pub fn glProgramUniform3i64NV(
        program: GLuint,
        location: GLint,
        x: GLint64EXT,
        y: GLint64EXT,
        z: GLint64EXT,
    );
}
extern "C" {
    pub fn glProgramUniform4i64NV(
        program: GLuint,
        location: GLint,
        x: GLint64EXT,
        y: GLint64EXT,
        z: GLint64EXT,
        w: GLint64EXT,
    );
}
extern "C" {
    pub fn glProgramUniform1i64vNV(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLint64EXT,
    );
}
extern "C" {
    pub fn glProgramUniform2i64vNV(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLint64EXT,
    );
}
extern "C" {
    pub fn glProgramUniform3i64vNV(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLint64EXT,
    );
}
extern "C" {
    pub fn glProgramUniform4i64vNV(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLint64EXT,
    );
}
extern "C" {
    pub fn glProgramUniform1ui64NV(program: GLuint, location: GLint, x: GLuint64EXT);
}
extern "C" {
    pub fn glProgramUniform2ui64NV(
        program: GLuint,
        location: GLint,
        x: GLuint64EXT,
        y: GLuint64EXT,
    );
}
extern "C" {
    pub fn glProgramUniform3ui64NV(
        program: GLuint,
        location: GLint,
        x: GLuint64EXT,
        y: GLuint64EXT,
        z: GLuint64EXT,
    );
}
extern "C" {
    pub fn glProgramUniform4ui64NV(
        program: GLuint,
        location: GLint,
        x: GLuint64EXT,
        y: GLuint64EXT,
        z: GLuint64EXT,
        w: GLuint64EXT,
    );
}
extern "C" {
    pub fn glProgramUniform1ui64vNV(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLuint64EXT,
    );
}
extern "C" {
    pub fn glProgramUniform2ui64vNV(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLuint64EXT,
    );
}
extern "C" {
    pub fn glProgramUniform3ui64vNV(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLuint64EXT,
    );
}
extern "C" {
    pub fn glProgramUniform4ui64vNV(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLuint64EXT,
    );
}
pub type PFNGLVERTEXATTRIBPARAMETERIAMDPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, pname: GLenum, param: GLint)>;
extern "C" {
    pub fn glVertexAttribParameteriAMD(index: GLuint, pname: GLenum, param: GLint);
}
pub type PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC = ::core::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        indirect: *const ctypes::c_void,
        primcount: GLsizei,
        stride: GLsizei,
    ),
>;
pub type PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC = ::core::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        type_: GLenum,
        indirect: *const ctypes::c_void,
        primcount: GLsizei,
        stride: GLsizei,
    ),
>;
extern "C" {
    pub fn glMultiDrawArraysIndirectAMD(
        mode: GLenum,
        indirect: *const ctypes::c_void,
        primcount: GLsizei,
        stride: GLsizei,
    );
}
extern "C" {
    pub fn glMultiDrawElementsIndirectAMD(
        mode: GLenum,
        type_: GLenum,
        indirect: *const ctypes::c_void,
        primcount: GLsizei,
        stride: GLsizei,
    );
}
pub type PFNGLGENNAMESAMDPROC = ::core::option::Option<
    unsafe extern "C" fn(identifier: GLenum, num: GLuint, names: *mut GLuint),
>;
pub type PFNGLDELETENAMESAMDPROC = ::core::option::Option<
    unsafe extern "C" fn(identifier: GLenum, num: GLuint, names: *const GLuint),
>;
pub type PFNGLISNAMEAMDPROC =
    ::core::option::Option<unsafe extern "C" fn(identifier: GLenum, name: GLuint) -> GLboolean>;
extern "C" {
    pub fn glGenNamesAMD(identifier: GLenum, num: GLuint, names: *mut GLuint);
}
extern "C" {
    pub fn glDeleteNamesAMD(identifier: GLenum, num: GLuint, names: *const GLuint);
}
extern "C" {
    pub fn glIsNameAMD(identifier: GLenum, name: GLuint) -> GLboolean;
}
pub type PFNGLQUERYOBJECTPARAMETERUIAMDPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, id: GLuint, pname: GLenum, param: GLuint),
>;
extern "C" {
    pub fn glQueryObjectParameteruiAMD(target: GLenum, id: GLuint, pname: GLenum, param: GLuint);
}
pub type PFNGLGETPERFMONITORGROUPSAMDPROC = ::core::option::Option<
    unsafe extern "C" fn(numGroups: *mut GLint, groupsSize: GLsizei, groups: *mut GLuint),
>;
pub type PFNGLGETPERFMONITORCOUNTERSAMDPROC = ::core::option::Option<
    unsafe extern "C" fn(
        group: GLuint,
        numCounters: *mut GLint,
        maxActiveCounters: *mut GLint,
        counterSize: GLsizei,
        counters: *mut GLuint,
    ),
>;
pub type PFNGLGETPERFMONITORGROUPSTRINGAMDPROC = ::core::option::Option<
    unsafe extern "C" fn(
        group: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        groupString: *mut GLchar,
    ),
>;
pub type PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC = ::core::option::Option<
    unsafe extern "C" fn(
        group: GLuint,
        counter: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        counterString: *mut GLchar,
    ),
>;
pub type PFNGLGETPERFMONITORCOUNTERINFOAMDPROC = ::core::option::Option<
    unsafe extern "C" fn(group: GLuint, counter: GLuint, pname: GLenum, data: *mut ctypes::c_void),
>;
pub type PFNGLGENPERFMONITORSAMDPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, monitors: *mut GLuint)>;
pub type PFNGLDELETEPERFMONITORSAMDPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, monitors: *mut GLuint)>;
pub type PFNGLSELECTPERFMONITORCOUNTERSAMDPROC = ::core::option::Option<
    unsafe extern "C" fn(
        monitor: GLuint,
        enable: GLboolean,
        group: GLuint,
        numCounters: GLint,
        counterList: *mut GLuint,
    ),
>;
pub type PFNGLBEGINPERFMONITORAMDPROC =
    ::core::option::Option<unsafe extern "C" fn(monitor: GLuint)>;
pub type PFNGLENDPERFMONITORAMDPROC = ::core::option::Option<unsafe extern "C" fn(monitor: GLuint)>;
pub type PFNGLGETPERFMONITORCOUNTERDATAAMDPROC = ::core::option::Option<
    unsafe extern "C" fn(
        monitor: GLuint,
        pname: GLenum,
        dataSize: GLsizei,
        data: *mut GLuint,
        bytesWritten: *mut GLint,
    ),
>;
extern "C" {
    pub fn glGetPerfMonitorGroupsAMD(
        numGroups: *mut GLint,
        groupsSize: GLsizei,
        groups: *mut GLuint,
    );
}
extern "C" {
    pub fn glGetPerfMonitorCountersAMD(
        group: GLuint,
        numCounters: *mut GLint,
        maxActiveCounters: *mut GLint,
        counterSize: GLsizei,
        counters: *mut GLuint,
    );
}
extern "C" {
    pub fn glGetPerfMonitorGroupStringAMD(
        group: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        groupString: *mut GLchar,
    );
}
extern "C" {
    pub fn glGetPerfMonitorCounterStringAMD(
        group: GLuint,
        counter: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        counterString: *mut GLchar,
    );
}
extern "C" {
    pub fn glGetPerfMonitorCounterInfoAMD(
        group: GLuint,
        counter: GLuint,
        pname: GLenum,
        data: *mut ctypes::c_void,
    );
}
extern "C" {
    pub fn glGenPerfMonitorsAMD(n: GLsizei, monitors: *mut GLuint);
}
extern "C" {
    pub fn glDeletePerfMonitorsAMD(n: GLsizei, monitors: *mut GLuint);
}
extern "C" {
    pub fn glSelectPerfMonitorCountersAMD(
        monitor: GLuint,
        enable: GLboolean,
        group: GLuint,
        numCounters: GLint,
        counterList: *mut GLuint,
    );
}
extern "C" {
    pub fn glBeginPerfMonitorAMD(monitor: GLuint);
}
extern "C" {
    pub fn glEndPerfMonitorAMD(monitor: GLuint);
}
extern "C" {
    pub fn glGetPerfMonitorCounterDataAMD(
        monitor: GLuint,
        pname: GLenum,
        dataSize: GLsizei,
        data: *mut GLuint,
        bytesWritten: *mut GLint,
    );
}
pub type PFNGLSETMULTISAMPLEFVAMDPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, index: GLuint, val: *const GLfloat)>;
extern "C" {
    pub fn glSetMultisamplefvAMD(pname: GLenum, index: GLuint, val: *const GLfloat);
}
pub type PFNGLTEXSTORAGESPARSEAMDPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        internalFormat: GLenum,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        layers: GLsizei,
        flags: GLbitfield,
    ),
>;
pub type PFNGLTEXTURESTORAGESPARSEAMDPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        target: GLenum,
        internalFormat: GLenum,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        layers: GLsizei,
        flags: GLbitfield,
    ),
>;
extern "C" {
    pub fn glTexStorageSparseAMD(
        target: GLenum,
        internalFormat: GLenum,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        layers: GLsizei,
        flags: GLbitfield,
    );
}
extern "C" {
    pub fn glTextureStorageSparseAMD(
        texture: GLuint,
        target: GLenum,
        internalFormat: GLenum,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        layers: GLsizei,
        flags: GLbitfield,
    );
}
pub type PFNGLSTENCILOPVALUEAMDPROC =
    ::core::option::Option<unsafe extern "C" fn(face: GLenum, value: GLuint)>;
extern "C" {
    pub fn glStencilOpValueAMD(face: GLenum, value: GLuint);
}
pub type PFNGLTESSELLATIONFACTORAMDPROC =
    ::core::option::Option<unsafe extern "C" fn(factor: GLfloat)>;
pub type PFNGLTESSELLATIONMODEAMDPROC = ::core::option::Option<unsafe extern "C" fn(mode: GLenum)>;
extern "C" {
    pub fn glTessellationFactorAMD(factor: GLfloat);
}
extern "C" {
    pub fn glTessellationModeAMD(mode: GLenum);
}
pub type PFNGLELEMENTPOINTERAPPLEPROC =
    ::core::option::Option<unsafe extern "C" fn(type_: GLenum, pointer: *const ctypes::c_void)>;
pub type PFNGLDRAWELEMENTARRAYAPPLEPROC =
    ::core::option::Option<unsafe extern "C" fn(mode: GLenum, first: GLint, count: GLsizei)>;
pub type PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC = ::core::option::Option<
    unsafe extern "C" fn(mode: GLenum, start: GLuint, end: GLuint, first: GLint, count: GLsizei),
>;
pub type PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC = ::core::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        first: *const GLint,
        count: *const GLsizei,
        primcount: GLsizei,
    ),
>;
pub type PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC = ::core::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        start: GLuint,
        end: GLuint,
        first: *const GLint,
        count: *const GLsizei,
        primcount: GLsizei,
    ),
>;
extern "C" {
    pub fn glElementPointerAPPLE(type_: GLenum, pointer: *const ctypes::c_void);
}
extern "C" {
    pub fn glDrawElementArrayAPPLE(mode: GLenum, first: GLint, count: GLsizei);
}
extern "C" {
    pub fn glDrawRangeElementArrayAPPLE(
        mode: GLenum,
        start: GLuint,
        end: GLuint,
        first: GLint,
        count: GLsizei,
    );
}
extern "C" {
    pub fn glMultiDrawElementArrayAPPLE(
        mode: GLenum,
        first: *const GLint,
        count: *const GLsizei,
        primcount: GLsizei,
    );
}
extern "C" {
    pub fn glMultiDrawRangeElementArrayAPPLE(
        mode: GLenum,
        start: GLuint,
        end: GLuint,
        first: *const GLint,
        count: *const GLsizei,
        primcount: GLsizei,
    );
}
pub type PFNGLGENFENCESAPPLEPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, fences: *mut GLuint)>;
pub type PFNGLDELETEFENCESAPPLEPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, fences: *const GLuint)>;
pub type PFNGLSETFENCEAPPLEPROC = ::core::option::Option<unsafe extern "C" fn(fence: GLuint)>;
pub type PFNGLISFENCEAPPLEPROC =
    ::core::option::Option<unsafe extern "C" fn(fence: GLuint) -> GLboolean>;
pub type PFNGLTESTFENCEAPPLEPROC =
    ::core::option::Option<unsafe extern "C" fn(fence: GLuint) -> GLboolean>;
pub type PFNGLFINISHFENCEAPPLEPROC = ::core::option::Option<unsafe extern "C" fn(fence: GLuint)>;
pub type PFNGLTESTOBJECTAPPLEPROC =
    ::core::option::Option<unsafe extern "C" fn(object: GLenum, name: GLuint) -> GLboolean>;
pub type PFNGLFINISHOBJECTAPPLEPROC =
    ::core::option::Option<unsafe extern "C" fn(object: GLenum, name: GLint)>;
extern "C" {
    pub fn glGenFencesAPPLE(n: GLsizei, fences: *mut GLuint);
}
extern "C" {
    pub fn glDeleteFencesAPPLE(n: GLsizei, fences: *const GLuint);
}
extern "C" {
    pub fn glSetFenceAPPLE(fence: GLuint);
}
extern "C" {
    pub fn glIsFenceAPPLE(fence: GLuint) -> GLboolean;
}
extern "C" {
    pub fn glTestFenceAPPLE(fence: GLuint) -> GLboolean;
}
extern "C" {
    pub fn glFinishFenceAPPLE(fence: GLuint);
}
extern "C" {
    pub fn glTestObjectAPPLE(object: GLenum, name: GLuint) -> GLboolean;
}
extern "C" {
    pub fn glFinishObjectAPPLE(object: GLenum, name: GLint);
}
pub type PFNGLBUFFERPARAMETERIAPPLEPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, param: GLint)>;
pub type PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, offset: GLintptr, size: GLsizeiptr),
>;
extern "C" {
    pub fn glBufferParameteriAPPLE(target: GLenum, pname: GLenum, param: GLint);
}
extern "C" {
    pub fn glFlushMappedBufferRangeAPPLE(target: GLenum, offset: GLintptr, size: GLsizeiptr);
}
pub type PFNGLOBJECTPURGEABLEAPPLEPROC = ::core::option::Option<
    unsafe extern "C" fn(objectType: GLenum, name: GLuint, option: GLenum) -> GLenum,
>;
pub type PFNGLOBJECTUNPURGEABLEAPPLEPROC = ::core::option::Option<
    unsafe extern "C" fn(objectType: GLenum, name: GLuint, option: GLenum) -> GLenum,
>;
pub type PFNGLGETOBJECTPARAMETERIVAPPLEPROC = ::core::option::Option<
    unsafe extern "C" fn(objectType: GLenum, name: GLuint, pname: GLenum, params: *mut GLint),
>;
extern "C" {
    pub fn glObjectPurgeableAPPLE(objectType: GLenum, name: GLuint, option: GLenum) -> GLenum;
}
extern "C" {
    pub fn glObjectUnpurgeableAPPLE(objectType: GLenum, name: GLuint, option: GLenum) -> GLenum;
}
extern "C" {
    pub fn glGetObjectParameterivAPPLE(
        objectType: GLenum,
        name: GLuint,
        pname: GLenum,
        params: *mut GLint,
    );
}
pub type PFNGLTEXTURERANGEAPPLEPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, length: GLsizei, pointer: *const ctypes::c_void),
>;
pub type PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut *mut ctypes::c_void),
>;
extern "C" {
    pub fn glTextureRangeAPPLE(target: GLenum, length: GLsizei, pointer: *const ctypes::c_void);
}
extern "C" {
    pub fn glGetTexParameterPointervAPPLE(
        target: GLenum,
        pname: GLenum,
        params: *mut *mut ctypes::c_void,
    );
}
pub type PFNGLBINDVERTEXARRAYAPPLEPROC =
    ::core::option::Option<unsafe extern "C" fn(array: GLuint)>;
pub type PFNGLDELETEVERTEXARRAYSAPPLEPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, arrays: *const GLuint)>;
pub type PFNGLGENVERTEXARRAYSAPPLEPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, arrays: *mut GLuint)>;
pub type PFNGLISVERTEXARRAYAPPLEPROC =
    ::core::option::Option<unsafe extern "C" fn(array: GLuint) -> GLboolean>;
extern "C" {
    pub fn glBindVertexArrayAPPLE(array: GLuint);
}
extern "C" {
    pub fn glDeleteVertexArraysAPPLE(n: GLsizei, arrays: *const GLuint);
}
extern "C" {
    pub fn glGenVertexArraysAPPLE(n: GLsizei, arrays: *mut GLuint);
}
extern "C" {
    pub fn glIsVertexArrayAPPLE(array: GLuint) -> GLboolean;
}
pub type PFNGLVERTEXARRAYRANGEAPPLEPROC =
    ::core::option::Option<unsafe extern "C" fn(length: GLsizei, pointer: *mut ctypes::c_void)>;
pub type PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC =
    ::core::option::Option<unsafe extern "C" fn(length: GLsizei, pointer: *mut ctypes::c_void)>;
pub type PFNGLVERTEXARRAYPARAMETERIAPPLEPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, param: GLint)>;
extern "C" {
    pub fn glVertexArrayRangeAPPLE(length: GLsizei, pointer: *mut ctypes::c_void);
}
extern "C" {
    pub fn glFlushVertexArrayRangeAPPLE(length: GLsizei, pointer: *mut ctypes::c_void);
}
extern "C" {
    pub fn glVertexArrayParameteriAPPLE(pname: GLenum, param: GLint);
}
pub type PFNGLENABLEVERTEXATTRIBAPPLEPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, pname: GLenum)>;
pub type PFNGLDISABLEVERTEXATTRIBAPPLEPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, pname: GLenum)>;
pub type PFNGLISVERTEXATTRIBENABLEDAPPLEPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, pname: GLenum) -> GLboolean>;
pub type PFNGLMAPVERTEXATTRIB1DAPPLEPROC = ::core::option::Option<
    unsafe extern "C" fn(
        index: GLuint,
        size: GLuint,
        u1: GLdouble,
        u2: GLdouble,
        stride: GLint,
        order: GLint,
        points: *const GLdouble,
    ),
>;
pub type PFNGLMAPVERTEXATTRIB1FAPPLEPROC = ::core::option::Option<
    unsafe extern "C" fn(
        index: GLuint,
        size: GLuint,
        u1: GLfloat,
        u2: GLfloat,
        stride: GLint,
        order: GLint,
        points: *const GLfloat,
    ),
>;
pub type PFNGLMAPVERTEXATTRIB2DAPPLEPROC = ::core::option::Option<
    unsafe extern "C" fn(
        index: GLuint,
        size: GLuint,
        u1: GLdouble,
        u2: GLdouble,
        ustride: GLint,
        uorder: GLint,
        v1: GLdouble,
        v2: GLdouble,
        vstride: GLint,
        vorder: GLint,
        points: *const GLdouble,
    ),
>;
pub type PFNGLMAPVERTEXATTRIB2FAPPLEPROC = ::core::option::Option<
    unsafe extern "C" fn(
        index: GLuint,
        size: GLuint,
        u1: GLfloat,
        u2: GLfloat,
        ustride: GLint,
        uorder: GLint,
        v1: GLfloat,
        v2: GLfloat,
        vstride: GLint,
        vorder: GLint,
        points: *const GLfloat,
    ),
>;
extern "C" {
    pub fn glEnableVertexAttribAPPLE(index: GLuint, pname: GLenum);
}
extern "C" {
    pub fn glDisableVertexAttribAPPLE(index: GLuint, pname: GLenum);
}
extern "C" {
    pub fn glIsVertexAttribEnabledAPPLE(index: GLuint, pname: GLenum) -> GLboolean;
}
extern "C" {
    pub fn glMapVertexAttrib1dAPPLE(
        index: GLuint,
        size: GLuint,
        u1: GLdouble,
        u2: GLdouble,
        stride: GLint,
        order: GLint,
        points: *const GLdouble,
    );
}
extern "C" {
    pub fn glMapVertexAttrib1fAPPLE(
        index: GLuint,
        size: GLuint,
        u1: GLfloat,
        u2: GLfloat,
        stride: GLint,
        order: GLint,
        points: *const GLfloat,
    );
}
extern "C" {
    pub fn glMapVertexAttrib2dAPPLE(
        index: GLuint,
        size: GLuint,
        u1: GLdouble,
        u2: GLdouble,
        ustride: GLint,
        uorder: GLint,
        v1: GLdouble,
        v2: GLdouble,
        vstride: GLint,
        vorder: GLint,
        points: *const GLdouble,
    );
}
extern "C" {
    pub fn glMapVertexAttrib2fAPPLE(
        index: GLuint,
        size: GLuint,
        u1: GLfloat,
        u2: GLfloat,
        ustride: GLint,
        uorder: GLint,
        v1: GLfloat,
        v2: GLfloat,
        vstride: GLint,
        vorder: GLint,
        points: *const GLfloat,
    );
}
pub type PFNGLDRAWBUFFERSATIPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, bufs: *const GLenum)>;
extern "C" {
    pub fn glDrawBuffersATI(n: GLsizei, bufs: *const GLenum);
}
pub type PFNGLELEMENTPOINTERATIPROC =
    ::core::option::Option<unsafe extern "C" fn(type_: GLenum, pointer: *const ctypes::c_void)>;
pub type PFNGLDRAWELEMENTARRAYATIPROC =
    ::core::option::Option<unsafe extern "C" fn(mode: GLenum, count: GLsizei)>;
pub type PFNGLDRAWRANGEELEMENTARRAYATIPROC = ::core::option::Option<
    unsafe extern "C" fn(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei),
>;
extern "C" {
    pub fn glElementPointerATI(type_: GLenum, pointer: *const ctypes::c_void);
}
extern "C" {
    pub fn glDrawElementArrayATI(mode: GLenum, count: GLsizei);
}
extern "C" {
    pub fn glDrawRangeElementArrayATI(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei);
}
pub type PFNGLTEXBUMPPARAMETERIVATIPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, param: *const GLint)>;
pub type PFNGLTEXBUMPPARAMETERFVATIPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, param: *const GLfloat)>;
pub type PFNGLGETTEXBUMPPARAMETERIVATIPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, param: *mut GLint)>;
pub type PFNGLGETTEXBUMPPARAMETERFVATIPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, param: *mut GLfloat)>;
extern "C" {
    pub fn glTexBumpParameterivATI(pname: GLenum, param: *const GLint);
}
extern "C" {
    pub fn glTexBumpParameterfvATI(pname: GLenum, param: *const GLfloat);
}
extern "C" {
    pub fn glGetTexBumpParameterivATI(pname: GLenum, param: *mut GLint);
}
extern "C" {
    pub fn glGetTexBumpParameterfvATI(pname: GLenum, param: *mut GLfloat);
}
pub type PFNGLGENFRAGMENTSHADERSATIPROC =
    ::core::option::Option<unsafe extern "C" fn(range: GLuint) -> GLuint>;
pub type PFNGLBINDFRAGMENTSHADERATIPROC = ::core::option::Option<unsafe extern "C" fn(id: GLuint)>;
pub type PFNGLDELETEFRAGMENTSHADERATIPROC =
    ::core::option::Option<unsafe extern "C" fn(id: GLuint)>;
pub type PFNGLBEGINFRAGMENTSHADERATIPROC = ::core::option::Option<unsafe extern "C" fn()>;
pub type PFNGLENDFRAGMENTSHADERATIPROC = ::core::option::Option<unsafe extern "C" fn()>;
pub type PFNGLPASSTEXCOORDATIPROC =
    ::core::option::Option<unsafe extern "C" fn(dst: GLuint, coord: GLuint, swizzle: GLenum)>;
pub type PFNGLSAMPLEMAPATIPROC =
    ::core::option::Option<unsafe extern "C" fn(dst: GLuint, interp: GLuint, swizzle: GLenum)>;
pub type PFNGLCOLORFRAGMENTOP1ATIPROC = ::core::option::Option<
    unsafe extern "C" fn(
        op: GLenum,
        dst: GLuint,
        dstMask: GLuint,
        dstMod: GLuint,
        arg1: GLuint,
        arg1Rep: GLuint,
        arg1Mod: GLuint,
    ),
>;
pub type PFNGLCOLORFRAGMENTOP2ATIPROC = ::core::option::Option<
    unsafe extern "C" fn(
        op: GLenum,
        dst: GLuint,
        dstMask: GLuint,
        dstMod: GLuint,
        arg1: GLuint,
        arg1Rep: GLuint,
        arg1Mod: GLuint,
        arg2: GLuint,
        arg2Rep: GLuint,
        arg2Mod: GLuint,
    ),
>;
pub type PFNGLCOLORFRAGMENTOP3ATIPROC = ::core::option::Option<
    unsafe extern "C" fn(
        op: GLenum,
        dst: GLuint,
        dstMask: GLuint,
        dstMod: GLuint,
        arg1: GLuint,
        arg1Rep: GLuint,
        arg1Mod: GLuint,
        arg2: GLuint,
        arg2Rep: GLuint,
        arg2Mod: GLuint,
        arg3: GLuint,
        arg3Rep: GLuint,
        arg3Mod: GLuint,
    ),
>;
pub type PFNGLALPHAFRAGMENTOP1ATIPROC = ::core::option::Option<
    unsafe extern "C" fn(
        op: GLenum,
        dst: GLuint,
        dstMod: GLuint,
        arg1: GLuint,
        arg1Rep: GLuint,
        arg1Mod: GLuint,
    ),
>;
pub type PFNGLALPHAFRAGMENTOP2ATIPROC = ::core::option::Option<
    unsafe extern "C" fn(
        op: GLenum,
        dst: GLuint,
        dstMod: GLuint,
        arg1: GLuint,
        arg1Rep: GLuint,
        arg1Mod: GLuint,
        arg2: GLuint,
        arg2Rep: GLuint,
        arg2Mod: GLuint,
    ),
>;
pub type PFNGLALPHAFRAGMENTOP3ATIPROC = ::core::option::Option<
    unsafe extern "C" fn(
        op: GLenum,
        dst: GLuint,
        dstMod: GLuint,
        arg1: GLuint,
        arg1Rep: GLuint,
        arg1Mod: GLuint,
        arg2: GLuint,
        arg2Rep: GLuint,
        arg2Mod: GLuint,
        arg3: GLuint,
        arg3Rep: GLuint,
        arg3Mod: GLuint,
    ),
>;
pub type PFNGLSETFRAGMENTSHADERCONSTANTATIPROC =
    ::core::option::Option<unsafe extern "C" fn(dst: GLuint, value: *const GLfloat)>;
extern "C" {
    pub fn glGenFragmentShadersATI(range: GLuint) -> GLuint;
}
extern "C" {
    pub fn glBindFragmentShaderATI(id: GLuint);
}
extern "C" {
    pub fn glDeleteFragmentShaderATI(id: GLuint);
}
extern "C" {
    pub fn glBeginFragmentShaderATI();
}
extern "C" {
    pub fn glEndFragmentShaderATI();
}
extern "C" {
    pub fn glPassTexCoordATI(dst: GLuint, coord: GLuint, swizzle: GLenum);
}
extern "C" {
    pub fn glSampleMapATI(dst: GLuint, interp: GLuint, swizzle: GLenum);
}
extern "C" {
    pub fn glColorFragmentOp1ATI(
        op: GLenum,
        dst: GLuint,
        dstMask: GLuint,
        dstMod: GLuint,
        arg1: GLuint,
        arg1Rep: GLuint,
        arg1Mod: GLuint,
    );
}
extern "C" {
    pub fn glColorFragmentOp2ATI(
        op: GLenum,
        dst: GLuint,
        dstMask: GLuint,
        dstMod: GLuint,
        arg1: GLuint,
        arg1Rep: GLuint,
        arg1Mod: GLuint,
        arg2: GLuint,
        arg2Rep: GLuint,
        arg2Mod: GLuint,
    );
}
extern "C" {
    pub fn glColorFragmentOp3ATI(
        op: GLenum,
        dst: GLuint,
        dstMask: GLuint,
        dstMod: GLuint,
        arg1: GLuint,
        arg1Rep: GLuint,
        arg1Mod: GLuint,
        arg2: GLuint,
        arg2Rep: GLuint,
        arg2Mod: GLuint,
        arg3: GLuint,
        arg3Rep: GLuint,
        arg3Mod: GLuint,
    );
}
extern "C" {
    pub fn glAlphaFragmentOp1ATI(
        op: GLenum,
        dst: GLuint,
        dstMod: GLuint,
        arg1: GLuint,
        arg1Rep: GLuint,
        arg1Mod: GLuint,
    );
}
extern "C" {
    pub fn glAlphaFragmentOp2ATI(
        op: GLenum,
        dst: GLuint,
        dstMod: GLuint,
        arg1: GLuint,
        arg1Rep: GLuint,
        arg1Mod: GLuint,
        arg2: GLuint,
        arg2Rep: GLuint,
        arg2Mod: GLuint,
    );
}
extern "C" {
    pub fn glAlphaFragmentOp3ATI(
        op: GLenum,
        dst: GLuint,
        dstMod: GLuint,
        arg1: GLuint,
        arg1Rep: GLuint,
        arg1Mod: GLuint,
        arg2: GLuint,
        arg2Rep: GLuint,
        arg2Mod: GLuint,
        arg3: GLuint,
        arg3Rep: GLuint,
        arg3Mod: GLuint,
    );
}
extern "C" {
    pub fn glSetFragmentShaderConstantATI(dst: GLuint, value: *const GLfloat);
}
pub type PFNGLMAPOBJECTBUFFERATIPROC =
    ::core::option::Option<unsafe extern "C" fn(buffer: GLuint) -> *mut ctypes::c_void>;
pub type PFNGLUNMAPOBJECTBUFFERATIPROC =
    ::core::option::Option<unsafe extern "C" fn(buffer: GLuint)>;
extern "C" {
    pub fn glMapObjectBufferATI(buffer: GLuint) -> *mut ctypes::c_void;
}
extern "C" {
    pub fn glUnmapObjectBufferATI(buffer: GLuint);
}
pub type PFNGLPNTRIANGLESIATIPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, param: GLint)>;
pub type PFNGLPNTRIANGLESFATIPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, param: GLfloat)>;
extern "C" {
    pub fn glPNTrianglesiATI(pname: GLenum, param: GLint);
}
extern "C" {
    pub fn glPNTrianglesfATI(pname: GLenum, param: GLfloat);
}
pub type PFNGLSTENCILOPSEPARATEATIPROC = ::core::option::Option<
    unsafe extern "C" fn(face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum),
>;
pub type PFNGLSTENCILFUNCSEPARATEATIPROC = ::core::option::Option<
    unsafe extern "C" fn(frontfunc: GLenum, backfunc: GLenum, ref_: GLint, mask: GLuint),
>;
extern "C" {
    pub fn glStencilOpSeparateATI(face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum);
}
extern "C" {
    pub fn glStencilFuncSeparateATI(frontfunc: GLenum, backfunc: GLenum, ref_: GLint, mask: GLuint);
}
pub type PFNGLNEWOBJECTBUFFERATIPROC = ::core::option::Option<
    unsafe extern "C" fn(size: GLsizei, pointer: *const ctypes::c_void, usage: GLenum) -> GLuint,
>;
pub type PFNGLISOBJECTBUFFERATIPROC =
    ::core::option::Option<unsafe extern "C" fn(buffer: GLuint) -> GLboolean>;
pub type PFNGLUPDATEOBJECTBUFFERATIPROC = ::core::option::Option<
    unsafe extern "C" fn(
        buffer: GLuint,
        offset: GLuint,
        size: GLsizei,
        pointer: *const ctypes::c_void,
        preserve: GLenum,
    ),
>;
pub type PFNGLGETOBJECTBUFFERFVATIPROC = ::core::option::Option<
    unsafe extern "C" fn(buffer: GLuint, pname: GLenum, params: *mut GLfloat),
>;
pub type PFNGLGETOBJECTBUFFERIVATIPROC =
    ::core::option::Option<unsafe extern "C" fn(buffer: GLuint, pname: GLenum, params: *mut GLint)>;
pub type PFNGLFREEOBJECTBUFFERATIPROC =
    ::core::option::Option<unsafe extern "C" fn(buffer: GLuint)>;
pub type PFNGLARRAYOBJECTATIPROC = ::core::option::Option<
    unsafe extern "C" fn(
        array: GLenum,
        size: GLint,
        type_: GLenum,
        stride: GLsizei,
        buffer: GLuint,
        offset: GLuint,
    ),
>;
pub type PFNGLGETARRAYOBJECTFVATIPROC = ::core::option::Option<
    unsafe extern "C" fn(array: GLenum, pname: GLenum, params: *mut GLfloat),
>;
pub type PFNGLGETARRAYOBJECTIVATIPROC =
    ::core::option::Option<unsafe extern "C" fn(array: GLenum, pname: GLenum, params: *mut GLint)>;
pub type PFNGLVARIANTARRAYOBJECTATIPROC = ::core::option::Option<
    unsafe extern "C" fn(
        id: GLuint,
        type_: GLenum,
        stride: GLsizei,
        buffer: GLuint,
        offset: GLuint,
    ),
>;
pub type PFNGLGETVARIANTARRAYOBJECTFVATIPROC =
    ::core::option::Option<unsafe extern "C" fn(id: GLuint, pname: GLenum, params: *mut GLfloat)>;
pub type PFNGLGETVARIANTARRAYOBJECTIVATIPROC =
    ::core::option::Option<unsafe extern "C" fn(id: GLuint, pname: GLenum, params: *mut GLint)>;
extern "C" {
    pub fn glNewObjectBufferATI(
        size: GLsizei,
        pointer: *const ctypes::c_void,
        usage: GLenum,
    ) -> GLuint;
}
extern "C" {
    pub fn glIsObjectBufferATI(buffer: GLuint) -> GLboolean;
}
extern "C" {
    pub fn glUpdateObjectBufferATI(
        buffer: GLuint,
        offset: GLuint,
        size: GLsizei,
        pointer: *const ctypes::c_void,
        preserve: GLenum,
    );
}
extern "C" {
    pub fn glGetObjectBufferfvATI(buffer: GLuint, pname: GLenum, params: *mut GLfloat);
}
extern "C" {
    pub fn glGetObjectBufferivATI(buffer: GLuint, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glFreeObjectBufferATI(buffer: GLuint);
}
extern "C" {
    pub fn glArrayObjectATI(
        array: GLenum,
        size: GLint,
        type_: GLenum,
        stride: GLsizei,
        buffer: GLuint,
        offset: GLuint,
    );
}
extern "C" {
    pub fn glGetArrayObjectfvATI(array: GLenum, pname: GLenum, params: *mut GLfloat);
}
extern "C" {
    pub fn glGetArrayObjectivATI(array: GLenum, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glVariantArrayObjectATI(
        id: GLuint,
        type_: GLenum,
        stride: GLsizei,
        buffer: GLuint,
        offset: GLuint,
    );
}
extern "C" {
    pub fn glGetVariantArrayObjectfvATI(id: GLuint, pname: GLenum, params: *mut GLfloat);
}
extern "C" {
    pub fn glGetVariantArrayObjectivATI(id: GLuint, pname: GLenum, params: *mut GLint);
}
pub type PFNGLVERTEXATTRIBARRAYOBJECTATIPROC = ::core::option::Option<
    unsafe extern "C" fn(
        index: GLuint,
        size: GLint,
        type_: GLenum,
        normalized: GLboolean,
        stride: GLsizei,
        buffer: GLuint,
        offset: GLuint,
    ),
>;
pub type PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, pname: GLenum, params: *mut GLfloat),
>;
pub type PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, pname: GLenum, params: *mut GLint)>;
extern "C" {
    pub fn glVertexAttribArrayObjectATI(
        index: GLuint,
        size: GLint,
        type_: GLenum,
        normalized: GLboolean,
        stride: GLsizei,
        buffer: GLuint,
        offset: GLuint,
    );
}
extern "C" {
    pub fn glGetVertexAttribArrayObjectfvATI(index: GLuint, pname: GLenum, params: *mut GLfloat);
}
extern "C" {
    pub fn glGetVertexAttribArrayObjectivATI(index: GLuint, pname: GLenum, params: *mut GLint);
}
pub type PFNGLVERTEXSTREAM1SATIPROC =
    ::core::option::Option<unsafe extern "C" fn(stream: GLenum, x: GLshort)>;
pub type PFNGLVERTEXSTREAM1SVATIPROC =
    ::core::option::Option<unsafe extern "C" fn(stream: GLenum, coords: *const GLshort)>;
pub type PFNGLVERTEXSTREAM1IATIPROC =
    ::core::option::Option<unsafe extern "C" fn(stream: GLenum, x: GLint)>;
pub type PFNGLVERTEXSTREAM1IVATIPROC =
    ::core::option::Option<unsafe extern "C" fn(stream: GLenum, coords: *const GLint)>;
pub type PFNGLVERTEXSTREAM1FATIPROC =
    ::core::option::Option<unsafe extern "C" fn(stream: GLenum, x: GLfloat)>;
pub type PFNGLVERTEXSTREAM1FVATIPROC =
    ::core::option::Option<unsafe extern "C" fn(stream: GLenum, coords: *const GLfloat)>;
pub type PFNGLVERTEXSTREAM1DATIPROC =
    ::core::option::Option<unsafe extern "C" fn(stream: GLenum, x: GLdouble)>;
pub type PFNGLVERTEXSTREAM1DVATIPROC =
    ::core::option::Option<unsafe extern "C" fn(stream: GLenum, coords: *const GLdouble)>;
pub type PFNGLVERTEXSTREAM2SATIPROC =
    ::core::option::Option<unsafe extern "C" fn(stream: GLenum, x: GLshort, y: GLshort)>;
pub type PFNGLVERTEXSTREAM2SVATIPROC =
    ::core::option::Option<unsafe extern "C" fn(stream: GLenum, coords: *const GLshort)>;
pub type PFNGLVERTEXSTREAM2IATIPROC =
    ::core::option::Option<unsafe extern "C" fn(stream: GLenum, x: GLint, y: GLint)>;
pub type PFNGLVERTEXSTREAM2IVATIPROC =
    ::core::option::Option<unsafe extern "C" fn(stream: GLenum, coords: *const GLint)>;
pub type PFNGLVERTEXSTREAM2FATIPROC =
    ::core::option::Option<unsafe extern "C" fn(stream: GLenum, x: GLfloat, y: GLfloat)>;
pub type PFNGLVERTEXSTREAM2FVATIPROC =
    ::core::option::Option<unsafe extern "C" fn(stream: GLenum, coords: *const GLfloat)>;
pub type PFNGLVERTEXSTREAM2DATIPROC =
    ::core::option::Option<unsafe extern "C" fn(stream: GLenum, x: GLdouble, y: GLdouble)>;
pub type PFNGLVERTEXSTREAM2DVATIPROC =
    ::core::option::Option<unsafe extern "C" fn(stream: GLenum, coords: *const GLdouble)>;
pub type PFNGLVERTEXSTREAM3SATIPROC = ::core::option::Option<
    unsafe extern "C" fn(stream: GLenum, x: GLshort, y: GLshort, z: GLshort),
>;
pub type PFNGLVERTEXSTREAM3SVATIPROC =
    ::core::option::Option<unsafe extern "C" fn(stream: GLenum, coords: *const GLshort)>;
pub type PFNGLVERTEXSTREAM3IATIPROC =
    ::core::option::Option<unsafe extern "C" fn(stream: GLenum, x: GLint, y: GLint, z: GLint)>;
pub type PFNGLVERTEXSTREAM3IVATIPROC =
    ::core::option::Option<unsafe extern "C" fn(stream: GLenum, coords: *const GLint)>;
pub type PFNGLVERTEXSTREAM3FATIPROC = ::core::option::Option<
    unsafe extern "C" fn(stream: GLenum, x: GLfloat, y: GLfloat, z: GLfloat),
>;
pub type PFNGLVERTEXSTREAM3FVATIPROC =
    ::core::option::Option<unsafe extern "C" fn(stream: GLenum, coords: *const GLfloat)>;
pub type PFNGLVERTEXSTREAM3DATIPROC = ::core::option::Option<
    unsafe extern "C" fn(stream: GLenum, x: GLdouble, y: GLdouble, z: GLdouble),
>;
pub type PFNGLVERTEXSTREAM3DVATIPROC =
    ::core::option::Option<unsafe extern "C" fn(stream: GLenum, coords: *const GLdouble)>;
pub type PFNGLVERTEXSTREAM4SATIPROC = ::core::option::Option<
    unsafe extern "C" fn(stream: GLenum, x: GLshort, y: GLshort, z: GLshort, w: GLshort),
>;
pub type PFNGLVERTEXSTREAM4SVATIPROC =
    ::core::option::Option<unsafe extern "C" fn(stream: GLenum, coords: *const GLshort)>;
pub type PFNGLVERTEXSTREAM4IATIPROC = ::core::option::Option<
    unsafe extern "C" fn(stream: GLenum, x: GLint, y: GLint, z: GLint, w: GLint),
>;
pub type PFNGLVERTEXSTREAM4IVATIPROC =
    ::core::option::Option<unsafe extern "C" fn(stream: GLenum, coords: *const GLint)>;
pub type PFNGLVERTEXSTREAM4FATIPROC = ::core::option::Option<
    unsafe extern "C" fn(stream: GLenum, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat),
>;
pub type PFNGLVERTEXSTREAM4FVATIPROC =
    ::core::option::Option<unsafe extern "C" fn(stream: GLenum, coords: *const GLfloat)>;
pub type PFNGLVERTEXSTREAM4DATIPROC = ::core::option::Option<
    unsafe extern "C" fn(stream: GLenum, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble),
>;
pub type PFNGLVERTEXSTREAM4DVATIPROC =
    ::core::option::Option<unsafe extern "C" fn(stream: GLenum, coords: *const GLdouble)>;
pub type PFNGLNORMALSTREAM3BATIPROC = ::core::option::Option<
    unsafe extern "C" fn(stream: GLenum, nx: GLbyte, ny: GLbyte, nz: GLbyte),
>;
pub type PFNGLNORMALSTREAM3BVATIPROC =
    ::core::option::Option<unsafe extern "C" fn(stream: GLenum, coords: *const GLbyte)>;
pub type PFNGLNORMALSTREAM3SATIPROC = ::core::option::Option<
    unsafe extern "C" fn(stream: GLenum, nx: GLshort, ny: GLshort, nz: GLshort),
>;
pub type PFNGLNORMALSTREAM3SVATIPROC =
    ::core::option::Option<unsafe extern "C" fn(stream: GLenum, coords: *const GLshort)>;
pub type PFNGLNORMALSTREAM3IATIPROC =
    ::core::option::Option<unsafe extern "C" fn(stream: GLenum, nx: GLint, ny: GLint, nz: GLint)>;
pub type PFNGLNORMALSTREAM3IVATIPROC =
    ::core::option::Option<unsafe extern "C" fn(stream: GLenum, coords: *const GLint)>;
pub type PFNGLNORMALSTREAM3FATIPROC = ::core::option::Option<
    unsafe extern "C" fn(stream: GLenum, nx: GLfloat, ny: GLfloat, nz: GLfloat),
>;
pub type PFNGLNORMALSTREAM3FVATIPROC =
    ::core::option::Option<unsafe extern "C" fn(stream: GLenum, coords: *const GLfloat)>;
pub type PFNGLNORMALSTREAM3DATIPROC = ::core::option::Option<
    unsafe extern "C" fn(stream: GLenum, nx: GLdouble, ny: GLdouble, nz: GLdouble),
>;
pub type PFNGLNORMALSTREAM3DVATIPROC =
    ::core::option::Option<unsafe extern "C" fn(stream: GLenum, coords: *const GLdouble)>;
pub type PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC =
    ::core::option::Option<unsafe extern "C" fn(stream: GLenum)>;
pub type PFNGLVERTEXBLENDENVIATIPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, param: GLint)>;
pub type PFNGLVERTEXBLENDENVFATIPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, param: GLfloat)>;
extern "C" {
    pub fn glVertexStream1sATI(stream: GLenum, x: GLshort);
}
extern "C" {
    pub fn glVertexStream1svATI(stream: GLenum, coords: *const GLshort);
}
extern "C" {
    pub fn glVertexStream1iATI(stream: GLenum, x: GLint);
}
extern "C" {
    pub fn glVertexStream1ivATI(stream: GLenum, coords: *const GLint);
}
extern "C" {
    pub fn glVertexStream1fATI(stream: GLenum, x: GLfloat);
}
extern "C" {
    pub fn glVertexStream1fvATI(stream: GLenum, coords: *const GLfloat);
}
extern "C" {
    pub fn glVertexStream1dATI(stream: GLenum, x: GLdouble);
}
extern "C" {
    pub fn glVertexStream1dvATI(stream: GLenum, coords: *const GLdouble);
}
extern "C" {
    pub fn glVertexStream2sATI(stream: GLenum, x: GLshort, y: GLshort);
}
extern "C" {
    pub fn glVertexStream2svATI(stream: GLenum, coords: *const GLshort);
}
extern "C" {
    pub fn glVertexStream2iATI(stream: GLenum, x: GLint, y: GLint);
}
extern "C" {
    pub fn glVertexStream2ivATI(stream: GLenum, coords: *const GLint);
}
extern "C" {
    pub fn glVertexStream2fATI(stream: GLenum, x: GLfloat, y: GLfloat);
}
extern "C" {
    pub fn glVertexStream2fvATI(stream: GLenum, coords: *const GLfloat);
}
extern "C" {
    pub fn glVertexStream2dATI(stream: GLenum, x: GLdouble, y: GLdouble);
}
extern "C" {
    pub fn glVertexStream2dvATI(stream: GLenum, coords: *const GLdouble);
}
extern "C" {
    pub fn glVertexStream3sATI(stream: GLenum, x: GLshort, y: GLshort, z: GLshort);
}
extern "C" {
    pub fn glVertexStream3svATI(stream: GLenum, coords: *const GLshort);
}
extern "C" {
    pub fn glVertexStream3iATI(stream: GLenum, x: GLint, y: GLint, z: GLint);
}
extern "C" {
    pub fn glVertexStream3ivATI(stream: GLenum, coords: *const GLint);
}
extern "C" {
    pub fn glVertexStream3fATI(stream: GLenum, x: GLfloat, y: GLfloat, z: GLfloat);
}
extern "C" {
    pub fn glVertexStream3fvATI(stream: GLenum, coords: *const GLfloat);
}
extern "C" {
    pub fn glVertexStream3dATI(stream: GLenum, x: GLdouble, y: GLdouble, z: GLdouble);
}
extern "C" {
    pub fn glVertexStream3dvATI(stream: GLenum, coords: *const GLdouble);
}
extern "C" {
    pub fn glVertexStream4sATI(stream: GLenum, x: GLshort, y: GLshort, z: GLshort, w: GLshort);
}
extern "C" {
    pub fn glVertexStream4svATI(stream: GLenum, coords: *const GLshort);
}
extern "C" {
    pub fn glVertexStream4iATI(stream: GLenum, x: GLint, y: GLint, z: GLint, w: GLint);
}
extern "C" {
    pub fn glVertexStream4ivATI(stream: GLenum, coords: *const GLint);
}
extern "C" {
    pub fn glVertexStream4fATI(stream: GLenum, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat);
}
extern "C" {
    pub fn glVertexStream4fvATI(stream: GLenum, coords: *const GLfloat);
}
extern "C" {
    pub fn glVertexStream4dATI(stream: GLenum, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble);
}
extern "C" {
    pub fn glVertexStream4dvATI(stream: GLenum, coords: *const GLdouble);
}
extern "C" {
    pub fn glNormalStream3bATI(stream: GLenum, nx: GLbyte, ny: GLbyte, nz: GLbyte);
}
extern "C" {
    pub fn glNormalStream3bvATI(stream: GLenum, coords: *const GLbyte);
}
extern "C" {
    pub fn glNormalStream3sATI(stream: GLenum, nx: GLshort, ny: GLshort, nz: GLshort);
}
extern "C" {
    pub fn glNormalStream3svATI(stream: GLenum, coords: *const GLshort);
}
extern "C" {
    pub fn glNormalStream3iATI(stream: GLenum, nx: GLint, ny: GLint, nz: GLint);
}
extern "C" {
    pub fn glNormalStream3ivATI(stream: GLenum, coords: *const GLint);
}
extern "C" {
    pub fn glNormalStream3fATI(stream: GLenum, nx: GLfloat, ny: GLfloat, nz: GLfloat);
}
extern "C" {
    pub fn glNormalStream3fvATI(stream: GLenum, coords: *const GLfloat);
}
extern "C" {
    pub fn glNormalStream3dATI(stream: GLenum, nx: GLdouble, ny: GLdouble, nz: GLdouble);
}
extern "C" {
    pub fn glNormalStream3dvATI(stream: GLenum, coords: *const GLdouble);
}
extern "C" {
    pub fn glClientActiveVertexStreamATI(stream: GLenum);
}
extern "C" {
    pub fn glVertexBlendEnviATI(pname: GLenum, param: GLint);
}
extern "C" {
    pub fn glVertexBlendEnvfATI(pname: GLenum, param: GLfloat);
}
pub type PFNGLUNIFORMBUFFEREXTPROC =
    ::core::option::Option<unsafe extern "C" fn(program: GLuint, location: GLint, buffer: GLuint)>;
pub type PFNGLGETUNIFORMBUFFERSIZEEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(program: GLuint, location: GLint) -> GLint>;
pub type PFNGLGETUNIFORMOFFSETEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(program: GLuint, location: GLint) -> GLintptr>;
extern "C" {
    pub fn glUniformBufferEXT(program: GLuint, location: GLint, buffer: GLuint);
}
extern "C" {
    pub fn glGetUniformBufferSizeEXT(program: GLuint, location: GLint) -> GLint;
}
extern "C" {
    pub fn glGetUniformOffsetEXT(program: GLuint, location: GLint) -> GLintptr;
}
pub type PFNGLBLENDCOLOREXTPROC = ::core::option::Option<
    unsafe extern "C" fn(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat),
>;
extern "C" {
    pub fn glBlendColorEXT(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat);
}
pub type PFNGLBLENDEQUATIONSEPARATEEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(modeRGB: GLenum, modeAlpha: GLenum)>;
extern "C" {
    pub fn glBlendEquationSeparateEXT(modeRGB: GLenum, modeAlpha: GLenum);
}
pub type PFNGLBLENDFUNCSEPARATEEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        sfactorRGB: GLenum,
        dfactorRGB: GLenum,
        sfactorAlpha: GLenum,
        dfactorAlpha: GLenum,
    ),
>;
extern "C" {
    pub fn glBlendFuncSeparateEXT(
        sfactorRGB: GLenum,
        dfactorRGB: GLenum,
        sfactorAlpha: GLenum,
        dfactorAlpha: GLenum,
    );
}
pub type PFNGLBLENDEQUATIONEXTPROC = ::core::option::Option<unsafe extern "C" fn(mode: GLenum)>;
extern "C" {
    pub fn glBlendEquationEXT(mode: GLenum);
}
pub type PFNGLCOLORSUBTABLEEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        start: GLsizei,
        count: GLsizei,
        format: GLenum,
        type_: GLenum,
        data: *const ctypes::c_void,
    ),
>;
pub type PFNGLCOPYCOLORSUBTABLEEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, start: GLsizei, x: GLint, y: GLint, width: GLsizei),
>;
extern "C" {
    pub fn glColorSubTableEXT(
        target: GLenum,
        start: GLsizei,
        count: GLsizei,
        format: GLenum,
        type_: GLenum,
        data: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glCopyColorSubTableEXT(
        target: GLenum,
        start: GLsizei,
        x: GLint,
        y: GLint,
        width: GLsizei,
    );
}
pub type PFNGLLOCKARRAYSEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(first: GLint, count: GLsizei)>;
pub type PFNGLUNLOCKARRAYSEXTPROC = ::core::option::Option<unsafe extern "C" fn()>;
extern "C" {
    pub fn glLockArraysEXT(first: GLint, count: GLsizei);
}
extern "C" {
    pub fn glUnlockArraysEXT();
}
pub type PFNGLCONVOLUTIONFILTER1DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        internalformat: GLenum,
        width: GLsizei,
        format: GLenum,
        type_: GLenum,
        image: *const ctypes::c_void,
    ),
>;
pub type PFNGLCONVOLUTIONFILTER2DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        format: GLenum,
        type_: GLenum,
        image: *const ctypes::c_void,
    ),
>;
pub type PFNGLCONVOLUTIONPARAMETERFEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, params: GLfloat)>;
pub type PFNGLCONVOLUTIONPARAMETERFVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *const GLfloat),
>;
pub type PFNGLCONVOLUTIONPARAMETERIEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, params: GLint)>;
pub type PFNGLCONVOLUTIONPARAMETERIVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *const GLint),
>;
pub type PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        internalformat: GLenum,
        x: GLint,
        y: GLint,
        width: GLsizei,
    ),
>;
pub type PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        internalformat: GLenum,
        x: GLint,
        y: GLint,
        width: GLsizei,
        height: GLsizei,
    ),
>;
pub type PFNGLGETCONVOLUTIONFILTEREXTPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, format: GLenum, type_: GLenum, image: *mut ctypes::c_void),
>;
pub type PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLfloat),
>;
pub type PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLint)>;
pub type PFNGLGETSEPARABLEFILTEREXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        format: GLenum,
        type_: GLenum,
        row: *mut ctypes::c_void,
        column: *mut ctypes::c_void,
        span: *mut ctypes::c_void,
    ),
>;
pub type PFNGLSEPARABLEFILTER2DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        format: GLenum,
        type_: GLenum,
        row: *const ctypes::c_void,
        column: *const ctypes::c_void,
    ),
>;
extern "C" {
    pub fn glConvolutionFilter1DEXT(
        target: GLenum,
        internalformat: GLenum,
        width: GLsizei,
        format: GLenum,
        type_: GLenum,
        image: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glConvolutionFilter2DEXT(
        target: GLenum,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        format: GLenum,
        type_: GLenum,
        image: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glConvolutionParameterfEXT(target: GLenum, pname: GLenum, params: GLfloat);
}
extern "C" {
    pub fn glConvolutionParameterfvEXT(target: GLenum, pname: GLenum, params: *const GLfloat);
}
extern "C" {
    pub fn glConvolutionParameteriEXT(target: GLenum, pname: GLenum, params: GLint);
}
extern "C" {
    pub fn glConvolutionParameterivEXT(target: GLenum, pname: GLenum, params: *const GLint);
}
extern "C" {
    pub fn glCopyConvolutionFilter1DEXT(
        target: GLenum,
        internalformat: GLenum,
        x: GLint,
        y: GLint,
        width: GLsizei,
    );
}
extern "C" {
    pub fn glCopyConvolutionFilter2DEXT(
        target: GLenum,
        internalformat: GLenum,
        x: GLint,
        y: GLint,
        width: GLsizei,
        height: GLsizei,
    );
}
extern "C" {
    pub fn glGetConvolutionFilterEXT(
        target: GLenum,
        format: GLenum,
        type_: GLenum,
        image: *mut ctypes::c_void,
    );
}
extern "C" {
    pub fn glGetConvolutionParameterfvEXT(target: GLenum, pname: GLenum, params: *mut GLfloat);
}
extern "C" {
    pub fn glGetConvolutionParameterivEXT(target: GLenum, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetSeparableFilterEXT(
        target: GLenum,
        format: GLenum,
        type_: GLenum,
        row: *mut ctypes::c_void,
        column: *mut ctypes::c_void,
        span: *mut ctypes::c_void,
    );
}
extern "C" {
    pub fn glSeparableFilter2DEXT(
        target: GLenum,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        format: GLenum,
        type_: GLenum,
        row: *const ctypes::c_void,
        column: *const ctypes::c_void,
    );
}
pub type PFNGLTANGENT3BEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(tx: GLbyte, ty: GLbyte, tz: GLbyte)>;
pub type PFNGLTANGENT3BVEXTPROC = ::core::option::Option<unsafe extern "C" fn(v: *const GLbyte)>;
pub type PFNGLTANGENT3DEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(tx: GLdouble, ty: GLdouble, tz: GLdouble)>;
pub type PFNGLTANGENT3DVEXTPROC = ::core::option::Option<unsafe extern "C" fn(v: *const GLdouble)>;
pub type PFNGLTANGENT3FEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(tx: GLfloat, ty: GLfloat, tz: GLfloat)>;
pub type PFNGLTANGENT3FVEXTPROC = ::core::option::Option<unsafe extern "C" fn(v: *const GLfloat)>;
pub type PFNGLTANGENT3IEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(tx: GLint, ty: GLint, tz: GLint)>;
pub type PFNGLTANGENT3IVEXTPROC = ::core::option::Option<unsafe extern "C" fn(v: *const GLint)>;
pub type PFNGLTANGENT3SEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(tx: GLshort, ty: GLshort, tz: GLshort)>;
pub type PFNGLTANGENT3SVEXTPROC = ::core::option::Option<unsafe extern "C" fn(v: *const GLshort)>;
pub type PFNGLBINORMAL3BEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(bx: GLbyte, by: GLbyte, bz: GLbyte)>;
pub type PFNGLBINORMAL3BVEXTPROC = ::core::option::Option<unsafe extern "C" fn(v: *const GLbyte)>;
pub type PFNGLBINORMAL3DEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(bx: GLdouble, by: GLdouble, bz: GLdouble)>;
pub type PFNGLBINORMAL3DVEXTPROC = ::core::option::Option<unsafe extern "C" fn(v: *const GLdouble)>;
pub type PFNGLBINORMAL3FEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(bx: GLfloat, by: GLfloat, bz: GLfloat)>;
pub type PFNGLBINORMAL3FVEXTPROC = ::core::option::Option<unsafe extern "C" fn(v: *const GLfloat)>;
pub type PFNGLBINORMAL3IEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(bx: GLint, by: GLint, bz: GLint)>;
pub type PFNGLBINORMAL3IVEXTPROC = ::core::option::Option<unsafe extern "C" fn(v: *const GLint)>;
pub type PFNGLBINORMAL3SEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(bx: GLshort, by: GLshort, bz: GLshort)>;
pub type PFNGLBINORMAL3SVEXTPROC = ::core::option::Option<unsafe extern "C" fn(v: *const GLshort)>;
pub type PFNGLTANGENTPOINTEREXTPROC = ::core::option::Option<
    unsafe extern "C" fn(type_: GLenum, stride: GLsizei, pointer: *const ctypes::c_void),
>;
pub type PFNGLBINORMALPOINTEREXTPROC = ::core::option::Option<
    unsafe extern "C" fn(type_: GLenum, stride: GLsizei, pointer: *const ctypes::c_void),
>;
extern "C" {
    pub fn glTangent3bEXT(tx: GLbyte, ty: GLbyte, tz: GLbyte);
}
extern "C" {
    pub fn glTangent3bvEXT(v: *const GLbyte);
}
extern "C" {
    pub fn glTangent3dEXT(tx: GLdouble, ty: GLdouble, tz: GLdouble);
}
extern "C" {
    pub fn glTangent3dvEXT(v: *const GLdouble);
}
extern "C" {
    pub fn glTangent3fEXT(tx: GLfloat, ty: GLfloat, tz: GLfloat);
}
extern "C" {
    pub fn glTangent3fvEXT(v: *const GLfloat);
}
extern "C" {
    pub fn glTangent3iEXT(tx: GLint, ty: GLint, tz: GLint);
}
extern "C" {
    pub fn glTangent3ivEXT(v: *const GLint);
}
extern "C" {
    pub fn glTangent3sEXT(tx: GLshort, ty: GLshort, tz: GLshort);
}
extern "C" {
    pub fn glTangent3svEXT(v: *const GLshort);
}
extern "C" {
    pub fn glBinormal3bEXT(bx: GLbyte, by: GLbyte, bz: GLbyte);
}
extern "C" {
    pub fn glBinormal3bvEXT(v: *const GLbyte);
}
extern "C" {
    pub fn glBinormal3dEXT(bx: GLdouble, by: GLdouble, bz: GLdouble);
}
extern "C" {
    pub fn glBinormal3dvEXT(v: *const GLdouble);
}
extern "C" {
    pub fn glBinormal3fEXT(bx: GLfloat, by: GLfloat, bz: GLfloat);
}
extern "C" {
    pub fn glBinormal3fvEXT(v: *const GLfloat);
}
extern "C" {
    pub fn glBinormal3iEXT(bx: GLint, by: GLint, bz: GLint);
}
extern "C" {
    pub fn glBinormal3ivEXT(v: *const GLint);
}
extern "C" {
    pub fn glBinormal3sEXT(bx: GLshort, by: GLshort, bz: GLshort);
}
extern "C" {
    pub fn glBinormal3svEXT(v: *const GLshort);
}
extern "C" {
    pub fn glTangentPointerEXT(type_: GLenum, stride: GLsizei, pointer: *const ctypes::c_void);
}
extern "C" {
    pub fn glBinormalPointerEXT(type_: GLenum, stride: GLsizei, pointer: *const ctypes::c_void);
}
pub type PFNGLCOPYTEXIMAGE1DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        x: GLint,
        y: GLint,
        width: GLsizei,
        border: GLint,
    ),
>;
pub type PFNGLCOPYTEXIMAGE2DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        x: GLint,
        y: GLint,
        width: GLsizei,
        height: GLsizei,
        border: GLint,
    ),
>;
pub type PFNGLCOPYTEXSUBIMAGE1DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        x: GLint,
        y: GLint,
        width: GLsizei,
    ),
>;
pub type PFNGLCOPYTEXSUBIMAGE2DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        x: GLint,
        y: GLint,
        width: GLsizei,
        height: GLsizei,
    ),
>;
pub type PFNGLCOPYTEXSUBIMAGE3DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        zoffset: GLint,
        x: GLint,
        y: GLint,
        width: GLsizei,
        height: GLsizei,
    ),
>;
extern "C" {
    pub fn glCopyTexImage1DEXT(
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        x: GLint,
        y: GLint,
        width: GLsizei,
        border: GLint,
    );
}
extern "C" {
    pub fn glCopyTexImage2DEXT(
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        x: GLint,
        y: GLint,
        width: GLsizei,
        height: GLsizei,
        border: GLint,
    );
}
extern "C" {
    pub fn glCopyTexSubImage1DEXT(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        x: GLint,
        y: GLint,
        width: GLsizei,
    );
}
extern "C" {
    pub fn glCopyTexSubImage2DEXT(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        x: GLint,
        y: GLint,
        width: GLsizei,
        height: GLsizei,
    );
}
extern "C" {
    pub fn glCopyTexSubImage3DEXT(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        zoffset: GLint,
        x: GLint,
        y: GLint,
        width: GLsizei,
        height: GLsizei,
    );
}
pub type PFNGLCULLPARAMETERDVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, params: *mut GLdouble)>;
pub type PFNGLCULLPARAMETERFVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, params: *mut GLfloat)>;
extern "C" {
    pub fn glCullParameterdvEXT(pname: GLenum, params: *mut GLdouble);
}
extern "C" {
    pub fn glCullParameterfvEXT(pname: GLenum, params: *mut GLfloat);
}
pub type PFNGLLABELOBJECTEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(type_: GLenum, object: GLuint, length: GLsizei, label: *const GLchar),
>;
pub type PFNGLGETOBJECTLABELEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        type_: GLenum,
        object: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        label: *mut GLchar,
    ),
>;
extern "C" {
    pub fn glLabelObjectEXT(type_: GLenum, object: GLuint, length: GLsizei, label: *const GLchar);
}
extern "C" {
    pub fn glGetObjectLabelEXT(
        type_: GLenum,
        object: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        label: *mut GLchar,
    );
}
pub type PFNGLINSERTEVENTMARKEREXTPROC =
    ::core::option::Option<unsafe extern "C" fn(length: GLsizei, marker: *const GLchar)>;
pub type PFNGLPUSHGROUPMARKEREXTPROC =
    ::core::option::Option<unsafe extern "C" fn(length: GLsizei, marker: *const GLchar)>;
pub type PFNGLPOPGROUPMARKEREXTPROC = ::core::option::Option<unsafe extern "C" fn()>;
extern "C" {
    pub fn glInsertEventMarkerEXT(length: GLsizei, marker: *const GLchar);
}
extern "C" {
    pub fn glPushGroupMarkerEXT(length: GLsizei, marker: *const GLchar);
}
extern "C" {
    pub fn glPopGroupMarkerEXT();
}
pub type PFNGLDEPTHBOUNDSEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(zmin: GLclampd, zmax: GLclampd)>;
extern "C" {
    pub fn glDepthBoundsEXT(zmin: GLclampd, zmax: GLclampd);
}
pub type PFNGLMATRIXLOADFEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(mode: GLenum, m: *const GLfloat)>;
pub type PFNGLMATRIXLOADDEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(mode: GLenum, m: *const GLdouble)>;
pub type PFNGLMATRIXMULTFEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(mode: GLenum, m: *const GLfloat)>;
pub type PFNGLMATRIXMULTDEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(mode: GLenum, m: *const GLdouble)>;
pub type PFNGLMATRIXLOADIDENTITYEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(mode: GLenum)>;
pub type PFNGLMATRIXROTATEFEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(mode: GLenum, angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat),
>;
pub type PFNGLMATRIXROTATEDEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(mode: GLenum, angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble),
>;
pub type PFNGLMATRIXSCALEFEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(mode: GLenum, x: GLfloat, y: GLfloat, z: GLfloat)>;
pub type PFNGLMATRIXSCALEDEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(mode: GLenum, x: GLdouble, y: GLdouble, z: GLdouble),
>;
pub type PFNGLMATRIXTRANSLATEFEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(mode: GLenum, x: GLfloat, y: GLfloat, z: GLfloat)>;
pub type PFNGLMATRIXTRANSLATEDEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(mode: GLenum, x: GLdouble, y: GLdouble, z: GLdouble),
>;
pub type PFNGLMATRIXFRUSTUMEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        left: GLdouble,
        right: GLdouble,
        bottom: GLdouble,
        top: GLdouble,
        zNear: GLdouble,
        zFar: GLdouble,
    ),
>;
pub type PFNGLMATRIXORTHOEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        left: GLdouble,
        right: GLdouble,
        bottom: GLdouble,
        top: GLdouble,
        zNear: GLdouble,
        zFar: GLdouble,
    ),
>;
pub type PFNGLMATRIXPOPEXTPROC = ::core::option::Option<unsafe extern "C" fn(mode: GLenum)>;
pub type PFNGLMATRIXPUSHEXTPROC = ::core::option::Option<unsafe extern "C" fn(mode: GLenum)>;
pub type PFNGLCLIENTATTRIBDEFAULTEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(mask: GLbitfield)>;
pub type PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(mask: GLbitfield)>;
pub type PFNGLTEXTUREPARAMETERFEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(texture: GLuint, target: GLenum, pname: GLenum, param: GLfloat),
>;
pub type PFNGLTEXTUREPARAMETERFVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(texture: GLuint, target: GLenum, pname: GLenum, params: *const GLfloat),
>;
pub type PFNGLTEXTUREPARAMETERIEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(texture: GLuint, target: GLenum, pname: GLenum, param: GLint),
>;
pub type PFNGLTEXTUREPARAMETERIVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(texture: GLuint, target: GLenum, pname: GLenum, params: *const GLint),
>;
pub type PFNGLTEXTUREIMAGE1DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        target: GLenum,
        level: GLint,
        internalformat: GLint,
        width: GLsizei,
        border: GLint,
        format: GLenum,
        type_: GLenum,
        pixels: *const ctypes::c_void,
    ),
>;
pub type PFNGLTEXTUREIMAGE2DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        target: GLenum,
        level: GLint,
        internalformat: GLint,
        width: GLsizei,
        height: GLsizei,
        border: GLint,
        format: GLenum,
        type_: GLenum,
        pixels: *const ctypes::c_void,
    ),
>;
pub type PFNGLTEXTURESUBIMAGE1DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        width: GLsizei,
        format: GLenum,
        type_: GLenum,
        pixels: *const ctypes::c_void,
    ),
>;
pub type PFNGLTEXTURESUBIMAGE2DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        format: GLenum,
        type_: GLenum,
        pixels: *const ctypes::c_void,
    ),
>;
pub type PFNGLCOPYTEXTUREIMAGE1DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        x: GLint,
        y: GLint,
        width: GLsizei,
        border: GLint,
    ),
>;
pub type PFNGLCOPYTEXTUREIMAGE2DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        x: GLint,
        y: GLint,
        width: GLsizei,
        height: GLsizei,
        border: GLint,
    ),
>;
pub type PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        x: GLint,
        y: GLint,
        width: GLsizei,
    ),
>;
pub type PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        x: GLint,
        y: GLint,
        width: GLsizei,
        height: GLsizei,
    ),
>;
pub type PFNGLGETTEXTUREIMAGEEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        target: GLenum,
        level: GLint,
        format: GLenum,
        type_: GLenum,
        pixels: *mut ctypes::c_void,
    ),
>;
pub type PFNGLGETTEXTUREPARAMETERFVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(texture: GLuint, target: GLenum, pname: GLenum, params: *mut GLfloat),
>;
pub type PFNGLGETTEXTUREPARAMETERIVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(texture: GLuint, target: GLenum, pname: GLenum, params: *mut GLint),
>;
pub type PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        target: GLenum,
        level: GLint,
        pname: GLenum,
        params: *mut GLfloat,
    ),
>;
pub type PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        target: GLenum,
        level: GLint,
        pname: GLenum,
        params: *mut GLint,
    ),
>;
pub type PFNGLTEXTUREIMAGE3DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        target: GLenum,
        level: GLint,
        internalformat: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        border: GLint,
        format: GLenum,
        type_: GLenum,
        pixels: *const ctypes::c_void,
    ),
>;
pub type PFNGLTEXTURESUBIMAGE3DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        zoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        format: GLenum,
        type_: GLenum,
        pixels: *const ctypes::c_void,
    ),
>;
pub type PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        zoffset: GLint,
        x: GLint,
        y: GLint,
        width: GLsizei,
        height: GLsizei,
    ),
>;
pub type PFNGLBINDMULTITEXTUREEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(texunit: GLenum, target: GLenum, texture: GLuint)>;
pub type PFNGLMULTITEXCOORDPOINTEREXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texunit: GLenum,
        size: GLint,
        type_: GLenum,
        stride: GLsizei,
        pointer: *const ctypes::c_void,
    ),
>;
pub type PFNGLMULTITEXENVFEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, param: GLfloat),
>;
pub type PFNGLMULTITEXENVFVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, params: *const GLfloat),
>;
pub type PFNGLMULTITEXENVIEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, param: GLint),
>;
pub type PFNGLMULTITEXENVIVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, params: *const GLint),
>;
pub type PFNGLMULTITEXGENDEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(texunit: GLenum, coord: GLenum, pname: GLenum, param: GLdouble),
>;
pub type PFNGLMULTITEXGENDVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(texunit: GLenum, coord: GLenum, pname: GLenum, params: *const GLdouble),
>;
pub type PFNGLMULTITEXGENFEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(texunit: GLenum, coord: GLenum, pname: GLenum, param: GLfloat),
>;
pub type PFNGLMULTITEXGENFVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(texunit: GLenum, coord: GLenum, pname: GLenum, params: *const GLfloat),
>;
pub type PFNGLMULTITEXGENIEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(texunit: GLenum, coord: GLenum, pname: GLenum, param: GLint),
>;
pub type PFNGLMULTITEXGENIVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(texunit: GLenum, coord: GLenum, pname: GLenum, params: *const GLint),
>;
pub type PFNGLGETMULTITEXENVFVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, params: *mut GLfloat),
>;
pub type PFNGLGETMULTITEXENVIVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, params: *mut GLint),
>;
pub type PFNGLGETMULTITEXGENDVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(texunit: GLenum, coord: GLenum, pname: GLenum, params: *mut GLdouble),
>;
pub type PFNGLGETMULTITEXGENFVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(texunit: GLenum, coord: GLenum, pname: GLenum, params: *mut GLfloat),
>;
pub type PFNGLGETMULTITEXGENIVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(texunit: GLenum, coord: GLenum, pname: GLenum, params: *mut GLint),
>;
pub type PFNGLMULTITEXPARAMETERIEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, param: GLint),
>;
pub type PFNGLMULTITEXPARAMETERIVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, params: *const GLint),
>;
pub type PFNGLMULTITEXPARAMETERFEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, param: GLfloat),
>;
pub type PFNGLMULTITEXPARAMETERFVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, params: *const GLfloat),
>;
pub type PFNGLMULTITEXIMAGE1DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texunit: GLenum,
        target: GLenum,
        level: GLint,
        internalformat: GLint,
        width: GLsizei,
        border: GLint,
        format: GLenum,
        type_: GLenum,
        pixels: *const ctypes::c_void,
    ),
>;
pub type PFNGLMULTITEXIMAGE2DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texunit: GLenum,
        target: GLenum,
        level: GLint,
        internalformat: GLint,
        width: GLsizei,
        height: GLsizei,
        border: GLint,
        format: GLenum,
        type_: GLenum,
        pixels: *const ctypes::c_void,
    ),
>;
pub type PFNGLMULTITEXSUBIMAGE1DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texunit: GLenum,
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        width: GLsizei,
        format: GLenum,
        type_: GLenum,
        pixels: *const ctypes::c_void,
    ),
>;
pub type PFNGLMULTITEXSUBIMAGE2DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texunit: GLenum,
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        format: GLenum,
        type_: GLenum,
        pixels: *const ctypes::c_void,
    ),
>;
pub type PFNGLCOPYMULTITEXIMAGE1DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texunit: GLenum,
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        x: GLint,
        y: GLint,
        width: GLsizei,
        border: GLint,
    ),
>;
pub type PFNGLCOPYMULTITEXIMAGE2DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texunit: GLenum,
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        x: GLint,
        y: GLint,
        width: GLsizei,
        height: GLsizei,
        border: GLint,
    ),
>;
pub type PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texunit: GLenum,
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        x: GLint,
        y: GLint,
        width: GLsizei,
    ),
>;
pub type PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texunit: GLenum,
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        x: GLint,
        y: GLint,
        width: GLsizei,
        height: GLsizei,
    ),
>;
pub type PFNGLGETMULTITEXIMAGEEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texunit: GLenum,
        target: GLenum,
        level: GLint,
        format: GLenum,
        type_: GLenum,
        pixels: *mut ctypes::c_void,
    ),
>;
pub type PFNGLGETMULTITEXPARAMETERFVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, params: *mut GLfloat),
>;
pub type PFNGLGETMULTITEXPARAMETERIVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, params: *mut GLint),
>;
pub type PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texunit: GLenum,
        target: GLenum,
        level: GLint,
        pname: GLenum,
        params: *mut GLfloat,
    ),
>;
pub type PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texunit: GLenum,
        target: GLenum,
        level: GLint,
        pname: GLenum,
        params: *mut GLint,
    ),
>;
pub type PFNGLMULTITEXIMAGE3DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texunit: GLenum,
        target: GLenum,
        level: GLint,
        internalformat: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        border: GLint,
        format: GLenum,
        type_: GLenum,
        pixels: *const ctypes::c_void,
    ),
>;
pub type PFNGLMULTITEXSUBIMAGE3DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texunit: GLenum,
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        zoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        format: GLenum,
        type_: GLenum,
        pixels: *const ctypes::c_void,
    ),
>;
pub type PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texunit: GLenum,
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        zoffset: GLint,
        x: GLint,
        y: GLint,
        width: GLsizei,
        height: GLsizei,
    ),
>;
pub type PFNGLENABLECLIENTSTATEINDEXEDEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(array: GLenum, index: GLuint)>;
pub type PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(array: GLenum, index: GLuint)>;
pub type PFNGLGETFLOATINDEXEDVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, index: GLuint, data: *mut GLfloat)>;
pub type PFNGLGETDOUBLEINDEXEDVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, index: GLuint, data: *mut GLdouble),
>;
pub type PFNGLGETPOINTERINDEXEDVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, index: GLuint, data: *mut *mut ctypes::c_void),
>;
pub type PFNGLENABLEINDEXEDEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, index: GLuint)>;
pub type PFNGLDISABLEINDEXEDEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, index: GLuint)>;
pub type PFNGLISENABLEDINDEXEDEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, index: GLuint) -> GLboolean>;
pub type PFNGLGETINTEGERINDEXEDVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, index: GLuint, data: *mut GLint)>;
pub type PFNGLGETBOOLEANINDEXEDVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, index: GLuint, data: *mut GLboolean),
>;
pub type PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        border: GLint,
        imageSize: GLsizei,
        bits: *const ctypes::c_void,
    ),
>;
pub type PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        border: GLint,
        imageSize: GLsizei,
        bits: *const ctypes::c_void,
    ),
>;
pub type PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        width: GLsizei,
        border: GLint,
        imageSize: GLsizei,
        bits: *const ctypes::c_void,
    ),
>;
pub type PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        zoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        format: GLenum,
        imageSize: GLsizei,
        bits: *const ctypes::c_void,
    ),
>;
pub type PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        format: GLenum,
        imageSize: GLsizei,
        bits: *const ctypes::c_void,
    ),
>;
pub type PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        width: GLsizei,
        format: GLenum,
        imageSize: GLsizei,
        bits: *const ctypes::c_void,
    ),
>;
pub type PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(texture: GLuint, target: GLenum, lod: GLint, img: *mut ctypes::c_void),
>;
pub type PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texunit: GLenum,
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        border: GLint,
        imageSize: GLsizei,
        bits: *const ctypes::c_void,
    ),
>;
pub type PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texunit: GLenum,
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        border: GLint,
        imageSize: GLsizei,
        bits: *const ctypes::c_void,
    ),
>;
pub type PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texunit: GLenum,
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        width: GLsizei,
        border: GLint,
        imageSize: GLsizei,
        bits: *const ctypes::c_void,
    ),
>;
pub type PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texunit: GLenum,
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        zoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        format: GLenum,
        imageSize: GLsizei,
        bits: *const ctypes::c_void,
    ),
>;
pub type PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texunit: GLenum,
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        format: GLenum,
        imageSize: GLsizei,
        bits: *const ctypes::c_void,
    ),
>;
pub type PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texunit: GLenum,
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        width: GLsizei,
        format: GLenum,
        imageSize: GLsizei,
        bits: *const ctypes::c_void,
    ),
>;
pub type PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(texunit: GLenum, target: GLenum, lod: GLint, img: *mut ctypes::c_void),
>;
pub type PFNGLMATRIXLOADTRANSPOSEFEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(mode: GLenum, m: *const GLfloat)>;
pub type PFNGLMATRIXLOADTRANSPOSEDEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(mode: GLenum, m: *const GLdouble)>;
pub type PFNGLMATRIXMULTTRANSPOSEFEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(mode: GLenum, m: *const GLfloat)>;
pub type PFNGLMATRIXMULTTRANSPOSEDEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(mode: GLenum, m: *const GLdouble)>;
pub type PFNGLNAMEDBUFFERDATAEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        buffer: GLuint,
        size: GLsizeiptr,
        data: *const ctypes::c_void,
        usage: GLenum,
    ),
>;
pub type PFNGLNAMEDBUFFERSUBDATAEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        buffer: GLuint,
        offset: GLintptr,
        size: GLsizeiptr,
        data: *const ctypes::c_void,
    ),
>;
pub type PFNGLMAPNAMEDBUFFEREXTPROC = ::core::option::Option<
    unsafe extern "C" fn(buffer: GLuint, access: GLenum) -> *mut ctypes::c_void,
>;
pub type PFNGLUNMAPNAMEDBUFFEREXTPROC =
    ::core::option::Option<unsafe extern "C" fn(buffer: GLuint) -> GLboolean>;
pub type PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(buffer: GLuint, pname: GLenum, params: *mut GLint)>;
pub type PFNGLGETNAMEDBUFFERPOINTERVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(buffer: GLuint, pname: GLenum, params: *mut *mut ctypes::c_void),
>;
pub type PFNGLGETNAMEDBUFFERSUBDATAEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        buffer: GLuint,
        offset: GLintptr,
        size: GLsizeiptr,
        data: *mut ctypes::c_void,
    ),
>;
pub type PFNGLPROGRAMUNIFORM1FEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(program: GLuint, location: GLint, v0: GLfloat)>;
pub type PFNGLPROGRAMUNIFORM2FEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat),
>;
pub type PFNGLPROGRAMUNIFORM3FEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat),
>;
pub type PFNGLPROGRAMUNIFORM4FEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        v0: GLfloat,
        v1: GLfloat,
        v2: GLfloat,
        v3: GLfloat,
    ),
>;
pub type PFNGLPROGRAMUNIFORM1IEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(program: GLuint, location: GLint, v0: GLint)>;
pub type PFNGLPROGRAMUNIFORM2IEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, v0: GLint, v1: GLint),
>;
pub type PFNGLPROGRAMUNIFORM3IEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint),
>;
pub type PFNGLPROGRAMUNIFORM4IEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        v0: GLint,
        v1: GLint,
        v2: GLint,
        v3: GLint,
    ),
>;
pub type PFNGLPROGRAMUNIFORM1FVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLfloat),
>;
pub type PFNGLPROGRAMUNIFORM2FVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLfloat),
>;
pub type PFNGLPROGRAMUNIFORM3FVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLfloat),
>;
pub type PFNGLPROGRAMUNIFORM4FVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLfloat),
>;
pub type PFNGLPROGRAMUNIFORM1IVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLint),
>;
pub type PFNGLPROGRAMUNIFORM2IVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLint),
>;
pub type PFNGLPROGRAMUNIFORM3IVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLint),
>;
pub type PFNGLPROGRAMUNIFORM4IVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLint),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLTEXTUREBUFFEREXTPROC = ::core::option::Option<
    unsafe extern "C" fn(texture: GLuint, target: GLenum, internalformat: GLenum, buffer: GLuint),
>;
pub type PFNGLMULTITEXBUFFEREXTPROC = ::core::option::Option<
    unsafe extern "C" fn(texunit: GLenum, target: GLenum, internalformat: GLenum, buffer: GLuint),
>;
pub type PFNGLTEXTUREPARAMETERIIVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(texture: GLuint, target: GLenum, pname: GLenum, params: *const GLint),
>;
pub type PFNGLTEXTUREPARAMETERIUIVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(texture: GLuint, target: GLenum, pname: GLenum, params: *const GLuint),
>;
pub type PFNGLGETTEXTUREPARAMETERIIVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(texture: GLuint, target: GLenum, pname: GLenum, params: *mut GLint),
>;
pub type PFNGLGETTEXTUREPARAMETERIUIVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(texture: GLuint, target: GLenum, pname: GLenum, params: *mut GLuint),
>;
pub type PFNGLMULTITEXPARAMETERIIVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, params: *const GLint),
>;
pub type PFNGLMULTITEXPARAMETERIUIVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, params: *const GLuint),
>;
pub type PFNGLGETMULTITEXPARAMETERIIVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, params: *mut GLint),
>;
pub type PFNGLGETMULTITEXPARAMETERIUIVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, params: *mut GLuint),
>;
pub type PFNGLPROGRAMUNIFORM1UIEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(program: GLuint, location: GLint, v0: GLuint)>;
pub type PFNGLPROGRAMUNIFORM2UIEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, v0: GLuint, v1: GLuint),
>;
pub type PFNGLPROGRAMUNIFORM3UIEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint),
>;
pub type PFNGLPROGRAMUNIFORM4UIEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        v0: GLuint,
        v1: GLuint,
        v2: GLuint,
        v3: GLuint,
    ),
>;
pub type PFNGLPROGRAMUNIFORM1UIVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLuint),
>;
pub type PFNGLPROGRAMUNIFORM2UIVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLuint),
>;
pub type PFNGLPROGRAMUNIFORM3UIVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLuint),
>;
pub type PFNGLPROGRAMUNIFORM4UIVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLuint),
>;
pub type PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        target: GLenum,
        index: GLuint,
        count: GLsizei,
        params: *const GLfloat,
    ),
>;
pub type PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        target: GLenum,
        index: GLuint,
        x: GLint,
        y: GLint,
        z: GLint,
        w: GLint,
    ),
>;
pub type PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, target: GLenum, index: GLuint, params: *const GLint),
>;
pub type PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        target: GLenum,
        index: GLuint,
        count: GLsizei,
        params: *const GLint,
    ),
>;
pub type PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        target: GLenum,
        index: GLuint,
        x: GLuint,
        y: GLuint,
        z: GLuint,
        w: GLuint,
    ),
>;
pub type PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, target: GLenum, index: GLuint, params: *const GLuint),
>;
pub type PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        target: GLenum,
        index: GLuint,
        count: GLsizei,
        params: *const GLuint,
    ),
>;
pub type PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, target: GLenum, index: GLuint, params: *mut GLint),
>;
pub type PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, target: GLenum, index: GLuint, params: *mut GLuint),
>;
pub type PFNGLENABLECLIENTSTATEIEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(array: GLenum, index: GLuint)>;
pub type PFNGLDISABLECLIENTSTATEIEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(array: GLenum, index: GLuint)>;
pub type PFNGLGETFLOATI_VEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(pname: GLenum, index: GLuint, params: *mut GLfloat),
>;
pub type PFNGLGETDOUBLEI_VEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(pname: GLenum, index: GLuint, params: *mut GLdouble),
>;
pub type PFNGLGETPOINTERI_VEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(pname: GLenum, index: GLuint, params: *mut *mut ctypes::c_void),
>;
pub type PFNGLNAMEDPROGRAMSTRINGEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        target: GLenum,
        format: GLenum,
        len: GLsizei,
        string: *const ctypes::c_void,
    ),
>;
pub type PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        target: GLenum,
        index: GLuint,
        x: GLdouble,
        y: GLdouble,
        z: GLdouble,
        w: GLdouble,
    ),
>;
pub type PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, target: GLenum, index: GLuint, params: *const GLdouble),
>;
pub type PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        target: GLenum,
        index: GLuint,
        x: GLfloat,
        y: GLfloat,
        z: GLfloat,
        w: GLfloat,
    ),
>;
pub type PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, target: GLenum, index: GLuint, params: *const GLfloat),
>;
pub type PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, target: GLenum, index: GLuint, params: *mut GLdouble),
>;
pub type PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, target: GLenum, index: GLuint, params: *mut GLfloat),
>;
pub type PFNGLGETNAMEDPROGRAMIVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, target: GLenum, pname: GLenum, params: *mut GLint),
>;
pub type PFNGLGETNAMEDPROGRAMSTRINGEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        target: GLenum,
        pname: GLenum,
        string: *mut ctypes::c_void,
    ),
>;
pub type PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        renderbuffer: GLuint,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
    ),
>;
pub type PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(renderbuffer: GLuint, pname: GLenum, params: *mut GLint),
>;
pub type PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        renderbuffer: GLuint,
        samples: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
    ),
>;
pub type PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        renderbuffer: GLuint,
        coverageSamples: GLsizei,
        colorSamples: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
    ),
>;
pub type PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(framebuffer: GLuint, target: GLenum) -> GLenum>;
pub type PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        framebuffer: GLuint,
        attachment: GLenum,
        textarget: GLenum,
        texture: GLuint,
        level: GLint,
    ),
>;
pub type PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        framebuffer: GLuint,
        attachment: GLenum,
        textarget: GLenum,
        texture: GLuint,
        level: GLint,
    ),
>;
pub type PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        framebuffer: GLuint,
        attachment: GLenum,
        textarget: GLenum,
        texture: GLuint,
        level: GLint,
        zoffset: GLint,
    ),
>;
pub type PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        framebuffer: GLuint,
        attachment: GLenum,
        renderbuffertarget: GLenum,
        renderbuffer: GLuint,
    ),
>;
pub type PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        framebuffer: GLuint,
        attachment: GLenum,
        pname: GLenum,
        params: *mut GLint,
    ),
>;
pub type PFNGLGENERATETEXTUREMIPMAPEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(texture: GLuint, target: GLenum)>;
pub type PFNGLGENERATEMULTITEXMIPMAPEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(texunit: GLenum, target: GLenum)>;
pub type PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC =
    ::core::option::Option<unsafe extern "C" fn(framebuffer: GLuint, mode: GLenum)>;
pub type PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(framebuffer: GLuint, n: GLsizei, bufs: *const GLenum),
>;
pub type PFNGLFRAMEBUFFERREADBUFFEREXTPROC =
    ::core::option::Option<unsafe extern "C" fn(framebuffer: GLuint, mode: GLenum)>;
pub type PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(framebuffer: GLuint, pname: GLenum, params: *mut GLint),
>;
pub type PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        readBuffer: GLuint,
        writeBuffer: GLuint,
        readOffset: GLintptr,
        writeOffset: GLintptr,
        size: GLsizeiptr,
    ),
>;
pub type PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint),
>;
pub type PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        framebuffer: GLuint,
        attachment: GLenum,
        texture: GLuint,
        level: GLint,
        layer: GLint,
    ),
>;
pub type PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        framebuffer: GLuint,
        attachment: GLenum,
        texture: GLuint,
        level: GLint,
        face: GLenum,
    ),
>;
pub type PFNGLTEXTURERENDERBUFFEREXTPROC = ::core::option::Option<
    unsafe extern "C" fn(texture: GLuint, target: GLenum, renderbuffer: GLuint),
>;
pub type PFNGLMULTITEXRENDERBUFFEREXTPROC = ::core::option::Option<
    unsafe extern "C" fn(texunit: GLenum, target: GLenum, renderbuffer: GLuint),
>;
pub type PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        vaobj: GLuint,
        buffer: GLuint,
        size: GLint,
        type_: GLenum,
        stride: GLsizei,
        offset: GLintptr,
    ),
>;
pub type PFNGLVERTEXARRAYCOLOROFFSETEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        vaobj: GLuint,
        buffer: GLuint,
        size: GLint,
        type_: GLenum,
        stride: GLsizei,
        offset: GLintptr,
    ),
>;
pub type PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(vaobj: GLuint, buffer: GLuint, stride: GLsizei, offset: GLintptr),
>;
pub type PFNGLVERTEXARRAYINDEXOFFSETEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        vaobj: GLuint,
        buffer: GLuint,
        type_: GLenum,
        stride: GLsizei,
        offset: GLintptr,
    ),
>;
pub type PFNGLVERTEXARRAYNORMALOFFSETEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        vaobj: GLuint,
        buffer: GLuint,
        type_: GLenum,
        stride: GLsizei,
        offset: GLintptr,
    ),
>;
pub type PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        vaobj: GLuint,
        buffer: GLuint,
        size: GLint,
        type_: GLenum,
        stride: GLsizei,
        offset: GLintptr,
    ),
>;
pub type PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        vaobj: GLuint,
        buffer: GLuint,
        texunit: GLenum,
        size: GLint,
        type_: GLenum,
        stride: GLsizei,
        offset: GLintptr,
    ),
>;
pub type PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        vaobj: GLuint,
        buffer: GLuint,
        type_: GLenum,
        stride: GLsizei,
        offset: GLintptr,
    ),
>;
pub type PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        vaobj: GLuint,
        buffer: GLuint,
        size: GLint,
        type_: GLenum,
        stride: GLsizei,
        offset: GLintptr,
    ),
>;
pub type PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        vaobj: GLuint,
        buffer: GLuint,
        index: GLuint,
        size: GLint,
        type_: GLenum,
        normalized: GLboolean,
        stride: GLsizei,
        offset: GLintptr,
    ),
>;
pub type PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        vaobj: GLuint,
        buffer: GLuint,
        index: GLuint,
        size: GLint,
        type_: GLenum,
        stride: GLsizei,
        offset: GLintptr,
    ),
>;
pub type PFNGLENABLEVERTEXARRAYEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(vaobj: GLuint, array: GLenum)>;
pub type PFNGLDISABLEVERTEXARRAYEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(vaobj: GLuint, array: GLenum)>;
pub type PFNGLENABLEVERTEXARRAYATTRIBEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(vaobj: GLuint, index: GLuint)>;
pub type PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(vaobj: GLuint, index: GLuint)>;
pub type PFNGLGETVERTEXARRAYINTEGERVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(vaobj: GLuint, pname: GLenum, param: *mut GLint)>;
pub type PFNGLGETVERTEXARRAYPOINTERVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(vaobj: GLuint, pname: GLenum, param: *mut *mut ctypes::c_void),
>;
pub type PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(vaobj: GLuint, index: GLuint, pname: GLenum, param: *mut GLint),
>;
pub type PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        vaobj: GLuint,
        index: GLuint,
        pname: GLenum,
        param: *mut *mut ctypes::c_void,
    ),
>;
pub type PFNGLMAPNAMEDBUFFERRANGEEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        buffer: GLuint,
        offset: GLintptr,
        length: GLsizeiptr,
        access: GLbitfield,
    ) -> *mut ctypes::c_void,
>;
pub type PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(buffer: GLuint, offset: GLintptr, length: GLsizeiptr),
>;
pub type PFNGLNAMEDBUFFERSTORAGEEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        buffer: GLuint,
        size: GLsizeiptr,
        data: *const ctypes::c_void,
        flags: GLbitfield,
    ),
>;
pub type PFNGLCLEARNAMEDBUFFERDATAEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        buffer: GLuint,
        internalformat: GLenum,
        format: GLenum,
        type_: GLenum,
        data: *const ctypes::c_void,
    ),
>;
pub type PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        buffer: GLuint,
        internalformat: GLenum,
        offset: GLsizeiptr,
        size: GLsizeiptr,
        format: GLenum,
        type_: GLenum,
        data: *const ctypes::c_void,
    ),
>;
pub type PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(framebuffer: GLuint, pname: GLenum, param: GLint)>;
pub type PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(framebuffer: GLuint, pname: GLenum, params: *mut GLint),
>;
pub type PFNGLPROGRAMUNIFORM1DEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(program: GLuint, location: GLint, x: GLdouble)>;
pub type PFNGLPROGRAMUNIFORM2DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, x: GLdouble, y: GLdouble),
>;
pub type PFNGLPROGRAMUNIFORM3DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, x: GLdouble, y: GLdouble, z: GLdouble),
>;
pub type PFNGLPROGRAMUNIFORM4DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        x: GLdouble,
        y: GLdouble,
        z: GLdouble,
        w: GLdouble,
    ),
>;
pub type PFNGLPROGRAMUNIFORM1DVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLdouble),
>;
pub type PFNGLPROGRAMUNIFORM2DVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLdouble),
>;
pub type PFNGLPROGRAMUNIFORM3DVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLdouble),
>;
pub type PFNGLPROGRAMUNIFORM4DVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLdouble),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
pub type PFNGLTEXTUREBUFFERRANGEEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        target: GLenum,
        internalformat: GLenum,
        buffer: GLuint,
        offset: GLintptr,
        size: GLsizeiptr,
    ),
>;
pub type PFNGLTEXTURESTORAGE1DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        target: GLenum,
        levels: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
    ),
>;
pub type PFNGLTEXTURESTORAGE2DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        target: GLenum,
        levels: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
    ),
>;
pub type PFNGLTEXTURESTORAGE3DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        target: GLenum,
        levels: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
    ),
>;
pub type PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        target: GLenum,
        samples: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        fixedsamplelocations: GLboolean,
    ),
>;
pub type PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        target: GLenum,
        samples: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        fixedsamplelocations: GLboolean,
    ),
>;
pub type PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        vaobj: GLuint,
        bindingindex: GLuint,
        buffer: GLuint,
        offset: GLintptr,
        stride: GLsizei,
    ),
>;
pub type PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        vaobj: GLuint,
        attribindex: GLuint,
        size: GLint,
        type_: GLenum,
        normalized: GLboolean,
        relativeoffset: GLuint,
    ),
>;
pub type PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        vaobj: GLuint,
        attribindex: GLuint,
        size: GLint,
        type_: GLenum,
        relativeoffset: GLuint,
    ),
>;
pub type PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        vaobj: GLuint,
        attribindex: GLuint,
        size: GLint,
        type_: GLenum,
        relativeoffset: GLuint,
    ),
>;
pub type PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(vaobj: GLuint, attribindex: GLuint, bindingindex: GLuint),
>;
pub type PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC = ::core::option::Option<
    unsafe extern "C" fn(vaobj: GLuint, bindingindex: GLuint, divisor: GLuint),
>;
pub type PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        vaobj: GLuint,
        buffer: GLuint,
        index: GLuint,
        size: GLint,
        type_: GLenum,
        stride: GLsizei,
        offset: GLintptr,
    ),
>;
pub type PFNGLTEXTUREPAGECOMMITMENTEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        zoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        resident: GLboolean,
    ),
>;
pub type PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC =
    ::core::option::Option<unsafe extern "C" fn(vaobj: GLuint, index: GLuint, divisor: GLuint)>;
extern "C" {
    pub fn glMatrixLoadfEXT(mode: GLenum, m: *const GLfloat);
}
extern "C" {
    pub fn glMatrixLoaddEXT(mode: GLenum, m: *const GLdouble);
}
extern "C" {
    pub fn glMatrixMultfEXT(mode: GLenum, m: *const GLfloat);
}
extern "C" {
    pub fn glMatrixMultdEXT(mode: GLenum, m: *const GLdouble);
}
extern "C" {
    pub fn glMatrixLoadIdentityEXT(mode: GLenum);
}
extern "C" {
    pub fn glMatrixRotatefEXT(mode: GLenum, angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat);
}
extern "C" {
    pub fn glMatrixRotatedEXT(mode: GLenum, angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble);
}
extern "C" {
    pub fn glMatrixScalefEXT(mode: GLenum, x: GLfloat, y: GLfloat, z: GLfloat);
}
extern "C" {
    pub fn glMatrixScaledEXT(mode: GLenum, x: GLdouble, y: GLdouble, z: GLdouble);
}
extern "C" {
    pub fn glMatrixTranslatefEXT(mode: GLenum, x: GLfloat, y: GLfloat, z: GLfloat);
}
extern "C" {
    pub fn glMatrixTranslatedEXT(mode: GLenum, x: GLdouble, y: GLdouble, z: GLdouble);
}
extern "C" {
    pub fn glMatrixFrustumEXT(
        mode: GLenum,
        left: GLdouble,
        right: GLdouble,
        bottom: GLdouble,
        top: GLdouble,
        zNear: GLdouble,
        zFar: GLdouble,
    );
}
extern "C" {
    pub fn glMatrixOrthoEXT(
        mode: GLenum,
        left: GLdouble,
        right: GLdouble,
        bottom: GLdouble,
        top: GLdouble,
        zNear: GLdouble,
        zFar: GLdouble,
    );
}
extern "C" {
    pub fn glMatrixPopEXT(mode: GLenum);
}
extern "C" {
    pub fn glMatrixPushEXT(mode: GLenum);
}
extern "C" {
    pub fn glClientAttribDefaultEXT(mask: GLbitfield);
}
extern "C" {
    pub fn glPushClientAttribDefaultEXT(mask: GLbitfield);
}
extern "C" {
    pub fn glTextureParameterfEXT(texture: GLuint, target: GLenum, pname: GLenum, param: GLfloat);
}
extern "C" {
    pub fn glTextureParameterfvEXT(
        texture: GLuint,
        target: GLenum,
        pname: GLenum,
        params: *const GLfloat,
    );
}
extern "C" {
    pub fn glTextureParameteriEXT(texture: GLuint, target: GLenum, pname: GLenum, param: GLint);
}
extern "C" {
    pub fn glTextureParameterivEXT(
        texture: GLuint,
        target: GLenum,
        pname: GLenum,
        params: *const GLint,
    );
}
extern "C" {
    pub fn glTextureImage1DEXT(
        texture: GLuint,
        target: GLenum,
        level: GLint,
        internalformat: GLint,
        width: GLsizei,
        border: GLint,
        format: GLenum,
        type_: GLenum,
        pixels: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glTextureImage2DEXT(
        texture: GLuint,
        target: GLenum,
        level: GLint,
        internalformat: GLint,
        width: GLsizei,
        height: GLsizei,
        border: GLint,
        format: GLenum,
        type_: GLenum,
        pixels: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glTextureSubImage1DEXT(
        texture: GLuint,
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        width: GLsizei,
        format: GLenum,
        type_: GLenum,
        pixels: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glTextureSubImage2DEXT(
        texture: GLuint,
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        format: GLenum,
        type_: GLenum,
        pixels: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glCopyTextureImage1DEXT(
        texture: GLuint,
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        x: GLint,
        y: GLint,
        width: GLsizei,
        border: GLint,
    );
}
extern "C" {
    pub fn glCopyTextureImage2DEXT(
        texture: GLuint,
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        x: GLint,
        y: GLint,
        width: GLsizei,
        height: GLsizei,
        border: GLint,
    );
}
extern "C" {
    pub fn glCopyTextureSubImage1DEXT(
        texture: GLuint,
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        x: GLint,
        y: GLint,
        width: GLsizei,
    );
}
extern "C" {
    pub fn glCopyTextureSubImage2DEXT(
        texture: GLuint,
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        x: GLint,
        y: GLint,
        width: GLsizei,
        height: GLsizei,
    );
}
extern "C" {
    pub fn glGetTextureImageEXT(
        texture: GLuint,
        target: GLenum,
        level: GLint,
        format: GLenum,
        type_: GLenum,
        pixels: *mut ctypes::c_void,
    );
}
extern "C" {
    pub fn glGetTextureParameterfvEXT(
        texture: GLuint,
        target: GLenum,
        pname: GLenum,
        params: *mut GLfloat,
    );
}
extern "C" {
    pub fn glGetTextureParameterivEXT(
        texture: GLuint,
        target: GLenum,
        pname: GLenum,
        params: *mut GLint,
    );
}
extern "C" {
    pub fn glGetTextureLevelParameterfvEXT(
        texture: GLuint,
        target: GLenum,
        level: GLint,
        pname: GLenum,
        params: *mut GLfloat,
    );
}
extern "C" {
    pub fn glGetTextureLevelParameterivEXT(
        texture: GLuint,
        target: GLenum,
        level: GLint,
        pname: GLenum,
        params: *mut GLint,
    );
}
extern "C" {
    pub fn glTextureImage3DEXT(
        texture: GLuint,
        target: GLenum,
        level: GLint,
        internalformat: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        border: GLint,
        format: GLenum,
        type_: GLenum,
        pixels: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glTextureSubImage3DEXT(
        texture: GLuint,
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        zoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        format: GLenum,
        type_: GLenum,
        pixels: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glCopyTextureSubImage3DEXT(
        texture: GLuint,
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        zoffset: GLint,
        x: GLint,
        y: GLint,
        width: GLsizei,
        height: GLsizei,
    );
}
extern "C" {
    pub fn glBindMultiTextureEXT(texunit: GLenum, target: GLenum, texture: GLuint);
}
extern "C" {
    pub fn glMultiTexCoordPointerEXT(
        texunit: GLenum,
        size: GLint,
        type_: GLenum,
        stride: GLsizei,
        pointer: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glMultiTexEnvfEXT(texunit: GLenum, target: GLenum, pname: GLenum, param: GLfloat);
}
extern "C" {
    pub fn glMultiTexEnvfvEXT(
        texunit: GLenum,
        target: GLenum,
        pname: GLenum,
        params: *const GLfloat,
    );
}
extern "C" {
    pub fn glMultiTexEnviEXT(texunit: GLenum, target: GLenum, pname: GLenum, param: GLint);
}
extern "C" {
    pub fn glMultiTexEnvivEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: *const GLint);
}
extern "C" {
    pub fn glMultiTexGendEXT(texunit: GLenum, coord: GLenum, pname: GLenum, param: GLdouble);
}
extern "C" {
    pub fn glMultiTexGendvEXT(
        texunit: GLenum,
        coord: GLenum,
        pname: GLenum,
        params: *const GLdouble,
    );
}
extern "C" {
    pub fn glMultiTexGenfEXT(texunit: GLenum, coord: GLenum, pname: GLenum, param: GLfloat);
}
extern "C" {
    pub fn glMultiTexGenfvEXT(
        texunit: GLenum,
        coord: GLenum,
        pname: GLenum,
        params: *const GLfloat,
    );
}
extern "C" {
    pub fn glMultiTexGeniEXT(texunit: GLenum, coord: GLenum, pname: GLenum, param: GLint);
}
extern "C" {
    pub fn glMultiTexGenivEXT(texunit: GLenum, coord: GLenum, pname: GLenum, params: *const GLint);
}
extern "C" {
    pub fn glGetMultiTexEnvfvEXT(
        texunit: GLenum,
        target: GLenum,
        pname: GLenum,
        params: *mut GLfloat,
    );
}
extern "C" {
    pub fn glGetMultiTexEnvivEXT(
        texunit: GLenum,
        target: GLenum,
        pname: GLenum,
        params: *mut GLint,
    );
}
extern "C" {
    pub fn glGetMultiTexGendvEXT(
        texunit: GLenum,
        coord: GLenum,
        pname: GLenum,
        params: *mut GLdouble,
    );
}
extern "C" {
    pub fn glGetMultiTexGenfvEXT(
        texunit: GLenum,
        coord: GLenum,
        pname: GLenum,
        params: *mut GLfloat,
    );
}
extern "C" {
    pub fn glGetMultiTexGenivEXT(texunit: GLenum, coord: GLenum, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glMultiTexParameteriEXT(texunit: GLenum, target: GLenum, pname: GLenum, param: GLint);
}
extern "C" {
    pub fn glMultiTexParameterivEXT(
        texunit: GLenum,
        target: GLenum,
        pname: GLenum,
        params: *const GLint,
    );
}
extern "C" {
    pub fn glMultiTexParameterfEXT(texunit: GLenum, target: GLenum, pname: GLenum, param: GLfloat);
}
extern "C" {
    pub fn glMultiTexParameterfvEXT(
        texunit: GLenum,
        target: GLenum,
        pname: GLenum,
        params: *const GLfloat,
    );
}
extern "C" {
    pub fn glMultiTexImage1DEXT(
        texunit: GLenum,
        target: GLenum,
        level: GLint,
        internalformat: GLint,
        width: GLsizei,
        border: GLint,
        format: GLenum,
        type_: GLenum,
        pixels: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glMultiTexImage2DEXT(
        texunit: GLenum,
        target: GLenum,
        level: GLint,
        internalformat: GLint,
        width: GLsizei,
        height: GLsizei,
        border: GLint,
        format: GLenum,
        type_: GLenum,
        pixels: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glMultiTexSubImage1DEXT(
        texunit: GLenum,
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        width: GLsizei,
        format: GLenum,
        type_: GLenum,
        pixels: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glMultiTexSubImage2DEXT(
        texunit: GLenum,
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        format: GLenum,
        type_: GLenum,
        pixels: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glCopyMultiTexImage1DEXT(
        texunit: GLenum,
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        x: GLint,
        y: GLint,
        width: GLsizei,
        border: GLint,
    );
}
extern "C" {
    pub fn glCopyMultiTexImage2DEXT(
        texunit: GLenum,
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        x: GLint,
        y: GLint,
        width: GLsizei,
        height: GLsizei,
        border: GLint,
    );
}
extern "C" {
    pub fn glCopyMultiTexSubImage1DEXT(
        texunit: GLenum,
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        x: GLint,
        y: GLint,
        width: GLsizei,
    );
}
extern "C" {
    pub fn glCopyMultiTexSubImage2DEXT(
        texunit: GLenum,
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        x: GLint,
        y: GLint,
        width: GLsizei,
        height: GLsizei,
    );
}
extern "C" {
    pub fn glGetMultiTexImageEXT(
        texunit: GLenum,
        target: GLenum,
        level: GLint,
        format: GLenum,
        type_: GLenum,
        pixels: *mut ctypes::c_void,
    );
}
extern "C" {
    pub fn glGetMultiTexParameterfvEXT(
        texunit: GLenum,
        target: GLenum,
        pname: GLenum,
        params: *mut GLfloat,
    );
}
extern "C" {
    pub fn glGetMultiTexParameterivEXT(
        texunit: GLenum,
        target: GLenum,
        pname: GLenum,
        params: *mut GLint,
    );
}
extern "C" {
    pub fn glGetMultiTexLevelParameterfvEXT(
        texunit: GLenum,
        target: GLenum,
        level: GLint,
        pname: GLenum,
        params: *mut GLfloat,
    );
}
extern "C" {
    pub fn glGetMultiTexLevelParameterivEXT(
        texunit: GLenum,
        target: GLenum,
        level: GLint,
        pname: GLenum,
        params: *mut GLint,
    );
}
extern "C" {
    pub fn glMultiTexImage3DEXT(
        texunit: GLenum,
        target: GLenum,
        level: GLint,
        internalformat: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        border: GLint,
        format: GLenum,
        type_: GLenum,
        pixels: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glMultiTexSubImage3DEXT(
        texunit: GLenum,
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        zoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        format: GLenum,
        type_: GLenum,
        pixels: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glCopyMultiTexSubImage3DEXT(
        texunit: GLenum,
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        zoffset: GLint,
        x: GLint,
        y: GLint,
        width: GLsizei,
        height: GLsizei,
    );
}
extern "C" {
    pub fn glEnableClientStateIndexedEXT(array: GLenum, index: GLuint);
}
extern "C" {
    pub fn glDisableClientStateIndexedEXT(array: GLenum, index: GLuint);
}
extern "C" {
    pub fn glGetFloatIndexedvEXT(target: GLenum, index: GLuint, data: *mut GLfloat);
}
extern "C" {
    pub fn glGetDoubleIndexedvEXT(target: GLenum, index: GLuint, data: *mut GLdouble);
}
extern "C" {
    pub fn glGetPointerIndexedvEXT(target: GLenum, index: GLuint, data: *mut *mut ctypes::c_void);
}
extern "C" {
    pub fn glEnableIndexedEXT(target: GLenum, index: GLuint);
}
extern "C" {
    pub fn glDisableIndexedEXT(target: GLenum, index: GLuint);
}
extern "C" {
    pub fn glIsEnabledIndexedEXT(target: GLenum, index: GLuint) -> GLboolean;
}
extern "C" {
    pub fn glGetIntegerIndexedvEXT(target: GLenum, index: GLuint, data: *mut GLint);
}
extern "C" {
    pub fn glGetBooleanIndexedvEXT(target: GLenum, index: GLuint, data: *mut GLboolean);
}
extern "C" {
    pub fn glCompressedTextureImage3DEXT(
        texture: GLuint,
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        border: GLint,
        imageSize: GLsizei,
        bits: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glCompressedTextureImage2DEXT(
        texture: GLuint,
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        border: GLint,
        imageSize: GLsizei,
        bits: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glCompressedTextureImage1DEXT(
        texture: GLuint,
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        width: GLsizei,
        border: GLint,
        imageSize: GLsizei,
        bits: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glCompressedTextureSubImage3DEXT(
        texture: GLuint,
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        zoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        format: GLenum,
        imageSize: GLsizei,
        bits: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glCompressedTextureSubImage2DEXT(
        texture: GLuint,
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        format: GLenum,
        imageSize: GLsizei,
        bits: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glCompressedTextureSubImage1DEXT(
        texture: GLuint,
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        width: GLsizei,
        format: GLenum,
        imageSize: GLsizei,
        bits: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glGetCompressedTextureImageEXT(
        texture: GLuint,
        target: GLenum,
        lod: GLint,
        img: *mut ctypes::c_void,
    );
}
extern "C" {
    pub fn glCompressedMultiTexImage3DEXT(
        texunit: GLenum,
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        border: GLint,
        imageSize: GLsizei,
        bits: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glCompressedMultiTexImage2DEXT(
        texunit: GLenum,
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        border: GLint,
        imageSize: GLsizei,
        bits: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glCompressedMultiTexImage1DEXT(
        texunit: GLenum,
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        width: GLsizei,
        border: GLint,
        imageSize: GLsizei,
        bits: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glCompressedMultiTexSubImage3DEXT(
        texunit: GLenum,
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        zoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        format: GLenum,
        imageSize: GLsizei,
        bits: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glCompressedMultiTexSubImage2DEXT(
        texunit: GLenum,
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        format: GLenum,
        imageSize: GLsizei,
        bits: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glCompressedMultiTexSubImage1DEXT(
        texunit: GLenum,
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        width: GLsizei,
        format: GLenum,
        imageSize: GLsizei,
        bits: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glGetCompressedMultiTexImageEXT(
        texunit: GLenum,
        target: GLenum,
        lod: GLint,
        img: *mut ctypes::c_void,
    );
}
extern "C" {
    pub fn glMatrixLoadTransposefEXT(mode: GLenum, m: *const GLfloat);
}
extern "C" {
    pub fn glMatrixLoadTransposedEXT(mode: GLenum, m: *const GLdouble);
}
extern "C" {
    pub fn glMatrixMultTransposefEXT(mode: GLenum, m: *const GLfloat);
}
extern "C" {
    pub fn glMatrixMultTransposedEXT(mode: GLenum, m: *const GLdouble);
}
extern "C" {
    pub fn glNamedBufferDataEXT(
        buffer: GLuint,
        size: GLsizeiptr,
        data: *const ctypes::c_void,
        usage: GLenum,
    );
}
extern "C" {
    pub fn glNamedBufferSubDataEXT(
        buffer: GLuint,
        offset: GLintptr,
        size: GLsizeiptr,
        data: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glMapNamedBufferEXT(buffer: GLuint, access: GLenum) -> *mut ctypes::c_void;
}
extern "C" {
    pub fn glUnmapNamedBufferEXT(buffer: GLuint) -> GLboolean;
}
extern "C" {
    pub fn glGetNamedBufferParameterivEXT(buffer: GLuint, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetNamedBufferPointervEXT(
        buffer: GLuint,
        pname: GLenum,
        params: *mut *mut ctypes::c_void,
    );
}
extern "C" {
    pub fn glGetNamedBufferSubDataEXT(
        buffer: GLuint,
        offset: GLintptr,
        size: GLsizeiptr,
        data: *mut ctypes::c_void,
    );
}
extern "C" {
    pub fn glProgramUniform1fEXT(program: GLuint, location: GLint, v0: GLfloat);
}
extern "C" {
    pub fn glProgramUniform2fEXT(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat);
}
extern "C" {
    pub fn glProgramUniform3fEXT(
        program: GLuint,
        location: GLint,
        v0: GLfloat,
        v1: GLfloat,
        v2: GLfloat,
    );
}
extern "C" {
    pub fn glProgramUniform4fEXT(
        program: GLuint,
        location: GLint,
        v0: GLfloat,
        v1: GLfloat,
        v2: GLfloat,
        v3: GLfloat,
    );
}
extern "C" {
    pub fn glProgramUniform1iEXT(program: GLuint, location: GLint, v0: GLint);
}
extern "C" {
    pub fn glProgramUniform2iEXT(program: GLuint, location: GLint, v0: GLint, v1: GLint);
}
extern "C" {
    pub fn glProgramUniform3iEXT(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint);
}
extern "C" {
    pub fn glProgramUniform4iEXT(
        program: GLuint,
        location: GLint,
        v0: GLint,
        v1: GLint,
        v2: GLint,
        v3: GLint,
    );
}
extern "C" {
    pub fn glProgramUniform1fvEXT(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glProgramUniform2fvEXT(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glProgramUniform3fvEXT(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glProgramUniform4fvEXT(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glProgramUniform1ivEXT(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLint,
    );
}
extern "C" {
    pub fn glProgramUniform2ivEXT(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLint,
    );
}
extern "C" {
    pub fn glProgramUniform3ivEXT(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLint,
    );
}
extern "C" {
    pub fn glProgramUniform4ivEXT(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLint,
    );
}
extern "C" {
    pub fn glProgramUniformMatrix2fvEXT(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glProgramUniformMatrix3fvEXT(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glProgramUniformMatrix4fvEXT(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glProgramUniformMatrix2x3fvEXT(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glProgramUniformMatrix3x2fvEXT(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glProgramUniformMatrix2x4fvEXT(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glProgramUniformMatrix4x2fvEXT(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glProgramUniformMatrix3x4fvEXT(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glProgramUniformMatrix4x3fvEXT(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glTextureBufferEXT(
        texture: GLuint,
        target: GLenum,
        internalformat: GLenum,
        buffer: GLuint,
    );
}
extern "C" {
    pub fn glMultiTexBufferEXT(
        texunit: GLenum,
        target: GLenum,
        internalformat: GLenum,
        buffer: GLuint,
    );
}
extern "C" {
    pub fn glTextureParameterIivEXT(
        texture: GLuint,
        target: GLenum,
        pname: GLenum,
        params: *const GLint,
    );
}
extern "C" {
    pub fn glTextureParameterIuivEXT(
        texture: GLuint,
        target: GLenum,
        pname: GLenum,
        params: *const GLuint,
    );
}
extern "C" {
    pub fn glGetTextureParameterIivEXT(
        texture: GLuint,
        target: GLenum,
        pname: GLenum,
        params: *mut GLint,
    );
}
extern "C" {
    pub fn glGetTextureParameterIuivEXT(
        texture: GLuint,
        target: GLenum,
        pname: GLenum,
        params: *mut GLuint,
    );
}
extern "C" {
    pub fn glMultiTexParameterIivEXT(
        texunit: GLenum,
        target: GLenum,
        pname: GLenum,
        params: *const GLint,
    );
}
extern "C" {
    pub fn glMultiTexParameterIuivEXT(
        texunit: GLenum,
        target: GLenum,
        pname: GLenum,
        params: *const GLuint,
    );
}
extern "C" {
    pub fn glGetMultiTexParameterIivEXT(
        texunit: GLenum,
        target: GLenum,
        pname: GLenum,
        params: *mut GLint,
    );
}
extern "C" {
    pub fn glGetMultiTexParameterIuivEXT(
        texunit: GLenum,
        target: GLenum,
        pname: GLenum,
        params: *mut GLuint,
    );
}
extern "C" {
    pub fn glProgramUniform1uiEXT(program: GLuint, location: GLint, v0: GLuint);
}
extern "C" {
    pub fn glProgramUniform2uiEXT(program: GLuint, location: GLint, v0: GLuint, v1: GLuint);
}
extern "C" {
    pub fn glProgramUniform3uiEXT(
        program: GLuint,
        location: GLint,
        v0: GLuint,
        v1: GLuint,
        v2: GLuint,
    );
}
extern "C" {
    pub fn glProgramUniform4uiEXT(
        program: GLuint,
        location: GLint,
        v0: GLuint,
        v1: GLuint,
        v2: GLuint,
        v3: GLuint,
    );
}
extern "C" {
    pub fn glProgramUniform1uivEXT(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLuint,
    );
}
extern "C" {
    pub fn glProgramUniform2uivEXT(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLuint,
    );
}
extern "C" {
    pub fn glProgramUniform3uivEXT(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLuint,
    );
}
extern "C" {
    pub fn glProgramUniform4uivEXT(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLuint,
    );
}
extern "C" {
    pub fn glNamedProgramLocalParameters4fvEXT(
        program: GLuint,
        target: GLenum,
        index: GLuint,
        count: GLsizei,
        params: *const GLfloat,
    );
}
extern "C" {
    pub fn glNamedProgramLocalParameterI4iEXT(
        program: GLuint,
        target: GLenum,
        index: GLuint,
        x: GLint,
        y: GLint,
        z: GLint,
        w: GLint,
    );
}
extern "C" {
    pub fn glNamedProgramLocalParameterI4ivEXT(
        program: GLuint,
        target: GLenum,
        index: GLuint,
        params: *const GLint,
    );
}
extern "C" {
    pub fn glNamedProgramLocalParametersI4ivEXT(
        program: GLuint,
        target: GLenum,
        index: GLuint,
        count: GLsizei,
        params: *const GLint,
    );
}
extern "C" {
    pub fn glNamedProgramLocalParameterI4uiEXT(
        program: GLuint,
        target: GLenum,
        index: GLuint,
        x: GLuint,
        y: GLuint,
        z: GLuint,
        w: GLuint,
    );
}
extern "C" {
    pub fn glNamedProgramLocalParameterI4uivEXT(
        program: GLuint,
        target: GLenum,
        index: GLuint,
        params: *const GLuint,
    );
}
extern "C" {
    pub fn glNamedProgramLocalParametersI4uivEXT(
        program: GLuint,
        target: GLenum,
        index: GLuint,
        count: GLsizei,
        params: *const GLuint,
    );
}
extern "C" {
    pub fn glGetNamedProgramLocalParameterIivEXT(
        program: GLuint,
        target: GLenum,
        index: GLuint,
        params: *mut GLint,
    );
}
extern "C" {
    pub fn glGetNamedProgramLocalParameterIuivEXT(
        program: GLuint,
        target: GLenum,
        index: GLuint,
        params: *mut GLuint,
    );
}
extern "C" {
    pub fn glEnableClientStateiEXT(array: GLenum, index: GLuint);
}
extern "C" {
    pub fn glDisableClientStateiEXT(array: GLenum, index: GLuint);
}
extern "C" {
    pub fn glGetFloati_vEXT(pname: GLenum, index: GLuint, params: *mut GLfloat);
}
extern "C" {
    pub fn glGetDoublei_vEXT(pname: GLenum, index: GLuint, params: *mut GLdouble);
}
extern "C" {
    pub fn glGetPointeri_vEXT(pname: GLenum, index: GLuint, params: *mut *mut ctypes::c_void);
}
extern "C" {
    pub fn glNamedProgramStringEXT(
        program: GLuint,
        target: GLenum,
        format: GLenum,
        len: GLsizei,
        string: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glNamedProgramLocalParameter4dEXT(
        program: GLuint,
        target: GLenum,
        index: GLuint,
        x: GLdouble,
        y: GLdouble,
        z: GLdouble,
        w: GLdouble,
    );
}
extern "C" {
    pub fn glNamedProgramLocalParameter4dvEXT(
        program: GLuint,
        target: GLenum,
        index: GLuint,
        params: *const GLdouble,
    );
}
extern "C" {
    pub fn glNamedProgramLocalParameter4fEXT(
        program: GLuint,
        target: GLenum,
        index: GLuint,
        x: GLfloat,
        y: GLfloat,
        z: GLfloat,
        w: GLfloat,
    );
}
extern "C" {
    pub fn glNamedProgramLocalParameter4fvEXT(
        program: GLuint,
        target: GLenum,
        index: GLuint,
        params: *const GLfloat,
    );
}
extern "C" {
    pub fn glGetNamedProgramLocalParameterdvEXT(
        program: GLuint,
        target: GLenum,
        index: GLuint,
        params: *mut GLdouble,
    );
}
extern "C" {
    pub fn glGetNamedProgramLocalParameterfvEXT(
        program: GLuint,
        target: GLenum,
        index: GLuint,
        params: *mut GLfloat,
    );
}
extern "C" {
    pub fn glGetNamedProgramivEXT(
        program: GLuint,
        target: GLenum,
        pname: GLenum,
        params: *mut GLint,
    );
}
extern "C" {
    pub fn glGetNamedProgramStringEXT(
        program: GLuint,
        target: GLenum,
        pname: GLenum,
        string: *mut ctypes::c_void,
    );
}
extern "C" {
    pub fn glNamedRenderbufferStorageEXT(
        renderbuffer: GLuint,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
    );
}
extern "C" {
    pub fn glGetNamedRenderbufferParameterivEXT(
        renderbuffer: GLuint,
        pname: GLenum,
        params: *mut GLint,
    );
}
extern "C" {
    pub fn glNamedRenderbufferStorageMultisampleEXT(
        renderbuffer: GLuint,
        samples: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
    );
}
extern "C" {
    pub fn glNamedRenderbufferStorageMultisampleCoverageEXT(
        renderbuffer: GLuint,
        coverageSamples: GLsizei,
        colorSamples: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
    );
}
extern "C" {
    pub fn glCheckNamedFramebufferStatusEXT(framebuffer: GLuint, target: GLenum) -> GLenum;
}
extern "C" {
    pub fn glNamedFramebufferTexture1DEXT(
        framebuffer: GLuint,
        attachment: GLenum,
        textarget: GLenum,
        texture: GLuint,
        level: GLint,
    );
}
extern "C" {
    pub fn glNamedFramebufferTexture2DEXT(
        framebuffer: GLuint,
        attachment: GLenum,
        textarget: GLenum,
        texture: GLuint,
        level: GLint,
    );
}
extern "C" {
    pub fn glNamedFramebufferTexture3DEXT(
        framebuffer: GLuint,
        attachment: GLenum,
        textarget: GLenum,
        texture: GLuint,
        level: GLint,
        zoffset: GLint,
    );
}
extern "C" {
    pub fn glNamedFramebufferRenderbufferEXT(
        framebuffer: GLuint,
        attachment: GLenum,
        renderbuffertarget: GLenum,
        renderbuffer: GLuint,
    );
}
extern "C" {
    pub fn glGetNamedFramebufferAttachmentParameterivEXT(
        framebuffer: GLuint,
        attachment: GLenum,
        pname: GLenum,
        params: *mut GLint,
    );
}
extern "C" {
    pub fn glGenerateTextureMipmapEXT(texture: GLuint, target: GLenum);
}
extern "C" {
    pub fn glGenerateMultiTexMipmapEXT(texunit: GLenum, target: GLenum);
}
extern "C" {
    pub fn glFramebufferDrawBufferEXT(framebuffer: GLuint, mode: GLenum);
}
extern "C" {
    pub fn glFramebufferDrawBuffersEXT(framebuffer: GLuint, n: GLsizei, bufs: *const GLenum);
}
extern "C" {
    pub fn glFramebufferReadBufferEXT(framebuffer: GLuint, mode: GLenum);
}
extern "C" {
    pub fn glGetFramebufferParameterivEXT(framebuffer: GLuint, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glNamedCopyBufferSubDataEXT(
        readBuffer: GLuint,
        writeBuffer: GLuint,
        readOffset: GLintptr,
        writeOffset: GLintptr,
        size: GLsizeiptr,
    );
}
extern "C" {
    pub fn glNamedFramebufferTextureEXT(
        framebuffer: GLuint,
        attachment: GLenum,
        texture: GLuint,
        level: GLint,
    );
}
extern "C" {
    pub fn glNamedFramebufferTextureLayerEXT(
        framebuffer: GLuint,
        attachment: GLenum,
        texture: GLuint,
        level: GLint,
        layer: GLint,
    );
}
extern "C" {
    pub fn glNamedFramebufferTextureFaceEXT(
        framebuffer: GLuint,
        attachment: GLenum,
        texture: GLuint,
        level: GLint,
        face: GLenum,
    );
}
extern "C" {
    pub fn glTextureRenderbufferEXT(texture: GLuint, target: GLenum, renderbuffer: GLuint);
}
extern "C" {
    pub fn glMultiTexRenderbufferEXT(texunit: GLenum, target: GLenum, renderbuffer: GLuint);
}
extern "C" {
    pub fn glVertexArrayVertexOffsetEXT(
        vaobj: GLuint,
        buffer: GLuint,
        size: GLint,
        type_: GLenum,
        stride: GLsizei,
        offset: GLintptr,
    );
}
extern "C" {
    pub fn glVertexArrayColorOffsetEXT(
        vaobj: GLuint,
        buffer: GLuint,
        size: GLint,
        type_: GLenum,
        stride: GLsizei,
        offset: GLintptr,
    );
}
extern "C" {
    pub fn glVertexArrayEdgeFlagOffsetEXT(
        vaobj: GLuint,
        buffer: GLuint,
        stride: GLsizei,
        offset: GLintptr,
    );
}
extern "C" {
    pub fn glVertexArrayIndexOffsetEXT(
        vaobj: GLuint,
        buffer: GLuint,
        type_: GLenum,
        stride: GLsizei,
        offset: GLintptr,
    );
}
extern "C" {
    pub fn glVertexArrayNormalOffsetEXT(
        vaobj: GLuint,
        buffer: GLuint,
        type_: GLenum,
        stride: GLsizei,
        offset: GLintptr,
    );
}
extern "C" {
    pub fn glVertexArrayTexCoordOffsetEXT(
        vaobj: GLuint,
        buffer: GLuint,
        size: GLint,
        type_: GLenum,
        stride: GLsizei,
        offset: GLintptr,
    );
}
extern "C" {
    pub fn glVertexArrayMultiTexCoordOffsetEXT(
        vaobj: GLuint,
        buffer: GLuint,
        texunit: GLenum,
        size: GLint,
        type_: GLenum,
        stride: GLsizei,
        offset: GLintptr,
    );
}
extern "C" {
    pub fn glVertexArrayFogCoordOffsetEXT(
        vaobj: GLuint,
        buffer: GLuint,
        type_: GLenum,
        stride: GLsizei,
        offset: GLintptr,
    );
}
extern "C" {
    pub fn glVertexArraySecondaryColorOffsetEXT(
        vaobj: GLuint,
        buffer: GLuint,
        size: GLint,
        type_: GLenum,
        stride: GLsizei,
        offset: GLintptr,
    );
}
extern "C" {
    pub fn glVertexArrayVertexAttribOffsetEXT(
        vaobj: GLuint,
        buffer: GLuint,
        index: GLuint,
        size: GLint,
        type_: GLenum,
        normalized: GLboolean,
        stride: GLsizei,
        offset: GLintptr,
    );
}
extern "C" {
    pub fn glVertexArrayVertexAttribIOffsetEXT(
        vaobj: GLuint,
        buffer: GLuint,
        index: GLuint,
        size: GLint,
        type_: GLenum,
        stride: GLsizei,
        offset: GLintptr,
    );
}
extern "C" {
    pub fn glEnableVertexArrayEXT(vaobj: GLuint, array: GLenum);
}
extern "C" {
    pub fn glDisableVertexArrayEXT(vaobj: GLuint, array: GLenum);
}
extern "C" {
    pub fn glEnableVertexArrayAttribEXT(vaobj: GLuint, index: GLuint);
}
extern "C" {
    pub fn glDisableVertexArrayAttribEXT(vaobj: GLuint, index: GLuint);
}
extern "C" {
    pub fn glGetVertexArrayIntegervEXT(vaobj: GLuint, pname: GLenum, param: *mut GLint);
}
extern "C" {
    pub fn glGetVertexArrayPointervEXT(
        vaobj: GLuint,
        pname: GLenum,
        param: *mut *mut ctypes::c_void,
    );
}
extern "C" {
    pub fn glGetVertexArrayIntegeri_vEXT(
        vaobj: GLuint,
        index: GLuint,
        pname: GLenum,
        param: *mut GLint,
    );
}
extern "C" {
    pub fn glGetVertexArrayPointeri_vEXT(
        vaobj: GLuint,
        index: GLuint,
        pname: GLenum,
        param: *mut *mut ctypes::c_void,
    );
}
extern "C" {
    pub fn glMapNamedBufferRangeEXT(
        buffer: GLuint,
        offset: GLintptr,
        length: GLsizeiptr,
        access: GLbitfield,
    ) -> *mut ctypes::c_void;
}
extern "C" {
    pub fn glFlushMappedNamedBufferRangeEXT(buffer: GLuint, offset: GLintptr, length: GLsizeiptr);
}
extern "C" {
    pub fn glNamedBufferStorageEXT(
        buffer: GLuint,
        size: GLsizeiptr,
        data: *const ctypes::c_void,
        flags: GLbitfield,
    );
}
extern "C" {
    pub fn glClearNamedBufferDataEXT(
        buffer: GLuint,
        internalformat: GLenum,
        format: GLenum,
        type_: GLenum,
        data: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glClearNamedBufferSubDataEXT(
        buffer: GLuint,
        internalformat: GLenum,
        offset: GLsizeiptr,
        size: GLsizeiptr,
        format: GLenum,
        type_: GLenum,
        data: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glNamedFramebufferParameteriEXT(framebuffer: GLuint, pname: GLenum, param: GLint);
}
extern "C" {
    pub fn glGetNamedFramebufferParameterivEXT(
        framebuffer: GLuint,
        pname: GLenum,
        params: *mut GLint,
    );
}
extern "C" {
    pub fn glProgramUniform1dEXT(program: GLuint, location: GLint, x: GLdouble);
}
extern "C" {
    pub fn glProgramUniform2dEXT(program: GLuint, location: GLint, x: GLdouble, y: GLdouble);
}
extern "C" {
    pub fn glProgramUniform3dEXT(
        program: GLuint,
        location: GLint,
        x: GLdouble,
        y: GLdouble,
        z: GLdouble,
    );
}
extern "C" {
    pub fn glProgramUniform4dEXT(
        program: GLuint,
        location: GLint,
        x: GLdouble,
        y: GLdouble,
        z: GLdouble,
        w: GLdouble,
    );
}
extern "C" {
    pub fn glProgramUniform1dvEXT(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLdouble,
    );
}
extern "C" {
    pub fn glProgramUniform2dvEXT(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLdouble,
    );
}
extern "C" {
    pub fn glProgramUniform3dvEXT(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLdouble,
    );
}
extern "C" {
    pub fn glProgramUniform4dvEXT(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLdouble,
    );
}
extern "C" {
    pub fn glProgramUniformMatrix2dvEXT(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    );
}
extern "C" {
    pub fn glProgramUniformMatrix3dvEXT(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    );
}
extern "C" {
    pub fn glProgramUniformMatrix4dvEXT(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    );
}
extern "C" {
    pub fn glProgramUniformMatrix2x3dvEXT(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    );
}
extern "C" {
    pub fn glProgramUniformMatrix2x4dvEXT(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    );
}
extern "C" {
    pub fn glProgramUniformMatrix3x2dvEXT(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    );
}
extern "C" {
    pub fn glProgramUniformMatrix3x4dvEXT(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    );
}
extern "C" {
    pub fn glProgramUniformMatrix4x2dvEXT(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    );
}
extern "C" {
    pub fn glProgramUniformMatrix4x3dvEXT(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    );
}
extern "C" {
    pub fn glTextureBufferRangeEXT(
        texture: GLuint,
        target: GLenum,
        internalformat: GLenum,
        buffer: GLuint,
        offset: GLintptr,
        size: GLsizeiptr,
    );
}
extern "C" {
    pub fn glTextureStorage1DEXT(
        texture: GLuint,
        target: GLenum,
        levels: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
    );
}
extern "C" {
    pub fn glTextureStorage2DEXT(
        texture: GLuint,
        target: GLenum,
        levels: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
    );
}
extern "C" {
    pub fn glTextureStorage3DEXT(
        texture: GLuint,
        target: GLenum,
        levels: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
    );
}
extern "C" {
    pub fn glTextureStorage2DMultisampleEXT(
        texture: GLuint,
        target: GLenum,
        samples: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        fixedsamplelocations: GLboolean,
    );
}
extern "C" {
    pub fn glTextureStorage3DMultisampleEXT(
        texture: GLuint,
        target: GLenum,
        samples: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        fixedsamplelocations: GLboolean,
    );
}
extern "C" {
    pub fn glVertexArrayBindVertexBufferEXT(
        vaobj: GLuint,
        bindingindex: GLuint,
        buffer: GLuint,
        offset: GLintptr,
        stride: GLsizei,
    );
}
extern "C" {
    pub fn glVertexArrayVertexAttribFormatEXT(
        vaobj: GLuint,
        attribindex: GLuint,
        size: GLint,
        type_: GLenum,
        normalized: GLboolean,
        relativeoffset: GLuint,
    );
}
extern "C" {
    pub fn glVertexArrayVertexAttribIFormatEXT(
        vaobj: GLuint,
        attribindex: GLuint,
        size: GLint,
        type_: GLenum,
        relativeoffset: GLuint,
    );
}
extern "C" {
    pub fn glVertexArrayVertexAttribLFormatEXT(
        vaobj: GLuint,
        attribindex: GLuint,
        size: GLint,
        type_: GLenum,
        relativeoffset: GLuint,
    );
}
extern "C" {
    pub fn glVertexArrayVertexAttribBindingEXT(
        vaobj: GLuint,
        attribindex: GLuint,
        bindingindex: GLuint,
    );
}
extern "C" {
    pub fn glVertexArrayVertexBindingDivisorEXT(
        vaobj: GLuint,
        bindingindex: GLuint,
        divisor: GLuint,
    );
}
extern "C" {
    pub fn glVertexArrayVertexAttribLOffsetEXT(
        vaobj: GLuint,
        buffer: GLuint,
        index: GLuint,
        size: GLint,
        type_: GLenum,
        stride: GLsizei,
        offset: GLintptr,
    );
}
extern "C" {
    pub fn glTexturePageCommitmentEXT(
        texture: GLuint,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        zoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        resident: GLboolean,
    );
}
extern "C" {
    pub fn glVertexArrayVertexAttribDivisorEXT(vaobj: GLuint, index: GLuint, divisor: GLuint);
}
pub type PFNGLCOLORMASKINDEXEDEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean),
>;
extern "C" {
    pub fn glColorMaskIndexedEXT(
        index: GLuint,
        r: GLboolean,
        g: GLboolean,
        b: GLboolean,
        a: GLboolean,
    );
}
pub type PFNGLDRAWARRAYSINSTANCEDEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(mode: GLenum, start: GLint, count: GLsizei, primcount: GLsizei),
>;
pub type PFNGLDRAWELEMENTSINSTANCEDEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        count: GLsizei,
        type_: GLenum,
        indices: *const ctypes::c_void,
        primcount: GLsizei,
    ),
>;
extern "C" {
    pub fn glDrawArraysInstancedEXT(mode: GLenum, start: GLint, count: GLsizei, primcount: GLsizei);
}
extern "C" {
    pub fn glDrawElementsInstancedEXT(
        mode: GLenum,
        count: GLsizei,
        type_: GLenum,
        indices: *const ctypes::c_void,
        primcount: GLsizei,
    );
}
pub type PFNGLDRAWRANGEELEMENTSEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        start: GLuint,
        end: GLuint,
        count: GLsizei,
        type_: GLenum,
        indices: *const ctypes::c_void,
    ),
>;
extern "C" {
    pub fn glDrawRangeElementsEXT(
        mode: GLenum,
        start: GLuint,
        end: GLuint,
        count: GLsizei,
        type_: GLenum,
        indices: *const ctypes::c_void,
    );
}
pub type PFNGLFOGCOORDFEXTPROC = ::core::option::Option<unsafe extern "C" fn(coord: GLfloat)>;
pub type PFNGLFOGCOORDFVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(coord: *const GLfloat)>;
pub type PFNGLFOGCOORDDEXTPROC = ::core::option::Option<unsafe extern "C" fn(coord: GLdouble)>;
pub type PFNGLFOGCOORDDVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(coord: *const GLdouble)>;
pub type PFNGLFOGCOORDPOINTEREXTPROC = ::core::option::Option<
    unsafe extern "C" fn(type_: GLenum, stride: GLsizei, pointer: *const ctypes::c_void),
>;
extern "C" {
    pub fn glFogCoordfEXT(coord: GLfloat);
}
extern "C" {
    pub fn glFogCoordfvEXT(coord: *const GLfloat);
}
extern "C" {
    pub fn glFogCoorddEXT(coord: GLdouble);
}
extern "C" {
    pub fn glFogCoorddvEXT(coord: *const GLdouble);
}
extern "C" {
    pub fn glFogCoordPointerEXT(type_: GLenum, stride: GLsizei, pointer: *const ctypes::c_void);
}
pub type PFNGLBLITFRAMEBUFFEREXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        srcX0: GLint,
        srcY0: GLint,
        srcX1: GLint,
        srcY1: GLint,
        dstX0: GLint,
        dstY0: GLint,
        dstX1: GLint,
        dstY1: GLint,
        mask: GLbitfield,
        filter: GLenum,
    ),
>;
extern "C" {
    pub fn glBlitFramebufferEXT(
        srcX0: GLint,
        srcY0: GLint,
        srcX1: GLint,
        srcY1: GLint,
        dstX0: GLint,
        dstY0: GLint,
        dstX1: GLint,
        dstY1: GLint,
        mask: GLbitfield,
        filter: GLenum,
    );
}
pub type PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        samples: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
    ),
>;
extern "C" {
    pub fn glRenderbufferStorageMultisampleEXT(
        target: GLenum,
        samples: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
    );
}
pub type PFNGLISRENDERBUFFEREXTPROC =
    ::core::option::Option<unsafe extern "C" fn(renderbuffer: GLuint) -> GLboolean>;
pub type PFNGLBINDRENDERBUFFEREXTPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, renderbuffer: GLuint)>;
pub type PFNGLDELETERENDERBUFFERSEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, renderbuffers: *const GLuint)>;
pub type PFNGLGENRENDERBUFFERSEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, renderbuffers: *mut GLuint)>;
pub type PFNGLRENDERBUFFERSTORAGEEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei),
>;
pub type PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLint)>;
pub type PFNGLISFRAMEBUFFEREXTPROC =
    ::core::option::Option<unsafe extern "C" fn(framebuffer: GLuint) -> GLboolean>;
pub type PFNGLBINDFRAMEBUFFEREXTPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, framebuffer: GLuint)>;
pub type PFNGLDELETEFRAMEBUFFERSEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, framebuffers: *const GLuint)>;
pub type PFNGLGENFRAMEBUFFERSEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, framebuffers: *mut GLuint)>;
pub type PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum) -> GLenum>;
pub type PFNGLFRAMEBUFFERTEXTURE1DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        attachment: GLenum,
        textarget: GLenum,
        texture: GLuint,
        level: GLint,
    ),
>;
pub type PFNGLFRAMEBUFFERTEXTURE2DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        attachment: GLenum,
        textarget: GLenum,
        texture: GLuint,
        level: GLint,
    ),
>;
pub type PFNGLFRAMEBUFFERTEXTURE3DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        attachment: GLenum,
        textarget: GLenum,
        texture: GLuint,
        level: GLint,
        zoffset: GLint,
    ),
>;
pub type PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        attachment: GLenum,
        renderbuffertarget: GLenum,
        renderbuffer: GLuint,
    ),
>;
pub type PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, attachment: GLenum, pname: GLenum, params: *mut GLint),
>;
pub type PFNGLGENERATEMIPMAPEXTPROC = ::core::option::Option<unsafe extern "C" fn(target: GLenum)>;
extern "C" {
    pub fn glIsRenderbufferEXT(renderbuffer: GLuint) -> GLboolean;
}
extern "C" {
    pub fn glBindRenderbufferEXT(target: GLenum, renderbuffer: GLuint);
}
extern "C" {
    pub fn glDeleteRenderbuffersEXT(n: GLsizei, renderbuffers: *const GLuint);
}
extern "C" {
    pub fn glGenRenderbuffersEXT(n: GLsizei, renderbuffers: *mut GLuint);
}
extern "C" {
    pub fn glRenderbufferStorageEXT(
        target: GLenum,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
    );
}
extern "C" {
    pub fn glGetRenderbufferParameterivEXT(target: GLenum, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glIsFramebufferEXT(framebuffer: GLuint) -> GLboolean;
}
extern "C" {
    pub fn glBindFramebufferEXT(target: GLenum, framebuffer: GLuint);
}
extern "C" {
    pub fn glDeleteFramebuffersEXT(n: GLsizei, framebuffers: *const GLuint);
}
extern "C" {
    pub fn glGenFramebuffersEXT(n: GLsizei, framebuffers: *mut GLuint);
}
extern "C" {
    pub fn glCheckFramebufferStatusEXT(target: GLenum) -> GLenum;
}
extern "C" {
    pub fn glFramebufferTexture1DEXT(
        target: GLenum,
        attachment: GLenum,
        textarget: GLenum,
        texture: GLuint,
        level: GLint,
    );
}
extern "C" {
    pub fn glFramebufferTexture2DEXT(
        target: GLenum,
        attachment: GLenum,
        textarget: GLenum,
        texture: GLuint,
        level: GLint,
    );
}
extern "C" {
    pub fn glFramebufferTexture3DEXT(
        target: GLenum,
        attachment: GLenum,
        textarget: GLenum,
        texture: GLuint,
        level: GLint,
        zoffset: GLint,
    );
}
extern "C" {
    pub fn glFramebufferRenderbufferEXT(
        target: GLenum,
        attachment: GLenum,
        renderbuffertarget: GLenum,
        renderbuffer: GLuint,
    );
}
extern "C" {
    pub fn glGetFramebufferAttachmentParameterivEXT(
        target: GLenum,
        attachment: GLenum,
        pname: GLenum,
        params: *mut GLint,
    );
}
extern "C" {
    pub fn glGenerateMipmapEXT(target: GLenum);
}
pub type PFNGLPROGRAMPARAMETERIEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(program: GLuint, pname: GLenum, value: GLint)>;
extern "C" {
    pub fn glProgramParameteriEXT(program: GLuint, pname: GLenum, value: GLint);
}
pub type PFNGLPROGRAMENVPARAMETERS4FVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, index: GLuint, count: GLsizei, params: *const GLfloat),
>;
pub type PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, index: GLuint, count: GLsizei, params: *const GLfloat),
>;
extern "C" {
    pub fn glProgramEnvParameters4fvEXT(
        target: GLenum,
        index: GLuint,
        count: GLsizei,
        params: *const GLfloat,
    );
}
extern "C" {
    pub fn glProgramLocalParameters4fvEXT(
        target: GLenum,
        index: GLuint,
        count: GLsizei,
        params: *const GLfloat,
    );
}
pub type PFNGLGETUNIFORMUIVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, params: *mut GLuint),
>;
pub type PFNGLBINDFRAGDATALOCATIONEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, color: GLuint, name: *const GLchar),
>;
pub type PFNGLGETFRAGDATALOCATIONEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(program: GLuint, name: *const GLchar) -> GLint>;
pub type PFNGLUNIFORM1UIEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(location: GLint, v0: GLuint)>;
pub type PFNGLUNIFORM2UIEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(location: GLint, v0: GLuint, v1: GLuint)>;
pub type PFNGLUNIFORM3UIEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint),
>;
pub type PFNGLUNIFORM4UIEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint),
>;
pub type PFNGLUNIFORM1UIVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLuint),
>;
pub type PFNGLUNIFORM2UIVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLuint),
>;
pub type PFNGLUNIFORM3UIVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLuint),
>;
pub type PFNGLUNIFORM4UIVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLuint),
>;
extern "C" {
    pub fn glGetUniformuivEXT(program: GLuint, location: GLint, params: *mut GLuint);
}
extern "C" {
    pub fn glBindFragDataLocationEXT(program: GLuint, color: GLuint, name: *const GLchar);
}
extern "C" {
    pub fn glGetFragDataLocationEXT(program: GLuint, name: *const GLchar) -> GLint;
}
extern "C" {
    pub fn glUniform1uiEXT(location: GLint, v0: GLuint);
}
extern "C" {
    pub fn glUniform2uiEXT(location: GLint, v0: GLuint, v1: GLuint);
}
extern "C" {
    pub fn glUniform3uiEXT(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint);
}
extern "C" {
    pub fn glUniform4uiEXT(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint);
}
extern "C" {
    pub fn glUniform1uivEXT(location: GLint, count: GLsizei, value: *const GLuint);
}
extern "C" {
    pub fn glUniform2uivEXT(location: GLint, count: GLsizei, value: *const GLuint);
}
extern "C" {
    pub fn glUniform3uivEXT(location: GLint, count: GLsizei, value: *const GLuint);
}
extern "C" {
    pub fn glUniform4uivEXT(location: GLint, count: GLsizei, value: *const GLuint);
}
pub type PFNGLGETHISTOGRAMEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        reset: GLboolean,
        format: GLenum,
        type_: GLenum,
        values: *mut ctypes::c_void,
    ),
>;
pub type PFNGLGETHISTOGRAMPARAMETERFVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLfloat),
>;
pub type PFNGLGETHISTOGRAMPARAMETERIVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLint)>;
pub type PFNGLGETMINMAXEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        reset: GLboolean,
        format: GLenum,
        type_: GLenum,
        values: *mut ctypes::c_void,
    ),
>;
pub type PFNGLGETMINMAXPARAMETERFVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLfloat),
>;
pub type PFNGLGETMINMAXPARAMETERIVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLint)>;
pub type PFNGLHISTOGRAMEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, width: GLsizei, internalformat: GLenum, sink: GLboolean),
>;
pub type PFNGLMINMAXEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, internalformat: GLenum, sink: GLboolean),
>;
pub type PFNGLRESETHISTOGRAMEXTPROC = ::core::option::Option<unsafe extern "C" fn(target: GLenum)>;
pub type PFNGLRESETMINMAXEXTPROC = ::core::option::Option<unsafe extern "C" fn(target: GLenum)>;
extern "C" {
    pub fn glGetHistogramEXT(
        target: GLenum,
        reset: GLboolean,
        format: GLenum,
        type_: GLenum,
        values: *mut ctypes::c_void,
    );
}
extern "C" {
    pub fn glGetHistogramParameterfvEXT(target: GLenum, pname: GLenum, params: *mut GLfloat);
}
extern "C" {
    pub fn glGetHistogramParameterivEXT(target: GLenum, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetMinmaxEXT(
        target: GLenum,
        reset: GLboolean,
        format: GLenum,
        type_: GLenum,
        values: *mut ctypes::c_void,
    );
}
extern "C" {
    pub fn glGetMinmaxParameterfvEXT(target: GLenum, pname: GLenum, params: *mut GLfloat);
}
extern "C" {
    pub fn glGetMinmaxParameterivEXT(target: GLenum, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glHistogramEXT(target: GLenum, width: GLsizei, internalformat: GLenum, sink: GLboolean);
}
extern "C" {
    pub fn glMinmaxEXT(target: GLenum, internalformat: GLenum, sink: GLboolean);
}
extern "C" {
    pub fn glResetHistogramEXT(target: GLenum);
}
extern "C" {
    pub fn glResetMinmaxEXT(target: GLenum);
}
pub type PFNGLINDEXFUNCEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(func: GLenum, ref_: GLclampf)>;
extern "C" {
    pub fn glIndexFuncEXT(func: GLenum, ref_: GLclampf);
}
pub type PFNGLINDEXMATERIALEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(face: GLenum, mode: GLenum)>;
extern "C" {
    pub fn glIndexMaterialEXT(face: GLenum, mode: GLenum);
}
pub type PFNGLAPPLYTEXTUREEXTPROC = ::core::option::Option<unsafe extern "C" fn(mode: GLenum)>;
pub type PFNGLTEXTURELIGHTEXTPROC = ::core::option::Option<unsafe extern "C" fn(pname: GLenum)>;
pub type PFNGLTEXTUREMATERIALEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(face: GLenum, mode: GLenum)>;
extern "C" {
    pub fn glApplyTextureEXT(mode: GLenum);
}
extern "C" {
    pub fn glTextureLightEXT(pname: GLenum);
}
extern "C" {
    pub fn glTextureMaterialEXT(face: GLenum, mode: GLenum);
}
pub type PFNGLMULTIDRAWARRAYSEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        first: *const GLint,
        count: *const GLsizei,
        primcount: GLsizei,
    ),
>;
pub type PFNGLMULTIDRAWELEMENTSEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        count: *const GLsizei,
        type_: GLenum,
        indices: *const *const ctypes::c_void,
        primcount: GLsizei,
    ),
>;
extern "C" {
    pub fn glMultiDrawArraysEXT(
        mode: GLenum,
        first: *const GLint,
        count: *const GLsizei,
        primcount: GLsizei,
    );
}
extern "C" {
    pub fn glMultiDrawElementsEXT(
        mode: GLenum,
        count: *const GLsizei,
        type_: GLenum,
        indices: *const *const ctypes::c_void,
        primcount: GLsizei,
    );
}
pub type PFNGLSAMPLEMASKEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(value: GLclampf, invert: GLboolean)>;
pub type PFNGLSAMPLEPATTERNEXTPROC = ::core::option::Option<unsafe extern "C" fn(pattern: GLenum)>;
extern "C" {
    pub fn glSampleMaskEXT(value: GLclampf, invert: GLboolean);
}
extern "C" {
    pub fn glSamplePatternEXT(pattern: GLenum);
}
pub type PFNGLCOLORTABLEEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        internalFormat: GLenum,
        width: GLsizei,
        format: GLenum,
        type_: GLenum,
        table: *const ctypes::c_void,
    ),
>;
pub type PFNGLGETCOLORTABLEEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, format: GLenum, type_: GLenum, data: *mut ctypes::c_void),
>;
pub type PFNGLGETCOLORTABLEPARAMETERIVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLint)>;
pub type PFNGLGETCOLORTABLEPARAMETERFVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLfloat),
>;
extern "C" {
    pub fn glColorTableEXT(
        target: GLenum,
        internalFormat: GLenum,
        width: GLsizei,
        format: GLenum,
        type_: GLenum,
        table: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glGetColorTableEXT(
        target: GLenum,
        format: GLenum,
        type_: GLenum,
        data: *mut ctypes::c_void,
    );
}
extern "C" {
    pub fn glGetColorTableParameterivEXT(target: GLenum, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetColorTableParameterfvEXT(target: GLenum, pname: GLenum, params: *mut GLfloat);
}
pub type PFNGLPIXELTRANSFORMPARAMETERIEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, param: GLint)>;
pub type PFNGLPIXELTRANSFORMPARAMETERFEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, param: GLfloat)>;
pub type PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *const GLint),
>;
pub type PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *const GLfloat),
>;
pub type PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLint)>;
pub type PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLfloat),
>;
extern "C" {
    pub fn glPixelTransformParameteriEXT(target: GLenum, pname: GLenum, param: GLint);
}
extern "C" {
    pub fn glPixelTransformParameterfEXT(target: GLenum, pname: GLenum, param: GLfloat);
}
extern "C" {
    pub fn glPixelTransformParameterivEXT(target: GLenum, pname: GLenum, params: *const GLint);
}
extern "C" {
    pub fn glPixelTransformParameterfvEXT(target: GLenum, pname: GLenum, params: *const GLfloat);
}
extern "C" {
    pub fn glGetPixelTransformParameterivEXT(target: GLenum, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetPixelTransformParameterfvEXT(target: GLenum, pname: GLenum, params: *mut GLfloat);
}
pub type PFNGLPOINTPARAMETERFEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, param: GLfloat)>;
pub type PFNGLPOINTPARAMETERFVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, params: *const GLfloat)>;
extern "C" {
    pub fn glPointParameterfEXT(pname: GLenum, param: GLfloat);
}
extern "C" {
    pub fn glPointParameterfvEXT(pname: GLenum, params: *const GLfloat);
}
pub type PFNGLPOLYGONOFFSETEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(factor: GLfloat, bias: GLfloat)>;
extern "C" {
    pub fn glPolygonOffsetEXT(factor: GLfloat, bias: GLfloat);
}
pub type PFNGLPROVOKINGVERTEXEXTPROC = ::core::option::Option<unsafe extern "C" fn(mode: GLenum)>;
extern "C" {
    pub fn glProvokingVertexEXT(mode: GLenum);
}
pub type PFNGLSECONDARYCOLOR3BEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(red: GLbyte, green: GLbyte, blue: GLbyte)>;
pub type PFNGLSECONDARYCOLOR3BVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(v: *const GLbyte)>;
pub type PFNGLSECONDARYCOLOR3DEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(red: GLdouble, green: GLdouble, blue: GLdouble)>;
pub type PFNGLSECONDARYCOLOR3DVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(v: *const GLdouble)>;
pub type PFNGLSECONDARYCOLOR3FEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(red: GLfloat, green: GLfloat, blue: GLfloat)>;
pub type PFNGLSECONDARYCOLOR3FVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(v: *const GLfloat)>;
pub type PFNGLSECONDARYCOLOR3IEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(red: GLint, green: GLint, blue: GLint)>;
pub type PFNGLSECONDARYCOLOR3IVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(v: *const GLint)>;
pub type PFNGLSECONDARYCOLOR3SEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(red: GLshort, green: GLshort, blue: GLshort)>;
pub type PFNGLSECONDARYCOLOR3SVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(v: *const GLshort)>;
pub type PFNGLSECONDARYCOLOR3UBEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(red: GLubyte, green: GLubyte, blue: GLubyte)>;
pub type PFNGLSECONDARYCOLOR3UBVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(v: *const GLubyte)>;
pub type PFNGLSECONDARYCOLOR3UIEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(red: GLuint, green: GLuint, blue: GLuint)>;
pub type PFNGLSECONDARYCOLOR3UIVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(v: *const GLuint)>;
pub type PFNGLSECONDARYCOLOR3USEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(red: GLushort, green: GLushort, blue: GLushort)>;
pub type PFNGLSECONDARYCOLOR3USVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(v: *const GLushort)>;
pub type PFNGLSECONDARYCOLORPOINTEREXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        size: GLint,
        type_: GLenum,
        stride: GLsizei,
        pointer: *const ctypes::c_void,
    ),
>;
extern "C" {
    pub fn glSecondaryColor3bEXT(red: GLbyte, green: GLbyte, blue: GLbyte);
}
extern "C" {
    pub fn glSecondaryColor3bvEXT(v: *const GLbyte);
}
extern "C" {
    pub fn glSecondaryColor3dEXT(red: GLdouble, green: GLdouble, blue: GLdouble);
}
extern "C" {
    pub fn glSecondaryColor3dvEXT(v: *const GLdouble);
}
extern "C" {
    pub fn glSecondaryColor3fEXT(red: GLfloat, green: GLfloat, blue: GLfloat);
}
extern "C" {
    pub fn glSecondaryColor3fvEXT(v: *const GLfloat);
}
extern "C" {
    pub fn glSecondaryColor3iEXT(red: GLint, green: GLint, blue: GLint);
}
extern "C" {
    pub fn glSecondaryColor3ivEXT(v: *const GLint);
}
extern "C" {
    pub fn glSecondaryColor3sEXT(red: GLshort, green: GLshort, blue: GLshort);
}
extern "C" {
    pub fn glSecondaryColor3svEXT(v: *const GLshort);
}
extern "C" {
    pub fn glSecondaryColor3ubEXT(red: GLubyte, green: GLubyte, blue: GLubyte);
}
extern "C" {
    pub fn glSecondaryColor3ubvEXT(v: *const GLubyte);
}
extern "C" {
    pub fn glSecondaryColor3uiEXT(red: GLuint, green: GLuint, blue: GLuint);
}
extern "C" {
    pub fn glSecondaryColor3uivEXT(v: *const GLuint);
}
extern "C" {
    pub fn glSecondaryColor3usEXT(red: GLushort, green: GLushort, blue: GLushort);
}
extern "C" {
    pub fn glSecondaryColor3usvEXT(v: *const GLushort);
}
extern "C" {
    pub fn glSecondaryColorPointerEXT(
        size: GLint,
        type_: GLenum,
        stride: GLsizei,
        pointer: *const ctypes::c_void,
    );
}
pub type PFNGLUSESHADERPROGRAMEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(type_: GLenum, program: GLuint)>;
pub type PFNGLACTIVEPROGRAMEXTPROC = ::core::option::Option<unsafe extern "C" fn(program: GLuint)>;
pub type PFNGLCREATESHADERPROGRAMEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(type_: GLenum, string: *const GLchar) -> GLuint>;
extern "C" {
    pub fn glUseShaderProgramEXT(type_: GLenum, program: GLuint);
}
extern "C" {
    pub fn glActiveProgramEXT(program: GLuint);
}
extern "C" {
    pub fn glCreateShaderProgramEXT(type_: GLenum, string: *const GLchar) -> GLuint;
}
pub type PFNGLBINDIMAGETEXTUREEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        index: GLuint,
        texture: GLuint,
        level: GLint,
        layered: GLboolean,
        layer: GLint,
        access: GLenum,
        format: GLint,
    ),
>;
pub type PFNGLMEMORYBARRIEREXTPROC =
    ::core::option::Option<unsafe extern "C" fn(barriers: GLbitfield)>;
extern "C" {
    pub fn glBindImageTextureEXT(
        index: GLuint,
        texture: GLuint,
        level: GLint,
        layered: GLboolean,
        layer: GLint,
        access: GLenum,
        format: GLint,
    );
}
extern "C" {
    pub fn glMemoryBarrierEXT(barriers: GLbitfield);
}
pub type PFNGLSTENCILCLEARTAGEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(stencilTagBits: GLsizei, stencilClearTag: GLuint)>;
extern "C" {
    pub fn glStencilClearTagEXT(stencilTagBits: GLsizei, stencilClearTag: GLuint);
}
pub type PFNGLACTIVESTENCILFACEEXTPROC = ::core::option::Option<unsafe extern "C" fn(face: GLenum)>;
extern "C" {
    pub fn glActiveStencilFaceEXT(face: GLenum);
}
pub type PFNGLTEXSUBIMAGE1DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        width: GLsizei,
        format: GLenum,
        type_: GLenum,
        pixels: *const ctypes::c_void,
    ),
>;
pub type PFNGLTEXSUBIMAGE2DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        format: GLenum,
        type_: GLenum,
        pixels: *const ctypes::c_void,
    ),
>;
extern "C" {
    pub fn glTexSubImage1DEXT(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        width: GLsizei,
        format: GLenum,
        type_: GLenum,
        pixels: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glTexSubImage2DEXT(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        format: GLenum,
        type_: GLenum,
        pixels: *const ctypes::c_void,
    );
}
pub type PFNGLTEXIMAGE3DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        border: GLint,
        format: GLenum,
        type_: GLenum,
        pixels: *const ctypes::c_void,
    ),
>;
pub type PFNGLTEXSUBIMAGE3DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        zoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        format: GLenum,
        type_: GLenum,
        pixels: *const ctypes::c_void,
    ),
>;
extern "C" {
    pub fn glTexImage3DEXT(
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        border: GLint,
        format: GLenum,
        type_: GLenum,
        pixels: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glTexSubImage3DEXT(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        zoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        format: GLenum,
        type_: GLenum,
        pixels: *const ctypes::c_void,
    );
}
pub type PFNGLTEXBUFFEREXTPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, internalformat: GLenum, buffer: GLuint),
>;
extern "C" {
    pub fn glTexBufferEXT(target: GLenum, internalformat: GLenum, buffer: GLuint);
}
pub type PFNGLTEXPARAMETERIIVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *const GLint),
>;
pub type PFNGLTEXPARAMETERIUIVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *const GLuint),
>;
pub type PFNGLGETTEXPARAMETERIIVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLint)>;
pub type PFNGLGETTEXPARAMETERIUIVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLuint),
>;
pub type PFNGLCLEARCOLORIIEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(red: GLint, green: GLint, blue: GLint, alpha: GLint),
>;
pub type PFNGLCLEARCOLORIUIEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(red: GLuint, green: GLuint, blue: GLuint, alpha: GLuint),
>;
extern "C" {
    pub fn glTexParameterIivEXT(target: GLenum, pname: GLenum, params: *const GLint);
}
extern "C" {
    pub fn glTexParameterIuivEXT(target: GLenum, pname: GLenum, params: *const GLuint);
}
extern "C" {
    pub fn glGetTexParameterIivEXT(target: GLenum, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetTexParameterIuivEXT(target: GLenum, pname: GLenum, params: *mut GLuint);
}
extern "C" {
    pub fn glClearColorIiEXT(red: GLint, green: GLint, blue: GLint, alpha: GLint);
}
extern "C" {
    pub fn glClearColorIuiEXT(red: GLuint, green: GLuint, blue: GLuint, alpha: GLuint);
}
pub type PFNGLARETEXTURESRESIDENTEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        n: GLsizei,
        textures: *const GLuint,
        residences: *mut GLboolean,
    ) -> GLboolean,
>;
pub type PFNGLBINDTEXTUREEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, texture: GLuint)>;
pub type PFNGLDELETETEXTURESEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, textures: *const GLuint)>;
pub type PFNGLGENTEXTURESEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, textures: *mut GLuint)>;
pub type PFNGLISTEXTUREEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(texture: GLuint) -> GLboolean>;
pub type PFNGLPRIORITIZETEXTURESEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(n: GLsizei, textures: *const GLuint, priorities: *const GLclampf),
>;
extern "C" {
    pub fn glAreTexturesResidentEXT(
        n: GLsizei,
        textures: *const GLuint,
        residences: *mut GLboolean,
    ) -> GLboolean;
}
extern "C" {
    pub fn glBindTextureEXT(target: GLenum, texture: GLuint);
}
extern "C" {
    pub fn glDeleteTexturesEXT(n: GLsizei, textures: *const GLuint);
}
extern "C" {
    pub fn glGenTexturesEXT(n: GLsizei, textures: *mut GLuint);
}
extern "C" {
    pub fn glIsTextureEXT(texture: GLuint) -> GLboolean;
}
extern "C" {
    pub fn glPrioritizeTexturesEXT(
        n: GLsizei,
        textures: *const GLuint,
        priorities: *const GLclampf,
    );
}
pub type PFNGLTEXTURENORMALEXTPROC = ::core::option::Option<unsafe extern "C" fn(mode: GLenum)>;
extern "C" {
    pub fn glTextureNormalEXT(mode: GLenum);
}
pub type PFNGLGETQUERYOBJECTI64VEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(id: GLuint, pname: GLenum, params: *mut GLint64)>;
pub type PFNGLGETQUERYOBJECTUI64VEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(id: GLuint, pname: GLenum, params: *mut GLuint64)>;
extern "C" {
    pub fn glGetQueryObjecti64vEXT(id: GLuint, pname: GLenum, params: *mut GLint64);
}
extern "C" {
    pub fn glGetQueryObjectui64vEXT(id: GLuint, pname: GLenum, params: *mut GLuint64);
}
pub type PFNGLBEGINTRANSFORMFEEDBACKEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(primitiveMode: GLenum)>;
pub type PFNGLENDTRANSFORMFEEDBACKEXTPROC = ::core::option::Option<unsafe extern "C" fn()>;
pub type PFNGLBINDBUFFERRANGEEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        index: GLuint,
        buffer: GLuint,
        offset: GLintptr,
        size: GLsizeiptr,
    ),
>;
pub type PFNGLBINDBUFFEROFFSETEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr),
>;
pub type PFNGLBINDBUFFERBASEEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, index: GLuint, buffer: GLuint)>;
pub type PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        count: GLsizei,
        varyings: *const *const GLchar,
        bufferMode: GLenum,
    ),
>;
pub type PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        index: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        size: *mut GLsizei,
        type_: *mut GLenum,
        name: *mut GLchar,
    ),
>;
extern "C" {
    pub fn glBeginTransformFeedbackEXT(primitiveMode: GLenum);
}
extern "C" {
    pub fn glEndTransformFeedbackEXT();
}
extern "C" {
    pub fn glBindBufferRangeEXT(
        target: GLenum,
        index: GLuint,
        buffer: GLuint,
        offset: GLintptr,
        size: GLsizeiptr,
    );
}
extern "C" {
    pub fn glBindBufferOffsetEXT(target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr);
}
extern "C" {
    pub fn glBindBufferBaseEXT(target: GLenum, index: GLuint, buffer: GLuint);
}
extern "C" {
    pub fn glTransformFeedbackVaryingsEXT(
        program: GLuint,
        count: GLsizei,
        varyings: *const *const GLchar,
        bufferMode: GLenum,
    );
}
extern "C" {
    pub fn glGetTransformFeedbackVaryingEXT(
        program: GLuint,
        index: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        size: *mut GLsizei,
        type_: *mut GLenum,
        name: *mut GLchar,
    );
}
pub type PFNGLARRAYELEMENTEXTPROC = ::core::option::Option<unsafe extern "C" fn(i: GLint)>;
pub type PFNGLCOLORPOINTEREXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        size: GLint,
        type_: GLenum,
        stride: GLsizei,
        count: GLsizei,
        pointer: *const ctypes::c_void,
    ),
>;
pub type PFNGLDRAWARRAYSEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(mode: GLenum, first: GLint, count: GLsizei)>;
pub type PFNGLEDGEFLAGPOINTEREXTPROC = ::core::option::Option<
    unsafe extern "C" fn(stride: GLsizei, count: GLsizei, pointer: *const GLboolean),
>;
pub type PFNGLGETPOINTERVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, params: *mut *mut ctypes::c_void)>;
pub type PFNGLINDEXPOINTEREXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        type_: GLenum,
        stride: GLsizei,
        count: GLsizei,
        pointer: *const ctypes::c_void,
    ),
>;
pub type PFNGLNORMALPOINTEREXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        type_: GLenum,
        stride: GLsizei,
        count: GLsizei,
        pointer: *const ctypes::c_void,
    ),
>;
pub type PFNGLTEXCOORDPOINTEREXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        size: GLint,
        type_: GLenum,
        stride: GLsizei,
        count: GLsizei,
        pointer: *const ctypes::c_void,
    ),
>;
pub type PFNGLVERTEXPOINTEREXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        size: GLint,
        type_: GLenum,
        stride: GLsizei,
        count: GLsizei,
        pointer: *const ctypes::c_void,
    ),
>;
extern "C" {
    pub fn glArrayElementEXT(i: GLint);
}
extern "C" {
    pub fn glColorPointerEXT(
        size: GLint,
        type_: GLenum,
        stride: GLsizei,
        count: GLsizei,
        pointer: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glDrawArraysEXT(mode: GLenum, first: GLint, count: GLsizei);
}
extern "C" {
    pub fn glEdgeFlagPointerEXT(stride: GLsizei, count: GLsizei, pointer: *const GLboolean);
}
extern "C" {
    pub fn glGetPointervEXT(pname: GLenum, params: *mut *mut ctypes::c_void);
}
extern "C" {
    pub fn glIndexPointerEXT(
        type_: GLenum,
        stride: GLsizei,
        count: GLsizei,
        pointer: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glNormalPointerEXT(
        type_: GLenum,
        stride: GLsizei,
        count: GLsizei,
        pointer: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glTexCoordPointerEXT(
        size: GLint,
        type_: GLenum,
        stride: GLsizei,
        count: GLsizei,
        pointer: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glVertexPointerEXT(
        size: GLint,
        type_: GLenum,
        stride: GLsizei,
        count: GLsizei,
        pointer: *const ctypes::c_void,
    );
}
pub type PFNGLVERTEXATTRIBL1DEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, x: GLdouble)>;
pub type PFNGLVERTEXATTRIBL2DEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble)>;
pub type PFNGLVERTEXATTRIBL3DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble),
>;
pub type PFNGLVERTEXATTRIBL4DEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble),
>;
pub type PFNGLVERTEXATTRIBL1DVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLdouble)>;
pub type PFNGLVERTEXATTRIBL2DVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLdouble)>;
pub type PFNGLVERTEXATTRIBL3DVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLdouble)>;
pub type PFNGLVERTEXATTRIBL4DVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLdouble)>;
pub type PFNGLVERTEXATTRIBLPOINTEREXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        index: GLuint,
        size: GLint,
        type_: GLenum,
        stride: GLsizei,
        pointer: *const ctypes::c_void,
    ),
>;
pub type PFNGLGETVERTEXATTRIBLDVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, pname: GLenum, params: *mut GLdouble),
>;
extern "C" {
    pub fn glVertexAttribL1dEXT(index: GLuint, x: GLdouble);
}
extern "C" {
    pub fn glVertexAttribL2dEXT(index: GLuint, x: GLdouble, y: GLdouble);
}
extern "C" {
    pub fn glVertexAttribL3dEXT(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble);
}
extern "C" {
    pub fn glVertexAttribL4dEXT(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble);
}
extern "C" {
    pub fn glVertexAttribL1dvEXT(index: GLuint, v: *const GLdouble);
}
extern "C" {
    pub fn glVertexAttribL2dvEXT(index: GLuint, v: *const GLdouble);
}
extern "C" {
    pub fn glVertexAttribL3dvEXT(index: GLuint, v: *const GLdouble);
}
extern "C" {
    pub fn glVertexAttribL4dvEXT(index: GLuint, v: *const GLdouble);
}
extern "C" {
    pub fn glVertexAttribLPointerEXT(
        index: GLuint,
        size: GLint,
        type_: GLenum,
        stride: GLsizei,
        pointer: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glGetVertexAttribLdvEXT(index: GLuint, pname: GLenum, params: *mut GLdouble);
}
pub type PFNGLBEGINVERTEXSHADEREXTPROC = ::core::option::Option<unsafe extern "C" fn()>;
pub type PFNGLENDVERTEXSHADEREXTPROC = ::core::option::Option<unsafe extern "C" fn()>;
pub type PFNGLBINDVERTEXSHADEREXTPROC = ::core::option::Option<unsafe extern "C" fn(id: GLuint)>;
pub type PFNGLGENVERTEXSHADERSEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(range: GLuint) -> GLuint>;
pub type PFNGLDELETEVERTEXSHADEREXTPROC = ::core::option::Option<unsafe extern "C" fn(id: GLuint)>;
pub type PFNGLSHADEROP1EXTPROC =
    ::core::option::Option<unsafe extern "C" fn(op: GLenum, res: GLuint, arg1: GLuint)>;
pub type PFNGLSHADEROP2EXTPROC = ::core::option::Option<
    unsafe extern "C" fn(op: GLenum, res: GLuint, arg1: GLuint, arg2: GLuint),
>;
pub type PFNGLSHADEROP3EXTPROC = ::core::option::Option<
    unsafe extern "C" fn(op: GLenum, res: GLuint, arg1: GLuint, arg2: GLuint, arg3: GLuint),
>;
pub type PFNGLSWIZZLEEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        res: GLuint,
        in_: GLuint,
        outX: GLenum,
        outY: GLenum,
        outZ: GLenum,
        outW: GLenum,
    ),
>;
pub type PFNGLWRITEMASKEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        res: GLuint,
        in_: GLuint,
        outX: GLenum,
        outY: GLenum,
        outZ: GLenum,
        outW: GLenum,
    ),
>;
pub type PFNGLINSERTCOMPONENTEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(res: GLuint, src: GLuint, num: GLuint)>;
pub type PFNGLEXTRACTCOMPONENTEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(res: GLuint, src: GLuint, num: GLuint)>;
pub type PFNGLGENSYMBOLSEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        datatype: GLenum,
        storagetype: GLenum,
        range: GLenum,
        components: GLuint,
    ) -> GLuint,
>;
pub type PFNGLSETINVARIANTEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(id: GLuint, type_: GLenum, addr: *const ctypes::c_void),
>;
pub type PFNGLSETLOCALCONSTANTEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(id: GLuint, type_: GLenum, addr: *const ctypes::c_void),
>;
pub type PFNGLVARIANTBVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(id: GLuint, addr: *const GLbyte)>;
pub type PFNGLVARIANTSVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(id: GLuint, addr: *const GLshort)>;
pub type PFNGLVARIANTIVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(id: GLuint, addr: *const GLint)>;
pub type PFNGLVARIANTFVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(id: GLuint, addr: *const GLfloat)>;
pub type PFNGLVARIANTDVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(id: GLuint, addr: *const GLdouble)>;
pub type PFNGLVARIANTUBVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(id: GLuint, addr: *const GLubyte)>;
pub type PFNGLVARIANTUSVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(id: GLuint, addr: *const GLushort)>;
pub type PFNGLVARIANTUIVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(id: GLuint, addr: *const GLuint)>;
pub type PFNGLVARIANTPOINTEREXTPROC = ::core::option::Option<
    unsafe extern "C" fn(id: GLuint, type_: GLenum, stride: GLuint, addr: *const ctypes::c_void),
>;
pub type PFNGLENABLEVARIANTCLIENTSTATEEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(id: GLuint)>;
pub type PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(id: GLuint)>;
pub type PFNGLBINDLIGHTPARAMETEREXTPROC =
    ::core::option::Option<unsafe extern "C" fn(light: GLenum, value: GLenum) -> GLuint>;
pub type PFNGLBINDMATERIALPARAMETEREXTPROC =
    ::core::option::Option<unsafe extern "C" fn(face: GLenum, value: GLenum) -> GLuint>;
pub type PFNGLBINDTEXGENPARAMETEREXTPROC = ::core::option::Option<
    unsafe extern "C" fn(unit: GLenum, coord: GLenum, value: GLenum) -> GLuint,
>;
pub type PFNGLBINDTEXTUREUNITPARAMETEREXTPROC =
    ::core::option::Option<unsafe extern "C" fn(unit: GLenum, value: GLenum) -> GLuint>;
pub type PFNGLBINDPARAMETEREXTPROC =
    ::core::option::Option<unsafe extern "C" fn(value: GLenum) -> GLuint>;
pub type PFNGLISVARIANTENABLEDEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(id: GLuint, cap: GLenum) -> GLboolean>;
pub type PFNGLGETVARIANTBOOLEANVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(id: GLuint, value: GLenum, data: *mut GLboolean)>;
pub type PFNGLGETVARIANTINTEGERVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(id: GLuint, value: GLenum, data: *mut GLint)>;
pub type PFNGLGETVARIANTFLOATVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(id: GLuint, value: GLenum, data: *mut GLfloat)>;
pub type PFNGLGETVARIANTPOINTERVEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(id: GLuint, value: GLenum, data: *mut *mut ctypes::c_void),
>;
pub type PFNGLGETINVARIANTBOOLEANVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(id: GLuint, value: GLenum, data: *mut GLboolean)>;
pub type PFNGLGETINVARIANTINTEGERVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(id: GLuint, value: GLenum, data: *mut GLint)>;
pub type PFNGLGETINVARIANTFLOATVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(id: GLuint, value: GLenum, data: *mut GLfloat)>;
pub type PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(id: GLuint, value: GLenum, data: *mut GLboolean)>;
pub type PFNGLGETLOCALCONSTANTINTEGERVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(id: GLuint, value: GLenum, data: *mut GLint)>;
pub type PFNGLGETLOCALCONSTANTFLOATVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(id: GLuint, value: GLenum, data: *mut GLfloat)>;
extern "C" {
    pub fn glBeginVertexShaderEXT();
}
extern "C" {
    pub fn glEndVertexShaderEXT();
}
extern "C" {
    pub fn glBindVertexShaderEXT(id: GLuint);
}
extern "C" {
    pub fn glGenVertexShadersEXT(range: GLuint) -> GLuint;
}
extern "C" {
    pub fn glDeleteVertexShaderEXT(id: GLuint);
}
extern "C" {
    pub fn glShaderOp1EXT(op: GLenum, res: GLuint, arg1: GLuint);
}
extern "C" {
    pub fn glShaderOp2EXT(op: GLenum, res: GLuint, arg1: GLuint, arg2: GLuint);
}
extern "C" {
    pub fn glShaderOp3EXT(op: GLenum, res: GLuint, arg1: GLuint, arg2: GLuint, arg3: GLuint);
}
extern "C" {
    pub fn glSwizzleEXT(
        res: GLuint,
        in_: GLuint,
        outX: GLenum,
        outY: GLenum,
        outZ: GLenum,
        outW: GLenum,
    );
}
extern "C" {
    pub fn glWriteMaskEXT(
        res: GLuint,
        in_: GLuint,
        outX: GLenum,
        outY: GLenum,
        outZ: GLenum,
        outW: GLenum,
    );
}
extern "C" {
    pub fn glInsertComponentEXT(res: GLuint, src: GLuint, num: GLuint);
}
extern "C" {
    pub fn glExtractComponentEXT(res: GLuint, src: GLuint, num: GLuint);
}
extern "C" {
    pub fn glGenSymbolsEXT(
        datatype: GLenum,
        storagetype: GLenum,
        range: GLenum,
        components: GLuint,
    ) -> GLuint;
}
extern "C" {
    pub fn glSetInvariantEXT(id: GLuint, type_: GLenum, addr: *const ctypes::c_void);
}
extern "C" {
    pub fn glSetLocalConstantEXT(id: GLuint, type_: GLenum, addr: *const ctypes::c_void);
}
extern "C" {
    pub fn glVariantbvEXT(id: GLuint, addr: *const GLbyte);
}
extern "C" {
    pub fn glVariantsvEXT(id: GLuint, addr: *const GLshort);
}
extern "C" {
    pub fn glVariantivEXT(id: GLuint, addr: *const GLint);
}
extern "C" {
    pub fn glVariantfvEXT(id: GLuint, addr: *const GLfloat);
}
extern "C" {
    pub fn glVariantdvEXT(id: GLuint, addr: *const GLdouble);
}
extern "C" {
    pub fn glVariantubvEXT(id: GLuint, addr: *const GLubyte);
}
extern "C" {
    pub fn glVariantusvEXT(id: GLuint, addr: *const GLushort);
}
extern "C" {
    pub fn glVariantuivEXT(id: GLuint, addr: *const GLuint);
}
extern "C" {
    pub fn glVariantPointerEXT(
        id: GLuint,
        type_: GLenum,
        stride: GLuint,
        addr: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glEnableVariantClientStateEXT(id: GLuint);
}
extern "C" {
    pub fn glDisableVariantClientStateEXT(id: GLuint);
}
extern "C" {
    pub fn glBindLightParameterEXT(light: GLenum, value: GLenum) -> GLuint;
}
extern "C" {
    pub fn glBindMaterialParameterEXT(face: GLenum, value: GLenum) -> GLuint;
}
extern "C" {
    pub fn glBindTexGenParameterEXT(unit: GLenum, coord: GLenum, value: GLenum) -> GLuint;
}
extern "C" {
    pub fn glBindTextureUnitParameterEXT(unit: GLenum, value: GLenum) -> GLuint;
}
extern "C" {
    pub fn glBindParameterEXT(value: GLenum) -> GLuint;
}
extern "C" {
    pub fn glIsVariantEnabledEXT(id: GLuint, cap: GLenum) -> GLboolean;
}
extern "C" {
    pub fn glGetVariantBooleanvEXT(id: GLuint, value: GLenum, data: *mut GLboolean);
}
extern "C" {
    pub fn glGetVariantIntegervEXT(id: GLuint, value: GLenum, data: *mut GLint);
}
extern "C" {
    pub fn glGetVariantFloatvEXT(id: GLuint, value: GLenum, data: *mut GLfloat);
}
extern "C" {
    pub fn glGetVariantPointervEXT(id: GLuint, value: GLenum, data: *mut *mut ctypes::c_void);
}
extern "C" {
    pub fn glGetInvariantBooleanvEXT(id: GLuint, value: GLenum, data: *mut GLboolean);
}
extern "C" {
    pub fn glGetInvariantIntegervEXT(id: GLuint, value: GLenum, data: *mut GLint);
}
extern "C" {
    pub fn glGetInvariantFloatvEXT(id: GLuint, value: GLenum, data: *mut GLfloat);
}
extern "C" {
    pub fn glGetLocalConstantBooleanvEXT(id: GLuint, value: GLenum, data: *mut GLboolean);
}
extern "C" {
    pub fn glGetLocalConstantIntegervEXT(id: GLuint, value: GLenum, data: *mut GLint);
}
extern "C" {
    pub fn glGetLocalConstantFloatvEXT(id: GLuint, value: GLenum, data: *mut GLfloat);
}
pub type PFNGLVERTEXWEIGHTFEXTPROC = ::core::option::Option<unsafe extern "C" fn(weight: GLfloat)>;
pub type PFNGLVERTEXWEIGHTFVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(weight: *const GLfloat)>;
pub type PFNGLVERTEXWEIGHTPOINTEREXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        size: GLint,
        type_: GLenum,
        stride: GLsizei,
        pointer: *const ctypes::c_void,
    ),
>;
extern "C" {
    pub fn glVertexWeightfEXT(weight: GLfloat);
}
extern "C" {
    pub fn glVertexWeightfvEXT(weight: *const GLfloat);
}
extern "C" {
    pub fn glVertexWeightPointerEXT(
        size: GLint,
        type_: GLenum,
        stride: GLsizei,
        pointer: *const ctypes::c_void,
    );
}
pub type PFNGLIMPORTSYNCEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        external_sync_type: GLenum,
        external_sync: GLintptr,
        flags: GLbitfield,
    ) -> GLsync,
>;
extern "C" {
    pub fn glImportSyncEXT(
        external_sync_type: GLenum,
        external_sync: GLintptr,
        flags: GLbitfield,
    ) -> GLsync;
}
pub type PFNGLFRAMETERMINATORGREMEDYPROC = ::core::option::Option<unsafe extern "C" fn()>;
extern "C" {
    pub fn glFrameTerminatorGREMEDY();
}
pub type PFNGLSTRINGMARKERGREMEDYPROC =
    ::core::option::Option<unsafe extern "C" fn(len: GLsizei, string: *const ctypes::c_void)>;
extern "C" {
    pub fn glStringMarkerGREMEDY(len: GLsizei, string: *const ctypes::c_void);
}
pub type PFNGLIMAGETRANSFORMPARAMETERIHPPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, param: GLint)>;
pub type PFNGLIMAGETRANSFORMPARAMETERFHPPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, param: GLfloat)>;
pub type PFNGLIMAGETRANSFORMPARAMETERIVHPPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *const GLint),
>;
pub type PFNGLIMAGETRANSFORMPARAMETERFVHPPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *const GLfloat),
>;
pub type PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLint)>;
pub type PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLfloat),
>;
extern "C" {
    pub fn glImageTransformParameteriHP(target: GLenum, pname: GLenum, param: GLint);
}
extern "C" {
    pub fn glImageTransformParameterfHP(target: GLenum, pname: GLenum, param: GLfloat);
}
extern "C" {
    pub fn glImageTransformParameterivHP(target: GLenum, pname: GLenum, params: *const GLint);
}
extern "C" {
    pub fn glImageTransformParameterfvHP(target: GLenum, pname: GLenum, params: *const GLfloat);
}
extern "C" {
    pub fn glGetImageTransformParameterivHP(target: GLenum, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetImageTransformParameterfvHP(target: GLenum, pname: GLenum, params: *mut GLfloat);
}
pub type PFNGLMULTIMODEDRAWARRAYSIBMPROC = ::core::option::Option<
    unsafe extern "C" fn(
        mode: *const GLenum,
        first: *const GLint,
        count: *const GLsizei,
        primcount: GLsizei,
        modestride: GLint,
    ),
>;
pub type PFNGLMULTIMODEDRAWELEMENTSIBMPROC = ::core::option::Option<
    unsafe extern "C" fn(
        mode: *const GLenum,
        count: *const GLsizei,
        type_: GLenum,
        indices: *const *const ctypes::c_void,
        primcount: GLsizei,
        modestride: GLint,
    ),
>;
extern "C" {
    pub fn glMultiModeDrawArraysIBM(
        mode: *const GLenum,
        first: *const GLint,
        count: *const GLsizei,
        primcount: GLsizei,
        modestride: GLint,
    );
}
extern "C" {
    pub fn glMultiModeDrawElementsIBM(
        mode: *const GLenum,
        count: *const GLsizei,
        type_: GLenum,
        indices: *const *const ctypes::c_void,
        primcount: GLsizei,
        modestride: GLint,
    );
}
pub type PFNGLFLUSHSTATICDATAIBMPROC = ::core::option::Option<unsafe extern "C" fn(target: GLenum)>;
extern "C" {
    pub fn glFlushStaticDataIBM(target: GLenum);
}
pub type PFNGLCOLORPOINTERLISTIBMPROC = ::core::option::Option<
    unsafe extern "C" fn(
        size: GLint,
        type_: GLenum,
        stride: GLint,
        pointer: *mut *const ctypes::c_void,
        ptrstride: GLint,
    ),
>;
pub type PFNGLSECONDARYCOLORPOINTERLISTIBMPROC = ::core::option::Option<
    unsafe extern "C" fn(
        size: GLint,
        type_: GLenum,
        stride: GLint,
        pointer: *mut *const ctypes::c_void,
        ptrstride: GLint,
    ),
>;
pub type PFNGLEDGEFLAGPOINTERLISTIBMPROC = ::core::option::Option<
    unsafe extern "C" fn(stride: GLint, pointer: *mut *const GLboolean, ptrstride: GLint),
>;
pub type PFNGLFOGCOORDPOINTERLISTIBMPROC = ::core::option::Option<
    unsafe extern "C" fn(
        type_: GLenum,
        stride: GLint,
        pointer: *mut *const ctypes::c_void,
        ptrstride: GLint,
    ),
>;
pub type PFNGLINDEXPOINTERLISTIBMPROC = ::core::option::Option<
    unsafe extern "C" fn(
        type_: GLenum,
        stride: GLint,
        pointer: *mut *const ctypes::c_void,
        ptrstride: GLint,
    ),
>;
pub type PFNGLNORMALPOINTERLISTIBMPROC = ::core::option::Option<
    unsafe extern "C" fn(
        type_: GLenum,
        stride: GLint,
        pointer: *mut *const ctypes::c_void,
        ptrstride: GLint,
    ),
>;
pub type PFNGLTEXCOORDPOINTERLISTIBMPROC = ::core::option::Option<
    unsafe extern "C" fn(
        size: GLint,
        type_: GLenum,
        stride: GLint,
        pointer: *mut *const ctypes::c_void,
        ptrstride: GLint,
    ),
>;
pub type PFNGLVERTEXPOINTERLISTIBMPROC = ::core::option::Option<
    unsafe extern "C" fn(
        size: GLint,
        type_: GLenum,
        stride: GLint,
        pointer: *mut *const ctypes::c_void,
        ptrstride: GLint,
    ),
>;
extern "C" {
    pub fn glColorPointerListIBM(
        size: GLint,
        type_: GLenum,
        stride: GLint,
        pointer: *mut *const ctypes::c_void,
        ptrstride: GLint,
    );
}
extern "C" {
    pub fn glSecondaryColorPointerListIBM(
        size: GLint,
        type_: GLenum,
        stride: GLint,
        pointer: *mut *const ctypes::c_void,
        ptrstride: GLint,
    );
}
extern "C" {
    pub fn glEdgeFlagPointerListIBM(
        stride: GLint,
        pointer: *mut *const GLboolean,
        ptrstride: GLint,
    );
}
extern "C" {
    pub fn glFogCoordPointerListIBM(
        type_: GLenum,
        stride: GLint,
        pointer: *mut *const ctypes::c_void,
        ptrstride: GLint,
    );
}
extern "C" {
    pub fn glIndexPointerListIBM(
        type_: GLenum,
        stride: GLint,
        pointer: *mut *const ctypes::c_void,
        ptrstride: GLint,
    );
}
extern "C" {
    pub fn glNormalPointerListIBM(
        type_: GLenum,
        stride: GLint,
        pointer: *mut *const ctypes::c_void,
        ptrstride: GLint,
    );
}
extern "C" {
    pub fn glTexCoordPointerListIBM(
        size: GLint,
        type_: GLenum,
        stride: GLint,
        pointer: *mut *const ctypes::c_void,
        ptrstride: GLint,
    );
}
extern "C" {
    pub fn glVertexPointerListIBM(
        size: GLint,
        type_: GLenum,
        stride: GLint,
        pointer: *mut *const ctypes::c_void,
        ptrstride: GLint,
    );
}
pub type PFNGLBLENDFUNCSEPARATEINGRPROC = ::core::option::Option<
    unsafe extern "C" fn(
        sfactorRGB: GLenum,
        dfactorRGB: GLenum,
        sfactorAlpha: GLenum,
        dfactorAlpha: GLenum,
    ),
>;
extern "C" {
    pub fn glBlendFuncSeparateINGR(
        sfactorRGB: GLenum,
        dfactorRGB: GLenum,
        sfactorAlpha: GLenum,
        dfactorAlpha: GLenum,
    );
}
pub type PFNGLSYNCTEXTUREINTELPROC = ::core::option::Option<unsafe extern "C" fn(texture: GLuint)>;
pub type PFNGLUNMAPTEXTURE2DINTELPROC =
    ::core::option::Option<unsafe extern "C" fn(texture: GLuint, level: GLint)>;
pub type PFNGLMAPTEXTURE2DINTELPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        level: GLint,
        access: GLbitfield,
        stride: *mut GLint,
        layout: *mut GLenum,
    ) -> *mut ctypes::c_void,
>;
extern "C" {
    pub fn glSyncTextureINTEL(texture: GLuint);
}
extern "C" {
    pub fn glUnmapTexture2DINTEL(texture: GLuint, level: GLint);
}
extern "C" {
    pub fn glMapTexture2DINTEL(
        texture: GLuint,
        level: GLint,
        access: GLbitfield,
        stride: *mut GLint,
        layout: *mut GLenum,
    ) -> *mut ctypes::c_void;
}
pub type PFNGLVERTEXPOINTERVINTELPROC = ::core::option::Option<
    unsafe extern "C" fn(size: GLint, type_: GLenum, pointer: *mut *const ctypes::c_void),
>;
pub type PFNGLNORMALPOINTERVINTELPROC = ::core::option::Option<
    unsafe extern "C" fn(type_: GLenum, pointer: *mut *const ctypes::c_void),
>;
pub type PFNGLCOLORPOINTERVINTELPROC = ::core::option::Option<
    unsafe extern "C" fn(size: GLint, type_: GLenum, pointer: *mut *const ctypes::c_void),
>;
pub type PFNGLTEXCOORDPOINTERVINTELPROC = ::core::option::Option<
    unsafe extern "C" fn(size: GLint, type_: GLenum, pointer: *mut *const ctypes::c_void),
>;
extern "C" {
    pub fn glVertexPointervINTEL(size: GLint, type_: GLenum, pointer: *mut *const ctypes::c_void);
}
extern "C" {
    pub fn glNormalPointervINTEL(type_: GLenum, pointer: *mut *const ctypes::c_void);
}
extern "C" {
    pub fn glColorPointervINTEL(size: GLint, type_: GLenum, pointer: *mut *const ctypes::c_void);
}
extern "C" {
    pub fn glTexCoordPointervINTEL(size: GLint, type_: GLenum, pointer: *mut *const ctypes::c_void);
}
pub type PFNGLBEGINPERFQUERYINTELPROC =
    ::core::option::Option<unsafe extern "C" fn(queryHandle: GLuint)>;
pub type PFNGLCREATEPERFQUERYINTELPROC =
    ::core::option::Option<unsafe extern "C" fn(queryId: GLuint, queryHandle: *mut GLuint)>;
pub type PFNGLDELETEPERFQUERYINTELPROC =
    ::core::option::Option<unsafe extern "C" fn(queryHandle: GLuint)>;
pub type PFNGLENDPERFQUERYINTELPROC =
    ::core::option::Option<unsafe extern "C" fn(queryHandle: GLuint)>;
pub type PFNGLGETFIRSTPERFQUERYIDINTELPROC =
    ::core::option::Option<unsafe extern "C" fn(queryId: *mut GLuint)>;
pub type PFNGLGETNEXTPERFQUERYIDINTELPROC =
    ::core::option::Option<unsafe extern "C" fn(queryId: GLuint, nextQueryId: *mut GLuint)>;
pub type PFNGLGETPERFCOUNTERINFOINTELPROC = ::core::option::Option<
    unsafe extern "C" fn(
        queryId: GLuint,
        counterId: GLuint,
        counterNameLength: GLuint,
        counterName: *mut GLchar,
        counterDescLength: GLuint,
        counterDesc: *mut GLchar,
        counterOffset: *mut GLuint,
        counterDataSize: *mut GLuint,
        counterTypeEnum: *mut GLuint,
        counterDataTypeEnum: *mut GLuint,
        rawCounterMaxValue: *mut GLuint64,
    ),
>;
pub type PFNGLGETPERFQUERYDATAINTELPROC = ::core::option::Option<
    unsafe extern "C" fn(
        queryHandle: GLuint,
        flags: GLuint,
        dataSize: GLsizei,
        data: *mut GLvoid,
        bytesWritten: *mut GLuint,
    ),
>;
pub type PFNGLGETPERFQUERYIDBYNAMEINTELPROC =
    ::core::option::Option<unsafe extern "C" fn(queryName: *mut GLchar, queryId: *mut GLuint)>;
pub type PFNGLGETPERFQUERYINFOINTELPROC = ::core::option::Option<
    unsafe extern "C" fn(
        queryId: GLuint,
        queryNameLength: GLuint,
        queryName: *mut GLchar,
        dataSize: *mut GLuint,
        noCounters: *mut GLuint,
        noInstances: *mut GLuint,
        capsMask: *mut GLuint,
    ),
>;
extern "C" {
    pub fn glBeginPerfQueryINTEL(queryHandle: GLuint);
}
extern "C" {
    pub fn glCreatePerfQueryINTEL(queryId: GLuint, queryHandle: *mut GLuint);
}
extern "C" {
    pub fn glDeletePerfQueryINTEL(queryHandle: GLuint);
}
extern "C" {
    pub fn glEndPerfQueryINTEL(queryHandle: GLuint);
}
extern "C" {
    pub fn glGetFirstPerfQueryIdINTEL(queryId: *mut GLuint);
}
extern "C" {
    pub fn glGetNextPerfQueryIdINTEL(queryId: GLuint, nextQueryId: *mut GLuint);
}
extern "C" {
    pub fn glGetPerfCounterInfoINTEL(
        queryId: GLuint,
        counterId: GLuint,
        counterNameLength: GLuint,
        counterName: *mut GLchar,
        counterDescLength: GLuint,
        counterDesc: *mut GLchar,
        counterOffset: *mut GLuint,
        counterDataSize: *mut GLuint,
        counterTypeEnum: *mut GLuint,
        counterDataTypeEnum: *mut GLuint,
        rawCounterMaxValue: *mut GLuint64,
    );
}
extern "C" {
    pub fn glGetPerfQueryDataINTEL(
        queryHandle: GLuint,
        flags: GLuint,
        dataSize: GLsizei,
        data: *mut GLvoid,
        bytesWritten: *mut GLuint,
    );
}
extern "C" {
    pub fn glGetPerfQueryIdByNameINTEL(queryName: *mut GLchar, queryId: *mut GLuint);
}
extern "C" {
    pub fn glGetPerfQueryInfoINTEL(
        queryId: GLuint,
        queryNameLength: GLuint,
        queryName: *mut GLchar,
        dataSize: *mut GLuint,
        noCounters: *mut GLuint,
        noInstances: *mut GLuint,
        capsMask: *mut GLuint,
    );
}
pub type PFNGLRESIZEBUFFERSMESAPROC = ::core::option::Option<unsafe extern "C" fn()>;
extern "C" {
    pub fn glResizeBuffersMESA();
}
pub type PFNGLWINDOWPOS2DMESAPROC =
    ::core::option::Option<unsafe extern "C" fn(x: GLdouble, y: GLdouble)>;
pub type PFNGLWINDOWPOS2DVMESAPROC =
    ::core::option::Option<unsafe extern "C" fn(v: *const GLdouble)>;
pub type PFNGLWINDOWPOS2FMESAPROC =
    ::core::option::Option<unsafe extern "C" fn(x: GLfloat, y: GLfloat)>;
pub type PFNGLWINDOWPOS2FVMESAPROC =
    ::core::option::Option<unsafe extern "C" fn(v: *const GLfloat)>;
pub type PFNGLWINDOWPOS2IMESAPROC =
    ::core::option::Option<unsafe extern "C" fn(x: GLint, y: GLint)>;
pub type PFNGLWINDOWPOS2IVMESAPROC = ::core::option::Option<unsafe extern "C" fn(v: *const GLint)>;
pub type PFNGLWINDOWPOS2SMESAPROC =
    ::core::option::Option<unsafe extern "C" fn(x: GLshort, y: GLshort)>;
pub type PFNGLWINDOWPOS2SVMESAPROC =
    ::core::option::Option<unsafe extern "C" fn(v: *const GLshort)>;
pub type PFNGLWINDOWPOS3DMESAPROC =
    ::core::option::Option<unsafe extern "C" fn(x: GLdouble, y: GLdouble, z: GLdouble)>;
pub type PFNGLWINDOWPOS3DVMESAPROC =
    ::core::option::Option<unsafe extern "C" fn(v: *const GLdouble)>;
pub type PFNGLWINDOWPOS3FMESAPROC =
    ::core::option::Option<unsafe extern "C" fn(x: GLfloat, y: GLfloat, z: GLfloat)>;
pub type PFNGLWINDOWPOS3FVMESAPROC =
    ::core::option::Option<unsafe extern "C" fn(v: *const GLfloat)>;
pub type PFNGLWINDOWPOS3IMESAPROC =
    ::core::option::Option<unsafe extern "C" fn(x: GLint, y: GLint, z: GLint)>;
pub type PFNGLWINDOWPOS3IVMESAPROC = ::core::option::Option<unsafe extern "C" fn(v: *const GLint)>;
pub type PFNGLWINDOWPOS3SMESAPROC =
    ::core::option::Option<unsafe extern "C" fn(x: GLshort, y: GLshort, z: GLshort)>;
pub type PFNGLWINDOWPOS3SVMESAPROC =
    ::core::option::Option<unsafe extern "C" fn(v: *const GLshort)>;
pub type PFNGLWINDOWPOS4DMESAPROC = ::core::option::Option<
    unsafe extern "C" fn(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble),
>;
pub type PFNGLWINDOWPOS4DVMESAPROC =
    ::core::option::Option<unsafe extern "C" fn(v: *const GLdouble)>;
pub type PFNGLWINDOWPOS4FMESAPROC =
    ::core::option::Option<unsafe extern "C" fn(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat)>;
pub type PFNGLWINDOWPOS4FVMESAPROC =
    ::core::option::Option<unsafe extern "C" fn(v: *const GLfloat)>;
pub type PFNGLWINDOWPOS4IMESAPROC =
    ::core::option::Option<unsafe extern "C" fn(x: GLint, y: GLint, z: GLint, w: GLint)>;
pub type PFNGLWINDOWPOS4IVMESAPROC = ::core::option::Option<unsafe extern "C" fn(v: *const GLint)>;
pub type PFNGLWINDOWPOS4SMESAPROC =
    ::core::option::Option<unsafe extern "C" fn(x: GLshort, y: GLshort, z: GLshort, w: GLshort)>;
pub type PFNGLWINDOWPOS4SVMESAPROC =
    ::core::option::Option<unsafe extern "C" fn(v: *const GLshort)>;
extern "C" {
    pub fn glWindowPos2dMESA(x: GLdouble, y: GLdouble);
}
extern "C" {
    pub fn glWindowPos2dvMESA(v: *const GLdouble);
}
extern "C" {
    pub fn glWindowPos2fMESA(x: GLfloat, y: GLfloat);
}
extern "C" {
    pub fn glWindowPos2fvMESA(v: *const GLfloat);
}
extern "C" {
    pub fn glWindowPos2iMESA(x: GLint, y: GLint);
}
extern "C" {
    pub fn glWindowPos2ivMESA(v: *const GLint);
}
extern "C" {
    pub fn glWindowPos2sMESA(x: GLshort, y: GLshort);
}
extern "C" {
    pub fn glWindowPos2svMESA(v: *const GLshort);
}
extern "C" {
    pub fn glWindowPos3dMESA(x: GLdouble, y: GLdouble, z: GLdouble);
}
extern "C" {
    pub fn glWindowPos3dvMESA(v: *const GLdouble);
}
extern "C" {
    pub fn glWindowPos3fMESA(x: GLfloat, y: GLfloat, z: GLfloat);
}
extern "C" {
    pub fn glWindowPos3fvMESA(v: *const GLfloat);
}
extern "C" {
    pub fn glWindowPos3iMESA(x: GLint, y: GLint, z: GLint);
}
extern "C" {
    pub fn glWindowPos3ivMESA(v: *const GLint);
}
extern "C" {
    pub fn glWindowPos3sMESA(x: GLshort, y: GLshort, z: GLshort);
}
extern "C" {
    pub fn glWindowPos3svMESA(v: *const GLshort);
}
extern "C" {
    pub fn glWindowPos4dMESA(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble);
}
extern "C" {
    pub fn glWindowPos4dvMESA(v: *const GLdouble);
}
extern "C" {
    pub fn glWindowPos4fMESA(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat);
}
extern "C" {
    pub fn glWindowPos4fvMESA(v: *const GLfloat);
}
extern "C" {
    pub fn glWindowPos4iMESA(x: GLint, y: GLint, z: GLint, w: GLint);
}
extern "C" {
    pub fn glWindowPos4ivMESA(v: *const GLint);
}
extern "C" {
    pub fn glWindowPos4sMESA(x: GLshort, y: GLshort, z: GLshort, w: GLshort);
}
extern "C" {
    pub fn glWindowPos4svMESA(v: *const GLshort);
}
pub type PFNGLBEGINCONDITIONALRENDERNVXPROC =
    ::core::option::Option<unsafe extern "C" fn(id: GLuint)>;
pub type PFNGLENDCONDITIONALRENDERNVXPROC = ::core::option::Option<unsafe extern "C" fn()>;
extern "C" {
    pub fn glBeginConditionalRenderNVX(id: GLuint);
}
extern "C" {
    pub fn glEndConditionalRenderNVX();
}
pub type PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        indirect: *const ctypes::c_void,
        drawCount: GLsizei,
        stride: GLsizei,
        vertexBufferCount: GLint,
    ),
>;
pub type PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        type_: GLenum,
        indirect: *const ctypes::c_void,
        drawCount: GLsizei,
        stride: GLsizei,
        vertexBufferCount: GLint,
    ),
>;
extern "C" {
    pub fn glMultiDrawArraysIndirectBindlessNV(
        mode: GLenum,
        indirect: *const ctypes::c_void,
        drawCount: GLsizei,
        stride: GLsizei,
        vertexBufferCount: GLint,
    );
}
extern "C" {
    pub fn glMultiDrawElementsIndirectBindlessNV(
        mode: GLenum,
        type_: GLenum,
        indirect: *const ctypes::c_void,
        drawCount: GLsizei,
        stride: GLsizei,
        vertexBufferCount: GLint,
    );
}
pub type PFNGLGETTEXTUREHANDLENVPROC =
    ::core::option::Option<unsafe extern "C" fn(texture: GLuint) -> GLuint64>;
pub type PFNGLGETTEXTURESAMPLERHANDLENVPROC =
    ::core::option::Option<unsafe extern "C" fn(texture: GLuint, sampler: GLuint) -> GLuint64>;
pub type PFNGLMAKETEXTUREHANDLERESIDENTNVPROC =
    ::core::option::Option<unsafe extern "C" fn(handle: GLuint64)>;
pub type PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC =
    ::core::option::Option<unsafe extern "C" fn(handle: GLuint64)>;
pub type PFNGLGETIMAGEHANDLENVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        level: GLint,
        layered: GLboolean,
        layer: GLint,
        format: GLenum,
    ) -> GLuint64,
>;
pub type PFNGLMAKEIMAGEHANDLERESIDENTNVPROC =
    ::core::option::Option<unsafe extern "C" fn(handle: GLuint64, access: GLenum)>;
pub type PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC =
    ::core::option::Option<unsafe extern "C" fn(handle: GLuint64)>;
pub type PFNGLUNIFORMHANDLEUI64NVPROC =
    ::core::option::Option<unsafe extern "C" fn(location: GLint, value: GLuint64)>;
pub type PFNGLUNIFORMHANDLEUI64VNVPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLuint64),
>;
pub type PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC =
    ::core::option::Option<unsafe extern "C" fn(program: GLuint, location: GLint, value: GLuint64)>;
pub type PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, values: *const GLuint64),
>;
pub type PFNGLISTEXTUREHANDLERESIDENTNVPROC =
    ::core::option::Option<unsafe extern "C" fn(handle: GLuint64) -> GLboolean>;
pub type PFNGLISIMAGEHANDLERESIDENTNVPROC =
    ::core::option::Option<unsafe extern "C" fn(handle: GLuint64) -> GLboolean>;
extern "C" {
    pub fn glGetTextureHandleNV(texture: GLuint) -> GLuint64;
}
extern "C" {
    pub fn glGetTextureSamplerHandleNV(texture: GLuint, sampler: GLuint) -> GLuint64;
}
extern "C" {
    pub fn glMakeTextureHandleResidentNV(handle: GLuint64);
}
extern "C" {
    pub fn glMakeTextureHandleNonResidentNV(handle: GLuint64);
}
extern "C" {
    pub fn glGetImageHandleNV(
        texture: GLuint,
        level: GLint,
        layered: GLboolean,
        layer: GLint,
        format: GLenum,
    ) -> GLuint64;
}
extern "C" {
    pub fn glMakeImageHandleResidentNV(handle: GLuint64, access: GLenum);
}
extern "C" {
    pub fn glMakeImageHandleNonResidentNV(handle: GLuint64);
}
extern "C" {
    pub fn glUniformHandleui64NV(location: GLint, value: GLuint64);
}
extern "C" {
    pub fn glUniformHandleui64vNV(location: GLint, count: GLsizei, value: *const GLuint64);
}
extern "C" {
    pub fn glProgramUniformHandleui64NV(program: GLuint, location: GLint, value: GLuint64);
}
extern "C" {
    pub fn glProgramUniformHandleui64vNV(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        values: *const GLuint64,
    );
}
extern "C" {
    pub fn glIsTextureHandleResidentNV(handle: GLuint64) -> GLboolean;
}
extern "C" {
    pub fn glIsImageHandleResidentNV(handle: GLuint64) -> GLboolean;
}
pub type PFNGLBLENDPARAMETERINVPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, value: GLint)>;
pub type PFNGLBLENDBARRIERNVPROC = ::core::option::Option<unsafe extern "C" fn()>;
extern "C" {
    pub fn glBlendParameteriNV(pname: GLenum, value: GLint);
}
extern "C" {
    pub fn glBlendBarrierNV();
}
pub type PFNGLBEGINCONDITIONALRENDERNVPROC =
    ::core::option::Option<unsafe extern "C" fn(id: GLuint, mode: GLenum)>;
pub type PFNGLENDCONDITIONALRENDERNVPROC = ::core::option::Option<unsafe extern "C" fn()>;
extern "C" {
    pub fn glBeginConditionalRenderNV(id: GLuint, mode: GLenum);
}
extern "C" {
    pub fn glEndConditionalRenderNV();
}
pub type PFNGLCOPYIMAGESUBDATANVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        srcName: GLuint,
        srcTarget: GLenum,
        srcLevel: GLint,
        srcX: GLint,
        srcY: GLint,
        srcZ: GLint,
        dstName: GLuint,
        dstTarget: GLenum,
        dstLevel: GLint,
        dstX: GLint,
        dstY: GLint,
        dstZ: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
    ),
>;
extern "C" {
    pub fn glCopyImageSubDataNV(
        srcName: GLuint,
        srcTarget: GLenum,
        srcLevel: GLint,
        srcX: GLint,
        srcY: GLint,
        srcZ: GLint,
        dstName: GLuint,
        dstTarget: GLenum,
        dstLevel: GLint,
        dstX: GLint,
        dstY: GLint,
        dstZ: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
    );
}
pub type PFNGLDEPTHRANGEDNVPROC =
    ::core::option::Option<unsafe extern "C" fn(zNear: GLdouble, zFar: GLdouble)>;
pub type PFNGLCLEARDEPTHDNVPROC = ::core::option::Option<unsafe extern "C" fn(depth: GLdouble)>;
pub type PFNGLDEPTHBOUNDSDNVPROC =
    ::core::option::Option<unsafe extern "C" fn(zmin: GLdouble, zmax: GLdouble)>;
extern "C" {
    pub fn glDepthRangedNV(zNear: GLdouble, zFar: GLdouble);
}
extern "C" {
    pub fn glClearDepthdNV(depth: GLdouble);
}
extern "C" {
    pub fn glDepthBoundsdNV(zmin: GLdouble, zmax: GLdouble);
}
pub type PFNGLDRAWTEXTURENVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        sampler: GLuint,
        x0: GLfloat,
        y0: GLfloat,
        x1: GLfloat,
        y1: GLfloat,
        z: GLfloat,
        s0: GLfloat,
        t0: GLfloat,
        s1: GLfloat,
        t1: GLfloat,
    ),
>;
extern "C" {
    pub fn glDrawTextureNV(
        texture: GLuint,
        sampler: GLuint,
        x0: GLfloat,
        y0: GLfloat,
        x1: GLfloat,
        y1: GLfloat,
        z: GLfloat,
        s0: GLfloat,
        t0: GLfloat,
        s1: GLfloat,
        t1: GLfloat,
    );
}
pub type PFNGLMAPCONTROLPOINTSNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        index: GLuint,
        type_: GLenum,
        ustride: GLsizei,
        vstride: GLsizei,
        uorder: GLint,
        vorder: GLint,
        packed: GLboolean,
        points: *const ctypes::c_void,
    ),
>;
pub type PFNGLMAPPARAMETERIVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *const GLint),
>;
pub type PFNGLMAPPARAMETERFVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *const GLfloat),
>;
pub type PFNGLGETMAPCONTROLPOINTSNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        index: GLuint,
        type_: GLenum,
        ustride: GLsizei,
        vstride: GLsizei,
        packed: GLboolean,
        points: *mut ctypes::c_void,
    ),
>;
pub type PFNGLGETMAPPARAMETERIVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLint)>;
pub type PFNGLGETMAPPARAMETERFVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLfloat),
>;
pub type PFNGLGETMAPATTRIBPARAMETERIVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, index: GLuint, pname: GLenum, params: *mut GLint),
>;
pub type PFNGLGETMAPATTRIBPARAMETERFVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, index: GLuint, pname: GLenum, params: *mut GLfloat),
>;
pub type PFNGLEVALMAPSNVPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, mode: GLenum)>;
extern "C" {
    pub fn glMapControlPointsNV(
        target: GLenum,
        index: GLuint,
        type_: GLenum,
        ustride: GLsizei,
        vstride: GLsizei,
        uorder: GLint,
        vorder: GLint,
        packed: GLboolean,
        points: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glMapParameterivNV(target: GLenum, pname: GLenum, params: *const GLint);
}
extern "C" {
    pub fn glMapParameterfvNV(target: GLenum, pname: GLenum, params: *const GLfloat);
}
extern "C" {
    pub fn glGetMapControlPointsNV(
        target: GLenum,
        index: GLuint,
        type_: GLenum,
        ustride: GLsizei,
        vstride: GLsizei,
        packed: GLboolean,
        points: *mut ctypes::c_void,
    );
}
extern "C" {
    pub fn glGetMapParameterivNV(target: GLenum, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetMapParameterfvNV(target: GLenum, pname: GLenum, params: *mut GLfloat);
}
extern "C" {
    pub fn glGetMapAttribParameterivNV(
        target: GLenum,
        index: GLuint,
        pname: GLenum,
        params: *mut GLint,
    );
}
extern "C" {
    pub fn glGetMapAttribParameterfvNV(
        target: GLenum,
        index: GLuint,
        pname: GLenum,
        params: *mut GLfloat,
    );
}
extern "C" {
    pub fn glEvalMapsNV(target: GLenum, mode: GLenum);
}
pub type PFNGLGETMULTISAMPLEFVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, index: GLuint, val: *mut GLfloat)>;
pub type PFNGLSAMPLEMASKINDEXEDNVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, mask: GLbitfield)>;
pub type PFNGLTEXRENDERBUFFERNVPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, renderbuffer: GLuint)>;
extern "C" {
    pub fn glGetMultisamplefvNV(pname: GLenum, index: GLuint, val: *mut GLfloat);
}
extern "C" {
    pub fn glSampleMaskIndexedNV(index: GLuint, mask: GLbitfield);
}
extern "C" {
    pub fn glTexRenderbufferNV(target: GLenum, renderbuffer: GLuint);
}
pub type PFNGLDELETEFENCESNVPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, fences: *const GLuint)>;
pub type PFNGLGENFENCESNVPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, fences: *mut GLuint)>;
pub type PFNGLISFENCENVPROC =
    ::core::option::Option<unsafe extern "C" fn(fence: GLuint) -> GLboolean>;
pub type PFNGLTESTFENCENVPROC =
    ::core::option::Option<unsafe extern "C" fn(fence: GLuint) -> GLboolean>;
pub type PFNGLGETFENCEIVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(fence: GLuint, pname: GLenum, params: *mut GLint)>;
pub type PFNGLFINISHFENCENVPROC = ::core::option::Option<unsafe extern "C" fn(fence: GLuint)>;
pub type PFNGLSETFENCENVPROC =
    ::core::option::Option<unsafe extern "C" fn(fence: GLuint, condition: GLenum)>;
extern "C" {
    pub fn glDeleteFencesNV(n: GLsizei, fences: *const GLuint);
}
extern "C" {
    pub fn glGenFencesNV(n: GLsizei, fences: *mut GLuint);
}
extern "C" {
    pub fn glIsFenceNV(fence: GLuint) -> GLboolean;
}
extern "C" {
    pub fn glTestFenceNV(fence: GLuint) -> GLboolean;
}
extern "C" {
    pub fn glGetFenceivNV(fence: GLuint, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glFinishFenceNV(fence: GLuint);
}
extern "C" {
    pub fn glSetFenceNV(fence: GLuint, condition: GLenum);
}
pub type PFNGLPROGRAMNAMEDPARAMETER4FNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        id: GLuint,
        len: GLsizei,
        name: *const GLubyte,
        x: GLfloat,
        y: GLfloat,
        z: GLfloat,
        w: GLfloat,
    ),
>;
pub type PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(id: GLuint, len: GLsizei, name: *const GLubyte, v: *const GLfloat),
>;
pub type PFNGLPROGRAMNAMEDPARAMETER4DNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        id: GLuint,
        len: GLsizei,
        name: *const GLubyte,
        x: GLdouble,
        y: GLdouble,
        z: GLdouble,
        w: GLdouble,
    ),
>;
pub type PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(id: GLuint, len: GLsizei, name: *const GLubyte, v: *const GLdouble),
>;
pub type PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(id: GLuint, len: GLsizei, name: *const GLubyte, params: *mut GLfloat),
>;
pub type PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(id: GLuint, len: GLsizei, name: *const GLubyte, params: *mut GLdouble),
>;
extern "C" {
    pub fn glProgramNamedParameter4fNV(
        id: GLuint,
        len: GLsizei,
        name: *const GLubyte,
        x: GLfloat,
        y: GLfloat,
        z: GLfloat,
        w: GLfloat,
    );
}
extern "C" {
    pub fn glProgramNamedParameter4fvNV(
        id: GLuint,
        len: GLsizei,
        name: *const GLubyte,
        v: *const GLfloat,
    );
}
extern "C" {
    pub fn glProgramNamedParameter4dNV(
        id: GLuint,
        len: GLsizei,
        name: *const GLubyte,
        x: GLdouble,
        y: GLdouble,
        z: GLdouble,
        w: GLdouble,
    );
}
extern "C" {
    pub fn glProgramNamedParameter4dvNV(
        id: GLuint,
        len: GLsizei,
        name: *const GLubyte,
        v: *const GLdouble,
    );
}
extern "C" {
    pub fn glGetProgramNamedParameterfvNV(
        id: GLuint,
        len: GLsizei,
        name: *const GLubyte,
        params: *mut GLfloat,
    );
}
extern "C" {
    pub fn glGetProgramNamedParameterdvNV(
        id: GLuint,
        len: GLsizei,
        name: *const GLubyte,
        params: *mut GLdouble,
    );
}
pub type PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        coverageSamples: GLsizei,
        colorSamples: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
    ),
>;
extern "C" {
    pub fn glRenderbufferStorageMultisampleCoverageNV(
        target: GLenum,
        coverageSamples: GLsizei,
        colorSamples: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
    );
}
pub type PFNGLPROGRAMVERTEXLIMITNVPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, limit: GLint)>;
pub type PFNGLFRAMEBUFFERTEXTUREEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint),
>;
pub type PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        attachment: GLenum,
        texture: GLuint,
        level: GLint,
        layer: GLint,
    ),
>;
pub type PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        attachment: GLenum,
        texture: GLuint,
        level: GLint,
        face: GLenum,
    ),
>;
extern "C" {
    pub fn glProgramVertexLimitNV(target: GLenum, limit: GLint);
}
extern "C" {
    pub fn glFramebufferTextureEXT(
        target: GLenum,
        attachment: GLenum,
        texture: GLuint,
        level: GLint,
    );
}
extern "C" {
    pub fn glFramebufferTextureLayerEXT(
        target: GLenum,
        attachment: GLenum,
        texture: GLuint,
        level: GLint,
        layer: GLint,
    );
}
extern "C" {
    pub fn glFramebufferTextureFaceEXT(
        target: GLenum,
        attachment: GLenum,
        texture: GLuint,
        level: GLint,
        face: GLenum,
    );
}
pub type PFNGLPROGRAMLOCALPARAMETERI4INVPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint),
>;
pub type PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, index: GLuint, params: *const GLint),
>;
pub type PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, index: GLuint, count: GLsizei, params: *const GLint),
>;
pub type PFNGLPROGRAMLOCALPARAMETERI4UINVPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint),
>;
pub type PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, index: GLuint, params: *const GLuint),
>;
pub type PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, index: GLuint, count: GLsizei, params: *const GLuint),
>;
pub type PFNGLPROGRAMENVPARAMETERI4INVPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint),
>;
pub type PFNGLPROGRAMENVPARAMETERI4IVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, index: GLuint, params: *const GLint),
>;
pub type PFNGLPROGRAMENVPARAMETERSI4IVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, index: GLuint, count: GLsizei, params: *const GLint),
>;
pub type PFNGLPROGRAMENVPARAMETERI4UINVPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint),
>;
pub type PFNGLPROGRAMENVPARAMETERI4UIVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, index: GLuint, params: *const GLuint),
>;
pub type PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, index: GLuint, count: GLsizei, params: *const GLuint),
>;
pub type PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, index: GLuint, params: *mut GLint)>;
pub type PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, index: GLuint, params: *mut GLuint),
>;
pub type PFNGLGETPROGRAMENVPARAMETERIIVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, index: GLuint, params: *mut GLint)>;
pub type PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, index: GLuint, params: *mut GLuint),
>;
extern "C" {
    pub fn glProgramLocalParameterI4iNV(
        target: GLenum,
        index: GLuint,
        x: GLint,
        y: GLint,
        z: GLint,
        w: GLint,
    );
}
extern "C" {
    pub fn glProgramLocalParameterI4ivNV(target: GLenum, index: GLuint, params: *const GLint);
}
extern "C" {
    pub fn glProgramLocalParametersI4ivNV(
        target: GLenum,
        index: GLuint,
        count: GLsizei,
        params: *const GLint,
    );
}
extern "C" {
    pub fn glProgramLocalParameterI4uiNV(
        target: GLenum,
        index: GLuint,
        x: GLuint,
        y: GLuint,
        z: GLuint,
        w: GLuint,
    );
}
extern "C" {
    pub fn glProgramLocalParameterI4uivNV(target: GLenum, index: GLuint, params: *const GLuint);
}
extern "C" {
    pub fn glProgramLocalParametersI4uivNV(
        target: GLenum,
        index: GLuint,
        count: GLsizei,
        params: *const GLuint,
    );
}
extern "C" {
    pub fn glProgramEnvParameterI4iNV(
        target: GLenum,
        index: GLuint,
        x: GLint,
        y: GLint,
        z: GLint,
        w: GLint,
    );
}
extern "C" {
    pub fn glProgramEnvParameterI4ivNV(target: GLenum, index: GLuint, params: *const GLint);
}
extern "C" {
    pub fn glProgramEnvParametersI4ivNV(
        target: GLenum,
        index: GLuint,
        count: GLsizei,
        params: *const GLint,
    );
}
extern "C" {
    pub fn glProgramEnvParameterI4uiNV(
        target: GLenum,
        index: GLuint,
        x: GLuint,
        y: GLuint,
        z: GLuint,
        w: GLuint,
    );
}
extern "C" {
    pub fn glProgramEnvParameterI4uivNV(target: GLenum, index: GLuint, params: *const GLuint);
}
extern "C" {
    pub fn glProgramEnvParametersI4uivNV(
        target: GLenum,
        index: GLuint,
        count: GLsizei,
        params: *const GLuint,
    );
}
extern "C" {
    pub fn glGetProgramLocalParameterIivNV(target: GLenum, index: GLuint, params: *mut GLint);
}
extern "C" {
    pub fn glGetProgramLocalParameterIuivNV(target: GLenum, index: GLuint, params: *mut GLuint);
}
extern "C" {
    pub fn glGetProgramEnvParameterIivNV(target: GLenum, index: GLuint, params: *mut GLint);
}
extern "C" {
    pub fn glGetProgramEnvParameterIuivNV(target: GLenum, index: GLuint, params: *mut GLuint);
}
pub type PFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, count: GLsizei, params: *const GLuint),
>;
pub type PFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, index: GLuint, param: *mut GLuint)>;
extern "C" {
    pub fn glProgramSubroutineParametersuivNV(
        target: GLenum,
        count: GLsizei,
        params: *const GLuint,
    );
}
extern "C" {
    pub fn glGetProgramSubroutineParameteruivNV(target: GLenum, index: GLuint, param: *mut GLuint);
}
pub type GLhalfNV = ctypes::c_ushort;
pub type PFNGLVERTEX2HNVPROC =
    ::core::option::Option<unsafe extern "C" fn(x: GLhalfNV, y: GLhalfNV)>;
pub type PFNGLVERTEX2HVNVPROC = ::core::option::Option<unsafe extern "C" fn(v: *const GLhalfNV)>;
pub type PFNGLVERTEX3HNVPROC =
    ::core::option::Option<unsafe extern "C" fn(x: GLhalfNV, y: GLhalfNV, z: GLhalfNV)>;
pub type PFNGLVERTEX3HVNVPROC = ::core::option::Option<unsafe extern "C" fn(v: *const GLhalfNV)>;
pub type PFNGLVERTEX4HNVPROC = ::core::option::Option<
    unsafe extern "C" fn(x: GLhalfNV, y: GLhalfNV, z: GLhalfNV, w: GLhalfNV),
>;
pub type PFNGLVERTEX4HVNVPROC = ::core::option::Option<unsafe extern "C" fn(v: *const GLhalfNV)>;
pub type PFNGLNORMAL3HNVPROC =
    ::core::option::Option<unsafe extern "C" fn(nx: GLhalfNV, ny: GLhalfNV, nz: GLhalfNV)>;
pub type PFNGLNORMAL3HVNVPROC = ::core::option::Option<unsafe extern "C" fn(v: *const GLhalfNV)>;
pub type PFNGLCOLOR3HNVPROC =
    ::core::option::Option<unsafe extern "C" fn(red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV)>;
pub type PFNGLCOLOR3HVNVPROC = ::core::option::Option<unsafe extern "C" fn(v: *const GLhalfNV)>;
pub type PFNGLCOLOR4HNVPROC = ::core::option::Option<
    unsafe extern "C" fn(red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV, alpha: GLhalfNV),
>;
pub type PFNGLCOLOR4HVNVPROC = ::core::option::Option<unsafe extern "C" fn(v: *const GLhalfNV)>;
pub type PFNGLTEXCOORD1HNVPROC = ::core::option::Option<unsafe extern "C" fn(s: GLhalfNV)>;
pub type PFNGLTEXCOORD1HVNVPROC = ::core::option::Option<unsafe extern "C" fn(v: *const GLhalfNV)>;
pub type PFNGLTEXCOORD2HNVPROC =
    ::core::option::Option<unsafe extern "C" fn(s: GLhalfNV, t: GLhalfNV)>;
pub type PFNGLTEXCOORD2HVNVPROC = ::core::option::Option<unsafe extern "C" fn(v: *const GLhalfNV)>;
pub type PFNGLTEXCOORD3HNVPROC =
    ::core::option::Option<unsafe extern "C" fn(s: GLhalfNV, t: GLhalfNV, r: GLhalfNV)>;
pub type PFNGLTEXCOORD3HVNVPROC = ::core::option::Option<unsafe extern "C" fn(v: *const GLhalfNV)>;
pub type PFNGLTEXCOORD4HNVPROC = ::core::option::Option<
    unsafe extern "C" fn(s: GLhalfNV, t: GLhalfNV, r: GLhalfNV, q: GLhalfNV),
>;
pub type PFNGLTEXCOORD4HVNVPROC = ::core::option::Option<unsafe extern "C" fn(v: *const GLhalfNV)>;
pub type PFNGLMULTITEXCOORD1HNVPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, s: GLhalfNV)>;
pub type PFNGLMULTITEXCOORD1HVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, v: *const GLhalfNV)>;
pub type PFNGLMULTITEXCOORD2HNVPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, s: GLhalfNV, t: GLhalfNV)>;
pub type PFNGLMULTITEXCOORD2HVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, v: *const GLhalfNV)>;
pub type PFNGLMULTITEXCOORD3HNVPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, s: GLhalfNV, t: GLhalfNV, r: GLhalfNV),
>;
pub type PFNGLMULTITEXCOORD3HVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, v: *const GLhalfNV)>;
pub type PFNGLMULTITEXCOORD4HNVPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, s: GLhalfNV, t: GLhalfNV, r: GLhalfNV, q: GLhalfNV),
>;
pub type PFNGLMULTITEXCOORD4HVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, v: *const GLhalfNV)>;
pub type PFNGLFOGCOORDHNVPROC = ::core::option::Option<unsafe extern "C" fn(fog: GLhalfNV)>;
pub type PFNGLFOGCOORDHVNVPROC = ::core::option::Option<unsafe extern "C" fn(fog: *const GLhalfNV)>;
pub type PFNGLSECONDARYCOLOR3HNVPROC =
    ::core::option::Option<unsafe extern "C" fn(red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV)>;
pub type PFNGLSECONDARYCOLOR3HVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(v: *const GLhalfNV)>;
pub type PFNGLVERTEXWEIGHTHNVPROC = ::core::option::Option<unsafe extern "C" fn(weight: GLhalfNV)>;
pub type PFNGLVERTEXWEIGHTHVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(weight: *const GLhalfNV)>;
pub type PFNGLVERTEXATTRIB1HNVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, x: GLhalfNV)>;
pub type PFNGLVERTEXATTRIB1HVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLhalfNV)>;
pub type PFNGLVERTEXATTRIB2HNVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, x: GLhalfNV, y: GLhalfNV)>;
pub type PFNGLVERTEXATTRIB2HVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLhalfNV)>;
pub type PFNGLVERTEXATTRIB3HNVPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, x: GLhalfNV, y: GLhalfNV, z: GLhalfNV),
>;
pub type PFNGLVERTEXATTRIB3HVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLhalfNV)>;
pub type PFNGLVERTEXATTRIB4HNVPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, x: GLhalfNV, y: GLhalfNV, z: GLhalfNV, w: GLhalfNV),
>;
pub type PFNGLVERTEXATTRIB4HVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLhalfNV)>;
pub type PFNGLVERTEXATTRIBS1HVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, n: GLsizei, v: *const GLhalfNV)>;
pub type PFNGLVERTEXATTRIBS2HVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, n: GLsizei, v: *const GLhalfNV)>;
pub type PFNGLVERTEXATTRIBS3HVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, n: GLsizei, v: *const GLhalfNV)>;
pub type PFNGLVERTEXATTRIBS4HVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, n: GLsizei, v: *const GLhalfNV)>;
extern "C" {
    pub fn glVertex2hNV(x: GLhalfNV, y: GLhalfNV);
}
extern "C" {
    pub fn glVertex2hvNV(v: *const GLhalfNV);
}
extern "C" {
    pub fn glVertex3hNV(x: GLhalfNV, y: GLhalfNV, z: GLhalfNV);
}
extern "C" {
    pub fn glVertex3hvNV(v: *const GLhalfNV);
}
extern "C" {
    pub fn glVertex4hNV(x: GLhalfNV, y: GLhalfNV, z: GLhalfNV, w: GLhalfNV);
}
extern "C" {
    pub fn glVertex4hvNV(v: *const GLhalfNV);
}
extern "C" {
    pub fn glNormal3hNV(nx: GLhalfNV, ny: GLhalfNV, nz: GLhalfNV);
}
extern "C" {
    pub fn glNormal3hvNV(v: *const GLhalfNV);
}
extern "C" {
    pub fn glColor3hNV(red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV);
}
extern "C" {
    pub fn glColor3hvNV(v: *const GLhalfNV);
}
extern "C" {
    pub fn glColor4hNV(red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV, alpha: GLhalfNV);
}
extern "C" {
    pub fn glColor4hvNV(v: *const GLhalfNV);
}
extern "C" {
    pub fn glTexCoord1hNV(s: GLhalfNV);
}
extern "C" {
    pub fn glTexCoord1hvNV(v: *const GLhalfNV);
}
extern "C" {
    pub fn glTexCoord2hNV(s: GLhalfNV, t: GLhalfNV);
}
extern "C" {
    pub fn glTexCoord2hvNV(v: *const GLhalfNV);
}
extern "C" {
    pub fn glTexCoord3hNV(s: GLhalfNV, t: GLhalfNV, r: GLhalfNV);
}
extern "C" {
    pub fn glTexCoord3hvNV(v: *const GLhalfNV);
}
extern "C" {
    pub fn glTexCoord4hNV(s: GLhalfNV, t: GLhalfNV, r: GLhalfNV, q: GLhalfNV);
}
extern "C" {
    pub fn glTexCoord4hvNV(v: *const GLhalfNV);
}
extern "C" {
    pub fn glMultiTexCoord1hNV(target: GLenum, s: GLhalfNV);
}
extern "C" {
    pub fn glMultiTexCoord1hvNV(target: GLenum, v: *const GLhalfNV);
}
extern "C" {
    pub fn glMultiTexCoord2hNV(target: GLenum, s: GLhalfNV, t: GLhalfNV);
}
extern "C" {
    pub fn glMultiTexCoord2hvNV(target: GLenum, v: *const GLhalfNV);
}
extern "C" {
    pub fn glMultiTexCoord3hNV(target: GLenum, s: GLhalfNV, t: GLhalfNV, r: GLhalfNV);
}
extern "C" {
    pub fn glMultiTexCoord3hvNV(target: GLenum, v: *const GLhalfNV);
}
extern "C" {
    pub fn glMultiTexCoord4hNV(target: GLenum, s: GLhalfNV, t: GLhalfNV, r: GLhalfNV, q: GLhalfNV);
}
extern "C" {
    pub fn glMultiTexCoord4hvNV(target: GLenum, v: *const GLhalfNV);
}
extern "C" {
    pub fn glFogCoordhNV(fog: GLhalfNV);
}
extern "C" {
    pub fn glFogCoordhvNV(fog: *const GLhalfNV);
}
extern "C" {
    pub fn glSecondaryColor3hNV(red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV);
}
extern "C" {
    pub fn glSecondaryColor3hvNV(v: *const GLhalfNV);
}
extern "C" {
    pub fn glVertexWeighthNV(weight: GLhalfNV);
}
extern "C" {
    pub fn glVertexWeighthvNV(weight: *const GLhalfNV);
}
extern "C" {
    pub fn glVertexAttrib1hNV(index: GLuint, x: GLhalfNV);
}
extern "C" {
    pub fn glVertexAttrib1hvNV(index: GLuint, v: *const GLhalfNV);
}
extern "C" {
    pub fn glVertexAttrib2hNV(index: GLuint, x: GLhalfNV, y: GLhalfNV);
}
extern "C" {
    pub fn glVertexAttrib2hvNV(index: GLuint, v: *const GLhalfNV);
}
extern "C" {
    pub fn glVertexAttrib3hNV(index: GLuint, x: GLhalfNV, y: GLhalfNV, z: GLhalfNV);
}
extern "C" {
    pub fn glVertexAttrib3hvNV(index: GLuint, v: *const GLhalfNV);
}
extern "C" {
    pub fn glVertexAttrib4hNV(index: GLuint, x: GLhalfNV, y: GLhalfNV, z: GLhalfNV, w: GLhalfNV);
}
extern "C" {
    pub fn glVertexAttrib4hvNV(index: GLuint, v: *const GLhalfNV);
}
extern "C" {
    pub fn glVertexAttribs1hvNV(index: GLuint, n: GLsizei, v: *const GLhalfNV);
}
extern "C" {
    pub fn glVertexAttribs2hvNV(index: GLuint, n: GLsizei, v: *const GLhalfNV);
}
extern "C" {
    pub fn glVertexAttribs3hvNV(index: GLuint, n: GLsizei, v: *const GLhalfNV);
}
extern "C" {
    pub fn glVertexAttribs4hvNV(index: GLuint, n: GLsizei, v: *const GLhalfNV);
}
pub type PFNGLGENOCCLUSIONQUERIESNVPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, ids: *mut GLuint)>;
pub type PFNGLDELETEOCCLUSIONQUERIESNVPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, ids: *const GLuint)>;
pub type PFNGLISOCCLUSIONQUERYNVPROC =
    ::core::option::Option<unsafe extern "C" fn(id: GLuint) -> GLboolean>;
pub type PFNGLBEGINOCCLUSIONQUERYNVPROC = ::core::option::Option<unsafe extern "C" fn(id: GLuint)>;
pub type PFNGLENDOCCLUSIONQUERYNVPROC = ::core::option::Option<unsafe extern "C" fn()>;
pub type PFNGLGETOCCLUSIONQUERYIVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(id: GLuint, pname: GLenum, params: *mut GLint)>;
pub type PFNGLGETOCCLUSIONQUERYUIVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(id: GLuint, pname: GLenum, params: *mut GLuint)>;
extern "C" {
    pub fn glGenOcclusionQueriesNV(n: GLsizei, ids: *mut GLuint);
}
extern "C" {
    pub fn glDeleteOcclusionQueriesNV(n: GLsizei, ids: *const GLuint);
}
extern "C" {
    pub fn glIsOcclusionQueryNV(id: GLuint) -> GLboolean;
}
extern "C" {
    pub fn glBeginOcclusionQueryNV(id: GLuint);
}
extern "C" {
    pub fn glEndOcclusionQueryNV();
}
extern "C" {
    pub fn glGetOcclusionQueryivNV(id: GLuint, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetOcclusionQueryuivNV(id: GLuint, pname: GLenum, params: *mut GLuint);
}
pub type PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        bindingIndex: GLuint,
        wordIndex: GLuint,
        count: GLsizei,
        params: *const GLfloat,
    ),
>;
pub type PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        bindingIndex: GLuint,
        wordIndex: GLuint,
        count: GLsizei,
        params: *const GLint,
    ),
>;
pub type PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        bindingIndex: GLuint,
        wordIndex: GLuint,
        count: GLsizei,
        params: *const GLuint,
    ),
>;
extern "C" {
    pub fn glProgramBufferParametersfvNV(
        target: GLenum,
        bindingIndex: GLuint,
        wordIndex: GLuint,
        count: GLsizei,
        params: *const GLfloat,
    );
}
extern "C" {
    pub fn glProgramBufferParametersIivNV(
        target: GLenum,
        bindingIndex: GLuint,
        wordIndex: GLuint,
        count: GLsizei,
        params: *const GLint,
    );
}
extern "C" {
    pub fn glProgramBufferParametersIuivNV(
        target: GLenum,
        bindingIndex: GLuint,
        wordIndex: GLuint,
        count: GLsizei,
        params: *const GLuint,
    );
}
pub type PFNGLGENPATHSNVPROC =
    ::core::option::Option<unsafe extern "C" fn(range: GLsizei) -> GLuint>;
pub type PFNGLDELETEPATHSNVPROC =
    ::core::option::Option<unsafe extern "C" fn(path: GLuint, range: GLsizei)>;
pub type PFNGLISPATHNVPROC =
    ::core::option::Option<unsafe extern "C" fn(path: GLuint) -> GLboolean>;
pub type PFNGLPATHCOMMANDSNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        path: GLuint,
        numCommands: GLsizei,
        commands: *const GLubyte,
        numCoords: GLsizei,
        coordType: GLenum,
        coords: *const ctypes::c_void,
    ),
>;
pub type PFNGLPATHCOORDSNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        path: GLuint,
        numCoords: GLsizei,
        coordType: GLenum,
        coords: *const ctypes::c_void,
    ),
>;
pub type PFNGLPATHSUBCOMMANDSNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        path: GLuint,
        commandStart: GLsizei,
        commandsToDelete: GLsizei,
        numCommands: GLsizei,
        commands: *const GLubyte,
        numCoords: GLsizei,
        coordType: GLenum,
        coords: *const ctypes::c_void,
    ),
>;
pub type PFNGLPATHSUBCOORDSNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        path: GLuint,
        coordStart: GLsizei,
        numCoords: GLsizei,
        coordType: GLenum,
        coords: *const ctypes::c_void,
    ),
>;
pub type PFNGLPATHSTRINGNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        path: GLuint,
        format: GLenum,
        length: GLsizei,
        pathString: *const ctypes::c_void,
    ),
>;
pub type PFNGLPATHGLYPHSNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        firstPathName: GLuint,
        fontTarget: GLenum,
        fontName: *const ctypes::c_void,
        fontStyle: GLbitfield,
        numGlyphs: GLsizei,
        type_: GLenum,
        charcodes: *const ctypes::c_void,
        handleMissingGlyphs: GLenum,
        pathParameterTemplate: GLuint,
        emScale: GLfloat,
    ),
>;
pub type PFNGLPATHGLYPHRANGENVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        firstPathName: GLuint,
        fontTarget: GLenum,
        fontName: *const ctypes::c_void,
        fontStyle: GLbitfield,
        firstGlyph: GLuint,
        numGlyphs: GLsizei,
        handleMissingGlyphs: GLenum,
        pathParameterTemplate: GLuint,
        emScale: GLfloat,
    ),
>;
pub type PFNGLWEIGHTPATHSNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        resultPath: GLuint,
        numPaths: GLsizei,
        paths: *const GLuint,
        weights: *const GLfloat,
    ),
>;
pub type PFNGLCOPYPATHNVPROC =
    ::core::option::Option<unsafe extern "C" fn(resultPath: GLuint, srcPath: GLuint)>;
pub type PFNGLINTERPOLATEPATHSNVPROC = ::core::option::Option<
    unsafe extern "C" fn(resultPath: GLuint, pathA: GLuint, pathB: GLuint, weight: GLfloat),
>;
pub type PFNGLTRANSFORMPATHNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        resultPath: GLuint,
        srcPath: GLuint,
        transformType: GLenum,
        transformValues: *const GLfloat,
    ),
>;
pub type PFNGLPATHPARAMETERIVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(path: GLuint, pname: GLenum, value: *const GLint)>;
pub type PFNGLPATHPARAMETERINVPROC =
    ::core::option::Option<unsafe extern "C" fn(path: GLuint, pname: GLenum, value: GLint)>;
pub type PFNGLPATHPARAMETERFVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(path: GLuint, pname: GLenum, value: *const GLfloat),
>;
pub type PFNGLPATHPARAMETERFNVPROC =
    ::core::option::Option<unsafe extern "C" fn(path: GLuint, pname: GLenum, value: GLfloat)>;
pub type PFNGLPATHDASHARRAYNVPROC = ::core::option::Option<
    unsafe extern "C" fn(path: GLuint, dashCount: GLsizei, dashArray: *const GLfloat),
>;
pub type PFNGLPATHSTENCILFUNCNVPROC =
    ::core::option::Option<unsafe extern "C" fn(func: GLenum, ref_: GLint, mask: GLuint)>;
pub type PFNGLPATHSTENCILDEPTHOFFSETNVPROC =
    ::core::option::Option<unsafe extern "C" fn(factor: GLfloat, units: GLfloat)>;
pub type PFNGLSTENCILFILLPATHNVPROC =
    ::core::option::Option<unsafe extern "C" fn(path: GLuint, fillMode: GLenum, mask: GLuint)>;
pub type PFNGLSTENCILSTROKEPATHNVPROC =
    ::core::option::Option<unsafe extern "C" fn(path: GLuint, reference: GLint, mask: GLuint)>;
pub type PFNGLSTENCILFILLPATHINSTANCEDNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        numPaths: GLsizei,
        pathNameType: GLenum,
        paths: *const ctypes::c_void,
        pathBase: GLuint,
        fillMode: GLenum,
        mask: GLuint,
        transformType: GLenum,
        transformValues: *const GLfloat,
    ),
>;
pub type PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        numPaths: GLsizei,
        pathNameType: GLenum,
        paths: *const ctypes::c_void,
        pathBase: GLuint,
        reference: GLint,
        mask: GLuint,
        transformType: GLenum,
        transformValues: *const GLfloat,
    ),
>;
pub type PFNGLPATHCOVERDEPTHFUNCNVPROC = ::core::option::Option<unsafe extern "C" fn(func: GLenum)>;
pub type PFNGLPATHCOLORGENNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        color: GLenum,
        genMode: GLenum,
        colorFormat: GLenum,
        coeffs: *const GLfloat,
    ),
>;
pub type PFNGLPATHTEXGENNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texCoordSet: GLenum,
        genMode: GLenum,
        components: GLint,
        coeffs: *const GLfloat,
    ),
>;
pub type PFNGLPATHFOGGENNVPROC = ::core::option::Option<unsafe extern "C" fn(genMode: GLenum)>;
pub type PFNGLCOVERFILLPATHNVPROC =
    ::core::option::Option<unsafe extern "C" fn(path: GLuint, coverMode: GLenum)>;
pub type PFNGLCOVERSTROKEPATHNVPROC =
    ::core::option::Option<unsafe extern "C" fn(path: GLuint, coverMode: GLenum)>;
pub type PFNGLCOVERFILLPATHINSTANCEDNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        numPaths: GLsizei,
        pathNameType: GLenum,
        paths: *const ctypes::c_void,
        pathBase: GLuint,
        coverMode: GLenum,
        transformType: GLenum,
        transformValues: *const GLfloat,
    ),
>;
pub type PFNGLCOVERSTROKEPATHINSTANCEDNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        numPaths: GLsizei,
        pathNameType: GLenum,
        paths: *const ctypes::c_void,
        pathBase: GLuint,
        coverMode: GLenum,
        transformType: GLenum,
        transformValues: *const GLfloat,
    ),
>;
pub type PFNGLGETPATHPARAMETERIVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(path: GLuint, pname: GLenum, value: *mut GLint)>;
pub type PFNGLGETPATHPARAMETERFVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(path: GLuint, pname: GLenum, value: *mut GLfloat)>;
pub type PFNGLGETPATHCOMMANDSNVPROC =
    ::core::option::Option<unsafe extern "C" fn(path: GLuint, commands: *mut GLubyte)>;
pub type PFNGLGETPATHCOORDSNVPROC =
    ::core::option::Option<unsafe extern "C" fn(path: GLuint, coords: *mut GLfloat)>;
pub type PFNGLGETPATHDASHARRAYNVPROC =
    ::core::option::Option<unsafe extern "C" fn(path: GLuint, dashArray: *mut GLfloat)>;
pub type PFNGLGETPATHMETRICSNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        metricQueryMask: GLbitfield,
        numPaths: GLsizei,
        pathNameType: GLenum,
        paths: *const ctypes::c_void,
        pathBase: GLuint,
        stride: GLsizei,
        metrics: *mut GLfloat,
    ),
>;
pub type PFNGLGETPATHMETRICRANGENVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        metricQueryMask: GLbitfield,
        firstPathName: GLuint,
        numPaths: GLsizei,
        stride: GLsizei,
        metrics: *mut GLfloat,
    ),
>;
pub type PFNGLGETPATHSPACINGNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        pathListMode: GLenum,
        numPaths: GLsizei,
        pathNameType: GLenum,
        paths: *const ctypes::c_void,
        pathBase: GLuint,
        advanceScale: GLfloat,
        kerningScale: GLfloat,
        transformType: GLenum,
        returnedSpacing: *mut GLfloat,
    ),
>;
pub type PFNGLGETPATHCOLORGENIVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(color: GLenum, pname: GLenum, value: *mut GLint)>;
pub type PFNGLGETPATHCOLORGENFVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(color: GLenum, pname: GLenum, value: *mut GLfloat)>;
pub type PFNGLGETPATHTEXGENIVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(texCoordSet: GLenum, pname: GLenum, value: *mut GLint),
>;
pub type PFNGLGETPATHTEXGENFVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(texCoordSet: GLenum, pname: GLenum, value: *mut GLfloat),
>;
pub type PFNGLISPOINTINFILLPATHNVPROC = ::core::option::Option<
    unsafe extern "C" fn(path: GLuint, mask: GLuint, x: GLfloat, y: GLfloat) -> GLboolean,
>;
pub type PFNGLISPOINTINSTROKEPATHNVPROC =
    ::core::option::Option<unsafe extern "C" fn(path: GLuint, x: GLfloat, y: GLfloat) -> GLboolean>;
pub type PFNGLGETPATHLENGTHNVPROC = ::core::option::Option<
    unsafe extern "C" fn(path: GLuint, startSegment: GLsizei, numSegments: GLsizei) -> GLfloat,
>;
pub type PFNGLPOINTALONGPATHNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        path: GLuint,
        startSegment: GLsizei,
        numSegments: GLsizei,
        distance: GLfloat,
        x: *mut GLfloat,
        y: *mut GLfloat,
        tangentX: *mut GLfloat,
        tangentY: *mut GLfloat,
    ) -> GLboolean,
>;
extern "C" {
    pub fn glGenPathsNV(range: GLsizei) -> GLuint;
}
extern "C" {
    pub fn glDeletePathsNV(path: GLuint, range: GLsizei);
}
extern "C" {
    pub fn glIsPathNV(path: GLuint) -> GLboolean;
}
extern "C" {
    pub fn glPathCommandsNV(
        path: GLuint,
        numCommands: GLsizei,
        commands: *const GLubyte,
        numCoords: GLsizei,
        coordType: GLenum,
        coords: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glPathCoordsNV(
        path: GLuint,
        numCoords: GLsizei,
        coordType: GLenum,
        coords: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glPathSubCommandsNV(
        path: GLuint,
        commandStart: GLsizei,
        commandsToDelete: GLsizei,
        numCommands: GLsizei,
        commands: *const GLubyte,
        numCoords: GLsizei,
        coordType: GLenum,
        coords: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glPathSubCoordsNV(
        path: GLuint,
        coordStart: GLsizei,
        numCoords: GLsizei,
        coordType: GLenum,
        coords: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glPathStringNV(
        path: GLuint,
        format: GLenum,
        length: GLsizei,
        pathString: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glPathGlyphsNV(
        firstPathName: GLuint,
        fontTarget: GLenum,
        fontName: *const ctypes::c_void,
        fontStyle: GLbitfield,
        numGlyphs: GLsizei,
        type_: GLenum,
        charcodes: *const ctypes::c_void,
        handleMissingGlyphs: GLenum,
        pathParameterTemplate: GLuint,
        emScale: GLfloat,
    );
}
extern "C" {
    pub fn glPathGlyphRangeNV(
        firstPathName: GLuint,
        fontTarget: GLenum,
        fontName: *const ctypes::c_void,
        fontStyle: GLbitfield,
        firstGlyph: GLuint,
        numGlyphs: GLsizei,
        handleMissingGlyphs: GLenum,
        pathParameterTemplate: GLuint,
        emScale: GLfloat,
    );
}
extern "C" {
    pub fn glWeightPathsNV(
        resultPath: GLuint,
        numPaths: GLsizei,
        paths: *const GLuint,
        weights: *const GLfloat,
    );
}
extern "C" {
    pub fn glCopyPathNV(resultPath: GLuint, srcPath: GLuint);
}
extern "C" {
    pub fn glInterpolatePathsNV(resultPath: GLuint, pathA: GLuint, pathB: GLuint, weight: GLfloat);
}
extern "C" {
    pub fn glTransformPathNV(
        resultPath: GLuint,
        srcPath: GLuint,
        transformType: GLenum,
        transformValues: *const GLfloat,
    );
}
extern "C" {
    pub fn glPathParameterivNV(path: GLuint, pname: GLenum, value: *const GLint);
}
extern "C" {
    pub fn glPathParameteriNV(path: GLuint, pname: GLenum, value: GLint);
}
extern "C" {
    pub fn glPathParameterfvNV(path: GLuint, pname: GLenum, value: *const GLfloat);
}
extern "C" {
    pub fn glPathParameterfNV(path: GLuint, pname: GLenum, value: GLfloat);
}
extern "C" {
    pub fn glPathDashArrayNV(path: GLuint, dashCount: GLsizei, dashArray: *const GLfloat);
}
extern "C" {
    pub fn glPathStencilFuncNV(func: GLenum, ref_: GLint, mask: GLuint);
}
extern "C" {
    pub fn glPathStencilDepthOffsetNV(factor: GLfloat, units: GLfloat);
}
extern "C" {
    pub fn glStencilFillPathNV(path: GLuint, fillMode: GLenum, mask: GLuint);
}
extern "C" {
    pub fn glStencilStrokePathNV(path: GLuint, reference: GLint, mask: GLuint);
}
extern "C" {
    pub fn glStencilFillPathInstancedNV(
        numPaths: GLsizei,
        pathNameType: GLenum,
        paths: *const ctypes::c_void,
        pathBase: GLuint,
        fillMode: GLenum,
        mask: GLuint,
        transformType: GLenum,
        transformValues: *const GLfloat,
    );
}
extern "C" {
    pub fn glStencilStrokePathInstancedNV(
        numPaths: GLsizei,
        pathNameType: GLenum,
        paths: *const ctypes::c_void,
        pathBase: GLuint,
        reference: GLint,
        mask: GLuint,
        transformType: GLenum,
        transformValues: *const GLfloat,
    );
}
extern "C" {
    pub fn glPathCoverDepthFuncNV(func: GLenum);
}
extern "C" {
    pub fn glPathColorGenNV(
        color: GLenum,
        genMode: GLenum,
        colorFormat: GLenum,
        coeffs: *const GLfloat,
    );
}
extern "C" {
    pub fn glPathTexGenNV(
        texCoordSet: GLenum,
        genMode: GLenum,
        components: GLint,
        coeffs: *const GLfloat,
    );
}
extern "C" {
    pub fn glPathFogGenNV(genMode: GLenum);
}
extern "C" {
    pub fn glCoverFillPathNV(path: GLuint, coverMode: GLenum);
}
extern "C" {
    pub fn glCoverStrokePathNV(path: GLuint, coverMode: GLenum);
}
extern "C" {
    pub fn glCoverFillPathInstancedNV(
        numPaths: GLsizei,
        pathNameType: GLenum,
        paths: *const ctypes::c_void,
        pathBase: GLuint,
        coverMode: GLenum,
        transformType: GLenum,
        transformValues: *const GLfloat,
    );
}
extern "C" {
    pub fn glCoverStrokePathInstancedNV(
        numPaths: GLsizei,
        pathNameType: GLenum,
        paths: *const ctypes::c_void,
        pathBase: GLuint,
        coverMode: GLenum,
        transformType: GLenum,
        transformValues: *const GLfloat,
    );
}
extern "C" {
    pub fn glGetPathParameterivNV(path: GLuint, pname: GLenum, value: *mut GLint);
}
extern "C" {
    pub fn glGetPathParameterfvNV(path: GLuint, pname: GLenum, value: *mut GLfloat);
}
extern "C" {
    pub fn glGetPathCommandsNV(path: GLuint, commands: *mut GLubyte);
}
extern "C" {
    pub fn glGetPathCoordsNV(path: GLuint, coords: *mut GLfloat);
}
extern "C" {
    pub fn glGetPathDashArrayNV(path: GLuint, dashArray: *mut GLfloat);
}
extern "C" {
    pub fn glGetPathMetricsNV(
        metricQueryMask: GLbitfield,
        numPaths: GLsizei,
        pathNameType: GLenum,
        paths: *const ctypes::c_void,
        pathBase: GLuint,
        stride: GLsizei,
        metrics: *mut GLfloat,
    );
}
extern "C" {
    pub fn glGetPathMetricRangeNV(
        metricQueryMask: GLbitfield,
        firstPathName: GLuint,
        numPaths: GLsizei,
        stride: GLsizei,
        metrics: *mut GLfloat,
    );
}
extern "C" {
    pub fn glGetPathSpacingNV(
        pathListMode: GLenum,
        numPaths: GLsizei,
        pathNameType: GLenum,
        paths: *const ctypes::c_void,
        pathBase: GLuint,
        advanceScale: GLfloat,
        kerningScale: GLfloat,
        transformType: GLenum,
        returnedSpacing: *mut GLfloat,
    );
}
extern "C" {
    pub fn glGetPathColorGenivNV(color: GLenum, pname: GLenum, value: *mut GLint);
}
extern "C" {
    pub fn glGetPathColorGenfvNV(color: GLenum, pname: GLenum, value: *mut GLfloat);
}
extern "C" {
    pub fn glGetPathTexGenivNV(texCoordSet: GLenum, pname: GLenum, value: *mut GLint);
}
extern "C" {
    pub fn glGetPathTexGenfvNV(texCoordSet: GLenum, pname: GLenum, value: *mut GLfloat);
}
extern "C" {
    pub fn glIsPointInFillPathNV(path: GLuint, mask: GLuint, x: GLfloat, y: GLfloat) -> GLboolean;
}
extern "C" {
    pub fn glIsPointInStrokePathNV(path: GLuint, x: GLfloat, y: GLfloat) -> GLboolean;
}
extern "C" {
    pub fn glGetPathLengthNV(path: GLuint, startSegment: GLsizei, numSegments: GLsizei) -> GLfloat;
}
extern "C" {
    pub fn glPointAlongPathNV(
        path: GLuint,
        startSegment: GLsizei,
        numSegments: GLsizei,
        distance: GLfloat,
        x: *mut GLfloat,
        y: *mut GLfloat,
        tangentX: *mut GLfloat,
        tangentY: *mut GLfloat,
    ) -> GLboolean;
}
pub type PFNGLPIXELDATARANGENVPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, length: GLsizei, pointer: *const ctypes::c_void),
>;
pub type PFNGLFLUSHPIXELDATARANGENVPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum)>;
extern "C" {
    pub fn glPixelDataRangeNV(target: GLenum, length: GLsizei, pointer: *const ctypes::c_void);
}
extern "C" {
    pub fn glFlushPixelDataRangeNV(target: GLenum);
}
pub type PFNGLPOINTPARAMETERINVPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, param: GLint)>;
pub type PFNGLPOINTPARAMETERIVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, params: *const GLint)>;
extern "C" {
    pub fn glPointParameteriNV(pname: GLenum, param: GLint);
}
extern "C" {
    pub fn glPointParameterivNV(pname: GLenum, params: *const GLint);
}
pub type PFNGLPRESENTFRAMEKEYEDNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        video_slot: GLuint,
        minPresentTime: GLuint64EXT,
        beginPresentTimeId: GLuint,
        presentDurationId: GLuint,
        type_: GLenum,
        target0: GLenum,
        fill0: GLuint,
        key0: GLuint,
        target1: GLenum,
        fill1: GLuint,
        key1: GLuint,
    ),
>;
pub type PFNGLPRESENTFRAMEDUALFILLNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        video_slot: GLuint,
        minPresentTime: GLuint64EXT,
        beginPresentTimeId: GLuint,
        presentDurationId: GLuint,
        type_: GLenum,
        target0: GLenum,
        fill0: GLuint,
        target1: GLenum,
        fill1: GLuint,
        target2: GLenum,
        fill2: GLuint,
        target3: GLenum,
        fill3: GLuint,
    ),
>;
pub type PFNGLGETVIDEOIVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(video_slot: GLuint, pname: GLenum, params: *mut GLint),
>;
pub type PFNGLGETVIDEOUIVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(video_slot: GLuint, pname: GLenum, params: *mut GLuint),
>;
pub type PFNGLGETVIDEOI64VNVPROC = ::core::option::Option<
    unsafe extern "C" fn(video_slot: GLuint, pname: GLenum, params: *mut GLint64EXT),
>;
pub type PFNGLGETVIDEOUI64VNVPROC = ::core::option::Option<
    unsafe extern "C" fn(video_slot: GLuint, pname: GLenum, params: *mut GLuint64EXT),
>;
extern "C" {
    pub fn glPresentFrameKeyedNV(
        video_slot: GLuint,
        minPresentTime: GLuint64EXT,
        beginPresentTimeId: GLuint,
        presentDurationId: GLuint,
        type_: GLenum,
        target0: GLenum,
        fill0: GLuint,
        key0: GLuint,
        target1: GLenum,
        fill1: GLuint,
        key1: GLuint,
    );
}
extern "C" {
    pub fn glPresentFrameDualFillNV(
        video_slot: GLuint,
        minPresentTime: GLuint64EXT,
        beginPresentTimeId: GLuint,
        presentDurationId: GLuint,
        type_: GLenum,
        target0: GLenum,
        fill0: GLuint,
        target1: GLenum,
        fill1: GLuint,
        target2: GLenum,
        fill2: GLuint,
        target3: GLenum,
        fill3: GLuint,
    );
}
extern "C" {
    pub fn glGetVideoivNV(video_slot: GLuint, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetVideouivNV(video_slot: GLuint, pname: GLenum, params: *mut GLuint);
}
extern "C" {
    pub fn glGetVideoi64vNV(video_slot: GLuint, pname: GLenum, params: *mut GLint64EXT);
}
extern "C" {
    pub fn glGetVideoui64vNV(video_slot: GLuint, pname: GLenum, params: *mut GLuint64EXT);
}
pub type PFNGLPRIMITIVERESTARTNVPROC = ::core::option::Option<unsafe extern "C" fn()>;
pub type PFNGLPRIMITIVERESTARTINDEXNVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint)>;
extern "C" {
    pub fn glPrimitiveRestartNV();
}
extern "C" {
    pub fn glPrimitiveRestartIndexNV(index: GLuint);
}
pub type PFNGLCOMBINERPARAMETERFVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, params: *const GLfloat)>;
pub type PFNGLCOMBINERPARAMETERFNVPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, param: GLfloat)>;
pub type PFNGLCOMBINERPARAMETERIVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, params: *const GLint)>;
pub type PFNGLCOMBINERPARAMETERINVPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, param: GLint)>;
pub type PFNGLCOMBINERINPUTNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        stage: GLenum,
        portion: GLenum,
        variable: GLenum,
        input: GLenum,
        mapping: GLenum,
        componentUsage: GLenum,
    ),
>;
pub type PFNGLCOMBINEROUTPUTNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        stage: GLenum,
        portion: GLenum,
        abOutput: GLenum,
        cdOutput: GLenum,
        sumOutput: GLenum,
        scale: GLenum,
        bias: GLenum,
        abDotProduct: GLboolean,
        cdDotProduct: GLboolean,
        muxSum: GLboolean,
    ),
>;
pub type PFNGLFINALCOMBINERINPUTNVPROC = ::core::option::Option<
    unsafe extern "C" fn(variable: GLenum, input: GLenum, mapping: GLenum, componentUsage: GLenum),
>;
pub type PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        stage: GLenum,
        portion: GLenum,
        variable: GLenum,
        pname: GLenum,
        params: *mut GLfloat,
    ),
>;
pub type PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        stage: GLenum,
        portion: GLenum,
        variable: GLenum,
        pname: GLenum,
        params: *mut GLint,
    ),
>;
pub type PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(stage: GLenum, portion: GLenum, pname: GLenum, params: *mut GLfloat),
>;
pub type PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(stage: GLenum, portion: GLenum, pname: GLenum, params: *mut GLint),
>;
pub type PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(variable: GLenum, pname: GLenum, params: *mut GLfloat),
>;
pub type PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(variable: GLenum, pname: GLenum, params: *mut GLint),
>;
extern "C" {
    pub fn glCombinerParameterfvNV(pname: GLenum, params: *const GLfloat);
}
extern "C" {
    pub fn glCombinerParameterfNV(pname: GLenum, param: GLfloat);
}
extern "C" {
    pub fn glCombinerParameterivNV(pname: GLenum, params: *const GLint);
}
extern "C" {
    pub fn glCombinerParameteriNV(pname: GLenum, param: GLint);
}
extern "C" {
    pub fn glCombinerInputNV(
        stage: GLenum,
        portion: GLenum,
        variable: GLenum,
        input: GLenum,
        mapping: GLenum,
        componentUsage: GLenum,
    );
}
extern "C" {
    pub fn glCombinerOutputNV(
        stage: GLenum,
        portion: GLenum,
        abOutput: GLenum,
        cdOutput: GLenum,
        sumOutput: GLenum,
        scale: GLenum,
        bias: GLenum,
        abDotProduct: GLboolean,
        cdDotProduct: GLboolean,
        muxSum: GLboolean,
    );
}
extern "C" {
    pub fn glFinalCombinerInputNV(
        variable: GLenum,
        input: GLenum,
        mapping: GLenum,
        componentUsage: GLenum,
    );
}
extern "C" {
    pub fn glGetCombinerInputParameterfvNV(
        stage: GLenum,
        portion: GLenum,
        variable: GLenum,
        pname: GLenum,
        params: *mut GLfloat,
    );
}
extern "C" {
    pub fn glGetCombinerInputParameterivNV(
        stage: GLenum,
        portion: GLenum,
        variable: GLenum,
        pname: GLenum,
        params: *mut GLint,
    );
}
extern "C" {
    pub fn glGetCombinerOutputParameterfvNV(
        stage: GLenum,
        portion: GLenum,
        pname: GLenum,
        params: *mut GLfloat,
    );
}
extern "C" {
    pub fn glGetCombinerOutputParameterivNV(
        stage: GLenum,
        portion: GLenum,
        pname: GLenum,
        params: *mut GLint,
    );
}
extern "C" {
    pub fn glGetFinalCombinerInputParameterfvNV(
        variable: GLenum,
        pname: GLenum,
        params: *mut GLfloat,
    );
}
extern "C" {
    pub fn glGetFinalCombinerInputParameterivNV(
        variable: GLenum,
        pname: GLenum,
        params: *mut GLint,
    );
}
pub type PFNGLCOMBINERSTAGEPARAMETERFVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(stage: GLenum, pname: GLenum, params: *const GLfloat),
>;
pub type PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(stage: GLenum, pname: GLenum, params: *mut GLfloat),
>;
extern "C" {
    pub fn glCombinerStageParameterfvNV(stage: GLenum, pname: GLenum, params: *const GLfloat);
}
extern "C" {
    pub fn glGetCombinerStageParameterfvNV(stage: GLenum, pname: GLenum, params: *mut GLfloat);
}
pub type PFNGLMAKEBUFFERRESIDENTNVPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, access: GLenum)>;
pub type PFNGLMAKEBUFFERNONRESIDENTNVPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum)>;
pub type PFNGLISBUFFERRESIDENTNVPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum) -> GLboolean>;
pub type PFNGLMAKENAMEDBUFFERRESIDENTNVPROC =
    ::core::option::Option<unsafe extern "C" fn(buffer: GLuint, access: GLenum)>;
pub type PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC =
    ::core::option::Option<unsafe extern "C" fn(buffer: GLuint)>;
pub type PFNGLISNAMEDBUFFERRESIDENTNVPROC =
    ::core::option::Option<unsafe extern "C" fn(buffer: GLuint) -> GLboolean>;
pub type PFNGLGETBUFFERPARAMETERUI64VNVPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLuint64EXT),
>;
pub type PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC = ::core::option::Option<
    unsafe extern "C" fn(buffer: GLuint, pname: GLenum, params: *mut GLuint64EXT),
>;
pub type PFNGLGETINTEGERUI64VNVPROC =
    ::core::option::Option<unsafe extern "C" fn(value: GLenum, result: *mut GLuint64EXT)>;
pub type PFNGLUNIFORMUI64NVPROC =
    ::core::option::Option<unsafe extern "C" fn(location: GLint, value: GLuint64EXT)>;
pub type PFNGLUNIFORMUI64VNVPROC = ::core::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLuint64EXT),
>;
pub type PFNGLPROGRAMUNIFORMUI64NVPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, value: GLuint64EXT),
>;
pub type PFNGLPROGRAMUNIFORMUI64VNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLuint64EXT,
    ),
>;
extern "C" {
    pub fn glMakeBufferResidentNV(target: GLenum, access: GLenum);
}
extern "C" {
    pub fn glMakeBufferNonResidentNV(target: GLenum);
}
extern "C" {
    pub fn glIsBufferResidentNV(target: GLenum) -> GLboolean;
}
extern "C" {
    pub fn glMakeNamedBufferResidentNV(buffer: GLuint, access: GLenum);
}
extern "C" {
    pub fn glMakeNamedBufferNonResidentNV(buffer: GLuint);
}
extern "C" {
    pub fn glIsNamedBufferResidentNV(buffer: GLuint) -> GLboolean;
}
extern "C" {
    pub fn glGetBufferParameterui64vNV(target: GLenum, pname: GLenum, params: *mut GLuint64EXT);
}
extern "C" {
    pub fn glGetNamedBufferParameterui64vNV(
        buffer: GLuint,
        pname: GLenum,
        params: *mut GLuint64EXT,
    );
}
extern "C" {
    pub fn glGetIntegerui64vNV(value: GLenum, result: *mut GLuint64EXT);
}
extern "C" {
    pub fn glUniformui64NV(location: GLint, value: GLuint64EXT);
}
extern "C" {
    pub fn glUniformui64vNV(location: GLint, count: GLsizei, value: *const GLuint64EXT);
}
extern "C" {
    pub fn glProgramUniformui64NV(program: GLuint, location: GLint, value: GLuint64EXT);
}
extern "C" {
    pub fn glProgramUniformui64vNV(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLuint64EXT,
    );
}
pub type PFNGLTEXTUREBARRIERNVPROC = ::core::option::Option<unsafe extern "C" fn()>;
extern "C" {
    pub fn glTextureBarrierNV();
}
pub type PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        coverageSamples: GLsizei,
        colorSamples: GLsizei,
        internalFormat: GLint,
        width: GLsizei,
        height: GLsizei,
        fixedSampleLocations: GLboolean,
    ),
>;
pub type PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        coverageSamples: GLsizei,
        colorSamples: GLsizei,
        internalFormat: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        fixedSampleLocations: GLboolean,
    ),
>;
pub type PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        target: GLenum,
        samples: GLsizei,
        internalFormat: GLint,
        width: GLsizei,
        height: GLsizei,
        fixedSampleLocations: GLboolean,
    ),
>;
pub type PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        target: GLenum,
        samples: GLsizei,
        internalFormat: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        fixedSampleLocations: GLboolean,
    ),
>;
pub type PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        target: GLenum,
        coverageSamples: GLsizei,
        colorSamples: GLsizei,
        internalFormat: GLint,
        width: GLsizei,
        height: GLsizei,
        fixedSampleLocations: GLboolean,
    ),
>;
pub type PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        target: GLenum,
        coverageSamples: GLsizei,
        colorSamples: GLsizei,
        internalFormat: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        fixedSampleLocations: GLboolean,
    ),
>;
extern "C" {
    pub fn glTexImage2DMultisampleCoverageNV(
        target: GLenum,
        coverageSamples: GLsizei,
        colorSamples: GLsizei,
        internalFormat: GLint,
        width: GLsizei,
        height: GLsizei,
        fixedSampleLocations: GLboolean,
    );
}
extern "C" {
    pub fn glTexImage3DMultisampleCoverageNV(
        target: GLenum,
        coverageSamples: GLsizei,
        colorSamples: GLsizei,
        internalFormat: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        fixedSampleLocations: GLboolean,
    );
}
extern "C" {
    pub fn glTextureImage2DMultisampleNV(
        texture: GLuint,
        target: GLenum,
        samples: GLsizei,
        internalFormat: GLint,
        width: GLsizei,
        height: GLsizei,
        fixedSampleLocations: GLboolean,
    );
}
extern "C" {
    pub fn glTextureImage3DMultisampleNV(
        texture: GLuint,
        target: GLenum,
        samples: GLsizei,
        internalFormat: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        fixedSampleLocations: GLboolean,
    );
}
extern "C" {
    pub fn glTextureImage2DMultisampleCoverageNV(
        texture: GLuint,
        target: GLenum,
        coverageSamples: GLsizei,
        colorSamples: GLsizei,
        internalFormat: GLint,
        width: GLsizei,
        height: GLsizei,
        fixedSampleLocations: GLboolean,
    );
}
extern "C" {
    pub fn glTextureImage3DMultisampleCoverageNV(
        texture: GLuint,
        target: GLenum,
        coverageSamples: GLsizei,
        colorSamples: GLsizei,
        internalFormat: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        fixedSampleLocations: GLboolean,
    );
}
pub type PFNGLBEGINTRANSFORMFEEDBACKNVPROC =
    ::core::option::Option<unsafe extern "C" fn(primitiveMode: GLenum)>;
pub type PFNGLENDTRANSFORMFEEDBACKNVPROC = ::core::option::Option<unsafe extern "C" fn()>;
pub type PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC = ::core::option::Option<
    unsafe extern "C" fn(count: GLuint, attribs: *const GLint, bufferMode: GLenum),
>;
pub type PFNGLBINDBUFFERRANGENVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        index: GLuint,
        buffer: GLuint,
        offset: GLintptr,
        size: GLsizeiptr,
    ),
>;
pub type PFNGLBINDBUFFEROFFSETNVPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr),
>;
pub type PFNGLBINDBUFFERBASENVPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, index: GLuint, buffer: GLuint)>;
pub type PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        count: GLsizei,
        locations: *const GLint,
        bufferMode: GLenum,
    ),
>;
pub type PFNGLACTIVEVARYINGNVPROC =
    ::core::option::Option<unsafe extern "C" fn(program: GLuint, name: *const GLchar)>;
pub type PFNGLGETVARYINGLOCATIONNVPROC =
    ::core::option::Option<unsafe extern "C" fn(program: GLuint, name: *const GLchar) -> GLint>;
pub type PFNGLGETACTIVEVARYINGNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        index: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        size: *mut GLsizei,
        type_: *mut GLenum,
        name: *mut GLchar,
    ),
>;
pub type PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC = ::core::option::Option<
    unsafe extern "C" fn(program: GLuint, index: GLuint, location: *mut GLint),
>;
pub type PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        count: GLsizei,
        attribs: *const GLint,
        nbuffers: GLsizei,
        bufstreams: *const GLint,
        bufferMode: GLenum,
    ),
>;
extern "C" {
    pub fn glBeginTransformFeedbackNV(primitiveMode: GLenum);
}
extern "C" {
    pub fn glEndTransformFeedbackNV();
}
extern "C" {
    pub fn glTransformFeedbackAttribsNV(count: GLuint, attribs: *const GLint, bufferMode: GLenum);
}
extern "C" {
    pub fn glBindBufferRangeNV(
        target: GLenum,
        index: GLuint,
        buffer: GLuint,
        offset: GLintptr,
        size: GLsizeiptr,
    );
}
extern "C" {
    pub fn glBindBufferOffsetNV(target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr);
}
extern "C" {
    pub fn glBindBufferBaseNV(target: GLenum, index: GLuint, buffer: GLuint);
}
extern "C" {
    pub fn glTransformFeedbackVaryingsNV(
        program: GLuint,
        count: GLsizei,
        locations: *const GLint,
        bufferMode: GLenum,
    );
}
extern "C" {
    pub fn glActiveVaryingNV(program: GLuint, name: *const GLchar);
}
extern "C" {
    pub fn glGetVaryingLocationNV(program: GLuint, name: *const GLchar) -> GLint;
}
extern "C" {
    pub fn glGetActiveVaryingNV(
        program: GLuint,
        index: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        size: *mut GLsizei,
        type_: *mut GLenum,
        name: *mut GLchar,
    );
}
extern "C" {
    pub fn glGetTransformFeedbackVaryingNV(program: GLuint, index: GLuint, location: *mut GLint);
}
extern "C" {
    pub fn glTransformFeedbackStreamAttribsNV(
        count: GLsizei,
        attribs: *const GLint,
        nbuffers: GLsizei,
        bufstreams: *const GLint,
        bufferMode: GLenum,
    );
}
pub type PFNGLBINDTRANSFORMFEEDBACKNVPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, id: GLuint)>;
pub type PFNGLDELETETRANSFORMFEEDBACKSNVPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, ids: *const GLuint)>;
pub type PFNGLGENTRANSFORMFEEDBACKSNVPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, ids: *mut GLuint)>;
pub type PFNGLISTRANSFORMFEEDBACKNVPROC =
    ::core::option::Option<unsafe extern "C" fn(id: GLuint) -> GLboolean>;
pub type PFNGLPAUSETRANSFORMFEEDBACKNVPROC = ::core::option::Option<unsafe extern "C" fn()>;
pub type PFNGLRESUMETRANSFORMFEEDBACKNVPROC = ::core::option::Option<unsafe extern "C" fn()>;
pub type PFNGLDRAWTRANSFORMFEEDBACKNVPROC =
    ::core::option::Option<unsafe extern "C" fn(mode: GLenum, id: GLuint)>;
extern "C" {
    pub fn glBindTransformFeedbackNV(target: GLenum, id: GLuint);
}
extern "C" {
    pub fn glDeleteTransformFeedbacksNV(n: GLsizei, ids: *const GLuint);
}
extern "C" {
    pub fn glGenTransformFeedbacksNV(n: GLsizei, ids: *mut GLuint);
}
extern "C" {
    pub fn glIsTransformFeedbackNV(id: GLuint) -> GLboolean;
}
extern "C" {
    pub fn glPauseTransformFeedbackNV();
}
extern "C" {
    pub fn glResumeTransformFeedbackNV();
}
extern "C" {
    pub fn glDrawTransformFeedbackNV(mode: GLenum, id: GLuint);
}
pub type GLvdpauSurfaceNV = GLintptr;
pub type PFNGLVDPAUINITNVPROC = ::core::option::Option<
    unsafe extern "C" fn(vdpDevice: *const ctypes::c_void, getProcAddress: *const ctypes::c_void),
>;
pub type PFNGLVDPAUFININVPROC = ::core::option::Option<unsafe extern "C" fn()>;
pub type PFNGLVDPAUREGISTERVIDEOSURFACENVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        vdpSurface: *const ctypes::c_void,
        target: GLenum,
        numTextureNames: GLsizei,
        textureNames: *const GLuint,
    ) -> GLvdpauSurfaceNV,
>;
pub type PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        vdpSurface: *const ctypes::c_void,
        target: GLenum,
        numTextureNames: GLsizei,
        textureNames: *const GLuint,
    ) -> GLvdpauSurfaceNV,
>;
pub type PFNGLVDPAUISSURFACENVPROC =
    ::core::option::Option<unsafe extern "C" fn(surface: GLvdpauSurfaceNV) -> GLboolean>;
pub type PFNGLVDPAUUNREGISTERSURFACENVPROC =
    ::core::option::Option<unsafe extern "C" fn(surface: GLvdpauSurfaceNV)>;
pub type PFNGLVDPAUGETSURFACEIVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        surface: GLvdpauSurfaceNV,
        pname: GLenum,
        bufSize: GLsizei,
        length: *mut GLsizei,
        values: *mut GLint,
    ),
>;
pub type PFNGLVDPAUSURFACEACCESSNVPROC =
    ::core::option::Option<unsafe extern "C" fn(surface: GLvdpauSurfaceNV, access: GLenum)>;
pub type PFNGLVDPAUMAPSURFACESNVPROC = ::core::option::Option<
    unsafe extern "C" fn(numSurfaces: GLsizei, surfaces: *const GLvdpauSurfaceNV),
>;
pub type PFNGLVDPAUUNMAPSURFACESNVPROC = ::core::option::Option<
    unsafe extern "C" fn(numSurface: GLsizei, surfaces: *const GLvdpauSurfaceNV),
>;
extern "C" {
    pub fn glVDPAUInitNV(vdpDevice: *const ctypes::c_void, getProcAddress: *const ctypes::c_void);
}
extern "C" {
    pub fn glVDPAUFiniNV();
}
extern "C" {
    pub fn glVDPAURegisterVideoSurfaceNV(
        vdpSurface: *const ctypes::c_void,
        target: GLenum,
        numTextureNames: GLsizei,
        textureNames: *const GLuint,
    ) -> GLvdpauSurfaceNV;
}
extern "C" {
    pub fn glVDPAURegisterOutputSurfaceNV(
        vdpSurface: *const ctypes::c_void,
        target: GLenum,
        numTextureNames: GLsizei,
        textureNames: *const GLuint,
    ) -> GLvdpauSurfaceNV;
}
extern "C" {
    pub fn glVDPAUIsSurfaceNV(surface: GLvdpauSurfaceNV) -> GLboolean;
}
extern "C" {
    pub fn glVDPAUUnregisterSurfaceNV(surface: GLvdpauSurfaceNV);
}
extern "C" {
    pub fn glVDPAUGetSurfaceivNV(
        surface: GLvdpauSurfaceNV,
        pname: GLenum,
        bufSize: GLsizei,
        length: *mut GLsizei,
        values: *mut GLint,
    );
}
extern "C" {
    pub fn glVDPAUSurfaceAccessNV(surface: GLvdpauSurfaceNV, access: GLenum);
}
extern "C" {
    pub fn glVDPAUMapSurfacesNV(numSurfaces: GLsizei, surfaces: *const GLvdpauSurfaceNV);
}
extern "C" {
    pub fn glVDPAUUnmapSurfacesNV(numSurface: GLsizei, surfaces: *const GLvdpauSurfaceNV);
}
pub type PFNGLFLUSHVERTEXARRAYRANGENVPROC = ::core::option::Option<unsafe extern "C" fn()>;
pub type PFNGLVERTEXARRAYRANGENVPROC =
    ::core::option::Option<unsafe extern "C" fn(length: GLsizei, pointer: *const ctypes::c_void)>;
extern "C" {
    pub fn glFlushVertexArrayRangeNV();
}
extern "C" {
    pub fn glVertexArrayRangeNV(length: GLsizei, pointer: *const ctypes::c_void);
}
pub type PFNGLVERTEXATTRIBL1I64NVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, x: GLint64EXT)>;
pub type PFNGLVERTEXATTRIBL2I64NVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, x: GLint64EXT, y: GLint64EXT)>;
pub type PFNGLVERTEXATTRIBL3I64NVPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT),
>;
pub type PFNGLVERTEXATTRIBL4I64NVPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT),
>;
pub type PFNGLVERTEXATTRIBL1I64VNVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLint64EXT)>;
pub type PFNGLVERTEXATTRIBL2I64VNVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLint64EXT)>;
pub type PFNGLVERTEXATTRIBL3I64VNVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLint64EXT)>;
pub type PFNGLVERTEXATTRIBL4I64VNVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLint64EXT)>;
pub type PFNGLVERTEXATTRIBL1UI64NVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, x: GLuint64EXT)>;
pub type PFNGLVERTEXATTRIBL2UI64NVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, x: GLuint64EXT, y: GLuint64EXT)>;
pub type PFNGLVERTEXATTRIBL3UI64NVPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT),
>;
pub type PFNGLVERTEXATTRIBL4UI64NVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        index: GLuint,
        x: GLuint64EXT,
        y: GLuint64EXT,
        z: GLuint64EXT,
        w: GLuint64EXT,
    ),
>;
pub type PFNGLVERTEXATTRIBL1UI64VNVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLuint64EXT)>;
pub type PFNGLVERTEXATTRIBL2UI64VNVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLuint64EXT)>;
pub type PFNGLVERTEXATTRIBL3UI64VNVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLuint64EXT)>;
pub type PFNGLVERTEXATTRIBL4UI64VNVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLuint64EXT)>;
pub type PFNGLGETVERTEXATTRIBLI64VNVPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, pname: GLenum, params: *mut GLint64EXT),
>;
pub type PFNGLGETVERTEXATTRIBLUI64VNVPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, pname: GLenum, params: *mut GLuint64EXT),
>;
pub type PFNGLVERTEXATTRIBLFORMATNVPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, size: GLint, type_: GLenum, stride: GLsizei),
>;
extern "C" {
    pub fn glVertexAttribL1i64NV(index: GLuint, x: GLint64EXT);
}
extern "C" {
    pub fn glVertexAttribL2i64NV(index: GLuint, x: GLint64EXT, y: GLint64EXT);
}
extern "C" {
    pub fn glVertexAttribL3i64NV(index: GLuint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT);
}
extern "C" {
    pub fn glVertexAttribL4i64NV(
        index: GLuint,
        x: GLint64EXT,
        y: GLint64EXT,
        z: GLint64EXT,
        w: GLint64EXT,
    );
}
extern "C" {
    pub fn glVertexAttribL1i64vNV(index: GLuint, v: *const GLint64EXT);
}
extern "C" {
    pub fn glVertexAttribL2i64vNV(index: GLuint, v: *const GLint64EXT);
}
extern "C" {
    pub fn glVertexAttribL3i64vNV(index: GLuint, v: *const GLint64EXT);
}
extern "C" {
    pub fn glVertexAttribL4i64vNV(index: GLuint, v: *const GLint64EXT);
}
extern "C" {
    pub fn glVertexAttribL1ui64NV(index: GLuint, x: GLuint64EXT);
}
extern "C" {
    pub fn glVertexAttribL2ui64NV(index: GLuint, x: GLuint64EXT, y: GLuint64EXT);
}
extern "C" {
    pub fn glVertexAttribL3ui64NV(index: GLuint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT);
}
extern "C" {
    pub fn glVertexAttribL4ui64NV(
        index: GLuint,
        x: GLuint64EXT,
        y: GLuint64EXT,
        z: GLuint64EXT,
        w: GLuint64EXT,
    );
}
extern "C" {
    pub fn glVertexAttribL1ui64vNV(index: GLuint, v: *const GLuint64EXT);
}
extern "C" {
    pub fn glVertexAttribL2ui64vNV(index: GLuint, v: *const GLuint64EXT);
}
extern "C" {
    pub fn glVertexAttribL3ui64vNV(index: GLuint, v: *const GLuint64EXT);
}
extern "C" {
    pub fn glVertexAttribL4ui64vNV(index: GLuint, v: *const GLuint64EXT);
}
extern "C" {
    pub fn glGetVertexAttribLi64vNV(index: GLuint, pname: GLenum, params: *mut GLint64EXT);
}
extern "C" {
    pub fn glGetVertexAttribLui64vNV(index: GLuint, pname: GLenum, params: *mut GLuint64EXT);
}
extern "C" {
    pub fn glVertexAttribLFormatNV(index: GLuint, size: GLint, type_: GLenum, stride: GLsizei);
}
pub type PFNGLBUFFERADDRESSRANGENVPROC = ::core::option::Option<
    unsafe extern "C" fn(pname: GLenum, index: GLuint, address: GLuint64EXT, length: GLsizeiptr),
>;
pub type PFNGLVERTEXFORMATNVPROC =
    ::core::option::Option<unsafe extern "C" fn(size: GLint, type_: GLenum, stride: GLsizei)>;
pub type PFNGLNORMALFORMATNVPROC =
    ::core::option::Option<unsafe extern "C" fn(type_: GLenum, stride: GLsizei)>;
pub type PFNGLCOLORFORMATNVPROC =
    ::core::option::Option<unsafe extern "C" fn(size: GLint, type_: GLenum, stride: GLsizei)>;
pub type PFNGLINDEXFORMATNVPROC =
    ::core::option::Option<unsafe extern "C" fn(type_: GLenum, stride: GLsizei)>;
pub type PFNGLTEXCOORDFORMATNVPROC =
    ::core::option::Option<unsafe extern "C" fn(size: GLint, type_: GLenum, stride: GLsizei)>;
pub type PFNGLEDGEFLAGFORMATNVPROC = ::core::option::Option<unsafe extern "C" fn(stride: GLsizei)>;
pub type PFNGLSECONDARYCOLORFORMATNVPROC =
    ::core::option::Option<unsafe extern "C" fn(size: GLint, type_: GLenum, stride: GLsizei)>;
pub type PFNGLFOGCOORDFORMATNVPROC =
    ::core::option::Option<unsafe extern "C" fn(type_: GLenum, stride: GLsizei)>;
pub type PFNGLVERTEXATTRIBFORMATNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        index: GLuint,
        size: GLint,
        type_: GLenum,
        normalized: GLboolean,
        stride: GLsizei,
    ),
>;
pub type PFNGLVERTEXATTRIBIFORMATNVPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, size: GLint, type_: GLenum, stride: GLsizei),
>;
pub type PFNGLGETINTEGERUI64I_VNVPROC = ::core::option::Option<
    unsafe extern "C" fn(value: GLenum, index: GLuint, result: *mut GLuint64EXT),
>;
extern "C" {
    pub fn glBufferAddressRangeNV(
        pname: GLenum,
        index: GLuint,
        address: GLuint64EXT,
        length: GLsizeiptr,
    );
}
extern "C" {
    pub fn glVertexFormatNV(size: GLint, type_: GLenum, stride: GLsizei);
}
extern "C" {
    pub fn glNormalFormatNV(type_: GLenum, stride: GLsizei);
}
extern "C" {
    pub fn glColorFormatNV(size: GLint, type_: GLenum, stride: GLsizei);
}
extern "C" {
    pub fn glIndexFormatNV(type_: GLenum, stride: GLsizei);
}
extern "C" {
    pub fn glTexCoordFormatNV(size: GLint, type_: GLenum, stride: GLsizei);
}
extern "C" {
    pub fn glEdgeFlagFormatNV(stride: GLsizei);
}
extern "C" {
    pub fn glSecondaryColorFormatNV(size: GLint, type_: GLenum, stride: GLsizei);
}
extern "C" {
    pub fn glFogCoordFormatNV(type_: GLenum, stride: GLsizei);
}
extern "C" {
    pub fn glVertexAttribFormatNV(
        index: GLuint,
        size: GLint,
        type_: GLenum,
        normalized: GLboolean,
        stride: GLsizei,
    );
}
extern "C" {
    pub fn glVertexAttribIFormatNV(index: GLuint, size: GLint, type_: GLenum, stride: GLsizei);
}
extern "C" {
    pub fn glGetIntegerui64i_vNV(value: GLenum, index: GLuint, result: *mut GLuint64EXT);
}
pub type PFNGLAREPROGRAMSRESIDENTNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        n: GLsizei,
        programs: *const GLuint,
        residences: *mut GLboolean,
    ) -> GLboolean,
>;
pub type PFNGLBINDPROGRAMNVPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, id: GLuint)>;
pub type PFNGLDELETEPROGRAMSNVPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, programs: *const GLuint)>;
pub type PFNGLEXECUTEPROGRAMNVPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, id: GLuint, params: *const GLfloat),
>;
pub type PFNGLGENPROGRAMSNVPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, programs: *mut GLuint)>;
pub type PFNGLGETPROGRAMPARAMETERDVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, index: GLuint, pname: GLenum, params: *mut GLdouble),
>;
pub type PFNGLGETPROGRAMPARAMETERFVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, index: GLuint, pname: GLenum, params: *mut GLfloat),
>;
pub type PFNGLGETPROGRAMIVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(id: GLuint, pname: GLenum, params: *mut GLint)>;
pub type PFNGLGETPROGRAMSTRINGNVPROC =
    ::core::option::Option<unsafe extern "C" fn(id: GLuint, pname: GLenum, program: *mut GLubyte)>;
pub type PFNGLGETTRACKMATRIXIVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, address: GLuint, pname: GLenum, params: *mut GLint),
>;
pub type PFNGLGETVERTEXATTRIBDVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, pname: GLenum, params: *mut GLdouble),
>;
pub type PFNGLGETVERTEXATTRIBFVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, pname: GLenum, params: *mut GLfloat),
>;
pub type PFNGLGETVERTEXATTRIBIVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, pname: GLenum, params: *mut GLint)>;
pub type PFNGLGETVERTEXATTRIBPOINTERVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, pname: GLenum, pointer: *mut *mut ctypes::c_void),
>;
pub type PFNGLISPROGRAMNVPROC =
    ::core::option::Option<unsafe extern "C" fn(id: GLuint) -> GLboolean>;
pub type PFNGLLOADPROGRAMNVPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, id: GLuint, len: GLsizei, program: *const GLubyte),
>;
pub type PFNGLPROGRAMPARAMETER4DNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        index: GLuint,
        x: GLdouble,
        y: GLdouble,
        z: GLdouble,
        w: GLdouble,
    ),
>;
pub type PFNGLPROGRAMPARAMETER4DVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, index: GLuint, v: *const GLdouble)>;
pub type PFNGLPROGRAMPARAMETER4FNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        index: GLuint,
        x: GLfloat,
        y: GLfloat,
        z: GLfloat,
        w: GLfloat,
    ),
>;
pub type PFNGLPROGRAMPARAMETER4FVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, index: GLuint, v: *const GLfloat)>;
pub type PFNGLPROGRAMPARAMETERS4DVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, index: GLuint, count: GLsizei, v: *const GLdouble),
>;
pub type PFNGLPROGRAMPARAMETERS4FVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, index: GLuint, count: GLsizei, v: *const GLfloat),
>;
pub type PFNGLREQUESTRESIDENTPROGRAMSNVPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, programs: *const GLuint)>;
pub type PFNGLTRACKMATRIXNVPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, address: GLuint, matrix: GLenum, transform: GLenum),
>;
pub type PFNGLVERTEXATTRIBPOINTERNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        index: GLuint,
        fsize: GLint,
        type_: GLenum,
        stride: GLsizei,
        pointer: *const ctypes::c_void,
    ),
>;
pub type PFNGLVERTEXATTRIB1DNVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, x: GLdouble)>;
pub type PFNGLVERTEXATTRIB1DVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLdouble)>;
pub type PFNGLVERTEXATTRIB1FNVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, x: GLfloat)>;
pub type PFNGLVERTEXATTRIB1FVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLfloat)>;
pub type PFNGLVERTEXATTRIB1SNVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, x: GLshort)>;
pub type PFNGLVERTEXATTRIB1SVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLshort)>;
pub type PFNGLVERTEXATTRIB2DNVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble)>;
pub type PFNGLVERTEXATTRIB2DVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLdouble)>;
pub type PFNGLVERTEXATTRIB2FNVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, x: GLfloat, y: GLfloat)>;
pub type PFNGLVERTEXATTRIB2FVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLfloat)>;
pub type PFNGLVERTEXATTRIB2SNVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, x: GLshort, y: GLshort)>;
pub type PFNGLVERTEXATTRIB2SVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLshort)>;
pub type PFNGLVERTEXATTRIB3DNVPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble),
>;
pub type PFNGLVERTEXATTRIB3DVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLdouble)>;
pub type PFNGLVERTEXATTRIB3FNVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat)>;
pub type PFNGLVERTEXATTRIB3FVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLfloat)>;
pub type PFNGLVERTEXATTRIB3SNVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, x: GLshort, y: GLshort, z: GLshort)>;
pub type PFNGLVERTEXATTRIB3SVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLshort)>;
pub type PFNGLVERTEXATTRIB4DNVPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble),
>;
pub type PFNGLVERTEXATTRIB4DVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLdouble)>;
pub type PFNGLVERTEXATTRIB4FNVPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat),
>;
pub type PFNGLVERTEXATTRIB4FVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLfloat)>;
pub type PFNGLVERTEXATTRIB4SNVPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort),
>;
pub type PFNGLVERTEXATTRIB4SVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLshort)>;
pub type PFNGLVERTEXATTRIB4UBNVPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte),
>;
pub type PFNGLVERTEXATTRIB4UBVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLubyte)>;
pub type PFNGLVERTEXATTRIBS1DVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, count: GLsizei, v: *const GLdouble)>;
pub type PFNGLVERTEXATTRIBS1FVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, count: GLsizei, v: *const GLfloat)>;
pub type PFNGLVERTEXATTRIBS1SVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, count: GLsizei, v: *const GLshort)>;
pub type PFNGLVERTEXATTRIBS2DVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, count: GLsizei, v: *const GLdouble)>;
pub type PFNGLVERTEXATTRIBS2FVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, count: GLsizei, v: *const GLfloat)>;
pub type PFNGLVERTEXATTRIBS2SVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, count: GLsizei, v: *const GLshort)>;
pub type PFNGLVERTEXATTRIBS3DVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, count: GLsizei, v: *const GLdouble)>;
pub type PFNGLVERTEXATTRIBS3FVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, count: GLsizei, v: *const GLfloat)>;
pub type PFNGLVERTEXATTRIBS3SVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, count: GLsizei, v: *const GLshort)>;
pub type PFNGLVERTEXATTRIBS4DVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, count: GLsizei, v: *const GLdouble)>;
pub type PFNGLVERTEXATTRIBS4FVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, count: GLsizei, v: *const GLfloat)>;
pub type PFNGLVERTEXATTRIBS4SVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, count: GLsizei, v: *const GLshort)>;
pub type PFNGLVERTEXATTRIBS4UBVNVPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, count: GLsizei, v: *const GLubyte)>;
extern "C" {
    pub fn glAreProgramsResidentNV(
        n: GLsizei,
        programs: *const GLuint,
        residences: *mut GLboolean,
    ) -> GLboolean;
}
extern "C" {
    pub fn glBindProgramNV(target: GLenum, id: GLuint);
}
extern "C" {
    pub fn glDeleteProgramsNV(n: GLsizei, programs: *const GLuint);
}
extern "C" {
    pub fn glExecuteProgramNV(target: GLenum, id: GLuint, params: *const GLfloat);
}
extern "C" {
    pub fn glGenProgramsNV(n: GLsizei, programs: *mut GLuint);
}
extern "C" {
    pub fn glGetProgramParameterdvNV(
        target: GLenum,
        index: GLuint,
        pname: GLenum,
        params: *mut GLdouble,
    );
}
extern "C" {
    pub fn glGetProgramParameterfvNV(
        target: GLenum,
        index: GLuint,
        pname: GLenum,
        params: *mut GLfloat,
    );
}
extern "C" {
    pub fn glGetProgramivNV(id: GLuint, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetProgramStringNV(id: GLuint, pname: GLenum, program: *mut GLubyte);
}
extern "C" {
    pub fn glGetTrackMatrixivNV(target: GLenum, address: GLuint, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetVertexAttribdvNV(index: GLuint, pname: GLenum, params: *mut GLdouble);
}
extern "C" {
    pub fn glGetVertexAttribfvNV(index: GLuint, pname: GLenum, params: *mut GLfloat);
}
extern "C" {
    pub fn glGetVertexAttribivNV(index: GLuint, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetVertexAttribPointervNV(
        index: GLuint,
        pname: GLenum,
        pointer: *mut *mut ctypes::c_void,
    );
}
extern "C" {
    pub fn glIsProgramNV(id: GLuint) -> GLboolean;
}
extern "C" {
    pub fn glLoadProgramNV(target: GLenum, id: GLuint, len: GLsizei, program: *const GLubyte);
}
extern "C" {
    pub fn glProgramParameter4dNV(
        target: GLenum,
        index: GLuint,
        x: GLdouble,
        y: GLdouble,
        z: GLdouble,
        w: GLdouble,
    );
}
extern "C" {
    pub fn glProgramParameter4dvNV(target: GLenum, index: GLuint, v: *const GLdouble);
}
extern "C" {
    pub fn glProgramParameter4fNV(
        target: GLenum,
        index: GLuint,
        x: GLfloat,
        y: GLfloat,
        z: GLfloat,
        w: GLfloat,
    );
}
extern "C" {
    pub fn glProgramParameter4fvNV(target: GLenum, index: GLuint, v: *const GLfloat);
}
extern "C" {
    pub fn glProgramParameters4dvNV(
        target: GLenum,
        index: GLuint,
        count: GLsizei,
        v: *const GLdouble,
    );
}
extern "C" {
    pub fn glProgramParameters4fvNV(
        target: GLenum,
        index: GLuint,
        count: GLsizei,
        v: *const GLfloat,
    );
}
extern "C" {
    pub fn glRequestResidentProgramsNV(n: GLsizei, programs: *const GLuint);
}
extern "C" {
    pub fn glTrackMatrixNV(target: GLenum, address: GLuint, matrix: GLenum, transform: GLenum);
}
extern "C" {
    pub fn glVertexAttribPointerNV(
        index: GLuint,
        fsize: GLint,
        type_: GLenum,
        stride: GLsizei,
        pointer: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glVertexAttrib1dNV(index: GLuint, x: GLdouble);
}
extern "C" {
    pub fn glVertexAttrib1dvNV(index: GLuint, v: *const GLdouble);
}
extern "C" {
    pub fn glVertexAttrib1fNV(index: GLuint, x: GLfloat);
}
extern "C" {
    pub fn glVertexAttrib1fvNV(index: GLuint, v: *const GLfloat);
}
extern "C" {
    pub fn glVertexAttrib1sNV(index: GLuint, x: GLshort);
}
extern "C" {
    pub fn glVertexAttrib1svNV(index: GLuint, v: *const GLshort);
}
extern "C" {
    pub fn glVertexAttrib2dNV(index: GLuint, x: GLdouble, y: GLdouble);
}
extern "C" {
    pub fn glVertexAttrib2dvNV(index: GLuint, v: *const GLdouble);
}
extern "C" {
    pub fn glVertexAttrib2fNV(index: GLuint, x: GLfloat, y: GLfloat);
}
extern "C" {
    pub fn glVertexAttrib2fvNV(index: GLuint, v: *const GLfloat);
}
extern "C" {
    pub fn glVertexAttrib2sNV(index: GLuint, x: GLshort, y: GLshort);
}
extern "C" {
    pub fn glVertexAttrib2svNV(index: GLuint, v: *const GLshort);
}
extern "C" {
    pub fn glVertexAttrib3dNV(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble);
}
extern "C" {
    pub fn glVertexAttrib3dvNV(index: GLuint, v: *const GLdouble);
}
extern "C" {
    pub fn glVertexAttrib3fNV(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat);
}
extern "C" {
    pub fn glVertexAttrib3fvNV(index: GLuint, v: *const GLfloat);
}
extern "C" {
    pub fn glVertexAttrib3sNV(index: GLuint, x: GLshort, y: GLshort, z: GLshort);
}
extern "C" {
    pub fn glVertexAttrib3svNV(index: GLuint, v: *const GLshort);
}
extern "C" {
    pub fn glVertexAttrib4dNV(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble);
}
extern "C" {
    pub fn glVertexAttrib4dvNV(index: GLuint, v: *const GLdouble);
}
extern "C" {
    pub fn glVertexAttrib4fNV(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat);
}
extern "C" {
    pub fn glVertexAttrib4fvNV(index: GLuint, v: *const GLfloat);
}
extern "C" {
    pub fn glVertexAttrib4sNV(index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort);
}
extern "C" {
    pub fn glVertexAttrib4svNV(index: GLuint, v: *const GLshort);
}
extern "C" {
    pub fn glVertexAttrib4ubNV(index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte);
}
extern "C" {
    pub fn glVertexAttrib4ubvNV(index: GLuint, v: *const GLubyte);
}
extern "C" {
    pub fn glVertexAttribs1dvNV(index: GLuint, count: GLsizei, v: *const GLdouble);
}
extern "C" {
    pub fn glVertexAttribs1fvNV(index: GLuint, count: GLsizei, v: *const GLfloat);
}
extern "C" {
    pub fn glVertexAttribs1svNV(index: GLuint, count: GLsizei, v: *const GLshort);
}
extern "C" {
    pub fn glVertexAttribs2dvNV(index: GLuint, count: GLsizei, v: *const GLdouble);
}
extern "C" {
    pub fn glVertexAttribs2fvNV(index: GLuint, count: GLsizei, v: *const GLfloat);
}
extern "C" {
    pub fn glVertexAttribs2svNV(index: GLuint, count: GLsizei, v: *const GLshort);
}
extern "C" {
    pub fn glVertexAttribs3dvNV(index: GLuint, count: GLsizei, v: *const GLdouble);
}
extern "C" {
    pub fn glVertexAttribs3fvNV(index: GLuint, count: GLsizei, v: *const GLfloat);
}
extern "C" {
    pub fn glVertexAttribs3svNV(index: GLuint, count: GLsizei, v: *const GLshort);
}
extern "C" {
    pub fn glVertexAttribs4dvNV(index: GLuint, count: GLsizei, v: *const GLdouble);
}
extern "C" {
    pub fn glVertexAttribs4fvNV(index: GLuint, count: GLsizei, v: *const GLfloat);
}
extern "C" {
    pub fn glVertexAttribs4svNV(index: GLuint, count: GLsizei, v: *const GLshort);
}
extern "C" {
    pub fn glVertexAttribs4ubvNV(index: GLuint, count: GLsizei, v: *const GLubyte);
}
pub type PFNGLVERTEXATTRIBI1IEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, x: GLint)>;
pub type PFNGLVERTEXATTRIBI2IEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, x: GLint, y: GLint)>;
pub type PFNGLVERTEXATTRIBI3IEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, x: GLint, y: GLint, z: GLint)>;
pub type PFNGLVERTEXATTRIBI4IEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint),
>;
pub type PFNGLVERTEXATTRIBI1UIEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, x: GLuint)>;
pub type PFNGLVERTEXATTRIBI2UIEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, x: GLuint, y: GLuint)>;
pub type PFNGLVERTEXATTRIBI3UIEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, x: GLuint, y: GLuint, z: GLuint)>;
pub type PFNGLVERTEXATTRIBI4UIEXTPROC = ::core::option::Option<
    unsafe extern "C" fn(index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint),
>;
pub type PFNGLVERTEXATTRIBI1IVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLint)>;
pub type PFNGLVERTEXATTRIBI2IVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLint)>;
pub type PFNGLVERTEXATTRIBI3IVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLint)>;
pub type PFNGLVERTEXATTRIBI4IVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLint)>;
pub type PFNGLVERTEXATTRIBI1UIVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLuint)>;
pub type PFNGLVERTEXATTRIBI2UIVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLuint)>;
pub type PFNGLVERTEXATTRIBI3UIVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLuint)>;
pub type PFNGLVERTEXATTRIBI4UIVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLuint)>;
pub type PFNGLVERTEXATTRIBI4BVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLbyte)>;
pub type PFNGLVERTEXATTRIBI4SVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLshort)>;
pub type PFNGLVERTEXATTRIBI4UBVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLubyte)>;
pub type PFNGLVERTEXATTRIBI4USVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLushort)>;
pub type PFNGLVERTEXATTRIBIPOINTEREXTPROC = ::core::option::Option<
    unsafe extern "C" fn(
        index: GLuint,
        size: GLint,
        type_: GLenum,
        stride: GLsizei,
        pointer: *const ctypes::c_void,
    ),
>;
pub type PFNGLGETVERTEXATTRIBIIVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, pname: GLenum, params: *mut GLint)>;
pub type PFNGLGETVERTEXATTRIBIUIVEXTPROC =
    ::core::option::Option<unsafe extern "C" fn(index: GLuint, pname: GLenum, params: *mut GLuint)>;
extern "C" {
    pub fn glVertexAttribI1iEXT(index: GLuint, x: GLint);
}
extern "C" {
    pub fn glVertexAttribI2iEXT(index: GLuint, x: GLint, y: GLint);
}
extern "C" {
    pub fn glVertexAttribI3iEXT(index: GLuint, x: GLint, y: GLint, z: GLint);
}
extern "C" {
    pub fn glVertexAttribI4iEXT(index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint);
}
extern "C" {
    pub fn glVertexAttribI1uiEXT(index: GLuint, x: GLuint);
}
extern "C" {
    pub fn glVertexAttribI2uiEXT(index: GLuint, x: GLuint, y: GLuint);
}
extern "C" {
    pub fn glVertexAttribI3uiEXT(index: GLuint, x: GLuint, y: GLuint, z: GLuint);
}
extern "C" {
    pub fn glVertexAttribI4uiEXT(index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint);
}
extern "C" {
    pub fn glVertexAttribI1ivEXT(index: GLuint, v: *const GLint);
}
extern "C" {
    pub fn glVertexAttribI2ivEXT(index: GLuint, v: *const GLint);
}
extern "C" {
    pub fn glVertexAttribI3ivEXT(index: GLuint, v: *const GLint);
}
extern "C" {
    pub fn glVertexAttribI4ivEXT(index: GLuint, v: *const GLint);
}
extern "C" {
    pub fn glVertexAttribI1uivEXT(index: GLuint, v: *const GLuint);
}
extern "C" {
    pub fn glVertexAttribI2uivEXT(index: GLuint, v: *const GLuint);
}
extern "C" {
    pub fn glVertexAttribI3uivEXT(index: GLuint, v: *const GLuint);
}
extern "C" {
    pub fn glVertexAttribI4uivEXT(index: GLuint, v: *const GLuint);
}
extern "C" {
    pub fn glVertexAttribI4bvEXT(index: GLuint, v: *const GLbyte);
}
extern "C" {
    pub fn glVertexAttribI4svEXT(index: GLuint, v: *const GLshort);
}
extern "C" {
    pub fn glVertexAttribI4ubvEXT(index: GLuint, v: *const GLubyte);
}
extern "C" {
    pub fn glVertexAttribI4usvEXT(index: GLuint, v: *const GLushort);
}
extern "C" {
    pub fn glVertexAttribIPointerEXT(
        index: GLuint,
        size: GLint,
        type_: GLenum,
        stride: GLsizei,
        pointer: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glGetVertexAttribIivEXT(index: GLuint, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetVertexAttribIuivEXT(index: GLuint, pname: GLenum, params: *mut GLuint);
}
pub type PFNGLBEGINVIDEOCAPTURENVPROC =
    ::core::option::Option<unsafe extern "C" fn(video_capture_slot: GLuint)>;
pub type PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        video_capture_slot: GLuint,
        stream: GLuint,
        frame_region: GLenum,
        offset: GLintptrARB,
    ),
>;
pub type PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        video_capture_slot: GLuint,
        stream: GLuint,
        frame_region: GLenum,
        target: GLenum,
        texture: GLuint,
    ),
>;
pub type PFNGLENDVIDEOCAPTURENVPROC =
    ::core::option::Option<unsafe extern "C" fn(video_capture_slot: GLuint)>;
pub type PFNGLGETVIDEOCAPTUREIVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(video_capture_slot: GLuint, pname: GLenum, params: *mut GLint),
>;
pub type PFNGLGETVIDEOCAPTURESTREAMIVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        video_capture_slot: GLuint,
        stream: GLuint,
        pname: GLenum,
        params: *mut GLint,
    ),
>;
pub type PFNGLGETVIDEOCAPTURESTREAMFVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        video_capture_slot: GLuint,
        stream: GLuint,
        pname: GLenum,
        params: *mut GLfloat,
    ),
>;
pub type PFNGLGETVIDEOCAPTURESTREAMDVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        video_capture_slot: GLuint,
        stream: GLuint,
        pname: GLenum,
        params: *mut GLdouble,
    ),
>;
pub type PFNGLVIDEOCAPTURENVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        video_capture_slot: GLuint,
        sequence_num: *mut GLuint,
        capture_time: *mut GLuint64EXT,
    ) -> GLenum,
>;
pub type PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        video_capture_slot: GLuint,
        stream: GLuint,
        pname: GLenum,
        params: *const GLint,
    ),
>;
pub type PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        video_capture_slot: GLuint,
        stream: GLuint,
        pname: GLenum,
        params: *const GLfloat,
    ),
>;
pub type PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC = ::core::option::Option<
    unsafe extern "C" fn(
        video_capture_slot: GLuint,
        stream: GLuint,
        pname: GLenum,
        params: *const GLdouble,
    ),
>;
extern "C" {
    pub fn glBeginVideoCaptureNV(video_capture_slot: GLuint);
}
extern "C" {
    pub fn glBindVideoCaptureStreamBufferNV(
        video_capture_slot: GLuint,
        stream: GLuint,
        frame_region: GLenum,
        offset: GLintptrARB,
    );
}
extern "C" {
    pub fn glBindVideoCaptureStreamTextureNV(
        video_capture_slot: GLuint,
        stream: GLuint,
        frame_region: GLenum,
        target: GLenum,
        texture: GLuint,
    );
}
extern "C" {
    pub fn glEndVideoCaptureNV(video_capture_slot: GLuint);
}
extern "C" {
    pub fn glGetVideoCaptureivNV(video_capture_slot: GLuint, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetVideoCaptureStreamivNV(
        video_capture_slot: GLuint,
        stream: GLuint,
        pname: GLenum,
        params: *mut GLint,
    );
}
extern "C" {
    pub fn glGetVideoCaptureStreamfvNV(
        video_capture_slot: GLuint,
        stream: GLuint,
        pname: GLenum,
        params: *mut GLfloat,
    );
}
extern "C" {
    pub fn glGetVideoCaptureStreamdvNV(
        video_capture_slot: GLuint,
        stream: GLuint,
        pname: GLenum,
        params: *mut GLdouble,
    );
}
extern "C" {
    pub fn glVideoCaptureNV(
        video_capture_slot: GLuint,
        sequence_num: *mut GLuint,
        capture_time: *mut GLuint64EXT,
    ) -> GLenum;
}
extern "C" {
    pub fn glVideoCaptureStreamParameterivNV(
        video_capture_slot: GLuint,
        stream: GLuint,
        pname: GLenum,
        params: *const GLint,
    );
}
extern "C" {
    pub fn glVideoCaptureStreamParameterfvNV(
        video_capture_slot: GLuint,
        stream: GLuint,
        pname: GLenum,
        params: *const GLfloat,
    );
}
extern "C" {
    pub fn glVideoCaptureStreamParameterdvNV(
        video_capture_slot: GLuint,
        stream: GLuint,
        pname: GLenum,
        params: *const GLdouble,
    );
}
pub type PFNGLHINTPGIPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, mode: GLint)>;
extern "C" {
    pub fn glHintPGI(target: GLenum, mode: GLint);
}
pub type PFNGLDETAILTEXFUNCSGISPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, n: GLsizei, points: *const GLfloat),
>;
pub type PFNGLGETDETAILTEXFUNCSGISPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, points: *mut GLfloat)>;
extern "C" {
    pub fn glDetailTexFuncSGIS(target: GLenum, n: GLsizei, points: *const GLfloat);
}
extern "C" {
    pub fn glGetDetailTexFuncSGIS(target: GLenum, points: *mut GLfloat);
}
pub type PFNGLFOGFUNCSGISPROC =
    ::core::option::Option<unsafe extern "C" fn(n: GLsizei, points: *const GLfloat)>;
pub type PFNGLGETFOGFUNCSGISPROC =
    ::core::option::Option<unsafe extern "C" fn(points: *mut GLfloat)>;
extern "C" {
    pub fn glFogFuncSGIS(n: GLsizei, points: *const GLfloat);
}
extern "C" {
    pub fn glGetFogFuncSGIS(points: *mut GLfloat);
}
pub type PFNGLSAMPLEMASKSGISPROC =
    ::core::option::Option<unsafe extern "C" fn(value: GLclampf, invert: GLboolean)>;
pub type PFNGLSAMPLEPATTERNSGISPROC = ::core::option::Option<unsafe extern "C" fn(pattern: GLenum)>;
extern "C" {
    pub fn glSampleMaskSGIS(value: GLclampf, invert: GLboolean);
}
extern "C" {
    pub fn glSamplePatternSGIS(pattern: GLenum);
}
pub type PFNGLPIXELTEXGENPARAMETERISGISPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, param: GLint)>;
pub type PFNGLPIXELTEXGENPARAMETERIVSGISPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, params: *const GLint)>;
pub type PFNGLPIXELTEXGENPARAMETERFSGISPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, param: GLfloat)>;
pub type PFNGLPIXELTEXGENPARAMETERFVSGISPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, params: *const GLfloat)>;
pub type PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, params: *mut GLint)>;
pub type PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, params: *mut GLfloat)>;
extern "C" {
    pub fn glPixelTexGenParameteriSGIS(pname: GLenum, param: GLint);
}
extern "C" {
    pub fn glPixelTexGenParameterivSGIS(pname: GLenum, params: *const GLint);
}
extern "C" {
    pub fn glPixelTexGenParameterfSGIS(pname: GLenum, param: GLfloat);
}
extern "C" {
    pub fn glPixelTexGenParameterfvSGIS(pname: GLenum, params: *const GLfloat);
}
extern "C" {
    pub fn glGetPixelTexGenParameterivSGIS(pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetPixelTexGenParameterfvSGIS(pname: GLenum, params: *mut GLfloat);
}
pub type PFNGLPOINTPARAMETERFSGISPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, param: GLfloat)>;
pub type PFNGLPOINTPARAMETERFVSGISPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, params: *const GLfloat)>;
extern "C" {
    pub fn glPointParameterfSGIS(pname: GLenum, param: GLfloat);
}
extern "C" {
    pub fn glPointParameterfvSGIS(pname: GLenum, params: *const GLfloat);
}
pub type PFNGLSHARPENTEXFUNCSGISPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, n: GLsizei, points: *const GLfloat),
>;
pub type PFNGLGETSHARPENTEXFUNCSGISPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, points: *mut GLfloat)>;
extern "C" {
    pub fn glSharpenTexFuncSGIS(target: GLenum, n: GLsizei, points: *const GLfloat);
}
extern "C" {
    pub fn glGetSharpenTexFuncSGIS(target: GLenum, points: *mut GLfloat);
}
pub type PFNGLTEXIMAGE4DSGISPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        size4d: GLsizei,
        border: GLint,
        format: GLenum,
        type_: GLenum,
        pixels: *const ctypes::c_void,
    ),
>;
pub type PFNGLTEXSUBIMAGE4DSGISPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        zoffset: GLint,
        woffset: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        size4d: GLsizei,
        format: GLenum,
        type_: GLenum,
        pixels: *const ctypes::c_void,
    ),
>;
extern "C" {
    pub fn glTexImage4DSGIS(
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        size4d: GLsizei,
        border: GLint,
        format: GLenum,
        type_: GLenum,
        pixels: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glTexSubImage4DSGIS(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        zoffset: GLint,
        woffset: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        size4d: GLsizei,
        format: GLenum,
        type_: GLenum,
        pixels: *const ctypes::c_void,
    );
}
pub type PFNGLTEXTURECOLORMASKSGISPROC = ::core::option::Option<
    unsafe extern "C" fn(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean),
>;
extern "C" {
    pub fn glTextureColorMaskSGIS(
        red: GLboolean,
        green: GLboolean,
        blue: GLboolean,
        alpha: GLboolean,
    );
}
pub type PFNGLGETTEXFILTERFUNCSGISPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, filter: GLenum, weights: *mut GLfloat),
>;
pub type PFNGLTEXFILTERFUNCSGISPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, filter: GLenum, n: GLsizei, weights: *const GLfloat),
>;
extern "C" {
    pub fn glGetTexFilterFuncSGIS(target: GLenum, filter: GLenum, weights: *mut GLfloat);
}
extern "C" {
    pub fn glTexFilterFuncSGIS(target: GLenum, filter: GLenum, n: GLsizei, weights: *const GLfloat);
}
pub type PFNGLASYNCMARKERSGIXPROC = ::core::option::Option<unsafe extern "C" fn(marker: GLuint)>;
pub type PFNGLFINISHASYNCSGIXPROC =
    ::core::option::Option<unsafe extern "C" fn(markerp: *mut GLuint) -> GLint>;
pub type PFNGLPOLLASYNCSGIXPROC =
    ::core::option::Option<unsafe extern "C" fn(markerp: *mut GLuint) -> GLint>;
pub type PFNGLGENASYNCMARKERSSGIXPROC =
    ::core::option::Option<unsafe extern "C" fn(range: GLsizei) -> GLuint>;
pub type PFNGLDELETEASYNCMARKERSSGIXPROC =
    ::core::option::Option<unsafe extern "C" fn(marker: GLuint, range: GLsizei)>;
pub type PFNGLISASYNCMARKERSGIXPROC =
    ::core::option::Option<unsafe extern "C" fn(marker: GLuint) -> GLboolean>;
extern "C" {
    pub fn glAsyncMarkerSGIX(marker: GLuint);
}
extern "C" {
    pub fn glFinishAsyncSGIX(markerp: *mut GLuint) -> GLint;
}
extern "C" {
    pub fn glPollAsyncSGIX(markerp: *mut GLuint) -> GLint;
}
extern "C" {
    pub fn glGenAsyncMarkersSGIX(range: GLsizei) -> GLuint;
}
extern "C" {
    pub fn glDeleteAsyncMarkersSGIX(marker: GLuint, range: GLsizei);
}
extern "C" {
    pub fn glIsAsyncMarkerSGIX(marker: GLuint) -> GLboolean;
}
pub type PFNGLFLUSHRASTERSGIXPROC = ::core::option::Option<unsafe extern "C" fn()>;
extern "C" {
    pub fn glFlushRasterSGIX();
}
pub type PFNGLFRAGMENTCOLORMATERIALSGIXPROC =
    ::core::option::Option<unsafe extern "C" fn(face: GLenum, mode: GLenum)>;
pub type PFNGLFRAGMENTLIGHTFSGIXPROC =
    ::core::option::Option<unsafe extern "C" fn(light: GLenum, pname: GLenum, param: GLfloat)>;
pub type PFNGLFRAGMENTLIGHTFVSGIXPROC = ::core::option::Option<
    unsafe extern "C" fn(light: GLenum, pname: GLenum, params: *const GLfloat),
>;
pub type PFNGLFRAGMENTLIGHTISGIXPROC =
    ::core::option::Option<unsafe extern "C" fn(light: GLenum, pname: GLenum, param: GLint)>;
pub type PFNGLFRAGMENTLIGHTIVSGIXPROC = ::core::option::Option<
    unsafe extern "C" fn(light: GLenum, pname: GLenum, params: *const GLint),
>;
pub type PFNGLFRAGMENTLIGHTMODELFSGIXPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, param: GLfloat)>;
pub type PFNGLFRAGMENTLIGHTMODELFVSGIXPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, params: *const GLfloat)>;
pub type PFNGLFRAGMENTLIGHTMODELISGIXPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, param: GLint)>;
pub type PFNGLFRAGMENTLIGHTMODELIVSGIXPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, params: *const GLint)>;
pub type PFNGLFRAGMENTMATERIALFSGIXPROC =
    ::core::option::Option<unsafe extern "C" fn(face: GLenum, pname: GLenum, param: GLfloat)>;
pub type PFNGLFRAGMENTMATERIALFVSGIXPROC = ::core::option::Option<
    unsafe extern "C" fn(face: GLenum, pname: GLenum, params: *const GLfloat),
>;
pub type PFNGLFRAGMENTMATERIALISGIXPROC =
    ::core::option::Option<unsafe extern "C" fn(face: GLenum, pname: GLenum, param: GLint)>;
pub type PFNGLFRAGMENTMATERIALIVSGIXPROC =
    ::core::option::Option<unsafe extern "C" fn(face: GLenum, pname: GLenum, params: *const GLint)>;
pub type PFNGLGETFRAGMENTLIGHTFVSGIXPROC = ::core::option::Option<
    unsafe extern "C" fn(light: GLenum, pname: GLenum, params: *mut GLfloat),
>;
pub type PFNGLGETFRAGMENTLIGHTIVSGIXPROC =
    ::core::option::Option<unsafe extern "C" fn(light: GLenum, pname: GLenum, params: *mut GLint)>;
pub type PFNGLGETFRAGMENTMATERIALFVSGIXPROC =
    ::core::option::Option<unsafe extern "C" fn(face: GLenum, pname: GLenum, params: *mut GLfloat)>;
pub type PFNGLGETFRAGMENTMATERIALIVSGIXPROC =
    ::core::option::Option<unsafe extern "C" fn(face: GLenum, pname: GLenum, params: *mut GLint)>;
pub type PFNGLLIGHTENVISGIXPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, param: GLint)>;
extern "C" {
    pub fn glFragmentColorMaterialSGIX(face: GLenum, mode: GLenum);
}
extern "C" {
    pub fn glFragmentLightfSGIX(light: GLenum, pname: GLenum, param: GLfloat);
}
extern "C" {
    pub fn glFragmentLightfvSGIX(light: GLenum, pname: GLenum, params: *const GLfloat);
}
extern "C" {
    pub fn glFragmentLightiSGIX(light: GLenum, pname: GLenum, param: GLint);
}
extern "C" {
    pub fn glFragmentLightivSGIX(light: GLenum, pname: GLenum, params: *const GLint);
}
extern "C" {
    pub fn glFragmentLightModelfSGIX(pname: GLenum, param: GLfloat);
}
extern "C" {
    pub fn glFragmentLightModelfvSGIX(pname: GLenum, params: *const GLfloat);
}
extern "C" {
    pub fn glFragmentLightModeliSGIX(pname: GLenum, param: GLint);
}
extern "C" {
    pub fn glFragmentLightModelivSGIX(pname: GLenum, params: *const GLint);
}
extern "C" {
    pub fn glFragmentMaterialfSGIX(face: GLenum, pname: GLenum, param: GLfloat);
}
extern "C" {
    pub fn glFragmentMaterialfvSGIX(face: GLenum, pname: GLenum, params: *const GLfloat);
}
extern "C" {
    pub fn glFragmentMaterialiSGIX(face: GLenum, pname: GLenum, param: GLint);
}
extern "C" {
    pub fn glFragmentMaterialivSGIX(face: GLenum, pname: GLenum, params: *const GLint);
}
extern "C" {
    pub fn glGetFragmentLightfvSGIX(light: GLenum, pname: GLenum, params: *mut GLfloat);
}
extern "C" {
    pub fn glGetFragmentLightivSGIX(light: GLenum, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetFragmentMaterialfvSGIX(face: GLenum, pname: GLenum, params: *mut GLfloat);
}
extern "C" {
    pub fn glGetFragmentMaterialivSGIX(face: GLenum, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glLightEnviSGIX(pname: GLenum, param: GLint);
}
pub type PFNGLFRAMEZOOMSGIXPROC = ::core::option::Option<unsafe extern "C" fn(factor: GLint)>;
extern "C" {
    pub fn glFrameZoomSGIX(factor: GLint);
}
pub type PFNGLIGLOOINTERFACESGIXPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, params: *const ctypes::c_void)>;
extern "C" {
    pub fn glIglooInterfaceSGIX(pname: GLenum, params: *const ctypes::c_void);
}
pub type PFNGLGETINSTRUMENTSSGIXPROC = ::core::option::Option<unsafe extern "C" fn() -> GLint>;
pub type PFNGLINSTRUMENTSBUFFERSGIXPROC =
    ::core::option::Option<unsafe extern "C" fn(size: GLsizei, buffer: *mut GLint)>;
pub type PFNGLPOLLINSTRUMENTSSGIXPROC =
    ::core::option::Option<unsafe extern "C" fn(marker_p: *mut GLint) -> GLint>;
pub type PFNGLREADINSTRUMENTSSGIXPROC = ::core::option::Option<unsafe extern "C" fn(marker: GLint)>;
pub type PFNGLSTARTINSTRUMENTSSGIXPROC = ::core::option::Option<unsafe extern "C" fn()>;
pub type PFNGLSTOPINSTRUMENTSSGIXPROC = ::core::option::Option<unsafe extern "C" fn(marker: GLint)>;
extern "C" {
    pub fn glGetInstrumentsSGIX() -> GLint;
}
extern "C" {
    pub fn glInstrumentsBufferSGIX(size: GLsizei, buffer: *mut GLint);
}
extern "C" {
    pub fn glPollInstrumentsSGIX(marker_p: *mut GLint) -> GLint;
}
extern "C" {
    pub fn glReadInstrumentsSGIX(marker: GLint);
}
extern "C" {
    pub fn glStartInstrumentsSGIX();
}
extern "C" {
    pub fn glStopInstrumentsSGIX(marker: GLint);
}
pub type PFNGLGETLISTPARAMETERFVSGIXPROC =
    ::core::option::Option<unsafe extern "C" fn(list: GLuint, pname: GLenum, params: *mut GLfloat)>;
pub type PFNGLGETLISTPARAMETERIVSGIXPROC =
    ::core::option::Option<unsafe extern "C" fn(list: GLuint, pname: GLenum, params: *mut GLint)>;
pub type PFNGLLISTPARAMETERFSGIXPROC =
    ::core::option::Option<unsafe extern "C" fn(list: GLuint, pname: GLenum, param: GLfloat)>;
pub type PFNGLLISTPARAMETERFVSGIXPROC = ::core::option::Option<
    unsafe extern "C" fn(list: GLuint, pname: GLenum, params: *const GLfloat),
>;
pub type PFNGLLISTPARAMETERISGIXPROC =
    ::core::option::Option<unsafe extern "C" fn(list: GLuint, pname: GLenum, param: GLint)>;
pub type PFNGLLISTPARAMETERIVSGIXPROC =
    ::core::option::Option<unsafe extern "C" fn(list: GLuint, pname: GLenum, params: *const GLint)>;
extern "C" {
    pub fn glGetListParameterfvSGIX(list: GLuint, pname: GLenum, params: *mut GLfloat);
}
extern "C" {
    pub fn glGetListParameterivSGIX(list: GLuint, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glListParameterfSGIX(list: GLuint, pname: GLenum, param: GLfloat);
}
extern "C" {
    pub fn glListParameterfvSGIX(list: GLuint, pname: GLenum, params: *const GLfloat);
}
extern "C" {
    pub fn glListParameteriSGIX(list: GLuint, pname: GLenum, param: GLint);
}
extern "C" {
    pub fn glListParameterivSGIX(list: GLuint, pname: GLenum, params: *const GLint);
}
pub type PFNGLPIXELTEXGENSGIXPROC = ::core::option::Option<unsafe extern "C" fn(mode: GLenum)>;
extern "C" {
    pub fn glPixelTexGenSGIX(mode: GLenum);
}
pub type PFNGLDEFORMATIONMAP3DSGIXPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        u1: GLdouble,
        u2: GLdouble,
        ustride: GLint,
        uorder: GLint,
        v1: GLdouble,
        v2: GLdouble,
        vstride: GLint,
        vorder: GLint,
        w1: GLdouble,
        w2: GLdouble,
        wstride: GLint,
        worder: GLint,
        points: *const GLdouble,
    ),
>;
pub type PFNGLDEFORMATIONMAP3FSGIXPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        u1: GLfloat,
        u2: GLfloat,
        ustride: GLint,
        uorder: GLint,
        v1: GLfloat,
        v2: GLfloat,
        vstride: GLint,
        vorder: GLint,
        w1: GLfloat,
        w2: GLfloat,
        wstride: GLint,
        worder: GLint,
        points: *const GLfloat,
    ),
>;
pub type PFNGLDEFORMSGIXPROC = ::core::option::Option<unsafe extern "C" fn(mask: GLbitfield)>;
pub type PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC =
    ::core::option::Option<unsafe extern "C" fn(mask: GLbitfield)>;
extern "C" {
    pub fn glDeformationMap3dSGIX(
        target: GLenum,
        u1: GLdouble,
        u2: GLdouble,
        ustride: GLint,
        uorder: GLint,
        v1: GLdouble,
        v2: GLdouble,
        vstride: GLint,
        vorder: GLint,
        w1: GLdouble,
        w2: GLdouble,
        wstride: GLint,
        worder: GLint,
        points: *const GLdouble,
    );
}
extern "C" {
    pub fn glDeformationMap3fSGIX(
        target: GLenum,
        u1: GLfloat,
        u2: GLfloat,
        ustride: GLint,
        uorder: GLint,
        v1: GLfloat,
        v2: GLfloat,
        vstride: GLint,
        vorder: GLint,
        w1: GLfloat,
        w2: GLfloat,
        wstride: GLint,
        worder: GLint,
        points: *const GLfloat,
    );
}
extern "C" {
    pub fn glDeformSGIX(mask: GLbitfield);
}
extern "C" {
    pub fn glLoadIdentityDeformationMapSGIX(mask: GLbitfield);
}
pub type PFNGLREFERENCEPLANESGIXPROC =
    ::core::option::Option<unsafe extern "C" fn(equation: *const GLdouble)>;
extern "C" {
    pub fn glReferencePlaneSGIX(equation: *const GLdouble);
}
pub type PFNGLSPRITEPARAMETERFSGIXPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, param: GLfloat)>;
pub type PFNGLSPRITEPARAMETERFVSGIXPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, params: *const GLfloat)>;
pub type PFNGLSPRITEPARAMETERISGIXPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, param: GLint)>;
pub type PFNGLSPRITEPARAMETERIVSGIXPROC =
    ::core::option::Option<unsafe extern "C" fn(pname: GLenum, params: *const GLint)>;
extern "C" {
    pub fn glSpriteParameterfSGIX(pname: GLenum, param: GLfloat);
}
extern "C" {
    pub fn glSpriteParameterfvSGIX(pname: GLenum, params: *const GLfloat);
}
extern "C" {
    pub fn glSpriteParameteriSGIX(pname: GLenum, param: GLint);
}
extern "C" {
    pub fn glSpriteParameterivSGIX(pname: GLenum, params: *const GLint);
}
pub type PFNGLTAGSAMPLEBUFFERSGIXPROC = ::core::option::Option<unsafe extern "C" fn()>;
extern "C" {
    pub fn glTagSampleBufferSGIX();
}
pub type PFNGLCOLORTABLESGIPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        internalformat: GLenum,
        width: GLsizei,
        format: GLenum,
        type_: GLenum,
        table: *const ctypes::c_void,
    ),
>;
pub type PFNGLCOLORTABLEPARAMETERFVSGIPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *const GLfloat),
>;
pub type PFNGLCOLORTABLEPARAMETERIVSGIPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *const GLint),
>;
pub type PFNGLCOPYCOLORTABLESGIPROC = ::core::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        internalformat: GLenum,
        x: GLint,
        y: GLint,
        width: GLsizei,
    ),
>;
pub type PFNGLGETCOLORTABLESGIPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, format: GLenum, type_: GLenum, table: *mut ctypes::c_void),
>;
pub type PFNGLGETCOLORTABLEPARAMETERFVSGIPROC = ::core::option::Option<
    unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLfloat),
>;
pub type PFNGLGETCOLORTABLEPARAMETERIVSGIPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLint)>;
extern "C" {
    pub fn glColorTableSGI(
        target: GLenum,
        internalformat: GLenum,
        width: GLsizei,
        format: GLenum,
        type_: GLenum,
        table: *const ctypes::c_void,
    );
}
extern "C" {
    pub fn glColorTableParameterfvSGI(target: GLenum, pname: GLenum, params: *const GLfloat);
}
extern "C" {
    pub fn glColorTableParameterivSGI(target: GLenum, pname: GLenum, params: *const GLint);
}
extern "C" {
    pub fn glCopyColorTableSGI(
        target: GLenum,
        internalformat: GLenum,
        x: GLint,
        y: GLint,
        width: GLsizei,
    );
}
extern "C" {
    pub fn glGetColorTableSGI(
        target: GLenum,
        format: GLenum,
        type_: GLenum,
        table: *mut ctypes::c_void,
    );
}
extern "C" {
    pub fn glGetColorTableParameterfvSGI(target: GLenum, pname: GLenum, params: *mut GLfloat);
}
extern "C" {
    pub fn glGetColorTableParameterivSGI(target: GLenum, pname: GLenum, params: *mut GLint);
}
pub type PFNGLFINISHTEXTURESUNXPROC = ::core::option::Option<unsafe extern "C" fn()>;
extern "C" {
    pub fn glFinishTextureSUNX();
}
pub type PFNGLGLOBALALPHAFACTORBSUNPROC =
    ::core::option::Option<unsafe extern "C" fn(factor: GLbyte)>;
pub type PFNGLGLOBALALPHAFACTORSSUNPROC =
    ::core::option::Option<unsafe extern "C" fn(factor: GLshort)>;
pub type PFNGLGLOBALALPHAFACTORISUNPROC =
    ::core::option::Option<unsafe extern "C" fn(factor: GLint)>;
pub type PFNGLGLOBALALPHAFACTORFSUNPROC =
    ::core::option::Option<unsafe extern "C" fn(factor: GLfloat)>;
pub type PFNGLGLOBALALPHAFACTORDSUNPROC =
    ::core::option::Option<unsafe extern "C" fn(factor: GLdouble)>;
pub type PFNGLGLOBALALPHAFACTORUBSUNPROC =
    ::core::option::Option<unsafe extern "C" fn(factor: GLubyte)>;
pub type PFNGLGLOBALALPHAFACTORUSSUNPROC =
    ::core::option::Option<unsafe extern "C" fn(factor: GLushort)>;
pub type PFNGLGLOBALALPHAFACTORUISUNPROC =
    ::core::option::Option<unsafe extern "C" fn(factor: GLuint)>;
extern "C" {
    pub fn glGlobalAlphaFactorbSUN(factor: GLbyte);
}
extern "C" {
    pub fn glGlobalAlphaFactorsSUN(factor: GLshort);
}
extern "C" {
    pub fn glGlobalAlphaFactoriSUN(factor: GLint);
}
extern "C" {
    pub fn glGlobalAlphaFactorfSUN(factor: GLfloat);
}
extern "C" {
    pub fn glGlobalAlphaFactordSUN(factor: GLdouble);
}
extern "C" {
    pub fn glGlobalAlphaFactorubSUN(factor: GLubyte);
}
extern "C" {
    pub fn glGlobalAlphaFactorusSUN(factor: GLushort);
}
extern "C" {
    pub fn glGlobalAlphaFactoruiSUN(factor: GLuint);
}
pub type PFNGLDRAWMESHARRAYSSUNPROC = ::core::option::Option<
    unsafe extern "C" fn(mode: GLenum, first: GLint, count: GLsizei, width: GLsizei),
>;
extern "C" {
    pub fn glDrawMeshArraysSUN(mode: GLenum, first: GLint, count: GLsizei, width: GLsizei);
}
pub type PFNGLREPLACEMENTCODEUISUNPROC = ::core::option::Option<unsafe extern "C" fn(code: GLuint)>;
pub type PFNGLREPLACEMENTCODEUSSUNPROC =
    ::core::option::Option<unsafe extern "C" fn(code: GLushort)>;
pub type PFNGLREPLACEMENTCODEUBSUNPROC =
    ::core::option::Option<unsafe extern "C" fn(code: GLubyte)>;
pub type PFNGLREPLACEMENTCODEUIVSUNPROC =
    ::core::option::Option<unsafe extern "C" fn(code: *const GLuint)>;
pub type PFNGLREPLACEMENTCODEUSVSUNPROC =
    ::core::option::Option<unsafe extern "C" fn(code: *const GLushort)>;
pub type PFNGLREPLACEMENTCODEUBVSUNPROC =
    ::core::option::Option<unsafe extern "C" fn(code: *const GLubyte)>;
pub type PFNGLREPLACEMENTCODEPOINTERSUNPROC = ::core::option::Option<
    unsafe extern "C" fn(type_: GLenum, stride: GLsizei, pointer: *mut *const ctypes::c_void),
>;
extern "C" {
    pub fn glReplacementCodeuiSUN(code: GLuint);
}
extern "C" {
    pub fn glReplacementCodeusSUN(code: GLushort);
}
extern "C" {
    pub fn glReplacementCodeubSUN(code: GLubyte);
}
extern "C" {
    pub fn glReplacementCodeuivSUN(code: *const GLuint);
}
extern "C" {
    pub fn glReplacementCodeusvSUN(code: *const GLushort);
}
extern "C" {
    pub fn glReplacementCodeubvSUN(code: *const GLubyte);
}
extern "C" {
    pub fn glReplacementCodePointerSUN(
        type_: GLenum,
        stride: GLsizei,
        pointer: *mut *const ctypes::c_void,
    );
}
pub type PFNGLCOLOR4UBVERTEX2FSUNPROC = ::core::option::Option<
    unsafe extern "C" fn(r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat),
>;
pub type PFNGLCOLOR4UBVERTEX2FVSUNPROC =
    ::core::option::Option<unsafe extern "C" fn(c: *const GLubyte, v: *const GLfloat)>;
pub type PFNGLCOLOR4UBVERTEX3FSUNPROC = ::core::option::Option<
    unsafe extern "C" fn(
        r: GLubyte,
        g: GLubyte,
        b: GLubyte,
        a: GLubyte,
        x: GLfloat,
        y: GLfloat,
        z: GLfloat,
    ),
>;
pub type PFNGLCOLOR4UBVERTEX3FVSUNPROC =
    ::core::option::Option<unsafe extern "C" fn(c: *const GLubyte, v: *const GLfloat)>;
pub type PFNGLCOLOR3FVERTEX3FSUNPROC = ::core::option::Option<
    unsafe extern "C" fn(r: GLfloat, g: GLfloat, b: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat),
>;
pub type PFNGLCOLOR3FVERTEX3FVSUNPROC =
    ::core::option::Option<unsafe extern "C" fn(c: *const GLfloat, v: *const GLfloat)>;
pub type PFNGLNORMAL3FVERTEX3FSUNPROC = ::core::option::Option<
    unsafe extern "C" fn(nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat),
>;
pub type PFNGLNORMAL3FVERTEX3FVSUNPROC =
    ::core::option::Option<unsafe extern "C" fn(n: *const GLfloat, v: *const GLfloat)>;
pub type PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC = ::core::option::Option<
    unsafe extern "C" fn(
        r: GLfloat,
        g: GLfloat,
        b: GLfloat,
        a: GLfloat,
        nx: GLfloat,
        ny: GLfloat,
        nz: GLfloat,
        x: GLfloat,
        y: GLfloat,
        z: GLfloat,
    ),
>;
pub type PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC = ::core::option::Option<
    unsafe extern "C" fn(c: *const GLfloat, n: *const GLfloat, v: *const GLfloat),
>;
pub type PFNGLTEXCOORD2FVERTEX3FSUNPROC = ::core::option::Option<
    unsafe extern "C" fn(s: GLfloat, t: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat),
>;
pub type PFNGLTEXCOORD2FVERTEX3FVSUNPROC =
    ::core::option::Option<unsafe extern "C" fn(tc: *const GLfloat, v: *const GLfloat)>;
pub type PFNGLTEXCOORD4FVERTEX4FSUNPROC = ::core::option::Option<
    unsafe extern "C" fn(
        s: GLfloat,
        t: GLfloat,
        p: GLfloat,
        q: GLfloat,
        x: GLfloat,
        y: GLfloat,
        z: GLfloat,
        w: GLfloat,
    ),
>;
pub type PFNGLTEXCOORD4FVERTEX4FVSUNPROC =
    ::core::option::Option<unsafe extern "C" fn(tc: *const GLfloat, v: *const GLfloat)>;
pub type PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC = ::core::option::Option<
    unsafe extern "C" fn(
        s: GLfloat,
        t: GLfloat,
        r: GLubyte,
        g: GLubyte,
        b: GLubyte,
        a: GLubyte,
        x: GLfloat,
        y: GLfloat,
        z: GLfloat,
    ),
>;
pub type PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC = ::core::option::Option<
    unsafe extern "C" fn(tc: *const GLfloat, c: *const GLubyte, v: *const GLfloat),
>;
pub type PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC = ::core::option::Option<
    unsafe extern "C" fn(
        s: GLfloat,
        t: GLfloat,
        r: GLfloat,
        g: GLfloat,
        b: GLfloat,
        x: GLfloat,
        y: GLfloat,
        z: GLfloat,
    ),
>;
pub type PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC = ::core::option::Option<
    unsafe extern "C" fn(tc: *const GLfloat, c: *const GLfloat, v: *const GLfloat),
>;
pub type PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC = ::core::option::Option<
    unsafe extern "C" fn(
        s: GLfloat,
        t: GLfloat,
        nx: GLfloat,
        ny: GLfloat,
        nz: GLfloat,
        x: GLfloat,
        y: GLfloat,
        z: GLfloat,
    ),
>;
pub type PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC = ::core::option::Option<
    unsafe extern "C" fn(tc: *const GLfloat, n: *const GLfloat, v: *const GLfloat),
>;
pub type PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC = ::core::option::Option<
    unsafe extern "C" fn(
        s: GLfloat,
        t: GLfloat,
        r: GLfloat,
        g: GLfloat,
        b: GLfloat,
        a: GLfloat,
        nx: GLfloat,
        ny: GLfloat,
        nz: GLfloat,
        x: GLfloat,
        y: GLfloat,
        z: GLfloat,
    ),
>;
pub type PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC = ::core::option::Option<
    unsafe extern "C" fn(
        tc: *const GLfloat,
        c: *const GLfloat,
        n: *const GLfloat,
        v: *const GLfloat,
    ),
>;
pub type PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC = ::core::option::Option<
    unsafe extern "C" fn(
        s: GLfloat,
        t: GLfloat,
        p: GLfloat,
        q: GLfloat,
        r: GLfloat,
        g: GLfloat,
        b: GLfloat,
        a: GLfloat,
        nx: GLfloat,
        ny: GLfloat,
        nz: GLfloat,
        x: GLfloat,
        y: GLfloat,
        z: GLfloat,
        w: GLfloat,
    ),
>;
pub type PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC = ::core::option::Option<
    unsafe extern "C" fn(
        tc: *const GLfloat,
        c: *const GLfloat,
        n: *const GLfloat,
        v: *const GLfloat,
    ),
>;
pub type PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC =
    ::core::option::Option<unsafe extern "C" fn(rc: GLuint, x: GLfloat, y: GLfloat, z: GLfloat)>;
pub type PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC =
    ::core::option::Option<unsafe extern "C" fn(rc: *const GLuint, v: *const GLfloat)>;
pub type PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC = ::core::option::Option<
    unsafe extern "C" fn(
        rc: GLuint,
        r: GLubyte,
        g: GLubyte,
        b: GLubyte,
        a: GLubyte,
        x: GLfloat,
        y: GLfloat,
        z: GLfloat,
    ),
>;
pub type PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC = ::core::option::Option<
    unsafe extern "C" fn(rc: *const GLuint, c: *const GLubyte, v: *const GLfloat),
>;
pub type PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC = ::core::option::Option<
    unsafe extern "C" fn(
        rc: GLuint,
        r: GLfloat,
        g: GLfloat,
        b: GLfloat,
        x: GLfloat,
        y: GLfloat,
        z: GLfloat,
    ),
>;
pub type PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC = ::core::option::Option<
    unsafe extern "C" fn(rc: *const GLuint, c: *const GLfloat, v: *const GLfloat),
>;
pub type PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC = ::core::option::Option<
    unsafe extern "C" fn(
        rc: GLuint,
        nx: GLfloat,
        ny: GLfloat,
        nz: GLfloat,
        x: GLfloat,
        y: GLfloat,
        z: GLfloat,
    ),
>;
pub type PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC = ::core::option::Option<
    unsafe extern "C" fn(rc: *const GLuint, n: *const GLfloat, v: *const GLfloat),
>;
pub type PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC = ::core::option::Option<
    unsafe extern "C" fn(
        rc: GLuint,
        r: GLfloat,
        g: GLfloat,
        b: GLfloat,
        a: GLfloat,
        nx: GLfloat,
        ny: GLfloat,
        nz: GLfloat,
        x: GLfloat,
        y: GLfloat,
        z: GLfloat,
    ),
>;
pub type PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC = ::core::option::Option<
    unsafe extern "C" fn(
        rc: *const GLuint,
        c: *const GLfloat,
        n: *const GLfloat,
        v: *const GLfloat,
    ),
>;
pub type PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC = ::core::option::Option<
    unsafe extern "C" fn(rc: GLuint, s: GLfloat, t: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat),
>;
pub type PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC = ::core::option::Option<
    unsafe extern "C" fn(rc: *const GLuint, tc: *const GLfloat, v: *const GLfloat),
>;
pub type PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC = ::core::option::Option<
    unsafe extern "C" fn(
        rc: GLuint,
        s: GLfloat,
        t: GLfloat,
        nx: GLfloat,
        ny: GLfloat,
        nz: GLfloat,
        x: GLfloat,
        y: GLfloat,
        z: GLfloat,
    ),
>;
pub type PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC = ::core::option::Option<
    unsafe extern "C" fn(
        rc: *const GLuint,
        tc: *const GLfloat,
        n: *const GLfloat,
        v: *const GLfloat,
    ),
>;
pub type PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC = ::core::option::Option<
    unsafe extern "C" fn(
        rc: GLuint,
        s: GLfloat,
        t: GLfloat,
        r: GLfloat,
        g: GLfloat,
        b: GLfloat,
        a: GLfloat,
        nx: GLfloat,
        ny: GLfloat,
        nz: GLfloat,
        x: GLfloat,
        y: GLfloat,
        z: GLfloat,
    ),
>;
pub type PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC = ::core::option::Option<
    unsafe extern "C" fn(
        rc: *const GLuint,
        tc: *const GLfloat,
        c: *const GLfloat,
        n: *const GLfloat,
        v: *const GLfloat,
    ),
>;
extern "C" {
    pub fn glColor4ubVertex2fSUN(
        r: GLubyte,
        g: GLubyte,
        b: GLubyte,
        a: GLubyte,
        x: GLfloat,
        y: GLfloat,
    );
}
extern "C" {
    pub fn glColor4ubVertex2fvSUN(c: *const GLubyte, v: *const GLfloat);
}
extern "C" {
    pub fn glColor4ubVertex3fSUN(
        r: GLubyte,
        g: GLubyte,
        b: GLubyte,
        a: GLubyte,
        x: GLfloat,
        y: GLfloat,
        z: GLfloat,
    );
}
extern "C" {
    pub fn glColor4ubVertex3fvSUN(c: *const GLubyte, v: *const GLfloat);
}
extern "C" {
    pub fn glColor3fVertex3fSUN(
        r: GLfloat,
        g: GLfloat,
        b: GLfloat,
        x: GLfloat,
        y: GLfloat,
        z: GLfloat,
    );
}
extern "C" {
    pub fn glColor3fVertex3fvSUN(c: *const GLfloat, v: *const GLfloat);
}
extern "C" {
    pub fn glNormal3fVertex3fSUN(
        nx: GLfloat,
        ny: GLfloat,
        nz: GLfloat,
        x: GLfloat,
        y: GLfloat,
        z: GLfloat,
    );
}
extern "C" {
    pub fn glNormal3fVertex3fvSUN(n: *const GLfloat, v: *const GLfloat);
}
extern "C" {
    pub fn glColor4fNormal3fVertex3fSUN(
        r: GLfloat,
        g: GLfloat,
        b: GLfloat,
        a: GLfloat,
        nx: GLfloat,
        ny: GLfloat,
        nz: GLfloat,
        x: GLfloat,
        y: GLfloat,
        z: GLfloat,
    );
}
extern "C" {
    pub fn glColor4fNormal3fVertex3fvSUN(c: *const GLfloat, n: *const GLfloat, v: *const GLfloat);
}
extern "C" {
    pub fn glTexCoord2fVertex3fSUN(s: GLfloat, t: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat);
}
extern "C" {
    pub fn glTexCoord2fVertex3fvSUN(tc: *const GLfloat, v: *const GLfloat);
}
extern "C" {
    pub fn glTexCoord4fVertex4fSUN(
        s: GLfloat,
        t: GLfloat,
        p: GLfloat,
        q: GLfloat,
        x: GLfloat,
        y: GLfloat,
        z: GLfloat,
        w: GLfloat,
    );
}
extern "C" {
    pub fn glTexCoord4fVertex4fvSUN(tc: *const GLfloat, v: *const GLfloat);
}
extern "C" {
    pub fn glTexCoord2fColor4ubVertex3fSUN(
        s: GLfloat,
        t: GLfloat,
        r: GLubyte,
        g: GLubyte,
        b: GLubyte,
        a: GLubyte,
        x: GLfloat,
        y: GLfloat,
        z: GLfloat,
    );
}
extern "C" {
    pub fn glTexCoord2fColor4ubVertex3fvSUN(
        tc: *const GLfloat,
        c: *const GLubyte,
        v: *const GLfloat,
    );
}
extern "C" {
    pub fn glTexCoord2fColor3fVertex3fSUN(
        s: GLfloat,
        t: GLfloat,
        r: GLfloat,
        g: GLfloat,
        b: GLfloat,
        x: GLfloat,
        y: GLfloat,
        z: GLfloat,
    );
}
extern "C" {
    pub fn glTexCoord2fColor3fVertex3fvSUN(
        tc: *const GLfloat,
        c: *const GLfloat,
        v: *const GLfloat,
    );
}
extern "C" {
    pub fn glTexCoord2fNormal3fVertex3fSUN(
        s: GLfloat,
        t: GLfloat,
        nx: GLfloat,
        ny: GLfloat,
        nz: GLfloat,
        x: GLfloat,
        y: GLfloat,
        z: GLfloat,
    );
}
extern "C" {
    pub fn glTexCoord2fNormal3fVertex3fvSUN(
        tc: *const GLfloat,
        n: *const GLfloat,
        v: *const GLfloat,
    );
}
extern "C" {
    pub fn glTexCoord2fColor4fNormal3fVertex3fSUN(
        s: GLfloat,
        t: GLfloat,
        r: GLfloat,
        g: GLfloat,
        b: GLfloat,
        a: GLfloat,
        nx: GLfloat,
        ny: GLfloat,
        nz: GLfloat,
        x: GLfloat,
        y: GLfloat,
        z: GLfloat,
    );
}
extern "C" {
    pub fn glTexCoord2fColor4fNormal3fVertex3fvSUN(
        tc: *const GLfloat,
        c: *const GLfloat,
        n: *const GLfloat,
        v: *const GLfloat,
    );
}
extern "C" {
    pub fn glTexCoord4fColor4fNormal3fVertex4fSUN(
        s: GLfloat,
        t: GLfloat,
        p: GLfloat,
        q: GLfloat,
        r: GLfloat,
        g: GLfloat,
        b: GLfloat,
        a: GLfloat,
        nx: GLfloat,
        ny: GLfloat,
        nz: GLfloat,
        x: GLfloat,
        y: GLfloat,
        z: GLfloat,
        w: GLfloat,
    );
}
extern "C" {
    pub fn glTexCoord4fColor4fNormal3fVertex4fvSUN(
        tc: *const GLfloat,
        c: *const GLfloat,
        n: *const GLfloat,
        v: *const GLfloat,
    );
}
extern "C" {
    pub fn glReplacementCodeuiVertex3fSUN(rc: GLuint, x: GLfloat, y: GLfloat, z: GLfloat);
}
extern "C" {
    pub fn glReplacementCodeuiVertex3fvSUN(rc: *const GLuint, v: *const GLfloat);
}
extern "C" {
    pub fn glReplacementCodeuiColor4ubVertex3fSUN(
        rc: GLuint,
        r: GLubyte,
        g: GLubyte,
        b: GLubyte,
        a: GLubyte,
        x: GLfloat,
        y: GLfloat,
        z: GLfloat,
    );
}
extern "C" {
    pub fn glReplacementCodeuiColor4ubVertex3fvSUN(
        rc: *const GLuint,
        c: *const GLubyte,
        v: *const GLfloat,
    );
}
extern "C" {
    pub fn glReplacementCodeuiColor3fVertex3fSUN(
        rc: GLuint,
        r: GLfloat,
        g: GLfloat,
        b: GLfloat,
        x: GLfloat,
        y: GLfloat,
        z: GLfloat,
    );
}
extern "C" {
    pub fn glReplacementCodeuiColor3fVertex3fvSUN(
        rc: *const GLuint,
        c: *const GLfloat,
        v: *const GLfloat,
    );
}
extern "C" {
    pub fn glReplacementCodeuiNormal3fVertex3fSUN(
        rc: GLuint,
        nx: GLfloat,
        ny: GLfloat,
        nz: GLfloat,
        x: GLfloat,
        y: GLfloat,
        z: GLfloat,
    );
}
extern "C" {
    pub fn glReplacementCodeuiNormal3fVertex3fvSUN(
        rc: *const GLuint,
        n: *const GLfloat,
        v: *const GLfloat,
    );
}
extern "C" {
    pub fn glReplacementCodeuiColor4fNormal3fVertex3fSUN(
        rc: GLuint,
        r: GLfloat,
        g: GLfloat,
        b: GLfloat,
        a: GLfloat,
        nx: GLfloat,
        ny: GLfloat,
        nz: GLfloat,
        x: GLfloat,
        y: GLfloat,
        z: GLfloat,
    );
}
extern "C" {
    pub fn glReplacementCodeuiColor4fNormal3fVertex3fvSUN(
        rc: *const GLuint,
        c: *const GLfloat,
        n: *const GLfloat,
        v: *const GLfloat,
    );
}
extern "C" {
    pub fn glReplacementCodeuiTexCoord2fVertex3fSUN(
        rc: GLuint,
        s: GLfloat,
        t: GLfloat,
        x: GLfloat,
        y: GLfloat,
        z: GLfloat,
    );
}
extern "C" {
    pub fn glReplacementCodeuiTexCoord2fVertex3fvSUN(
        rc: *const GLuint,
        tc: *const GLfloat,
        v: *const GLfloat,
    );
}
extern "C" {
    pub fn glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(
        rc: GLuint,
        s: GLfloat,
        t: GLfloat,
        nx: GLfloat,
        ny: GLfloat,
        nz: GLfloat,
        x: GLfloat,
        y: GLfloat,
        z: GLfloat,
    );
}
extern "C" {
    pub fn glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(
        rc: *const GLuint,
        tc: *const GLfloat,
        n: *const GLfloat,
        v: *const GLfloat,
    );
}
extern "C" {
    pub fn glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(
        rc: GLuint,
        s: GLfloat,
        t: GLfloat,
        r: GLfloat,
        g: GLfloat,
        b: GLfloat,
        a: GLfloat,
        nx: GLfloat,
        ny: GLfloat,
        nz: GLfloat,
        x: GLfloat,
        y: GLfloat,
        z: GLfloat,
    );
}
extern "C" {
    pub fn glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(
        rc: *const GLuint,
        tc: *const GLfloat,
        c: *const GLfloat,
        n: *const GLfloat,
        v: *const GLfloat,
    );
}
extern "C" {
    pub fn glBlendEquationSeparateATI(modeRGB: GLenum, modeA: GLenum);
}
pub type PFNGLBLENDEQUATIONSEPARATEATIPROC =
    ::core::option::Option<unsafe extern "C" fn(modeRGB: GLenum, modeA: GLenum)>;
pub type GLeglImageOES = *mut ctypes::c_void;
extern "C" {
    pub fn glEGLImageTargetTexture2DOES(target: GLenum, image: GLeglImageOES);
}
extern "C" {
    pub fn glEGLImageTargetRenderbufferStorageOES(target: GLenum, image: GLeglImageOES);
}
pub type PFNGLEGLIMAGETARGETTEXTURE2DOESPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, image: GLeglImageOES)>;
pub type PFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC =
    ::core::option::Option<unsafe extern "C" fn(target: GLenum, image: GLeglImageOES)>;
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ctypes::c_uint,
    pub fp_offset: ctypes::c_uint,
    pub overflow_arg_area: *mut ctypes::c_void,
    pub reg_save_area: *mut ctypes::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::core::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::core::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
impl Default for __va_list_tag {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct SDL_BlitMap {
    pub _address: u8,
}
